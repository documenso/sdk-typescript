/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateDocumentRecipientsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateDocumentRecipientsInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientsInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientUpdateDocumentRecipientsInternalServerError
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientsInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientsInternalServerErrorData;

  constructor(err: RecipientUpdateDocumentRecipientsInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientsInternalServerError";
  }
}

export type RecipientUpdateDocumentRecipientsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateDocumentRecipientsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateDocumentRecipientsBadRequestError extends Error {
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientsBadRequestErrorData;

  constructor(err: RecipientUpdateDocumentRecipientsBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientsBadRequestError";
  }
}

/** @internal */
export const RecipientUpdateDocumentRecipientsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientsInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsInternalServerErrorIssue$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue$Outbound;
}

export function recipientUpdateDocumentRecipientsInternalServerErrorIssueToJSON(
  recipientUpdateDocumentRecipientsInternalServerErrorIssue:
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientsInternalServerErrorIssue$outboundSchema
      .parse(recipientUpdateDocumentRecipientsInternalServerErrorIssue),
  );
}

export function recipientUpdateDocumentRecipientsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientsInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateDocumentRecipientsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientsInternalServerError$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientsInternalServerError(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientsInternalServerError$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsInternalServerError
  > = z.instanceof(RecipientUpdateDocumentRecipientsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsInternalServerError$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsInternalServerError$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsInternalServerError$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsInternalServerError$Outbound;
}

/** @internal */
export const RecipientUpdateDocumentRecipientsBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateDocumentRecipientsBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsBadRequestIssue$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsBadRequestIssue$Outbound;
}

export function recipientUpdateDocumentRecipientsBadRequestIssueToJSON(
  recipientUpdateDocumentRecipientsBadRequestIssue:
    RecipientUpdateDocumentRecipientsBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientsBadRequestIssue$outboundSchema.parse(
      recipientUpdateDocumentRecipientsBadRequestIssue,
    ),
  );
}

export function recipientUpdateDocumentRecipientsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateDocumentRecipientsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientsBadRequestError$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientsBadRequestIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientsBadRequestError(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientsBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientsBadRequestError$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsBadRequestError
  > = z.instanceof(RecipientUpdateDocumentRecipientsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientsBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsBadRequestError$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsBadRequestError$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsBadRequestError$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsBadRequestError$Outbound;
}
