/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBodyData;

  constructor(
    err: RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody";
  }
}

export type RecipientUpdateDocumentRecipientsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateDocumentRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateDocumentRecipientsResponseBody extends Error {
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientsResponseBodyData;

  constructor(err: RecipientUpdateDocumentRecipientsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientsResponseBody";
  }
}

/** @internal */
export const RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$Outbound;
}

export function recipientUpdateDocumentRecipientsDocumentsRecipientsIssuesToJSON(
  recipientUpdateDocumentRecipientsDocumentsRecipientsIssues:
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema
      .parse(recipientUpdateDocumentRecipientsDocumentsRecipientsIssues),
  );
}

export function recipientUpdateDocumentRecipientsDocumentsRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody
  > = z.instanceof(
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientUpdateDocumentRecipientsIssues$inboundSchema: z.ZodType<
  RecipientUpdateDocumentRecipientsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientUpdateDocumentRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateDocumentRecipientsIssues$outboundSchema: z.ZodType<
  RecipientUpdateDocumentRecipientsIssues$Outbound,
  z.ZodTypeDef,
  RecipientUpdateDocumentRecipientsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsIssues$Outbound` instead. */
  export type Outbound = RecipientUpdateDocumentRecipientsIssues$Outbound;
}

export function recipientUpdateDocumentRecipientsIssuesToJSON(
  recipientUpdateDocumentRecipientsIssues:
    RecipientUpdateDocumentRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientsIssues$outboundSchema.parse(
      recipientUpdateDocumentRecipientsIssues,
    ),
  );
}

export function recipientUpdateDocumentRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateDocumentRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientUpdateDocumentRecipientsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientsResponseBody(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientsIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientsResponseBody
  > = z.instanceof(RecipientUpdateDocumentRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientUpdateDocumentRecipientsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientsResponseBody$Outbound` instead. */
  export type Outbound = RecipientUpdateDocumentRecipientsResponseBody$Outbound;
}
