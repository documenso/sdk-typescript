/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentResendDocumentDocumentsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentResendDocumentDocumentsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentDocumentsIssues> | undefined;
};

/**
 * Internal server error
 */
export class DocumentResendDocumentDocumentsResponseBody extends Error {
  code: string;
  issues?: Array<DocumentResendDocumentDocumentsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentResendDocumentDocumentsResponseBodyData;

  constructor(err: DocumentResendDocumentDocumentsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentResendDocumentDocumentsResponseBody";
  }
}

export type DocumentResendDocumentIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentResendDocumentResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentIssues> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentResendDocumentResponseBody extends Error {
  code: string;
  issues?: Array<DocumentResendDocumentIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentResendDocumentResponseBodyData;

  constructor(err: DocumentResendDocumentResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentResendDocumentResponseBody";
  }
}

/** @internal */
export const DocumentResendDocumentDocumentsIssues$inboundSchema: z.ZodType<
  DocumentResendDocumentDocumentsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentResendDocumentDocumentsIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentResendDocumentDocumentsIssues$outboundSchema: z.ZodType<
  DocumentResendDocumentDocumentsIssues$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentDocumentsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentDocumentsIssues$ {
  /** @deprecated use `DocumentResendDocumentDocumentsIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentDocumentsIssues$inboundSchema;
  /** @deprecated use `DocumentResendDocumentDocumentsIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentDocumentsIssues$outboundSchema;
  /** @deprecated use `DocumentResendDocumentDocumentsIssues$Outbound` instead. */
  export type Outbound = DocumentResendDocumentDocumentsIssues$Outbound;
}

export function documentResendDocumentDocumentsIssuesToJSON(
  documentResendDocumentDocumentsIssues: DocumentResendDocumentDocumentsIssues,
): string {
  return JSON.stringify(
    DocumentResendDocumentDocumentsIssues$outboundSchema.parse(
      documentResendDocumentDocumentsIssues,
    ),
  );
}

export function documentResendDocumentDocumentsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentResendDocumentDocumentsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentResendDocumentDocumentsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentResendDocumentDocumentsIssues' from JSON`,
  );
}

/** @internal */
export const DocumentResendDocumentDocumentsResponseBody$inboundSchema:
  z.ZodType<
    DocumentResendDocumentDocumentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentResendDocumentDocumentsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentResendDocumentDocumentsResponseBody(v);
    });

/** @internal */
export type DocumentResendDocumentDocumentsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentDocumentsIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentResendDocumentDocumentsResponseBody$outboundSchema:
  z.ZodType<
    DocumentResendDocumentDocumentsResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentResendDocumentDocumentsResponseBody
  > = z.instanceof(DocumentResendDocumentDocumentsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentResendDocumentDocumentsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentDocumentsResponseBody$ {
  /** @deprecated use `DocumentResendDocumentDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentResendDocumentDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentResendDocumentDocumentsResponseBody$Outbound` instead. */
  export type Outbound = DocumentResendDocumentDocumentsResponseBody$Outbound;
}

/** @internal */
export const DocumentResendDocumentIssues$inboundSchema: z.ZodType<
  DocumentResendDocumentIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentResendDocumentIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentResendDocumentIssues$outboundSchema: z.ZodType<
  DocumentResendDocumentIssues$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentIssues$ {
  /** @deprecated use `DocumentResendDocumentIssues$inboundSchema` instead. */
  export const inboundSchema = DocumentResendDocumentIssues$inboundSchema;
  /** @deprecated use `DocumentResendDocumentIssues$outboundSchema` instead. */
  export const outboundSchema = DocumentResendDocumentIssues$outboundSchema;
  /** @deprecated use `DocumentResendDocumentIssues$Outbound` instead. */
  export type Outbound = DocumentResendDocumentIssues$Outbound;
}

export function documentResendDocumentIssuesToJSON(
  documentResendDocumentIssues: DocumentResendDocumentIssues,
): string {
  return JSON.stringify(
    DocumentResendDocumentIssues$outboundSchema.parse(
      documentResendDocumentIssues,
    ),
  );
}

export function documentResendDocumentIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentResendDocumentIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentResendDocumentIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentResendDocumentIssues' from JSON`,
  );
}

/** @internal */
export const DocumentResendDocumentResponseBody$inboundSchema: z.ZodType<
  DocumentResendDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentResendDocumentIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new DocumentResendDocumentResponseBody(v);
  });

/** @internal */
export type DocumentResendDocumentResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentResendDocumentResponseBody$outboundSchema: z.ZodType<
  DocumentResendDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentResponseBody
> = z.instanceof(DocumentResendDocumentResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentResendDocumentIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentResponseBody$ {
  /** @deprecated use `DocumentResendDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = DocumentResendDocumentResponseBody$inboundSchema;
  /** @deprecated use `DocumentResendDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentResponseBody$outboundSchema;
  /** @deprecated use `DocumentResendDocumentResponseBody$Outbound` instead. */
  export type Outbound = DocumentResendDocumentResponseBody$Outbound;
}
