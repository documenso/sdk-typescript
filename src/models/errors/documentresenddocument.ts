/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentResendDocumentInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentResendDocumentInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentResendDocumentInternalServerError extends Error {
  code: string;
  issues?: Array<DocumentResendDocumentInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentResendDocumentInternalServerErrorData;

  constructor(err: DocumentResendDocumentInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentResendDocumentInternalServerError";
  }
}

export type DocumentResendDocumentBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentResendDocumentBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentResendDocumentBadRequestError extends Error {
  code: string;
  issues?: Array<DocumentResendDocumentBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentResendDocumentBadRequestErrorData;

  constructor(err: DocumentResendDocumentBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentResendDocumentBadRequestError";
  }
}

/** @internal */
export const DocumentResendDocumentInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentResendDocumentInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentResendDocumentInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentResendDocumentInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentResendDocumentInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentResendDocumentInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentInternalServerErrorIssue$ {
  /** @deprecated use `DocumentResendDocumentInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentResendDocumentInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentResendDocumentInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentResendDocumentInternalServerErrorIssue$Outbound;
}

export function documentResendDocumentInternalServerErrorIssueToJSON(
  documentResendDocumentInternalServerErrorIssue:
    DocumentResendDocumentInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentResendDocumentInternalServerErrorIssue$outboundSchema.parse(
      documentResendDocumentInternalServerErrorIssue,
    ),
  );
}

export function documentResendDocumentInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentResendDocumentInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentResendDocumentInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentResendDocumentInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentResendDocumentInternalServerError$inboundSchema: z.ZodType<
  DocumentResendDocumentInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentResendDocumentInternalServerErrorIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentResendDocumentInternalServerError(v);
  });

/** @internal */
export type DocumentResendDocumentInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentResendDocumentInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentResendDocumentInternalServerError$outboundSchema:
  z.ZodType<
    DocumentResendDocumentInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentResendDocumentInternalServerError
  > = z.instanceof(DocumentResendDocumentInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentResendDocumentInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentInternalServerError$ {
  /** @deprecated use `DocumentResendDocumentInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentInternalServerError$inboundSchema;
  /** @deprecated use `DocumentResendDocumentInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentInternalServerError$outboundSchema;
  /** @deprecated use `DocumentResendDocumentInternalServerError$Outbound` instead. */
  export type Outbound = DocumentResendDocumentInternalServerError$Outbound;
}

/** @internal */
export const DocumentResendDocumentBadRequestIssue$inboundSchema: z.ZodType<
  DocumentResendDocumentBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentResendDocumentBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentResendDocumentBadRequestIssue$outboundSchema: z.ZodType<
  DocumentResendDocumentBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentBadRequestIssue$ {
  /** @deprecated use `DocumentResendDocumentBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentResendDocumentBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentResendDocumentBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentResendDocumentBadRequestIssue$Outbound;
}

export function documentResendDocumentBadRequestIssueToJSON(
  documentResendDocumentBadRequestIssue: DocumentResendDocumentBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentResendDocumentBadRequestIssue$outboundSchema.parse(
      documentResendDocumentBadRequestIssue,
    ),
  );
}

export function documentResendDocumentBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentResendDocumentBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentResendDocumentBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentResendDocumentBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentResendDocumentBadRequestError$inboundSchema: z.ZodType<
  DocumentResendDocumentBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentResendDocumentBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentResendDocumentBadRequestError(v);
  });

/** @internal */
export type DocumentResendDocumentBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentResendDocumentBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentResendDocumentBadRequestError$outboundSchema: z.ZodType<
  DocumentResendDocumentBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentBadRequestError
> = z.instanceof(DocumentResendDocumentBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentResendDocumentBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentBadRequestError$ {
  /** @deprecated use `DocumentResendDocumentBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentResendDocumentBadRequestError$inboundSchema;
  /** @deprecated use `DocumentResendDocumentBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentBadRequestError$outboundSchema;
  /** @deprecated use `DocumentResendDocumentBadRequestError$Outbound` instead. */
  export type Outbound = DocumentResendDocumentBadRequestError$Outbound;
}
