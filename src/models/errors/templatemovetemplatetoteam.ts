/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateMoveTemplateToTeamTemplatesIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateMoveTemplateToTeamTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamTemplatesIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateMoveTemplateToTeamTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateMoveTemplateToTeamTemplatesResponseBodyData;

  constructor(err: TemplateMoveTemplateToTeamTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateMoveTemplateToTeamTemplatesResponseBody";
  }
}

export type TemplateMoveTemplateToTeamIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateMoveTemplateToTeamResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateMoveTemplateToTeamResponseBody extends Error {
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateMoveTemplateToTeamResponseBodyData;

  constructor(err: TemplateMoveTemplateToTeamResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateMoveTemplateToTeamResponseBody";
  }
}

/** @internal */
export const TemplateMoveTemplateToTeamTemplatesIssues$inboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateMoveTemplateToTeamTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateMoveTemplateToTeamTemplatesIssues$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamTemplatesIssues$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamTemplatesIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamTemplatesIssues$ {
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamTemplatesIssues$Outbound;
}

export function templateMoveTemplateToTeamTemplatesIssuesToJSON(
  templateMoveTemplateToTeamTemplatesIssues:
    TemplateMoveTemplateToTeamTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateMoveTemplateToTeamTemplatesIssues$outboundSchema.parse(
      templateMoveTemplateToTeamTemplatesIssues,
    ),
  );
}

export function templateMoveTemplateToTeamTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateMoveTemplateToTeamTemplatesIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateMoveTemplateToTeamTemplatesIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateMoveTemplateToTeamTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateMoveTemplateToTeamTemplatesResponseBody$inboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateMoveTemplateToTeamTemplatesIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateMoveTemplateToTeamTemplatesResponseBody(v);
    });

/** @internal */
export type TemplateMoveTemplateToTeamTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateMoveTemplateToTeamTemplatesIssues$Outbound>
    | undefined;
};

/** @internal */
export const TemplateMoveTemplateToTeamTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamTemplatesResponseBody
  > = z.instanceof(TemplateMoveTemplateToTeamTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateMoveTemplateToTeamTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamTemplatesResponseBody$ {
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamTemplatesResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateMoveTemplateToTeamTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateMoveTemplateToTeamIssues$inboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateMoveTemplateToTeamIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateMoveTemplateToTeamIssues$outboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamIssues$Outbound,
  z.ZodTypeDef,
  TemplateMoveTemplateToTeamIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamIssues$ {
  /** @deprecated use `TemplateMoveTemplateToTeamIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateMoveTemplateToTeamIssues$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateMoveTemplateToTeamIssues$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamIssues$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamIssues$Outbound;
}

export function templateMoveTemplateToTeamIssuesToJSON(
  templateMoveTemplateToTeamIssues: TemplateMoveTemplateToTeamIssues,
): string {
  return JSON.stringify(
    TemplateMoveTemplateToTeamIssues$outboundSchema.parse(
      templateMoveTemplateToTeamIssues,
    ),
  );
}

export function templateMoveTemplateToTeamIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateMoveTemplateToTeamIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateMoveTemplateToTeamIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateMoveTemplateToTeamIssues' from JSON`,
  );
}

/** @internal */
export const TemplateMoveTemplateToTeamResponseBody$inboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateMoveTemplateToTeamIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateMoveTemplateToTeamResponseBody(v);
  });

/** @internal */
export type TemplateMoveTemplateToTeamResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateMoveTemplateToTeamResponseBody$outboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateMoveTemplateToTeamResponseBody
> = z.instanceof(TemplateMoveTemplateToTeamResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateMoveTemplateToTeamIssues$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamResponseBody$ {
  /** @deprecated use `TemplateMoveTemplateToTeamResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamResponseBody$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamResponseBody$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamResponseBody$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamResponseBody$Outbound;
}
