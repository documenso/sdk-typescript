/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateMoveTemplateToTeamInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateMoveTemplateToTeamInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateMoveTemplateToTeamInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateMoveTemplateToTeamInternalServerError extends Error {
  code: string;
  issues?:
    | Array<TemplateMoveTemplateToTeamInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateMoveTemplateToTeamInternalServerErrorData;

  constructor(err: TemplateMoveTemplateToTeamInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateMoveTemplateToTeamInternalServerError";
  }
}

export type TemplateMoveTemplateToTeamBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateMoveTemplateToTeamBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateMoveTemplateToTeamBadRequestError extends Error {
  code: string;
  issues?: Array<TemplateMoveTemplateToTeamBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateMoveTemplateToTeamBadRequestErrorData;

  constructor(err: TemplateMoveTemplateToTeamBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateMoveTemplateToTeamBadRequestError";
  }
}

/** @internal */
export const TemplateMoveTemplateToTeamInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateMoveTemplateToTeamInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateMoveTemplateToTeamInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamInternalServerErrorIssue$ {
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateMoveTemplateToTeamInternalServerErrorIssue$Outbound;
}

export function templateMoveTemplateToTeamInternalServerErrorIssueToJSON(
  templateMoveTemplateToTeamInternalServerErrorIssue:
    TemplateMoveTemplateToTeamInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateMoveTemplateToTeamInternalServerErrorIssue$outboundSchema.parse(
      templateMoveTemplateToTeamInternalServerErrorIssue,
    ),
  );
}

export function templateMoveTemplateToTeamInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateMoveTemplateToTeamInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateMoveTemplateToTeamInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateMoveTemplateToTeamInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateMoveTemplateToTeamInternalServerError$inboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateMoveTemplateToTeamInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateMoveTemplateToTeamInternalServerError(v);
    });

/** @internal */
export type TemplateMoveTemplateToTeamInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateMoveTemplateToTeamInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateMoveTemplateToTeamInternalServerError$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamInternalServerError
  > = z.instanceof(TemplateMoveTemplateToTeamInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateMoveTemplateToTeamInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamInternalServerError$ {
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamInternalServerError$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamInternalServerError$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamInternalServerError$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamInternalServerError$Outbound;
}

/** @internal */
export const TemplateMoveTemplateToTeamBadRequestIssue$inboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateMoveTemplateToTeamBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateMoveTemplateToTeamBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamBadRequestIssue$ {
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamBadRequestIssue$Outbound;
}

export function templateMoveTemplateToTeamBadRequestIssueToJSON(
  templateMoveTemplateToTeamBadRequestIssue:
    TemplateMoveTemplateToTeamBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateMoveTemplateToTeamBadRequestIssue$outboundSchema.parse(
      templateMoveTemplateToTeamBadRequestIssue,
    ),
  );
}

export function templateMoveTemplateToTeamBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateMoveTemplateToTeamBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateMoveTemplateToTeamBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateMoveTemplateToTeamBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateMoveTemplateToTeamBadRequestError$inboundSchema: z.ZodType<
  TemplateMoveTemplateToTeamBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateMoveTemplateToTeamBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new TemplateMoveTemplateToTeamBadRequestError(v);
  });

/** @internal */
export type TemplateMoveTemplateToTeamBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateMoveTemplateToTeamBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateMoveTemplateToTeamBadRequestError$outboundSchema:
  z.ZodType<
    TemplateMoveTemplateToTeamBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateMoveTemplateToTeamBadRequestError
  > = z.instanceof(TemplateMoveTemplateToTeamBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateMoveTemplateToTeamBadRequestIssue$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMoveTemplateToTeamBadRequestError$ {
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateMoveTemplateToTeamBadRequestError$inboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateMoveTemplateToTeamBadRequestError$outboundSchema;
  /** @deprecated use `TemplateMoveTemplateToTeamBadRequestError$Outbound` instead. */
  export type Outbound = TemplateMoveTemplateToTeamBadRequestError$Outbound;
}
