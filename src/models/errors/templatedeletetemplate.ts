/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDeleteTemplateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDeleteTemplateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class TemplateDeleteTemplateInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<TemplateDeleteTemplateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateInternalServerErrorData;

  constructor(
    err: TemplateDeleteTemplateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateInternalServerError";
  }
}

export type TemplateDeleteTemplateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDeleteTemplateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDeleteTemplateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<TemplateDeleteTemplateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateBadRequestErrorData;

  constructor(
    err: TemplateDeleteTemplateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateBadRequestError";
  }
}

/** @internal */
export const TemplateDeleteTemplateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateDeleteTemplateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateInternalServerErrorIssue$ {
  /** @deprecated use `TemplateDeleteTemplateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateInternalServerErrorIssue$Outbound;
}

export function templateDeleteTemplateInternalServerErrorIssueToJSON(
  templateDeleteTemplateInternalServerErrorIssue:
    TemplateDeleteTemplateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateInternalServerErrorIssue$outboundSchema.parse(
      templateDeleteTemplateInternalServerErrorIssue,
    ),
  );
}

export function templateDeleteTemplateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDeleteTemplateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateDeleteTemplateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateInternalServerError$inboundSchema: z.ZodType<
  TemplateDeleteTemplateInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateDeleteTemplateInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateDeleteTemplateInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateDeleteTemplateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateDeleteTemplateInternalServerError$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateInternalServerError
  > = z.instanceof(TemplateDeleteTemplateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateDeleteTemplateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateInternalServerError$ {
  /** @deprecated use `TemplateDeleteTemplateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateInternalServerError$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateInternalServerError$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateInternalServerError$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateInternalServerError$Outbound;
}

/** @internal */
export const TemplateDeleteTemplateBadRequestIssue$inboundSchema: z.ZodType<
  TemplateDeleteTemplateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDeleteTemplateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateBadRequestIssue$outboundSchema: z.ZodType<
  TemplateDeleteTemplateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateBadRequestIssue$ {
  /** @deprecated use `TemplateDeleteTemplateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateBadRequestIssue$Outbound;
}

export function templateDeleteTemplateBadRequestIssueToJSON(
  templateDeleteTemplateBadRequestIssue: TemplateDeleteTemplateBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateBadRequestIssue$outboundSchema.parse(
      templateDeleteTemplateBadRequestIssue,
    ),
  );
}

export function templateDeleteTemplateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateBadRequestError$inboundSchema: z.ZodType<
  TemplateDeleteTemplateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateDeleteTemplateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateDeleteTemplateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateDeleteTemplateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateDeleteTemplateBadRequestError$outboundSchema: z.ZodType<
  TemplateDeleteTemplateBadRequestError$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateBadRequestError
> = z.instanceof(TemplateDeleteTemplateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDeleteTemplateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateBadRequestError$ {
  /** @deprecated use `TemplateDeleteTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateBadRequestError$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateBadRequestError$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateBadRequestError$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateBadRequestError$Outbound;
}
