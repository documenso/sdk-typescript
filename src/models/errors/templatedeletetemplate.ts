/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDeleteTemplateTemplatesIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDeleteTemplateTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateTemplatesIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateDeleteTemplateTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateDeleteTemplateTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateTemplatesResponseBodyData;

  constructor(err: TemplateDeleteTemplateTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateTemplatesResponseBody";
  }
}

export type TemplateDeleteTemplateIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDeleteTemplateResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDeleteTemplateResponseBody extends Error {
  code: string;
  issues?: Array<TemplateDeleteTemplateIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateResponseBodyData;

  constructor(err: TemplateDeleteTemplateResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateResponseBody";
  }
}

/** @internal */
export const TemplateDeleteTemplateTemplatesIssues$inboundSchema: z.ZodType<
  TemplateDeleteTemplateTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDeleteTemplateTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateTemplatesIssues$outboundSchema: z.ZodType<
  TemplateDeleteTemplateTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateTemplatesIssues$ {
  /** @deprecated use `TemplateDeleteTemplateTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateTemplatesIssues$Outbound;
}

export function templateDeleteTemplateTemplatesIssuesToJSON(
  templateDeleteTemplateTemplatesIssues: TemplateDeleteTemplateTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateTemplatesIssues$outboundSchema.parse(
      templateDeleteTemplateTemplatesIssues,
    ),
  );
}

export function templateDeleteTemplateTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateTemplatesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateTemplatesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateTemplatesResponseBody$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDeleteTemplateTemplatesIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateDeleteTemplateTemplatesResponseBody(v);
    });

/** @internal */
export type TemplateDeleteTemplateTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateDeleteTemplateTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateTemplatesResponseBody
  > = z.instanceof(TemplateDeleteTemplateTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateDeleteTemplateTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateTemplatesResponseBody$ {
  /** @deprecated use `TemplateDeleteTemplateTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateDeleteTemplateIssues$inboundSchema: z.ZodType<
  TemplateDeleteTemplateIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDeleteTemplateIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateIssues$outboundSchema: z.ZodType<
  TemplateDeleteTemplateIssues$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateIssues$ {
  /** @deprecated use `TemplateDeleteTemplateIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateDeleteTemplateIssues$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateDeleteTemplateIssues$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateIssues$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateIssues$Outbound;
}

export function templateDeleteTemplateIssuesToJSON(
  templateDeleteTemplateIssues: TemplateDeleteTemplateIssues,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateIssues$outboundSchema.parse(
      templateDeleteTemplateIssues,
    ),
  );
}

export function templateDeleteTemplateIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDeleteTemplateIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateResponseBody$inboundSchema: z.ZodType<
  TemplateDeleteTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateDeleteTemplateIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateDeleteTemplateResponseBody(v);
  });

/** @internal */
export type TemplateDeleteTemplateResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateDeleteTemplateResponseBody$outboundSchema: z.ZodType<
  TemplateDeleteTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateResponseBody
> = z.instanceof(TemplateDeleteTemplateResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => TemplateDeleteTemplateIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateResponseBody$ {
  /** @deprecated use `TemplateDeleteTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplateDeleteTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateResponseBody$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateResponseBody$Outbound;
}
