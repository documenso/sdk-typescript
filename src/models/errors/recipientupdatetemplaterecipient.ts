/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateTemplateRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateTemplateRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientUpdateTemplateRecipientInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientInternalServerErrorData;

  constructor(
    err: RecipientUpdateTemplateRecipientInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientInternalServerError";
  }
}

export type RecipientUpdateTemplateRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateTemplateRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateTemplateRecipientBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientBadRequestErrorData;

  constructor(
    err: RecipientUpdateTemplateRecipientBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientUpdateTemplateRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientInternalServerErrorIssue$Outbound;
}

export function recipientUpdateTemplateRecipientInternalServerErrorIssueToJSON(
  recipientUpdateTemplateRecipientInternalServerErrorIssue:
    RecipientUpdateTemplateRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientUpdateTemplateRecipientInternalServerErrorIssue),
  );
}

export function recipientUpdateTemplateRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateTemplateRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientUpdateTemplateRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientInternalServerError
  > = z.instanceof(RecipientUpdateTemplateRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientInternalServerError$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientUpdateTemplateRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateTemplateRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientBadRequestIssue$Outbound;
}

export function recipientUpdateTemplateRecipientBadRequestIssueToJSON(
  recipientUpdateTemplateRecipientBadRequestIssue:
    RecipientUpdateTemplateRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientBadRequestIssue$outboundSchema.parse(
      recipientUpdateTemplateRecipientBadRequestIssue,
    ),
  );
}

export function recipientUpdateTemplateRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateTemplateRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientUpdateTemplateRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientBadRequestError
  > = z.instanceof(RecipientUpdateTemplateRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientBadRequestError$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientBadRequestError$Outbound;
}
