/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateTemplateRecipientTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientUpdateTemplateRecipientTemplatesRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody";
  }
}

export type RecipientUpdateTemplateRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateTemplateRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateTemplateRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientResponseBodyData;

  constructor(err: RecipientUpdateTemplateRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientResponseBody";
  }
}

/** @internal */
export const RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$Outbound;
}

export function recipientUpdateTemplateRecipientTemplatesRecipientsIssuesToJSON(
  recipientUpdateTemplateRecipientTemplatesRecipientsIssues:
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$outboundSchema
      .parse(recipientUpdateTemplateRecipientTemplatesRecipientsIssues),
  );
}

export function recipientUpdateTemplateRecipientTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateTemplateRecipientTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody
  > = z.instanceof(
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientUpdateTemplateRecipientIssues$inboundSchema: z.ZodType<
  RecipientUpdateTemplateRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientUpdateTemplateRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateTemplateRecipientIssues$outboundSchema: z.ZodType<
  RecipientUpdateTemplateRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientUpdateTemplateRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientIssues$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientUpdateTemplateRecipientIssues$Outbound;
}

export function recipientUpdateTemplateRecipientIssuesToJSON(
  recipientUpdateTemplateRecipientIssues:
    RecipientUpdateTemplateRecipientIssues,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientIssues$outboundSchema.parse(
      recipientUpdateTemplateRecipientIssues,
    ),
  );
}

export function recipientUpdateTemplateRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientUpdateTemplateRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateTemplateRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientUpdateTemplateRecipientIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientResponseBody(v);
    });

/** @internal */
export type RecipientUpdateTemplateRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientResponseBody
  > = z.instanceof(RecipientUpdateTemplateRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientUpdateTemplateRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientResponseBody$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientUpdateTemplateRecipientResponseBody$Outbound;
}
