/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDuplicateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDuplicateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDuplicateInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDuplicateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDuplicateInternalServerErrorData;

  constructor(
    err: DocumentDuplicateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDuplicateInternalServerError";
  }
}

export type DocumentDuplicateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDuplicateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDuplicateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDuplicateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDuplicateBadRequestErrorData;

  constructor(
    err: DocumentDuplicateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDuplicateBadRequestError";
  }
}

/** @internal */
export const DocumentDuplicateInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentDuplicateInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDuplicateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDuplicateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentDuplicateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentDuplicateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDuplicateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDuplicateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDuplicateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentDuplicateInternalServerErrorIssue$Outbound;
}

export function documentDuplicateInternalServerErrorIssueToJSON(
  documentDuplicateInternalServerErrorIssue:
    DocumentDuplicateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDuplicateInternalServerErrorIssue$outboundSchema.parse(
      documentDuplicateInternalServerErrorIssue,
    ),
  );
}

export function documentDuplicateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDuplicateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDuplicateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDuplicateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDuplicateInternalServerError$inboundSchema: z.ZodType<
  DocumentDuplicateInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDuplicateInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDuplicateInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDuplicateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentDuplicateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentDuplicateInternalServerError$outboundSchema: z.ZodType<
  DocumentDuplicateInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateInternalServerError
> = z.instanceof(DocumentDuplicateInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDuplicateInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateInternalServerError$ {
  /** @deprecated use `DocumentDuplicateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDuplicateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDuplicateInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDuplicateInternalServerError$Outbound;
}

/** @internal */
export const DocumentDuplicateBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDuplicateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDuplicateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDuplicateBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDuplicateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateBadRequestIssue$ {
  /** @deprecated use `DocumentDuplicateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentDuplicateBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDuplicateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentDuplicateBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDuplicateBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDuplicateBadRequestIssue$Outbound;
}

export function documentDuplicateBadRequestIssueToJSON(
  documentDuplicateBadRequestIssue: DocumentDuplicateBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDuplicateBadRequestIssue$outboundSchema.parse(
      documentDuplicateBadRequestIssue,
    ),
  );
}

export function documentDuplicateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDuplicateBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDuplicateBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDuplicateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDuplicateBadRequestError$inboundSchema: z.ZodType<
  DocumentDuplicateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDuplicateBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDuplicateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDuplicateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDuplicateBadRequestError$outboundSchema: z.ZodType<
  DocumentDuplicateBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateBadRequestError
> = z.instanceof(DocumentDuplicateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDuplicateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateBadRequestError$ {
  /** @deprecated use `DocumentDuplicateBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentDuplicateBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDuplicateBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentDuplicateBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDuplicateBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDuplicateBadRequestError$Outbound;
}
