/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientDeleteTemplateRecipientTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientDeleteTemplateRecipientTemplatesRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientDeleteTemplateRecipientTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody";
  }
}

export type RecipientDeleteTemplateRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientDeleteTemplateRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientDeleteTemplateRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientDeleteTemplateRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientDeleteTemplateRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteTemplateRecipientResponseBodyData;

  constructor(err: RecipientDeleteTemplateRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientDeleteTemplateRecipientResponseBody";
  }
}

/** @internal */
export const RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$Outbound;
}

export function recipientDeleteTemplateRecipientTemplatesRecipientsIssuesToJSON(
  recipientDeleteTemplateRecipientTemplatesRecipientsIssues:
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$outboundSchema
      .parse(recipientDeleteTemplateRecipientTemplatesRecipientsIssues),
  );
}

export function recipientDeleteTemplateRecipientTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteTemplateRecipientTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientDeleteTemplateRecipientTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody
  > = z.instanceof(
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientDeleteTemplateRecipientTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientDeleteTemplateRecipientIssues$inboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientDeleteTemplateRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientDeleteTemplateRecipientIssues$outboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientDeleteTemplateRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientIssues$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientDeleteTemplateRecipientIssues$Outbound;
}

export function recipientDeleteTemplateRecipientIssuesToJSON(
  recipientDeleteTemplateRecipientIssues:
    RecipientDeleteTemplateRecipientIssues,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientIssues$outboundSchema.parse(
      recipientDeleteTemplateRecipientIssues,
    ),
  );
}

export function recipientDeleteTemplateRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientDeleteTemplateRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientDeleteTemplateRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteTemplateRecipientResponseBody$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientDeleteTemplateRecipientIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientDeleteTemplateRecipientResponseBody(v);
    });

/** @internal */
export type RecipientDeleteTemplateRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientDeleteTemplateRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientDeleteTemplateRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientResponseBody
  > = z.instanceof(RecipientDeleteTemplateRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientDeleteTemplateRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientResponseBody$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientDeleteTemplateRecipientResponseBody$Outbound;
}
