/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientDeleteTemplateRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientDeleteTemplateRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteTemplateRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientDeleteTemplateRecipientInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientDeleteTemplateRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteTemplateRecipientInternalServerErrorData;

  constructor(
    err: RecipientDeleteTemplateRecipientInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientDeleteTemplateRecipientInternalServerError";
  }
}

export type RecipientDeleteTemplateRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientDeleteTemplateRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientDeleteTemplateRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientDeleteTemplateRecipientBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientDeleteTemplateRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteTemplateRecipientBadRequestErrorData;

  constructor(
    err: RecipientDeleteTemplateRecipientBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientDeleteTemplateRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientDeleteTemplateRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientDeleteTemplateRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientDeleteTemplateRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientInternalServerErrorIssue$Outbound;
}

export function recipientDeleteTemplateRecipientInternalServerErrorIssueToJSON(
  recipientDeleteTemplateRecipientInternalServerErrorIssue:
    RecipientDeleteTemplateRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientDeleteTemplateRecipientInternalServerErrorIssue),
  );
}

export function recipientDeleteTemplateRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteTemplateRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientDeleteTemplateRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteTemplateRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientDeleteTemplateRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientDeleteTemplateRecipientInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientDeleteTemplateRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteTemplateRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientDeleteTemplateRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientInternalServerError
  > = z.instanceof(RecipientDeleteTemplateRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientDeleteTemplateRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientInternalServerError$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientDeleteTemplateRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientDeleteTemplateRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientDeleteTemplateRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientBadRequestIssue$Outbound;
}

export function recipientDeleteTemplateRecipientBadRequestIssueToJSON(
  recipientDeleteTemplateRecipientBadRequestIssue:
    RecipientDeleteTemplateRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientBadRequestIssue$outboundSchema.parse(
      recipientDeleteTemplateRecipientBadRequestIssue,
    ),
  );
}

export function recipientDeleteTemplateRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteTemplateRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientDeleteTemplateRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteTemplateRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientDeleteTemplateRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientDeleteTemplateRecipientBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientDeleteTemplateRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteTemplateRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientDeleteTemplateRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientDeleteTemplateRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientDeleteTemplateRecipientBadRequestError
  > = z.instanceof(RecipientDeleteTemplateRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientDeleteTemplateRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientBadRequestError$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientDeleteTemplateRecipientBadRequestError$Outbound;
}
