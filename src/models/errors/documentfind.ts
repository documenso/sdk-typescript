/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentFindInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentFindInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentFindInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindInternalServerErrorData;

  constructor(
    err: DocumentFindInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindInternalServerError";
  }
}

export type DocumentFindNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentFindNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentFindNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindNotFoundErrorData;

  constructor(
    err: DocumentFindNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindNotFoundError";
  }
}

export type DocumentFindBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentFindBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentFindBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindBadRequestErrorData;

  constructor(
    err: DocumentFindBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindBadRequestError";
  }
}

/** @internal */
export const DocumentFindInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentFindInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentFindInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindInternalServerErrorIssue$outboundSchema: z.ZodType<
  DocumentFindInternalServerErrorIssue$Outbound,
  z.ZodTypeDef,
  DocumentFindInternalServerErrorIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindInternalServerErrorIssue$ {
  /** @deprecated use `DocumentFindInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentFindInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentFindInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentFindInternalServerErrorIssue$Outbound;
}

export function documentFindInternalServerErrorIssueToJSON(
  documentFindInternalServerErrorIssue: DocumentFindInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentFindInternalServerErrorIssue$outboundSchema.parse(
      documentFindInternalServerErrorIssue,
    ),
  );
}

export function documentFindInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindInternalServerErrorIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentFindInternalServerErrorIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindInternalServerError$inboundSchema: z.ZodType<
  DocumentFindInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentFindInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentFindInternalServerErrorIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentFindInternalServerError$outboundSchema: z.ZodType<
  DocumentFindInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentFindInternalServerError
> = z.instanceof(DocumentFindInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentFindInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindInternalServerError$ {
  /** @deprecated use `DocumentFindInternalServerError$inboundSchema` instead. */
  export const inboundSchema = DocumentFindInternalServerError$inboundSchema;
  /** @deprecated use `DocumentFindInternalServerError$outboundSchema` instead. */
  export const outboundSchema = DocumentFindInternalServerError$outboundSchema;
  /** @deprecated use `DocumentFindInternalServerError$Outbound` instead. */
  export type Outbound = DocumentFindInternalServerError$Outbound;
}

/** @internal */
export const DocumentFindNotFoundIssue$inboundSchema: z.ZodType<
  DocumentFindNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentFindNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindNotFoundIssue$outboundSchema: z.ZodType<
  DocumentFindNotFoundIssue$Outbound,
  z.ZodTypeDef,
  DocumentFindNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindNotFoundIssue$ {
  /** @deprecated use `DocumentFindNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentFindNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentFindNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentFindNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentFindNotFoundIssue$Outbound` instead. */
  export type Outbound = DocumentFindNotFoundIssue$Outbound;
}

export function documentFindNotFoundIssueToJSON(
  documentFindNotFoundIssue: DocumentFindNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentFindNotFoundIssue$outboundSchema.parse(documentFindNotFoundIssue),
  );
}

export function documentFindNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindNotFoundError$inboundSchema: z.ZodType<
  DocumentFindNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentFindNotFoundIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentFindNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentFindNotFoundError$outboundSchema: z.ZodType<
  DocumentFindNotFoundError$Outbound,
  z.ZodTypeDef,
  DocumentFindNotFoundError
> = z.instanceof(DocumentFindNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentFindNotFoundIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindNotFoundError$ {
  /** @deprecated use `DocumentFindNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DocumentFindNotFoundError$inboundSchema;
  /** @deprecated use `DocumentFindNotFoundError$outboundSchema` instead. */
  export const outboundSchema = DocumentFindNotFoundError$outboundSchema;
  /** @deprecated use `DocumentFindNotFoundError$Outbound` instead. */
  export type Outbound = DocumentFindNotFoundError$Outbound;
}

/** @internal */
export const DocumentFindBadRequestIssue$inboundSchema: z.ZodType<
  DocumentFindBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentFindBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindBadRequestIssue$outboundSchema: z.ZodType<
  DocumentFindBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentFindBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindBadRequestIssue$ {
  /** @deprecated use `DocumentFindBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentFindBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentFindBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentFindBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentFindBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentFindBadRequestIssue$Outbound;
}

export function documentFindBadRequestIssueToJSON(
  documentFindBadRequestIssue: DocumentFindBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentFindBadRequestIssue$outboundSchema.parse(
      documentFindBadRequestIssue,
    ),
  );
}

export function documentFindBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindBadRequestError$inboundSchema: z.ZodType<
  DocumentFindBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentFindBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentFindBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentFindBadRequestError$outboundSchema: z.ZodType<
  DocumentFindBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentFindBadRequestError
> = z.instanceof(DocumentFindBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentFindBadRequestIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindBadRequestError$ {
  /** @deprecated use `DocumentFindBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentFindBadRequestError$inboundSchema;
  /** @deprecated use `DocumentFindBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentFindBadRequestError$outboundSchema;
  /** @deprecated use `DocumentFindBadRequestError$Outbound` instead. */
  export type Outbound = DocumentFindBadRequestError$Outbound;
}
