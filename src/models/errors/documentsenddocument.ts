/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentSendDocumentDocumentsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentSendDocumentDocumentsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentSendDocumentDocumentsIssues> | undefined;
};

/**
 * Internal server error
 */
export class DocumentSendDocumentDocumentsResponseBody extends Error {
  code: string;
  issues?: Array<DocumentSendDocumentDocumentsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentSendDocumentDocumentsResponseBodyData;

  constructor(err: DocumentSendDocumentDocumentsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentSendDocumentDocumentsResponseBody";
  }
}

export type DocumentSendDocumentIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentSendDocumentResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentSendDocumentIssues> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentSendDocumentResponseBody extends Error {
  code: string;
  issues?: Array<DocumentSendDocumentIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentSendDocumentResponseBodyData;

  constructor(err: DocumentSendDocumentResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentSendDocumentResponseBody";
  }
}

/** @internal */
export const DocumentSendDocumentDocumentsIssues$inboundSchema: z.ZodType<
  DocumentSendDocumentDocumentsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentSendDocumentDocumentsIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentSendDocumentDocumentsIssues$outboundSchema: z.ZodType<
  DocumentSendDocumentDocumentsIssues$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentDocumentsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentDocumentsIssues$ {
  /** @deprecated use `DocumentSendDocumentDocumentsIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSendDocumentDocumentsIssues$inboundSchema;
  /** @deprecated use `DocumentSendDocumentDocumentsIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentDocumentsIssues$outboundSchema;
  /** @deprecated use `DocumentSendDocumentDocumentsIssues$Outbound` instead. */
  export type Outbound = DocumentSendDocumentDocumentsIssues$Outbound;
}

export function documentSendDocumentDocumentsIssuesToJSON(
  documentSendDocumentDocumentsIssues: DocumentSendDocumentDocumentsIssues,
): string {
  return JSON.stringify(
    DocumentSendDocumentDocumentsIssues$outboundSchema.parse(
      documentSendDocumentDocumentsIssues,
    ),
  );
}

export function documentSendDocumentDocumentsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentDocumentsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSendDocumentDocumentsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentDocumentsIssues' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentDocumentsResponseBody$inboundSchema: z.ZodType<
  DocumentSendDocumentDocumentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentSendDocumentDocumentsIssues$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentSendDocumentDocumentsResponseBody(v);
  });

/** @internal */
export type DocumentSendDocumentDocumentsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentSendDocumentDocumentsIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentSendDocumentDocumentsResponseBody$outboundSchema:
  z.ZodType<
    DocumentSendDocumentDocumentsResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentSendDocumentDocumentsResponseBody
  > = z.instanceof(DocumentSendDocumentDocumentsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentSendDocumentDocumentsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentDocumentsResponseBody$ {
  /** @deprecated use `DocumentSendDocumentDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSendDocumentDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentSendDocumentDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentSendDocumentDocumentsResponseBody$Outbound` instead. */
  export type Outbound = DocumentSendDocumentDocumentsResponseBody$Outbound;
}

/** @internal */
export const DocumentSendDocumentIssues$inboundSchema: z.ZodType<
  DocumentSendDocumentIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentSendDocumentIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentSendDocumentIssues$outboundSchema: z.ZodType<
  DocumentSendDocumentIssues$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentIssues$ {
  /** @deprecated use `DocumentSendDocumentIssues$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentIssues$inboundSchema;
  /** @deprecated use `DocumentSendDocumentIssues$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentIssues$outboundSchema;
  /** @deprecated use `DocumentSendDocumentIssues$Outbound` instead. */
  export type Outbound = DocumentSendDocumentIssues$Outbound;
}

export function documentSendDocumentIssuesToJSON(
  documentSendDocumentIssues: DocumentSendDocumentIssues,
): string {
  return JSON.stringify(
    DocumentSendDocumentIssues$outboundSchema.parse(documentSendDocumentIssues),
  );
}

export function documentSendDocumentIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentIssues' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentResponseBody$inboundSchema: z.ZodType<
  DocumentSendDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentSendDocumentIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new DocumentSendDocumentResponseBody(v);
  });

/** @internal */
export type DocumentSendDocumentResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentSendDocumentIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentSendDocumentResponseBody$outboundSchema: z.ZodType<
  DocumentSendDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentResponseBody
> = z.instanceof(DocumentSendDocumentResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentSendDocumentIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentResponseBody$ {
  /** @deprecated use `DocumentSendDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentResponseBody$inboundSchema;
  /** @deprecated use `DocumentSendDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentResponseBody$outboundSchema;
  /** @deprecated use `DocumentSendDocumentResponseBody$Outbound` instead. */
  export type Outbound = DocumentSendDocumentResponseBody$Outbound;
}
