/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EnvelopeAttachmentCreateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type EnvelopeAttachmentCreateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentCreateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class EnvelopeAttachmentCreateInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<EnvelopeAttachmentCreateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentCreateInternalServerErrorData;

  constructor(
    err: EnvelopeAttachmentCreateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentCreateInternalServerError";
  }
}

export type EnvelopeAttachmentCreateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EnvelopeAttachmentCreateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentCreateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class EnvelopeAttachmentCreateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentCreateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentCreateBadRequestErrorData;

  constructor(
    err: EnvelopeAttachmentCreateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentCreateBadRequestError";
  }
}

/** @internal */
export const EnvelopeAttachmentCreateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentCreateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EnvelopeAttachmentCreateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentCreateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentCreateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentCreateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateInternalServerErrorIssue$ {
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentCreateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentCreateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EnvelopeAttachmentCreateInternalServerErrorIssue$Outbound;
}

export function envelopeAttachmentCreateInternalServerErrorIssueToJSON(
  envelopeAttachmentCreateInternalServerErrorIssue:
    EnvelopeAttachmentCreateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentCreateInternalServerErrorIssue$outboundSchema.parse(
      envelopeAttachmentCreateInternalServerErrorIssue,
    ),
  );
}

export function envelopeAttachmentCreateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentCreateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentCreateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentCreateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentCreateInternalServerError$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentCreateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EnvelopeAttachmentCreateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EnvelopeAttachmentCreateInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EnvelopeAttachmentCreateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<EnvelopeAttachmentCreateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const EnvelopeAttachmentCreateInternalServerError$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentCreateInternalServerError$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentCreateInternalServerError
  > = z.instanceof(EnvelopeAttachmentCreateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EnvelopeAttachmentCreateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateInternalServerError$ {
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentCreateInternalServerError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentCreateInternalServerError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateInternalServerError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentCreateInternalServerError$Outbound;
}

/** @internal */
export const EnvelopeAttachmentCreateBadRequestIssue$inboundSchema: z.ZodType<
  EnvelopeAttachmentCreateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type EnvelopeAttachmentCreateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentCreateBadRequestIssue$outboundSchema: z.ZodType<
  EnvelopeAttachmentCreateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentCreateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateBadRequestIssue$ {
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentCreateBadRequestIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentCreateBadRequestIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestIssue$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentCreateBadRequestIssue$Outbound;
}

export function envelopeAttachmentCreateBadRequestIssueToJSON(
  envelopeAttachmentCreateBadRequestIssue:
    EnvelopeAttachmentCreateBadRequestIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentCreateBadRequestIssue$outboundSchema.parse(
      envelopeAttachmentCreateBadRequestIssue,
    ),
  );
}

export function envelopeAttachmentCreateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentCreateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentCreateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentCreateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentCreateBadRequestError$inboundSchema: z.ZodType<
  EnvelopeAttachmentCreateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentCreateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentCreateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentCreateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentCreateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const EnvelopeAttachmentCreateBadRequestError$outboundSchema: z.ZodType<
  EnvelopeAttachmentCreateBadRequestError$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentCreateBadRequestError
> = z.instanceof(EnvelopeAttachmentCreateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => EnvelopeAttachmentCreateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateBadRequestError$ {
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentCreateBadRequestError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentCreateBadRequestError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateBadRequestError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentCreateBadRequestError$Outbound;
}
