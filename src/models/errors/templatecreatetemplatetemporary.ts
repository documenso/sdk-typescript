/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateCreateTemplateTemporaryInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateCreateTemplateTemporaryInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateTemporaryInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateCreateTemplateTemporaryInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<TemplateCreateTemplateTemporaryInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateTemplateTemporaryInternalServerErrorData;

  constructor(
    err: TemplateCreateTemplateTemporaryInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateTemplateTemporaryInternalServerError";
  }
}

export type TemplateCreateTemplateTemporaryBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateCreateTemplateTemporaryBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateCreateTemplateTemporaryBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateCreateTemplateTemporaryBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<TemplateCreateTemplateTemporaryBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateTemplateTemporaryBadRequestErrorData;

  constructor(
    err: TemplateCreateTemplateTemporaryBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateTemplateTemporaryBadRequestError";
  }
}

/** @internal */
export const TemplateCreateTemplateTemporaryInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryInternalServerErrorIssue$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryInternalServerErrorIssue$Outbound;
}

export function templateCreateTemplateTemporaryInternalServerErrorIssueToJSON(
  templateCreateTemplateTemporaryInternalServerErrorIssue:
    TemplateCreateTemplateTemporaryInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryInternalServerErrorIssue$outboundSchema
      .parse(templateCreateTemplateTemporaryInternalServerErrorIssue),
  );
}

export function templateCreateTemplateTemporaryInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryInternalServerError$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateTemplateTemporaryInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateTemplateTemporaryInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateTemplateTemporaryInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateTemporaryInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryInternalServerError$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryInternalServerError
  > = z.instanceof(TemplateCreateTemplateTemporaryInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateTemplateTemporaryInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryInternalServerError$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryInternalServerError$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryInternalServerError$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryInternalServerError$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryInternalServerError$Outbound;
}

/** @internal */
export const TemplateCreateTemplateTemporaryBadRequestIssue$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryBadRequestIssue$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryBadRequestIssue$Outbound;
}

export function templateCreateTemplateTemporaryBadRequestIssueToJSON(
  templateCreateTemplateTemporaryBadRequestIssue:
    TemplateCreateTemplateTemporaryBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryBadRequestIssue$outboundSchema.parse(
      templateCreateTemplateTemporaryBadRequestIssue,
    ),
  );
}

export function templateCreateTemplateTemporaryBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryBadRequestError$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateTemplateTemporaryBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateTemplateTemporaryBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateTemplateTemporaryBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateTemporaryBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryBadRequestError$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryBadRequestError
  > = z.instanceof(TemplateCreateTemplateTemporaryBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateTemplateTemporaryBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryBadRequestError$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryBadRequestError$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryBadRequestError$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryBadRequestError$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryBadRequestError$Outbound;
}
