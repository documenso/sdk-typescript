/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentCreateDocumentTemporaryInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentCreateDocumentTemporaryInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentCreateDocumentTemporaryInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class DocumentCreateDocumentTemporaryInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<DocumentCreateDocumentTemporaryInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentCreateDocumentTemporaryInternalServerErrorData;

  constructor(
    err: DocumentCreateDocumentTemporaryInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentCreateDocumentTemporaryInternalServerError";
  }
}

export type DocumentCreateDocumentTemporaryBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentCreateDocumentTemporaryBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentCreateDocumentTemporaryBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentCreateDocumentTemporaryBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentCreateDocumentTemporaryBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentCreateDocumentTemporaryBadRequestErrorData;

  constructor(
    err: DocumentCreateDocumentTemporaryBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentCreateDocumentTemporaryBadRequestError";
  }
}

/** @internal */
export const DocumentCreateDocumentTemporaryInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryInternalServerErrorIssue$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryInternalServerErrorIssue$Outbound;
}

export function documentCreateDocumentTemporaryInternalServerErrorIssueToJSON(
  documentCreateDocumentTemporaryInternalServerErrorIssue:
    DocumentCreateDocumentTemporaryInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryInternalServerErrorIssue$outboundSchema
      .parse(documentCreateDocumentTemporaryInternalServerErrorIssue),
  );
}

export function documentCreateDocumentTemporaryInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryInternalServerError$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentCreateDocumentTemporaryInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentCreateDocumentTemporaryInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentCreateDocumentTemporaryInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentCreateDocumentTemporaryInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryInternalServerError$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryInternalServerError
  > = z.instanceof(DocumentCreateDocumentTemporaryInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentCreateDocumentTemporaryInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryInternalServerError$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryInternalServerError$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryInternalServerError$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryInternalServerError$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryInternalServerError$Outbound;
}

/** @internal */
export const DocumentCreateDocumentTemporaryBadRequestIssue$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryBadRequestIssue$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryBadRequestIssue$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryBadRequestIssue$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestIssue$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryBadRequestIssue$Outbound;
}

export function documentCreateDocumentTemporaryBadRequestIssueToJSON(
  documentCreateDocumentTemporaryBadRequestIssue:
    DocumentCreateDocumentTemporaryBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryBadRequestIssue$outboundSchema.parse(
      documentCreateDocumentTemporaryBadRequestIssue,
    ),
  );
}

export function documentCreateDocumentTemporaryBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryBadRequestError$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentCreateDocumentTemporaryBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentCreateDocumentTemporaryBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentCreateDocumentTemporaryBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentCreateDocumentTemporaryBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryBadRequestError$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryBadRequestError$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryBadRequestError
  > = z.instanceof(DocumentCreateDocumentTemporaryBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentCreateDocumentTemporaryBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryBadRequestError$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryBadRequestError$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryBadRequestError$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryBadRequestError$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryBadRequestError$Outbound;
}
