/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentAttachmentFindInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentAttachmentFindInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentFindInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentAttachmentFindInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentFindInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentFindInternalServerErrorData;

  constructor(
    err: DocumentAttachmentFindInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentFindInternalServerError";
  }
}

export type DocumentAttachmentFindNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentAttachmentFindNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentFindNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentAttachmentFindNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentFindNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentFindNotFoundErrorData;

  constructor(
    err: DocumentAttachmentFindNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentFindNotFoundError";
  }
}

export type DocumentAttachmentFindBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentAttachmentFindBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentFindBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentAttachmentFindBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentFindBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentFindBadRequestErrorData;

  constructor(
    err: DocumentAttachmentFindBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentFindBadRequestError";
  }
}

/** @internal */
export const DocumentAttachmentFindInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentAttachmentFindInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentAttachmentFindInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentFindInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentAttachmentFindInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentFindInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindInternalServerErrorIssue$ {
  /** @deprecated use `DocumentAttachmentFindInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentAttachmentFindInternalServerErrorIssue$Outbound;
}

export function documentAttachmentFindInternalServerErrorIssueToJSON(
  documentAttachmentFindInternalServerErrorIssue:
    DocumentAttachmentFindInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentFindInternalServerErrorIssue$outboundSchema.parse(
      documentAttachmentFindInternalServerErrorIssue,
    ),
  );
}

export function documentAttachmentFindInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentFindInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentFindInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentFindInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentFindInternalServerError$inboundSchema: z.ZodType<
  DocumentAttachmentFindInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentFindInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentFindInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentFindInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentAttachmentFindInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentAttachmentFindInternalServerError$outboundSchema:
  z.ZodType<
    DocumentAttachmentFindInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentFindInternalServerError
  > = z.instanceof(DocumentAttachmentFindInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentAttachmentFindInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindInternalServerError$ {
  /** @deprecated use `DocumentAttachmentFindInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindInternalServerError$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindInternalServerError$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindInternalServerError$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindInternalServerError$Outbound;
}

/** @internal */
export const DocumentAttachmentFindNotFoundIssue$inboundSchema: z.ZodType<
  DocumentAttachmentFindNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentAttachmentFindNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentFindNotFoundIssue$outboundSchema: z.ZodType<
  DocumentAttachmentFindNotFoundIssue$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindNotFoundIssue$ {
  /** @deprecated use `DocumentAttachmentFindNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindNotFoundIssue$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindNotFoundIssue$Outbound;
}

export function documentAttachmentFindNotFoundIssueToJSON(
  documentAttachmentFindNotFoundIssue: DocumentAttachmentFindNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentFindNotFoundIssue$outboundSchema.parse(
      documentAttachmentFindNotFoundIssue,
    ),
  );
}

export function documentAttachmentFindNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAttachmentFindNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentFindNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAttachmentFindNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentFindNotFoundError$inboundSchema: z.ZodType<
  DocumentAttachmentFindNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentFindNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentFindNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentFindNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentFindNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentAttachmentFindNotFoundError$outboundSchema: z.ZodType<
  DocumentAttachmentFindNotFoundError$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindNotFoundError
> = z.instanceof(DocumentAttachmentFindNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentAttachmentFindNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindNotFoundError$ {
  /** @deprecated use `DocumentAttachmentFindNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindNotFoundError$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindNotFoundError$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindNotFoundError$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindNotFoundError$Outbound;
}

/** @internal */
export const DocumentAttachmentFindBadRequestIssue$inboundSchema: z.ZodType<
  DocumentAttachmentFindBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentAttachmentFindBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentFindBadRequestIssue$outboundSchema: z.ZodType<
  DocumentAttachmentFindBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindBadRequestIssue$ {
  /** @deprecated use `DocumentAttachmentFindBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindBadRequestIssue$Outbound;
}

export function documentAttachmentFindBadRequestIssueToJSON(
  documentAttachmentFindBadRequestIssue: DocumentAttachmentFindBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentFindBadRequestIssue$outboundSchema.parse(
      documentAttachmentFindBadRequestIssue,
    ),
  );
}

export function documentAttachmentFindBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAttachmentFindBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentFindBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAttachmentFindBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentFindBadRequestError$inboundSchema: z.ZodType<
  DocumentAttachmentFindBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentFindBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentFindBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentFindBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentFindBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentAttachmentFindBadRequestError$outboundSchema: z.ZodType<
  DocumentAttachmentFindBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindBadRequestError
> = z.instanceof(DocumentAttachmentFindBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentAttachmentFindBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindBadRequestError$ {
  /** @deprecated use `DocumentAttachmentFindBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentFindBadRequestError$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentFindBadRequestError$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindBadRequestError$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindBadRequestError$Outbound;
}
