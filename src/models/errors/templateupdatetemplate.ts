/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateUpdateTemplateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateUpdateTemplateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class TemplateUpdateTemplateInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<TemplateUpdateTemplateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateUpdateTemplateInternalServerErrorData;

  constructor(
    err: TemplateUpdateTemplateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateUpdateTemplateInternalServerError";
  }
}

export type TemplateUpdateTemplateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateUpdateTemplateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateUpdateTemplateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<TemplateUpdateTemplateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateUpdateTemplateBadRequestErrorData;

  constructor(
    err: TemplateUpdateTemplateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateUpdateTemplateBadRequestError";
  }
}

/** @internal */
export const TemplateUpdateTemplateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateUpdateTemplateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateUpdateTemplateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateUpdateTemplateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateUpdateTemplateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateUpdateTemplateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateInternalServerErrorIssue$ {
  /** @deprecated use `TemplateUpdateTemplateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateUpdateTemplateInternalServerErrorIssue$Outbound;
}

export function templateUpdateTemplateInternalServerErrorIssueToJSON(
  templateUpdateTemplateInternalServerErrorIssue:
    TemplateUpdateTemplateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateInternalServerErrorIssue$outboundSchema.parse(
      templateUpdateTemplateInternalServerErrorIssue,
    ),
  );
}

export function templateUpdateTemplateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateUpdateTemplateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateUpdateTemplateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateInternalServerError$inboundSchema: z.ZodType<
  TemplateUpdateTemplateInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateUpdateTemplateInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateUpdateTemplateInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateUpdateTemplateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateUpdateTemplateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateUpdateTemplateInternalServerError$outboundSchema:
  z.ZodType<
    TemplateUpdateTemplateInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateUpdateTemplateInternalServerError
  > = z.instanceof(TemplateUpdateTemplateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateUpdateTemplateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateInternalServerError$ {
  /** @deprecated use `TemplateUpdateTemplateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateInternalServerError$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateInternalServerError$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateInternalServerError$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateInternalServerError$Outbound;
}

/** @internal */
export const TemplateUpdateTemplateBadRequestIssue$inboundSchema: z.ZodType<
  TemplateUpdateTemplateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateUpdateTemplateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateUpdateTemplateBadRequestIssue$outboundSchema: z.ZodType<
  TemplateUpdateTemplateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateBadRequestIssue$ {
  /** @deprecated use `TemplateUpdateTemplateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateBadRequestIssue$Outbound;
}

export function templateUpdateTemplateBadRequestIssueToJSON(
  templateUpdateTemplateBadRequestIssue: TemplateUpdateTemplateBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateBadRequestIssue$outboundSchema.parse(
      templateUpdateTemplateBadRequestIssue,
    ),
  );
}

export function templateUpdateTemplateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateBadRequestError$inboundSchema: z.ZodType<
  TemplateUpdateTemplateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateUpdateTemplateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateUpdateTemplateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateUpdateTemplateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateUpdateTemplateBadRequestError$outboundSchema: z.ZodType<
  TemplateUpdateTemplateBadRequestError$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateBadRequestError
> = z.instanceof(TemplateUpdateTemplateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateUpdateTemplateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateBadRequestError$ {
  /** @deprecated use `TemplateUpdateTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateBadRequestError$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateBadRequestError$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateBadRequestError$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateBadRequestError$Outbound;
}
