/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateUpdateTemplateTemplatesIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateUpdateTemplateTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateTemplatesIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateUpdateTemplateTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateUpdateTemplateTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateUpdateTemplateTemplatesResponseBodyData;

  constructor(err: TemplateUpdateTemplateTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateUpdateTemplateTemplatesResponseBody";
  }
}

export type TemplateUpdateTemplateIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateUpdateTemplateResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateUpdateTemplateResponseBody extends Error {
  code: string;
  issues?: Array<TemplateUpdateTemplateIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateUpdateTemplateResponseBodyData;

  constructor(err: TemplateUpdateTemplateResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateUpdateTemplateResponseBody";
  }
}

/** @internal */
export const TemplateUpdateTemplateTemplatesIssues$inboundSchema: z.ZodType<
  TemplateUpdateTemplateTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateUpdateTemplateTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateUpdateTemplateTemplatesIssues$outboundSchema: z.ZodType<
  TemplateUpdateTemplateTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesIssues$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateTemplatesIssues$Outbound;
}

export function templateUpdateTemplateTemplatesIssuesToJSON(
  templateUpdateTemplateTemplatesIssues: TemplateUpdateTemplateTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateTemplatesIssues$outboundSchema.parse(
      templateUpdateTemplateTemplatesIssues,
    ),
  );
}

export function templateUpdateTemplateTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateTemplatesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateTemplatesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateTemplatesResponseBody$inboundSchema:
  z.ZodType<
    TemplateUpdateTemplateTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateUpdateTemplateTemplatesIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateUpdateTemplateTemplatesResponseBody(v);
    });

/** @internal */
export type TemplateUpdateTemplateTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateUpdateTemplateTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateUpdateTemplateTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateUpdateTemplateTemplatesResponseBody
  > = z.instanceof(TemplateUpdateTemplateTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateUpdateTemplateTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesResponseBody$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateUpdateTemplateIssues$inboundSchema: z.ZodType<
  TemplateUpdateTemplateIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateUpdateTemplateIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateUpdateTemplateIssues$outboundSchema: z.ZodType<
  TemplateUpdateTemplateIssues$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateIssues$ {
  /** @deprecated use `TemplateUpdateTemplateIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateIssues$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateIssues$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateIssues$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateIssues$Outbound;
}

export function templateUpdateTemplateIssuesToJSON(
  templateUpdateTemplateIssues: TemplateUpdateTemplateIssues,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateIssues$outboundSchema.parse(
      templateUpdateTemplateIssues,
    ),
  );
}

export function templateUpdateTemplateIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateIssues' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateResponseBody$inboundSchema: z.ZodType<
  TemplateUpdateTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateUpdateTemplateIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateUpdateTemplateResponseBody(v);
  });

/** @internal */
export type TemplateUpdateTemplateResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateUpdateTemplateIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateUpdateTemplateResponseBody$outboundSchema: z.ZodType<
  TemplateUpdateTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateResponseBody
> = z.instanceof(TemplateUpdateTemplateResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => TemplateUpdateTemplateIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateResponseBody$ {
  /** @deprecated use `TemplateUpdateTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponseBody$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateResponseBody$Outbound;
}
