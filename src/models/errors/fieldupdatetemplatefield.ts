/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateTemplateFieldTemplatesFieldsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateTemplateFieldTemplatesFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldTemplatesFieldsIssues> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateTemplateFieldTemplatesFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldTemplatesFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldTemplatesFieldsResponseBodyData;

  constructor(err: FieldUpdateTemplateFieldTemplatesFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldTemplatesFieldsResponseBody";
  }
}

export type FieldUpdateTemplateFieldIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateTemplateFieldResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateTemplateFieldResponseBody extends Error {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldResponseBodyData;

  constructor(err: FieldUpdateTemplateFieldResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldResponseBody";
  }
}

/** @internal */
export const FieldUpdateTemplateFieldTemplatesFieldsIssues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldTemplatesFieldsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldTemplatesFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldTemplatesFieldsIssues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldTemplatesFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldTemplatesFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTemplatesFieldsIssues$ {
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTemplatesFieldsIssues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTemplatesFieldsIssues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsIssues$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldTemplatesFieldsIssues$Outbound;
}

export function fieldUpdateTemplateFieldTemplatesFieldsIssuesToJSON(
  fieldUpdateTemplateFieldTemplatesFieldsIssues:
    FieldUpdateTemplateFieldTemplatesFieldsIssues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldTemplatesFieldsIssues$outboundSchema.parse(
      fieldUpdateTemplateFieldTemplatesFieldsIssues,
    ),
  );
}

export function fieldUpdateTemplateFieldTemplatesFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldTemplatesFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldTemplatesFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldTemplatesFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTemplatesFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateTemplateFieldTemplatesFieldsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new FieldUpdateTemplateFieldTemplatesFieldsResponseBody(v);
    });

/** @internal */
export type FieldUpdateTemplateFieldTemplatesFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateTemplateFieldTemplatesFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldTemplatesFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody
  > = z.instanceof(FieldUpdateTemplateFieldTemplatesFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateTemplateFieldTemplatesFieldsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTemplatesFieldsResponseBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTemplatesFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldTemplatesFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldUpdateTemplateFieldIssues$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldIssues$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldIssues$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldIssues$ {
  /** @deprecated use `FieldUpdateTemplateFieldIssues$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldIssues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldIssues$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldIssues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldIssues$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldIssues$Outbound;
}

export function fieldUpdateTemplateFieldIssuesToJSON(
  fieldUpdateTemplateFieldIssues: FieldUpdateTemplateFieldIssues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldIssues$outboundSchema.parse(
      fieldUpdateTemplateFieldIssues,
    ),
  );
}

export function fieldUpdateTemplateFieldIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldResponseBody$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldUpdateTemplateFieldIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldUpdateTemplateFieldResponseBody(v);
  });

/** @internal */
export type FieldUpdateTemplateFieldResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldIssues$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldResponseBody$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldResponseBody
> = z.instanceof(FieldUpdateTemplateFieldResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => FieldUpdateTemplateFieldIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldResponseBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldResponseBody$Outbound;
}
