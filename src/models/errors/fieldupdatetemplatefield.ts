/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateTemplateFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateTemplateFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateTemplateFieldInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldUpdateTemplateFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldInternalServerErrorData;

  constructor(
    err: FieldUpdateTemplateFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldInternalServerError";
  }
}

export type FieldUpdateTemplateFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateTemplateFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateTemplateFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldBadRequestErrorData;

  constructor(
    err: FieldUpdateTemplateFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldBadRequestError";
  }
}

/** @internal */
export const FieldUpdateTemplateFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldInternalServerErrorIssue$Outbound;
}

export function fieldUpdateTemplateFieldInternalServerErrorIssueToJSON(
  fieldUpdateTemplateFieldInternalServerErrorIssue:
    FieldUpdateTemplateFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldUpdateTemplateFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldUpdateTemplateFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldInternalServerError$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldUpdateTemplateFieldInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldUpdateTemplateFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateTemplateFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldInternalServerError$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldInternalServerError
  > = z.instanceof(FieldUpdateTemplateFieldInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateTemplateFieldInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldInternalServerError$ {
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldUpdateTemplateFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldBadRequestIssue$ {
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldBadRequestIssue$Outbound;
}

export function fieldUpdateTemplateFieldBadRequestIssueToJSON(
  fieldUpdateTemplateFieldBadRequestIssue:
    FieldUpdateTemplateFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldBadRequestIssue$outboundSchema.parse(
      fieldUpdateTemplateFieldBadRequestIssue,
    ),
  );
}

export function fieldUpdateTemplateFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldBadRequestError$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldUpdateTemplateFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldUpdateTemplateFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldUpdateTemplateFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldBadRequestError$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldBadRequestError
> = z.instanceof(FieldUpdateTemplateFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateTemplateFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldBadRequestError$ {
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldBadRequestError$Outbound;
}
