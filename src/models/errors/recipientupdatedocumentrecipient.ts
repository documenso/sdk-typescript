/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateDocumentRecipientDocumentsRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientUpdateDocumentRecipientDocumentsRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientDocumentsRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData;

  constructor(
    err: RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody";
  }
}

export type RecipientUpdateDocumentRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateDocumentRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateDocumentRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientResponseBodyData;

  constructor(err: RecipientUpdateDocumentRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientResponseBody";
  }
}

/** @internal */
export const RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$Outbound;
}

export function recipientUpdateDocumentRecipientDocumentsRecipientsIssuesToJSON(
  recipientUpdateDocumentRecipientDocumentsRecipientsIssues:
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$outboundSchema
      .parse(recipientUpdateDocumentRecipientDocumentsRecipientsIssues),
  );
}

export function recipientUpdateDocumentRecipientDocumentsRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientDocumentsRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateDocumentRecipientDocumentsRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody
  > = z.instanceof(
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientDocumentsRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientDocumentsRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientUpdateDocumentRecipientIssues$inboundSchema: z.ZodType<
  RecipientUpdateDocumentRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientUpdateDocumentRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateDocumentRecipientIssues$outboundSchema: z.ZodType<
  RecipientUpdateDocumentRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientUpdateDocumentRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientIssues$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientUpdateDocumentRecipientIssues$Outbound;
}

export function recipientUpdateDocumentRecipientIssuesToJSON(
  recipientUpdateDocumentRecipientIssues:
    RecipientUpdateDocumentRecipientIssues,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientIssues$outboundSchema.parse(
      recipientUpdateDocumentRecipientIssues,
    ),
  );
}

export function recipientUpdateDocumentRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientUpdateDocumentRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateDocumentRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientUpdateDocumentRecipientIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientResponseBody(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientResponseBody
  > = z.instanceof(RecipientUpdateDocumentRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientUpdateDocumentRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientResponseBody$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientUpdateDocumentRecipientResponseBody$Outbound;
}
