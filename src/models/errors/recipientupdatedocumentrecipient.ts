/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateDocumentRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateDocumentRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientUpdateDocumentRecipientInternalServerError extends Error {
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientInternalServerErrorData;

  constructor(err: RecipientUpdateDocumentRecipientInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientInternalServerError";
  }
}

export type RecipientUpdateDocumentRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateDocumentRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateDocumentRecipientBadRequestError extends Error {
  code: string;
  issues?: Array<RecipientUpdateDocumentRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateDocumentRecipientBadRequestErrorData;

  constructor(err: RecipientUpdateDocumentRecipientBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateDocumentRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientUpdateDocumentRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateDocumentRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientInternalServerErrorIssue$Outbound;
}

export function recipientUpdateDocumentRecipientInternalServerErrorIssueToJSON(
  recipientUpdateDocumentRecipientInternalServerErrorIssue:
    RecipientUpdateDocumentRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientUpdateDocumentRecipientInternalServerErrorIssue),
  );
}

export function recipientUpdateDocumentRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateDocumentRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientInternalServerError(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientInternalServerError
  > = z.instanceof(RecipientUpdateDocumentRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientInternalServerError$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientUpdateDocumentRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateDocumentRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateDocumentRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientBadRequestIssue$Outbound;
}

export function recipientUpdateDocumentRecipientBadRequestIssueToJSON(
  recipientUpdateDocumentRecipientBadRequestIssue:
    RecipientUpdateDocumentRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientUpdateDocumentRecipientBadRequestIssue$outboundSchema.parse(
      recipientUpdateDocumentRecipientBadRequestIssue,
    ),
  );
}

export function recipientUpdateDocumentRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateDocumentRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateDocumentRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateDocumentRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateDocumentRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateDocumentRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateDocumentRecipientBadRequestError(v);
    });

/** @internal */
export type RecipientUpdateDocumentRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateDocumentRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateDocumentRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientUpdateDocumentRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateDocumentRecipientBadRequestError
  > = z.instanceof(RecipientUpdateDocumentRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateDocumentRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateDocumentRecipientBadRequestError$ {
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateDocumentRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateDocumentRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientUpdateDocumentRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateDocumentRecipientBadRequestError$Outbound;
}
