/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldDeleteTemplateFieldTemplatesFieldsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldDeleteTemplateFieldTemplatesFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldTemplatesFieldsIssues> | undefined;
};

/**
 * Internal server error
 */
export class FieldDeleteTemplateFieldTemplatesFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldDeleteTemplateFieldTemplatesFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteTemplateFieldTemplatesFieldsResponseBodyData;

  constructor(err: FieldDeleteTemplateFieldTemplatesFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteTemplateFieldTemplatesFieldsResponseBody";
  }
}

export type FieldDeleteTemplateFieldIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldDeleteTemplateFieldResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldDeleteTemplateFieldResponseBody extends Error {
  code: string;
  issues?: Array<FieldDeleteTemplateFieldIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteTemplateFieldResponseBodyData;

  constructor(err: FieldDeleteTemplateFieldResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteTemplateFieldResponseBody";
  }
}

/** @internal */
export const FieldDeleteTemplateFieldTemplatesFieldsIssues$inboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldTemplatesFieldsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldDeleteTemplateFieldTemplatesFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteTemplateFieldTemplatesFieldsIssues$outboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldTemplatesFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldDeleteTemplateFieldTemplatesFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldTemplatesFieldsIssues$ {
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldTemplatesFieldsIssues$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldTemplatesFieldsIssues$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsIssues$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldTemplatesFieldsIssues$Outbound;
}

export function fieldDeleteTemplateFieldTemplatesFieldsIssuesToJSON(
  fieldDeleteTemplateFieldTemplatesFieldsIssues:
    FieldDeleteTemplateFieldTemplatesFieldsIssues,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldTemplatesFieldsIssues$outboundSchema.parse(
      fieldDeleteTemplateFieldTemplatesFieldsIssues,
    ),
  );
}

export function fieldDeleteTemplateFieldTemplatesFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldDeleteTemplateFieldTemplatesFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldDeleteTemplateFieldTemplatesFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldDeleteTemplateFieldTemplatesFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldDeleteTemplateFieldTemplatesFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldDeleteTemplateFieldTemplatesFieldsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new FieldDeleteTemplateFieldTemplatesFieldsResponseBody(v);
    });

/** @internal */
export type FieldDeleteTemplateFieldTemplatesFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldDeleteTemplateFieldTemplatesFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldDeleteTemplateFieldTemplatesFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody
  > = z.instanceof(FieldDeleteTemplateFieldTemplatesFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldDeleteTemplateFieldTemplatesFieldsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldTemplatesFieldsResponseBody$ {
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldTemplatesFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldDeleteTemplateFieldTemplatesFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldDeleteTemplateFieldIssues$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldDeleteTemplateFieldIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteTemplateFieldIssues$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldIssues$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldIssues$ {
  /** @deprecated use `FieldDeleteTemplateFieldIssues$inboundSchema` instead. */
  export const inboundSchema = FieldDeleteTemplateFieldIssues$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldIssues$outboundSchema` instead. */
  export const outboundSchema = FieldDeleteTemplateFieldIssues$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldIssues$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldIssues$Outbound;
}

export function fieldDeleteTemplateFieldIssuesToJSON(
  fieldDeleteTemplateFieldIssues: FieldDeleteTemplateFieldIssues,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldIssues$outboundSchema.parse(
      fieldDeleteTemplateFieldIssues,
    ),
  );
}

export function fieldDeleteTemplateFieldIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldDeleteTemplateFieldIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldDeleteTemplateFieldIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldDeleteTemplateFieldIssues' from JSON`,
  );
}

/** @internal */
export const FieldDeleteTemplateFieldResponseBody$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldDeleteTemplateFieldIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldDeleteTemplateFieldResponseBody(v);
  });

/** @internal */
export type FieldDeleteTemplateFieldResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldIssues$Outbound> | undefined;
};

/** @internal */
export const FieldDeleteTemplateFieldResponseBody$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldResponseBody
> = z.instanceof(FieldDeleteTemplateFieldResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => FieldDeleteTemplateFieldIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldResponseBody$ {
  /** @deprecated use `FieldDeleteTemplateFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldResponseBody$Outbound;
}
