/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldDeleteTemplateFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldDeleteTemplateFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldDeleteTemplateFieldInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldDeleteTemplateFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteTemplateFieldInternalServerErrorData;

  constructor(
    err: FieldDeleteTemplateFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteTemplateFieldInternalServerError";
  }
}

export type FieldDeleteTemplateFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldDeleteTemplateFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldDeleteTemplateFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldDeleteTemplateFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteTemplateFieldBadRequestErrorData;

  constructor(
    err: FieldDeleteTemplateFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteTemplateFieldBadRequestError";
  }
}

/** @internal */
export const FieldDeleteTemplateFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldDeleteTemplateFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteTemplateFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldDeleteTemplateFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldDeleteTemplateFieldInternalServerErrorIssue$Outbound;
}

export function fieldDeleteTemplateFieldInternalServerErrorIssueToJSON(
  fieldDeleteTemplateFieldInternalServerErrorIssue:
    FieldDeleteTemplateFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldDeleteTemplateFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldDeleteTemplateFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldDeleteTemplateFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldDeleteTemplateFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldDeleteTemplateFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldDeleteTemplateFieldInternalServerError$inboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldDeleteTemplateFieldInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldDeleteTemplateFieldInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldDeleteTemplateFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldDeleteTemplateFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldDeleteTemplateFieldInternalServerError$outboundSchema:
  z.ZodType<
    FieldDeleteTemplateFieldInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldDeleteTemplateFieldInternalServerError
  > = z.instanceof(FieldDeleteTemplateFieldInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldDeleteTemplateFieldInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldInternalServerError$ {
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldDeleteTemplateFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldDeleteTemplateFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteTemplateFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldBadRequestIssue$ {
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldBadRequestIssue$Outbound;
}

export function fieldDeleteTemplateFieldBadRequestIssueToJSON(
  fieldDeleteTemplateFieldBadRequestIssue:
    FieldDeleteTemplateFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldBadRequestIssue$outboundSchema.parse(
      fieldDeleteTemplateFieldBadRequestIssue,
    ),
  );
}

export function fieldDeleteTemplateFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldDeleteTemplateFieldBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldDeleteTemplateFieldBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldDeleteTemplateFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldDeleteTemplateFieldBadRequestError$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldDeleteTemplateFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldDeleteTemplateFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldDeleteTemplateFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteTemplateFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldDeleteTemplateFieldBadRequestError$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldBadRequestError
> = z.instanceof(FieldDeleteTemplateFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldDeleteTemplateFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldBadRequestError$ {
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteTemplateFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteTemplateFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldBadRequestError$Outbound;
}
