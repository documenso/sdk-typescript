/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EnvelopeAttachmentUpdateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type EnvelopeAttachmentUpdateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentUpdateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class EnvelopeAttachmentUpdateInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<EnvelopeAttachmentUpdateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentUpdateInternalServerErrorData;

  constructor(
    err: EnvelopeAttachmentUpdateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentUpdateInternalServerError";
  }
}

export type EnvelopeAttachmentUpdateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EnvelopeAttachmentUpdateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentUpdateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class EnvelopeAttachmentUpdateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentUpdateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentUpdateBadRequestErrorData;

  constructor(
    err: EnvelopeAttachmentUpdateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentUpdateBadRequestError";
  }
}

/** @internal */
export const EnvelopeAttachmentUpdateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentUpdateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EnvelopeAttachmentUpdateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentUpdateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentUpdateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentUpdateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateInternalServerErrorIssue$ {
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentUpdateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentUpdateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EnvelopeAttachmentUpdateInternalServerErrorIssue$Outbound;
}

export function envelopeAttachmentUpdateInternalServerErrorIssueToJSON(
  envelopeAttachmentUpdateInternalServerErrorIssue:
    EnvelopeAttachmentUpdateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentUpdateInternalServerErrorIssue$outboundSchema.parse(
      envelopeAttachmentUpdateInternalServerErrorIssue,
    ),
  );
}

export function envelopeAttachmentUpdateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentUpdateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentUpdateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentUpdateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentUpdateInternalServerError$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentUpdateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EnvelopeAttachmentUpdateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EnvelopeAttachmentUpdateInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EnvelopeAttachmentUpdateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<EnvelopeAttachmentUpdateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const EnvelopeAttachmentUpdateInternalServerError$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentUpdateInternalServerError$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentUpdateInternalServerError
  > = z.instanceof(EnvelopeAttachmentUpdateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EnvelopeAttachmentUpdateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateInternalServerError$ {
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentUpdateInternalServerError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentUpdateInternalServerError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateInternalServerError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentUpdateInternalServerError$Outbound;
}

/** @internal */
export const EnvelopeAttachmentUpdateBadRequestIssue$inboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type EnvelopeAttachmentUpdateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentUpdateBadRequestIssue$outboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentUpdateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateBadRequestIssue$ {
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentUpdateBadRequestIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentUpdateBadRequestIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestIssue$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentUpdateBadRequestIssue$Outbound;
}

export function envelopeAttachmentUpdateBadRequestIssueToJSON(
  envelopeAttachmentUpdateBadRequestIssue:
    EnvelopeAttachmentUpdateBadRequestIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentUpdateBadRequestIssue$outboundSchema.parse(
      envelopeAttachmentUpdateBadRequestIssue,
    ),
  );
}

export function envelopeAttachmentUpdateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentUpdateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentUpdateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentUpdateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentUpdateBadRequestError$inboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentUpdateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentUpdateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentUpdateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentUpdateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const EnvelopeAttachmentUpdateBadRequestError$outboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateBadRequestError$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentUpdateBadRequestError
> = z.instanceof(EnvelopeAttachmentUpdateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => EnvelopeAttachmentUpdateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateBadRequestError$ {
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentUpdateBadRequestError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentUpdateBadRequestError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateBadRequestError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentUpdateBadRequestError$Outbound;
}
