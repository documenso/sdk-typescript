/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateToggleTemplateDirectLinkInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateToggleTemplateDirectLinkInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateToggleTemplateDirectLinkInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateToggleTemplateDirectLinkInternalServerError extends Error {
  code: string;
  issues?:
    | Array<TemplateToggleTemplateDirectLinkInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateToggleTemplateDirectLinkInternalServerErrorData;

  constructor(err: TemplateToggleTemplateDirectLinkInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateToggleTemplateDirectLinkInternalServerError";
  }
}

export type TemplateToggleTemplateDirectLinkBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateToggleTemplateDirectLinkBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateToggleTemplateDirectLinkBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateToggleTemplateDirectLinkBadRequestError extends Error {
  code: string;
  issues?: Array<TemplateToggleTemplateDirectLinkBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateToggleTemplateDirectLinkBadRequestErrorData;

  constructor(err: TemplateToggleTemplateDirectLinkBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateToggleTemplateDirectLinkBadRequestError";
  }
}

/** @internal */
export const TemplateToggleTemplateDirectLinkInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateToggleTemplateDirectLinkInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const TemplateToggleTemplateDirectLinkInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateToggleTemplateDirectLinkInternalServerErrorIssue$ {
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue$Outbound;
}

export function templateToggleTemplateDirectLinkInternalServerErrorIssueToJSON(
  templateToggleTemplateDirectLinkInternalServerErrorIssue:
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateToggleTemplateDirectLinkInternalServerErrorIssue$outboundSchema
      .parse(templateToggleTemplateDirectLinkInternalServerErrorIssue),
  );
}

export function templateToggleTemplateDirectLinkInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateToggleTemplateDirectLinkInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateToggleTemplateDirectLinkInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateToggleTemplateDirectLinkInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateToggleTemplateDirectLinkInternalServerError$inboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateToggleTemplateDirectLinkInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateToggleTemplateDirectLinkInternalServerError(v);
    });

/** @internal */
export type TemplateToggleTemplateDirectLinkInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateToggleTemplateDirectLinkInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateToggleTemplateDirectLinkInternalServerError$outboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateToggleTemplateDirectLinkInternalServerError
  > = z.instanceof(TemplateToggleTemplateDirectLinkInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateToggleTemplateDirectLinkInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateToggleTemplateDirectLinkInternalServerError$ {
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateToggleTemplateDirectLinkInternalServerError$inboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateToggleTemplateDirectLinkInternalServerError$outboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkInternalServerError$Outbound` instead. */
  export type Outbound =
    TemplateToggleTemplateDirectLinkInternalServerError$Outbound;
}

/** @internal */
export const TemplateToggleTemplateDirectLinkBadRequestIssue$inboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateToggleTemplateDirectLinkBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateToggleTemplateDirectLinkBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateToggleTemplateDirectLinkBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateToggleTemplateDirectLinkBadRequestIssue$ {
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateToggleTemplateDirectLinkBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateToggleTemplateDirectLinkBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestIssue$Outbound` instead. */
  export type Outbound =
    TemplateToggleTemplateDirectLinkBadRequestIssue$Outbound;
}

export function templateToggleTemplateDirectLinkBadRequestIssueToJSON(
  templateToggleTemplateDirectLinkBadRequestIssue:
    TemplateToggleTemplateDirectLinkBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateToggleTemplateDirectLinkBadRequestIssue$outboundSchema.parse(
      templateToggleTemplateDirectLinkBadRequestIssue,
    ),
  );
}

export function templateToggleTemplateDirectLinkBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateToggleTemplateDirectLinkBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateToggleTemplateDirectLinkBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateToggleTemplateDirectLinkBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateToggleTemplateDirectLinkBadRequestError$inboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateToggleTemplateDirectLinkBadRequestIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateToggleTemplateDirectLinkBadRequestError(v);
    });

/** @internal */
export type TemplateToggleTemplateDirectLinkBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateToggleTemplateDirectLinkBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateToggleTemplateDirectLinkBadRequestError$outboundSchema:
  z.ZodType<
    TemplateToggleTemplateDirectLinkBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateToggleTemplateDirectLinkBadRequestError
  > = z.instanceof(TemplateToggleTemplateDirectLinkBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateToggleTemplateDirectLinkBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateToggleTemplateDirectLinkBadRequestError$ {
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateToggleTemplateDirectLinkBadRequestError$inboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateToggleTemplateDirectLinkBadRequestError$outboundSchema;
  /** @deprecated use `TemplateToggleTemplateDirectLinkBadRequestError$Outbound` instead. */
  export type Outbound =
    TemplateToggleTemplateDirectLinkBadRequestError$Outbound;
}
