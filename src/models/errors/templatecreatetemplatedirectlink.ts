/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateCreateTemplateDirectLinkInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateCreateTemplateDirectLinkInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateDirectLinkInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateCreateTemplateDirectLinkInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<TemplateCreateTemplateDirectLinkInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateTemplateDirectLinkInternalServerErrorData;

  constructor(
    err: TemplateCreateTemplateDirectLinkInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateTemplateDirectLinkInternalServerError";
  }
}

export type TemplateCreateTemplateDirectLinkBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateCreateTemplateDirectLinkBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateCreateTemplateDirectLinkBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateCreateTemplateDirectLinkBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<TemplateCreateTemplateDirectLinkBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateTemplateDirectLinkBadRequestErrorData;

  constructor(
    err: TemplateCreateTemplateDirectLinkBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateTemplateDirectLinkBadRequestError";
  }
}

/** @internal */
export const TemplateCreateTemplateDirectLinkInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateTemplateDirectLinkInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const TemplateCreateTemplateDirectLinkInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateDirectLinkInternalServerErrorIssue$ {
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue$Outbound;
}

export function templateCreateTemplateDirectLinkInternalServerErrorIssueToJSON(
  templateCreateTemplateDirectLinkInternalServerErrorIssue:
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateCreateTemplateDirectLinkInternalServerErrorIssue$outboundSchema
      .parse(templateCreateTemplateDirectLinkInternalServerErrorIssue),
  );
}

export function templateCreateTemplateDirectLinkInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateDirectLinkInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateDirectLinkInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateDirectLinkInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateDirectLinkInternalServerError$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateTemplateDirectLinkInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateTemplateDirectLinkInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateTemplateDirectLinkInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateDirectLinkInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateTemplateDirectLinkInternalServerError$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateDirectLinkInternalServerError
  > = z.instanceof(TemplateCreateTemplateDirectLinkInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateTemplateDirectLinkInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateDirectLinkInternalServerError$ {
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateDirectLinkInternalServerError$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateDirectLinkInternalServerError$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkInternalServerError$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateDirectLinkInternalServerError$Outbound;
}

/** @internal */
export const TemplateCreateTemplateDirectLinkBadRequestIssue$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateTemplateDirectLinkBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateCreateTemplateDirectLinkBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateDirectLinkBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateDirectLinkBadRequestIssue$ {
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateDirectLinkBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateDirectLinkBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateDirectLinkBadRequestIssue$Outbound;
}

export function templateCreateTemplateDirectLinkBadRequestIssueToJSON(
  templateCreateTemplateDirectLinkBadRequestIssue:
    TemplateCreateTemplateDirectLinkBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateCreateTemplateDirectLinkBadRequestIssue$outboundSchema.parse(
      templateCreateTemplateDirectLinkBadRequestIssue,
    ),
  );
}

export function templateCreateTemplateDirectLinkBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateDirectLinkBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateDirectLinkBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateDirectLinkBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateDirectLinkBadRequestError$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateTemplateDirectLinkBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateTemplateDirectLinkBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateTemplateDirectLinkBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateTemplateDirectLinkBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateTemplateDirectLinkBadRequestError$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateDirectLinkBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateDirectLinkBadRequestError
  > = z.instanceof(TemplateCreateTemplateDirectLinkBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateTemplateDirectLinkBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateDirectLinkBadRequestError$ {
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateDirectLinkBadRequestError$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateDirectLinkBadRequestError$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateDirectLinkBadRequestError$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateDirectLinkBadRequestError$Outbound;
}
