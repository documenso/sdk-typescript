/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ErrorNOTFOUNDIssues = {
  message: string;
};

/**
 * The error information
 */
export type ErrorNOTFOUNDData = {
  /**
   * The error message
   */
  message: string;
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<ErrorNOTFOUNDIssues> | undefined;
};

/**
 * The error information
 */
export class ErrorNOTFOUND extends Error {
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<ErrorNOTFOUNDIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorNOTFOUNDData;

  constructor(err: ErrorNOTFOUNDData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "ErrorNOTFOUND";
  }
}

/** @internal */
export const ErrorNOTFOUNDIssues$inboundSchema: z.ZodType<
  ErrorNOTFOUNDIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ErrorNOTFOUNDIssues$Outbound = {
  message: string;
};

/** @internal */
export const ErrorNOTFOUNDIssues$outboundSchema: z.ZodType<
  ErrorNOTFOUNDIssues$Outbound,
  z.ZodTypeDef,
  ErrorNOTFOUNDIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNOTFOUNDIssues$ {
  /** @deprecated use `ErrorNOTFOUNDIssues$inboundSchema` instead. */
  export const inboundSchema = ErrorNOTFOUNDIssues$inboundSchema;
  /** @deprecated use `ErrorNOTFOUNDIssues$outboundSchema` instead. */
  export const outboundSchema = ErrorNOTFOUNDIssues$outboundSchema;
  /** @deprecated use `ErrorNOTFOUNDIssues$Outbound` instead. */
  export type Outbound = ErrorNOTFOUNDIssues$Outbound;
}

export function errorNOTFOUNDIssuesToJSON(
  errorNOTFOUNDIssues: ErrorNOTFOUNDIssues,
): string {
  return JSON.stringify(
    ErrorNOTFOUNDIssues$outboundSchema.parse(errorNOTFOUNDIssues),
  );
}

export function errorNOTFOUNDIssuesFromJSON(
  jsonString: string,
): SafeParseResult<ErrorNOTFOUNDIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorNOTFOUNDIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorNOTFOUNDIssues' from JSON`,
  );
}

/** @internal */
export const ErrorNOTFOUND$inboundSchema: z.ZodType<
  ErrorNOTFOUND,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => ErrorNOTFOUNDIssues$inboundSchema)).optional(),
})
  .transform((v) => {
    return new ErrorNOTFOUND(v);
  });

/** @internal */
export type ErrorNOTFOUND$Outbound = {
  message: string;
  code: string;
  issues?: Array<ErrorNOTFOUNDIssues$Outbound> | undefined;
};

/** @internal */
export const ErrorNOTFOUND$outboundSchema: z.ZodType<
  ErrorNOTFOUND$Outbound,
  z.ZodTypeDef,
  ErrorNOTFOUND
> = z.instanceof(ErrorNOTFOUND)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => ErrorNOTFOUNDIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNOTFOUND$ {
  /** @deprecated use `ErrorNOTFOUND$inboundSchema` instead. */
  export const inboundSchema = ErrorNOTFOUND$inboundSchema;
  /** @deprecated use `ErrorNOTFOUND$outboundSchema` instead. */
  export const outboundSchema = ErrorNOTFOUND$outboundSchema;
  /** @deprecated use `ErrorNOTFOUND$Outbound` instead. */
  export type Outbound = ErrorNOTFOUND$Outbound;
}
