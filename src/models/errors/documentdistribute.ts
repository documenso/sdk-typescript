/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDistributeInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDistributeInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDistributeInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDistributeInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDistributeInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDistributeInternalServerErrorData;

  constructor(
    err: DocumentDistributeInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDistributeInternalServerError";
  }
}

export type DocumentDistributeBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDistributeBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDistributeBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDistributeBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDistributeBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDistributeBadRequestErrorData;

  constructor(
    err: DocumentDistributeBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDistributeBadRequestError";
  }
}

/** @internal */
export const DocumentDistributeInternalServerErrorIssue$inboundSchema:
  z.ZodType<DocumentDistributeInternalServerErrorIssue, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type DocumentDistributeInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDistributeInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentDistributeInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentDistributeInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDistributeInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDistributeInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDistributeInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDistributeInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentDistributeInternalServerErrorIssue$Outbound;
}

export function documentDistributeInternalServerErrorIssueToJSON(
  documentDistributeInternalServerErrorIssue:
    DocumentDistributeInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDistributeInternalServerErrorIssue$outboundSchema.parse(
      documentDistributeInternalServerErrorIssue,
    ),
  );
}

export function documentDistributeInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDistributeInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDistributeInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDistributeInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeInternalServerError$inboundSchema: z.ZodType<
  DocumentDistributeInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDistributeInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDistributeInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDistributeInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentDistributeInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentDistributeInternalServerError$outboundSchema: z.ZodType<
  DocumentDistributeInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentDistributeInternalServerError
> = z.instanceof(DocumentDistributeInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDistributeInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeInternalServerError$ {
  /** @deprecated use `DocumentDistributeInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDistributeInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDistributeInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDistributeInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDistributeInternalServerError$Outbound;
}

/** @internal */
export const DocumentDistributeBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDistributeBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDistributeBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDistributeBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDistributeBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDistributeBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeBadRequestIssue$ {
  /** @deprecated use `DocumentDistributeBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDistributeBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDistributeBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDistributeBadRequestIssue$Outbound;
}

export function documentDistributeBadRequestIssueToJSON(
  documentDistributeBadRequestIssue: DocumentDistributeBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDistributeBadRequestIssue$outboundSchema.parse(
      documentDistributeBadRequestIssue,
    ),
  );
}

export function documentDistributeBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeBadRequestError$inboundSchema: z.ZodType<
  DocumentDistributeBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDistributeBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDistributeBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDistributeBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDistributeBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDistributeBadRequestError$outboundSchema: z.ZodType<
  DocumentDistributeBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDistributeBadRequestError
> = z.instanceof(DocumentDistributeBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDistributeBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeBadRequestError$ {
  /** @deprecated use `DocumentDistributeBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDistributeBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDistributeBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDistributeBadRequestError$Outbound;
}
