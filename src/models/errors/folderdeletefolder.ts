/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FolderDeleteFolderInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FolderDeleteFolderInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderDeleteFolderInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FolderDeleteFolderInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FolderDeleteFolderInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderDeleteFolderInternalServerErrorData;

  constructor(
    err: FolderDeleteFolderInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderDeleteFolderInternalServerError";
  }
}

export type FolderDeleteFolderBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FolderDeleteFolderBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderDeleteFolderBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FolderDeleteFolderBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FolderDeleteFolderBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderDeleteFolderBadRequestErrorData;

  constructor(
    err: FolderDeleteFolderBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderDeleteFolderBadRequestError";
  }
}

/** @internal */
export const FolderDeleteFolderInternalServerErrorIssue$inboundSchema:
  z.ZodType<FolderDeleteFolderInternalServerErrorIssue, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type FolderDeleteFolderInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderDeleteFolderInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FolderDeleteFolderInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FolderDeleteFolderInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderDeleteFolderInternalServerErrorIssue$ {
  /** @deprecated use `FolderDeleteFolderInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FolderDeleteFolderInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FolderDeleteFolderInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderDeleteFolderInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FolderDeleteFolderInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FolderDeleteFolderInternalServerErrorIssue$Outbound;
}

export function folderDeleteFolderInternalServerErrorIssueToJSON(
  folderDeleteFolderInternalServerErrorIssue:
    FolderDeleteFolderInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FolderDeleteFolderInternalServerErrorIssue$outboundSchema.parse(
      folderDeleteFolderInternalServerErrorIssue,
    ),
  );
}

export function folderDeleteFolderInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FolderDeleteFolderInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FolderDeleteFolderInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FolderDeleteFolderInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FolderDeleteFolderInternalServerError$inboundSchema: z.ZodType<
  FolderDeleteFolderInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FolderDeleteFolderInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderDeleteFolderInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderDeleteFolderInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FolderDeleteFolderInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FolderDeleteFolderInternalServerError$outboundSchema: z.ZodType<
  FolderDeleteFolderInternalServerError$Outbound,
  z.ZodTypeDef,
  FolderDeleteFolderInternalServerError
> = z.instanceof(FolderDeleteFolderInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderDeleteFolderInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderDeleteFolderInternalServerError$ {
  /** @deprecated use `FolderDeleteFolderInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FolderDeleteFolderInternalServerError$inboundSchema;
  /** @deprecated use `FolderDeleteFolderInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FolderDeleteFolderInternalServerError$outboundSchema;
  /** @deprecated use `FolderDeleteFolderInternalServerError$Outbound` instead. */
  export type Outbound = FolderDeleteFolderInternalServerError$Outbound;
}

/** @internal */
export const FolderDeleteFolderBadRequestIssue$inboundSchema: z.ZodType<
  FolderDeleteFolderBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderDeleteFolderBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderDeleteFolderBadRequestIssue$outboundSchema: z.ZodType<
  FolderDeleteFolderBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FolderDeleteFolderBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderDeleteFolderBadRequestIssue$ {
  /** @deprecated use `FolderDeleteFolderBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = FolderDeleteFolderBadRequestIssue$inboundSchema;
  /** @deprecated use `FolderDeleteFolderBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderDeleteFolderBadRequestIssue$outboundSchema;
  /** @deprecated use `FolderDeleteFolderBadRequestIssue$Outbound` instead. */
  export type Outbound = FolderDeleteFolderBadRequestIssue$Outbound;
}

export function folderDeleteFolderBadRequestIssueToJSON(
  folderDeleteFolderBadRequestIssue: FolderDeleteFolderBadRequestIssue,
): string {
  return JSON.stringify(
    FolderDeleteFolderBadRequestIssue$outboundSchema.parse(
      folderDeleteFolderBadRequestIssue,
    ),
  );
}

export function folderDeleteFolderBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FolderDeleteFolderBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderDeleteFolderBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderDeleteFolderBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FolderDeleteFolderBadRequestError$inboundSchema: z.ZodType<
  FolderDeleteFolderBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FolderDeleteFolderBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderDeleteFolderBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderDeleteFolderBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FolderDeleteFolderBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FolderDeleteFolderBadRequestError$outboundSchema: z.ZodType<
  FolderDeleteFolderBadRequestError$Outbound,
  z.ZodTypeDef,
  FolderDeleteFolderBadRequestError
> = z.instanceof(FolderDeleteFolderBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderDeleteFolderBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderDeleteFolderBadRequestError$ {
  /** @deprecated use `FolderDeleteFolderBadRequestError$inboundSchema` instead. */
  export const inboundSchema = FolderDeleteFolderBadRequestError$inboundSchema;
  /** @deprecated use `FolderDeleteFolderBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FolderDeleteFolderBadRequestError$outboundSchema;
  /** @deprecated use `FolderDeleteFolderBadRequestError$Outbound` instead. */
  export type Outbound = FolderDeleteFolderBadRequestError$Outbound;
}
