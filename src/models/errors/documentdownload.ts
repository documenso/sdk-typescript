/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDownloadInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDownloadInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDownloadInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDownloadInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDownloadInternalServerErrorData;

  constructor(
    err: DocumentDownloadInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDownloadInternalServerError";
  }
}

export type DocumentDownloadNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentDownloadNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentDownloadNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDownloadNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDownloadNotFoundErrorData;

  constructor(
    err: DocumentDownloadNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDownloadNotFoundError";
  }
}

export type DocumentDownloadBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDownloadBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDownloadBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDownloadBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDownloadBadRequestErrorData;

  constructor(
    err: DocumentDownloadBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDownloadBadRequestError";
  }
}

/** @internal */
export const DocumentDownloadInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentDownloadInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDownloadInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDownloadInternalServerErrorIssue$outboundSchema: z.ZodType<
  DocumentDownloadInternalServerErrorIssue$Outbound,
  z.ZodTypeDef,
  DocumentDownloadInternalServerErrorIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDownloadInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDownloadInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDownloadInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDownloadInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDownloadInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentDownloadInternalServerErrorIssue$Outbound;
}

export function documentDownloadInternalServerErrorIssueToJSON(
  documentDownloadInternalServerErrorIssue:
    DocumentDownloadInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDownloadInternalServerErrorIssue$outboundSchema.parse(
      documentDownloadInternalServerErrorIssue,
    ),
  );
}

export function documentDownloadInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDownloadInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDownloadInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDownloadInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDownloadInternalServerError$inboundSchema: z.ZodType<
  DocumentDownloadInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDownloadInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDownloadInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDownloadInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadInternalServerErrorIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDownloadInternalServerError$outboundSchema: z.ZodType<
  DocumentDownloadInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentDownloadInternalServerError
> = z.instanceof(DocumentDownloadInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDownloadInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadInternalServerError$ {
  /** @deprecated use `DocumentDownloadInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDownloadInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDownloadInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDownloadInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDownloadInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDownloadInternalServerError$Outbound;
}

/** @internal */
export const DocumentDownloadNotFoundIssue$inboundSchema: z.ZodType<
  DocumentDownloadNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDownloadNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDownloadNotFoundIssue$outboundSchema: z.ZodType<
  DocumentDownloadNotFoundIssue$Outbound,
  z.ZodTypeDef,
  DocumentDownloadNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadNotFoundIssue$ {
  /** @deprecated use `DocumentDownloadNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentDownloadNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentDownloadNotFoundIssue$Outbound` instead. */
  export type Outbound = DocumentDownloadNotFoundIssue$Outbound;
}

export function documentDownloadNotFoundIssueToJSON(
  documentDownloadNotFoundIssue: DocumentDownloadNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentDownloadNotFoundIssue$outboundSchema.parse(
      documentDownloadNotFoundIssue,
    ),
  );
}

export function documentDownloadNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDownloadNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDownloadNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDownloadNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDownloadNotFoundError$inboundSchema: z.ZodType<
  DocumentDownloadNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDownloadNotFoundIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDownloadNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDownloadNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDownloadNotFoundError$outboundSchema: z.ZodType<
  DocumentDownloadNotFoundError$Outbound,
  z.ZodTypeDef,
  DocumentDownloadNotFoundError
> = z.instanceof(DocumentDownloadNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentDownloadNotFoundIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadNotFoundError$ {
  /** @deprecated use `DocumentDownloadNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadNotFoundError$inboundSchema;
  /** @deprecated use `DocumentDownloadNotFoundError$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadNotFoundError$outboundSchema;
  /** @deprecated use `DocumentDownloadNotFoundError$Outbound` instead. */
  export type Outbound = DocumentDownloadNotFoundError$Outbound;
}

/** @internal */
export const DocumentDownloadBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDownloadBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDownloadBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDownloadBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDownloadBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDownloadBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadBadRequestIssue$ {
  /** @deprecated use `DocumentDownloadBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDownloadBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDownloadBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDownloadBadRequestIssue$Outbound;
}

export function documentDownloadBadRequestIssueToJSON(
  documentDownloadBadRequestIssue: DocumentDownloadBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDownloadBadRequestIssue$outboundSchema.parse(
      documentDownloadBadRequestIssue,
    ),
  );
}

export function documentDownloadBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDownloadBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDownloadBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDownloadBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDownloadBadRequestError$inboundSchema: z.ZodType<
  DocumentDownloadBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDownloadBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDownloadBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDownloadBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDownloadBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDownloadBadRequestError$outboundSchema: z.ZodType<
  DocumentDownloadBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDownloadBadRequestError
> = z.instanceof(DocumentDownloadBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDownloadBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadBadRequestError$ {
  /** @deprecated use `DocumentDownloadBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDownloadBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDownloadBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDownloadBadRequestError$Outbound;
}
