/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateTemplateFieldsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateTemplateFieldsInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateTemplateFieldsInternalServerError extends Error {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldsInternalServerErrorData;

  constructor(err: FieldUpdateTemplateFieldsInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldsInternalServerError";
  }
}

export type FieldUpdateTemplateFieldsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateTemplateFieldsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateTemplateFieldsBadRequestError extends Error {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldsBadRequestErrorData;

  constructor(err: FieldUpdateTemplateFieldsBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldsBadRequestError";
  }
}

/** @internal */
export const FieldUpdateTemplateFieldsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsInternalServerErrorIssue$ {
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsInternalServerErrorIssue$Outbound;
}

export function fieldUpdateTemplateFieldsInternalServerErrorIssueToJSON(
  fieldUpdateTemplateFieldsInternalServerErrorIssue:
    FieldUpdateTemplateFieldsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsInternalServerErrorIssue$outboundSchema.parse(
      fieldUpdateTemplateFieldsInternalServerErrorIssue,
    ),
  );
}

export function fieldUpdateTemplateFieldsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsInternalServerError$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new FieldUpdateTemplateFieldsInternalServerError(v);
    });

/** @internal */
export type FieldUpdateTemplateFieldsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateTemplateFieldsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsInternalServerError$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsInternalServerError
  > = z.instanceof(FieldUpdateTemplateFieldsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateTemplateFieldsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsInternalServerError$ {
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsInternalServerError$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsInternalServerError$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsInternalServerError$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsInternalServerError$Outbound;
}

/** @internal */
export const FieldUpdateTemplateFieldsBadRequestIssue$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsBadRequestIssue$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsBadRequestIssue$ {
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsBadRequestIssue$Outbound;
}

export function fieldUpdateTemplateFieldsBadRequestIssueToJSON(
  fieldUpdateTemplateFieldsBadRequestIssue:
    FieldUpdateTemplateFieldsBadRequestIssue,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsBadRequestIssue$outboundSchema.parse(
      fieldUpdateTemplateFieldsBadRequestIssue,
    ),
  );
}

export function fieldUpdateTemplateFieldsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsBadRequestError$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new FieldUpdateTemplateFieldsBadRequestError(v);
  });

/** @internal */
export type FieldUpdateTemplateFieldsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsBadRequestError$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsBadRequestError
> = z.instanceof(FieldUpdateTemplateFieldsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsBadRequestError$ {
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsBadRequestError$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsBadRequestError$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsBadRequestError$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsBadRequestError$Outbound;
}
