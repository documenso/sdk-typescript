/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateTemplateFieldsTemplatesFieldsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateTemplateFieldsTemplatesFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsTemplatesFieldsIssues> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateTemplateFieldsTemplatesFieldsResponseBody
  extends Error
{
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsTemplatesFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldsTemplatesFieldsResponseBodyData;

  constructor(err: FieldUpdateTemplateFieldsTemplatesFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldsTemplatesFieldsResponseBody";
  }
}

export type FieldUpdateTemplateFieldsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateTemplateFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateTemplateFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateTemplateFieldsResponseBodyData;

  constructor(err: FieldUpdateTemplateFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateTemplateFieldsResponseBody";
  }
}

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsIssues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsTemplatesFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsIssues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsTemplatesFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTemplatesFieldsIssues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsIssues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsIssues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsIssues$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsTemplatesFieldsIssues$Outbound;
}

export function fieldUpdateTemplateFieldsTemplatesFieldsIssuesToJSON(
  fieldUpdateTemplateFieldsTemplatesFieldsIssues:
    FieldUpdateTemplateFieldsTemplatesFieldsIssues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsTemplatesFieldsIssues$outboundSchema.parse(
      fieldUpdateTemplateFieldsTemplatesFieldsIssues,
    ),
  );
}

export function fieldUpdateTemplateFieldsTemplatesFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsTemplatesFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsTemplatesFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsTemplatesFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsTemplatesFieldsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new FieldUpdateTemplateFieldsTemplatesFieldsResponseBody(v);
    });

/** @internal */
export type FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateTemplateFieldsTemplatesFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody
  > = z.instanceof(FieldUpdateTemplateFieldsTemplatesFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateTemplateFieldsTemplatesFieldsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsTemplatesFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldUpdateTemplateFieldsIssues$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsIssues$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsIssues$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsIssues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsIssues$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsIssues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsIssues$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsIssues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsIssues$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsIssues$Outbound;
}

export function fieldUpdateTemplateFieldsIssuesToJSON(
  fieldUpdateTemplateFieldsIssues: FieldUpdateTemplateFieldsIssues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsIssues$outboundSchema.parse(
      fieldUpdateTemplateFieldsIssues,
    ),
  );
}

export function fieldUpdateTemplateFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsResponseBody$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldUpdateTemplateFieldsIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldUpdateTemplateFieldsResponseBody(v);
  });

/** @internal */
export type FieldUpdateTemplateFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateTemplateFieldsIssues$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsResponseBody$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponseBody$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsResponseBody
> = z.instanceof(FieldUpdateTemplateFieldsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsIssues$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsResponseBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsResponseBody$Outbound;
}
