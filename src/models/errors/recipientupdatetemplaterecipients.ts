/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody";
  }
}

export type RecipientUpdateTemplateRecipientsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateTemplateRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateTemplateRecipientsResponseBody extends Error {
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientsResponseBodyData;

  constructor(err: RecipientUpdateTemplateRecipientsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientsResponseBody";
  }
}

/** @internal */
export const RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$Outbound;
}

export function recipientUpdateTemplateRecipientsTemplatesRecipientsIssuesToJSON(
  recipientUpdateTemplateRecipientsTemplatesRecipientsIssues:
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema
      .parse(recipientUpdateTemplateRecipientsTemplatesRecipientsIssues),
  );
}

export function recipientUpdateTemplateRecipientsTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody
  > = z.instanceof(
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientUpdateTemplateRecipientsIssues$inboundSchema: z.ZodType<
  RecipientUpdateTemplateRecipientsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientUpdateTemplateRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateTemplateRecipientsIssues$outboundSchema: z.ZodType<
  RecipientUpdateTemplateRecipientsIssues$Outbound,
  z.ZodTypeDef,
  RecipientUpdateTemplateRecipientsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsIssues$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsIssues$Outbound` instead. */
  export type Outbound = RecipientUpdateTemplateRecipientsIssues$Outbound;
}

export function recipientUpdateTemplateRecipientsIssuesToJSON(
  recipientUpdateTemplateRecipientsIssues:
    RecipientUpdateTemplateRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientsIssues$outboundSchema.parse(
      recipientUpdateTemplateRecipientsIssues,
    ),
  );
}

export function recipientUpdateTemplateRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateTemplateRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientUpdateTemplateRecipientsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientsResponseBody(v);
    });

/** @internal */
export type RecipientUpdateTemplateRecipientsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientsIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsResponseBody
  > = z.instanceof(RecipientUpdateTemplateRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientUpdateTemplateRecipientsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsResponseBody$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsResponseBody$Outbound` instead. */
  export type Outbound = RecipientUpdateTemplateRecipientsResponseBody$Outbound;
}
