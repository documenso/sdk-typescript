/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientUpdateTemplateRecipientsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientUpdateTemplateRecipientsInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientsInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientUpdateTemplateRecipientsInternalServerError
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientsInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientsInternalServerErrorData;

  constructor(err: RecipientUpdateTemplateRecipientsInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientsInternalServerError";
  }
}

export type RecipientUpdateTemplateRecipientsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientUpdateTemplateRecipientsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientUpdateTemplateRecipientsBadRequestError extends Error {
  code: string;
  issues?: Array<RecipientUpdateTemplateRecipientsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientUpdateTemplateRecipientsBadRequestErrorData;

  constructor(err: RecipientUpdateTemplateRecipientsBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientUpdateTemplateRecipientsBadRequestError";
  }
}

/** @internal */
export const RecipientUpdateTemplateRecipientsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientsInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientUpdateTemplateRecipientsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsInternalServerErrorIssue$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue$Outbound;
}

export function recipientUpdateTemplateRecipientsInternalServerErrorIssueToJSON(
  recipientUpdateTemplateRecipientsInternalServerErrorIssue:
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientsInternalServerErrorIssue$outboundSchema
      .parse(recipientUpdateTemplateRecipientsInternalServerErrorIssue),
  );
}

export function recipientUpdateTemplateRecipientsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientsInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientUpdateTemplateRecipientsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientsInternalServerError$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientsInternalServerError(v);
    });

/** @internal */
export type RecipientUpdateTemplateRecipientsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientsInternalServerError$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsInternalServerError
  > = z.instanceof(RecipientUpdateTemplateRecipientsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsInternalServerError$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsInternalServerError$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsInternalServerError$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsInternalServerError$Outbound;
}

/** @internal */
export const RecipientUpdateTemplateRecipientsBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientUpdateTemplateRecipientsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientUpdateTemplateRecipientsBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsBadRequestIssue$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsBadRequestIssue$Outbound;
}

export function recipientUpdateTemplateRecipientsBadRequestIssueToJSON(
  recipientUpdateTemplateRecipientsBadRequestIssue:
    RecipientUpdateTemplateRecipientsBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientUpdateTemplateRecipientsBadRequestIssue$outboundSchema.parse(
      recipientUpdateTemplateRecipientsBadRequestIssue,
    ),
  );
}

export function recipientUpdateTemplateRecipientsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientUpdateTemplateRecipientsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientUpdateTemplateRecipientsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientUpdateTemplateRecipientsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientUpdateTemplateRecipientsBadRequestError$inboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientUpdateTemplateRecipientsBadRequestIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientUpdateTemplateRecipientsBadRequestError(v);
    });

/** @internal */
export type RecipientUpdateTemplateRecipientsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientUpdateTemplateRecipientsBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientUpdateTemplateRecipientsBadRequestError$outboundSchema:
  z.ZodType<
    RecipientUpdateTemplateRecipientsBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientUpdateTemplateRecipientsBadRequestError
  > = z.instanceof(RecipientUpdateTemplateRecipientsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientUpdateTemplateRecipientsBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientUpdateTemplateRecipientsBadRequestError$ {
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientUpdateTemplateRecipientsBadRequestError$inboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientUpdateTemplateRecipientsBadRequestError$outboundSchema;
  /** @deprecated use `RecipientUpdateTemplateRecipientsBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientUpdateTemplateRecipientsBadRequestError$Outbound;
}
