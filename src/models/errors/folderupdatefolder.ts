/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FolderUpdateFolderInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FolderUpdateFolderInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderUpdateFolderInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FolderUpdateFolderInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FolderUpdateFolderInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderUpdateFolderInternalServerErrorData;

  constructor(
    err: FolderUpdateFolderInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderUpdateFolderInternalServerError";
  }
}

export type FolderUpdateFolderBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FolderUpdateFolderBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderUpdateFolderBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FolderUpdateFolderBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FolderUpdateFolderBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderUpdateFolderBadRequestErrorData;

  constructor(
    err: FolderUpdateFolderBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderUpdateFolderBadRequestError";
  }
}

/** @internal */
export const FolderUpdateFolderInternalServerErrorIssue$inboundSchema:
  z.ZodType<FolderUpdateFolderInternalServerErrorIssue, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type FolderUpdateFolderInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderUpdateFolderInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FolderUpdateFolderInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FolderUpdateFolderInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderInternalServerErrorIssue$ {
  /** @deprecated use `FolderUpdateFolderInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FolderUpdateFolderInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FolderUpdateFolderInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FolderUpdateFolderInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FolderUpdateFolderInternalServerErrorIssue$Outbound;
}

export function folderUpdateFolderInternalServerErrorIssueToJSON(
  folderUpdateFolderInternalServerErrorIssue:
    FolderUpdateFolderInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FolderUpdateFolderInternalServerErrorIssue$outboundSchema.parse(
      folderUpdateFolderInternalServerErrorIssue,
    ),
  );
}

export function folderUpdateFolderInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FolderUpdateFolderInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FolderUpdateFolderInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FolderUpdateFolderInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FolderUpdateFolderInternalServerError$inboundSchema: z.ZodType<
  FolderUpdateFolderInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FolderUpdateFolderInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderUpdateFolderInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderUpdateFolderInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FolderUpdateFolderInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FolderUpdateFolderInternalServerError$outboundSchema: z.ZodType<
  FolderUpdateFolderInternalServerError$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderInternalServerError
> = z.instanceof(FolderUpdateFolderInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderUpdateFolderInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderInternalServerError$ {
  /** @deprecated use `FolderUpdateFolderInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FolderUpdateFolderInternalServerError$inboundSchema;
  /** @deprecated use `FolderUpdateFolderInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderInternalServerError$outboundSchema;
  /** @deprecated use `FolderUpdateFolderInternalServerError$Outbound` instead. */
  export type Outbound = FolderUpdateFolderInternalServerError$Outbound;
}

/** @internal */
export const FolderUpdateFolderBadRequestIssue$inboundSchema: z.ZodType<
  FolderUpdateFolderBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderUpdateFolderBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderUpdateFolderBadRequestIssue$outboundSchema: z.ZodType<
  FolderUpdateFolderBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderBadRequestIssue$ {
  /** @deprecated use `FolderUpdateFolderBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderBadRequestIssue$inboundSchema;
  /** @deprecated use `FolderUpdateFolderBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderBadRequestIssue$outboundSchema;
  /** @deprecated use `FolderUpdateFolderBadRequestIssue$Outbound` instead. */
  export type Outbound = FolderUpdateFolderBadRequestIssue$Outbound;
}

export function folderUpdateFolderBadRequestIssueToJSON(
  folderUpdateFolderBadRequestIssue: FolderUpdateFolderBadRequestIssue,
): string {
  return JSON.stringify(
    FolderUpdateFolderBadRequestIssue$outboundSchema.parse(
      folderUpdateFolderBadRequestIssue,
    ),
  );
}

export function folderUpdateFolderBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FolderUpdateFolderBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderUpdateFolderBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderUpdateFolderBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FolderUpdateFolderBadRequestError$inboundSchema: z.ZodType<
  FolderUpdateFolderBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FolderUpdateFolderBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderUpdateFolderBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderUpdateFolderBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FolderUpdateFolderBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FolderUpdateFolderBadRequestError$outboundSchema: z.ZodType<
  FolderUpdateFolderBadRequestError$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderBadRequestError
> = z.instanceof(FolderUpdateFolderBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderUpdateFolderBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderBadRequestError$ {
  /** @deprecated use `FolderUpdateFolderBadRequestError$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderBadRequestError$inboundSchema;
  /** @deprecated use `FolderUpdateFolderBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderBadRequestError$outboundSchema;
  /** @deprecated use `FolderUpdateFolderBadRequestError$Outbound` instead. */
  export type Outbound = FolderUpdateFolderBadRequestError$Outbound;
}
