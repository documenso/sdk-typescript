/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Issues = {
  message: string;
};

/**
 * The error information
 */
export type ErrorBADREQUESTData = {
  /**
   * The error message
   */
  message: string;
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<Issues> | undefined;
};

/**
 * The error information
 */
export class ErrorBADREQUEST extends Error {
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<Issues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorBADREQUESTData;

  constructor(err: ErrorBADREQUESTData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "ErrorBADREQUEST";
  }
}

/** @internal */
export const Issues$inboundSchema: z.ZodType<Issues, z.ZodTypeDef, unknown> = z
  .object({
    message: z.string(),
  });

/** @internal */
export type Issues$Outbound = {
  message: string;
};

/** @internal */
export const Issues$outboundSchema: z.ZodType<
  Issues$Outbound,
  z.ZodTypeDef,
  Issues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issues$ {
  /** @deprecated use `Issues$inboundSchema` instead. */
  export const inboundSchema = Issues$inboundSchema;
  /** @deprecated use `Issues$outboundSchema` instead. */
  export const outboundSchema = Issues$outboundSchema;
  /** @deprecated use `Issues$Outbound` instead. */
  export type Outbound = Issues$Outbound;
}

export function issuesToJSON(issues: Issues): string {
  return JSON.stringify(Issues$outboundSchema.parse(issues));
}

export function issuesFromJSON(
  jsonString: string,
): SafeParseResult<Issues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issues' from JSON`,
  );
}

/** @internal */
export const ErrorBADREQUEST$inboundSchema: z.ZodType<
  ErrorBADREQUEST,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => Issues$inboundSchema)).optional(),
})
  .transform((v) => {
    return new ErrorBADREQUEST(v);
  });

/** @internal */
export type ErrorBADREQUEST$Outbound = {
  message: string;
  code: string;
  issues?: Array<Issues$Outbound> | undefined;
};

/** @internal */
export const ErrorBADREQUEST$outboundSchema: z.ZodType<
  ErrorBADREQUEST$Outbound,
  z.ZodTypeDef,
  ErrorBADREQUEST
> = z.instanceof(ErrorBADREQUEST)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => Issues$outboundSchema)).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBADREQUEST$ {
  /** @deprecated use `ErrorBADREQUEST$inboundSchema` instead. */
  export const inboundSchema = ErrorBADREQUEST$inboundSchema;
  /** @deprecated use `ErrorBADREQUEST$outboundSchema` instead. */
  export const outboundSchema = ErrorBADREQUEST$outboundSchema;
  /** @deprecated use `ErrorBADREQUEST$Outbound` instead. */
  export type Outbound = ErrorBADREQUEST$Outbound;
}
