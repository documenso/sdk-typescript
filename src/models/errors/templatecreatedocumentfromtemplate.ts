/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateCreateDocumentFromTemplateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateCreateDocumentFromTemplateInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateDocumentFromTemplateInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateCreateDocumentFromTemplateInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<TemplateCreateDocumentFromTemplateInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateDocumentFromTemplateInternalServerErrorData;

  constructor(
    err: TemplateCreateDocumentFromTemplateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateDocumentFromTemplateInternalServerError";
  }
}

export type TemplateCreateDocumentFromTemplateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateCreateDocumentFromTemplateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateCreateDocumentFromTemplateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateCreateDocumentFromTemplateBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<TemplateCreateDocumentFromTemplateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateCreateDocumentFromTemplateBadRequestErrorData;

  constructor(
    err: TemplateCreateDocumentFromTemplateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateCreateDocumentFromTemplateBadRequestError";
  }
}

/** @internal */
export const TemplateCreateDocumentFromTemplateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const TemplateCreateDocumentFromTemplateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateInternalServerErrorIssue$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue$Outbound;
}

export function templateCreateDocumentFromTemplateInternalServerErrorIssueToJSON(
  templateCreateDocumentFromTemplateInternalServerErrorIssue:
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateInternalServerErrorIssue$outboundSchema
      .parse(templateCreateDocumentFromTemplateInternalServerErrorIssue),
  );
}

export function templateCreateDocumentFromTemplateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateDocumentFromTemplateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateInternalServerError$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateDocumentFromTemplateInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateDocumentFromTemplateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateDocumentFromTemplateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateInternalServerError$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateInternalServerError
  > = z.instanceof(TemplateCreateDocumentFromTemplateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateDocumentFromTemplateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateInternalServerError$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateInternalServerError$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateInternalServerError$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateInternalServerError$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateInternalServerError$Outbound;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateBadRequestIssue$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateBadRequestIssue$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestIssue$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateBadRequestIssue$Outbound;
}

export function templateCreateDocumentFromTemplateBadRequestIssueToJSON(
  templateCreateDocumentFromTemplateBadRequestIssue:
    TemplateCreateDocumentFromTemplateBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateBadRequestIssue$outboundSchema.parse(
      templateCreateDocumentFromTemplateBadRequestIssue,
    ),
  );
}

export function templateCreateDocumentFromTemplateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateBadRequestError$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateCreateDocumentFromTemplateBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateCreateDocumentFromTemplateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateCreateDocumentFromTemplateBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateBadRequestError$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateBadRequestError
  > = z.instanceof(TemplateCreateDocumentFromTemplateBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateCreateDocumentFromTemplateBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateBadRequestError$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateBadRequestError$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateBadRequestError$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateBadRequestError$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateBadRequestError$Outbound;
}
