/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldGetTemplateFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldGetTemplateFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldGetTemplateFieldInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetTemplateFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldInternalServerErrorData;

  constructor(
    err: FieldGetTemplateFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldInternalServerError";
  }
}

export type FieldGetTemplateFieldNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type FieldGetTemplateFieldNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class FieldGetTemplateFieldNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetTemplateFieldNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldNotFoundErrorData;

  constructor(
    err: FieldGetTemplateFieldNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldNotFoundError";
  }
}

export type FieldGetTemplateFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldGetTemplateFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldGetTemplateFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetTemplateFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldBadRequestErrorData;

  constructor(
    err: FieldGetTemplateFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldBadRequestError";
  }
}

/** @internal */
export const FieldGetTemplateFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldGetTemplateFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldGetTemplateFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldInternalServerErrorIssue$Outbound;
}

export function fieldGetTemplateFieldInternalServerErrorIssueToJSON(
  fieldGetTemplateFieldInternalServerErrorIssue:
    FieldGetTemplateFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldGetTemplateFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldGetTemplateFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetTemplateFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetTemplateFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldInternalServerError$inboundSchema: z.ZodType<
  FieldGetTemplateFieldInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetTemplateFieldInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetTemplateFieldInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetTemplateFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldGetTemplateFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldGetTemplateFieldInternalServerError$outboundSchema: z.ZodType<
  FieldGetTemplateFieldInternalServerError$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldInternalServerError
> = z.instanceof(FieldGetTemplateFieldInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldGetTemplateFieldInternalServerErrorIssue$outboundSchema
      ),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldInternalServerError$ {
  /** @deprecated use `FieldGetTemplateFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldGetTemplateFieldNotFoundIssue$inboundSchema: z.ZodType<
  FieldGetTemplateFieldNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldNotFoundIssue$outboundSchema: z.ZodType<
  FieldGetTemplateFieldNotFoundIssue$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldNotFoundIssue$ {
  /** @deprecated use `FieldGetTemplateFieldNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldNotFoundIssue$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldNotFoundIssue$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldNotFoundIssue$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldNotFoundIssue$Outbound;
}

export function fieldGetTemplateFieldNotFoundIssueToJSON(
  fieldGetTemplateFieldNotFoundIssue: FieldGetTemplateFieldNotFoundIssue,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldNotFoundIssue$outboundSchema.parse(
      fieldGetTemplateFieldNotFoundIssue,
    ),
  );
}

export function fieldGetTemplateFieldNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldNotFoundError$inboundSchema: z.ZodType<
  FieldGetTemplateFieldNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetTemplateFieldNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetTemplateFieldNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetTemplateFieldNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const FieldGetTemplateFieldNotFoundError$outboundSchema: z.ZodType<
  FieldGetTemplateFieldNotFoundError$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldNotFoundError
> = z.instanceof(FieldGetTemplateFieldNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldGetTemplateFieldNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldNotFoundError$ {
  /** @deprecated use `FieldGetTemplateFieldNotFoundError$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldNotFoundError$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldNotFoundError$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldNotFoundError$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldNotFoundError$Outbound;
}

/** @internal */
export const FieldGetTemplateFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldGetTemplateFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldGetTemplateFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldBadRequestIssue$ {
  /** @deprecated use `FieldGetTemplateFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldBadRequestIssue$Outbound;
}

export function fieldGetTemplateFieldBadRequestIssueToJSON(
  fieldGetTemplateFieldBadRequestIssue: FieldGetTemplateFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldBadRequestIssue$outboundSchema.parse(
      fieldGetTemplateFieldBadRequestIssue,
    ),
  );
}

export function fieldGetTemplateFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldBadRequestError$inboundSchema: z.ZodType<
  FieldGetTemplateFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetTemplateFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetTemplateFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetTemplateFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldGetTemplateFieldBadRequestError$outboundSchema: z.ZodType<
  FieldGetTemplateFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldBadRequestError
> = z.instanceof(FieldGetTemplateFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldGetTemplateFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldBadRequestError$ {
  /** @deprecated use `FieldGetTemplateFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldBadRequestError$Outbound;
}
