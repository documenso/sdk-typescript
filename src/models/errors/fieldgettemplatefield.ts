/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldGetTemplateFieldTemplatesFieldsResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldGetTemplateFieldTemplatesFieldsResponseResponseBodyData = {
  message: string;
  code: string;
  issues?:
    | Array<FieldGetTemplateFieldTemplatesFieldsResponseIssues>
    | undefined;
};

/**
 * Internal server error
 */
export class FieldGetTemplateFieldTemplatesFieldsResponseResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<FieldGetTemplateFieldTemplatesFieldsResponseIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldTemplatesFieldsResponseResponseBodyData;

  constructor(
    err: FieldGetTemplateFieldTemplatesFieldsResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldTemplatesFieldsResponseResponseBody";
  }
}

export type FieldGetTemplateFieldTemplatesFieldsIssues = {
  message: string;
};

/**
 * Not found
 */
export type FieldGetTemplateFieldTemplatesFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldTemplatesFieldsIssues> | undefined;
};

/**
 * Not found
 */
export class FieldGetTemplateFieldTemplatesFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldGetTemplateFieldTemplatesFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldTemplatesFieldsResponseBodyData;

  constructor(err: FieldGetTemplateFieldTemplatesFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldTemplatesFieldsResponseBody";
  }
}

export type FieldGetTemplateFieldIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldGetTemplateFieldResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldGetTemplateFieldResponseBody extends Error {
  code: string;
  issues?: Array<FieldGetTemplateFieldIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetTemplateFieldResponseBodyData;

  constructor(err: FieldGetTemplateFieldResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetTemplateFieldResponseBody";
  }
}

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseIssues$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldGetTemplateFieldTemplatesFieldsResponseIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseIssues$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseIssues$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldTemplatesFieldsResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTemplatesFieldsResponseIssues$ {
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseIssues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseIssues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseIssues$Outbound` instead. */
  export type Outbound =
    FieldGetTemplateFieldTemplatesFieldsResponseIssues$Outbound;
}

export function fieldGetTemplateFieldTemplatesFieldsResponseIssuesToJSON(
  fieldGetTemplateFieldTemplatesFieldsResponseIssues:
    FieldGetTemplateFieldTemplatesFieldsResponseIssues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldTemplatesFieldsResponseIssues$outboundSchema.parse(
      fieldGetTemplateFieldTemplatesFieldsResponseIssues,
    ),
  );
}

export function fieldGetTemplateFieldTemplatesFieldsResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetTemplateFieldTemplatesFieldsResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldTemplatesFieldsResponseIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetTemplateFieldTemplatesFieldsResponseIssues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldGetTemplateFieldTemplatesFieldsResponseIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new FieldGetTemplateFieldTemplatesFieldsResponseResponseBody(v);
    });

/** @internal */
export type FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<FieldGetTemplateFieldTemplatesFieldsResponseIssues$Outbound>
      | undefined;
  };

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody
  > = z.instanceof(FieldGetTemplateFieldTemplatesFieldsResponseResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldGetTemplateFieldTemplatesFieldsResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$ {
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    FieldGetTemplateFieldTemplatesFieldsResponseResponseBody$Outbound;
}

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsIssues$inboundSchema:
  z.ZodType<FieldGetTemplateFieldTemplatesFieldsIssues, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type FieldGetTemplateFieldTemplatesFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsIssues$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldTemplatesFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTemplatesFieldsIssues$ {
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldTemplatesFieldsIssues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTemplatesFieldsIssues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsIssues$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldTemplatesFieldsIssues$Outbound;
}

export function fieldGetTemplateFieldTemplatesFieldsIssuesToJSON(
  fieldGetTemplateFieldTemplatesFieldsIssues:
    FieldGetTemplateFieldTemplatesFieldsIssues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldTemplatesFieldsIssues$outboundSchema.parse(
      fieldGetTemplateFieldTemplatesFieldsIssues,
    ),
  );
}

export function fieldGetTemplateFieldTemplatesFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetTemplateFieldTemplatesFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldTemplatesFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetTemplateFieldTemplatesFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldGetTemplateFieldTemplatesFieldsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new FieldGetTemplateFieldTemplatesFieldsResponseBody(v);
    });

/** @internal */
export type FieldGetTemplateFieldTemplatesFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldGetTemplateFieldTemplatesFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldGetTemplateFieldTemplatesFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldTemplatesFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldTemplatesFieldsResponseBody
  > = z.instanceof(FieldGetTemplateFieldTemplatesFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => FieldGetTemplateFieldTemplatesFieldsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTemplatesFieldsResponseBody$ {
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTemplatesFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTemplatesFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldGetTemplateFieldTemplatesFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldGetTemplateFieldIssues$inboundSchema: z.ZodType<
  FieldGetTemplateFieldIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetTemplateFieldIssues$outboundSchema: z.ZodType<
  FieldGetTemplateFieldIssues$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldIssues$ {
  /** @deprecated use `FieldGetTemplateFieldIssues$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldIssues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldIssues$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldIssues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldIssues$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldIssues$Outbound;
}

export function fieldGetTemplateFieldIssuesToJSON(
  fieldGetTemplateFieldIssues: FieldGetTemplateFieldIssues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldIssues$outboundSchema.parse(
      fieldGetTemplateFieldIssues,
    ),
  );
}

export function fieldGetTemplateFieldIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldIssues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldResponseBody$inboundSchema: z.ZodType<
  FieldGetTemplateFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldGetTemplateFieldIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldGetTemplateFieldResponseBody(v);
  });

/** @internal */
export type FieldGetTemplateFieldResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldGetTemplateFieldIssues$Outbound> | undefined;
};

/** @internal */
export const FieldGetTemplateFieldResponseBody$outboundSchema: z.ZodType<
  FieldGetTemplateFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldResponseBody
> = z.instanceof(FieldGetTemplateFieldResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => FieldGetTemplateFieldIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldResponseBody$ {
  /** @deprecated use `FieldGetTemplateFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldResponseBody$Outbound;
}
