/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDeleteInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDeleteInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDeleteInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDeleteInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteInternalServerErrorData;

  constructor(
    err: DocumentDeleteInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteInternalServerError";
  }
}

export type DocumentDeleteBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDeleteBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDeleteBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentDeleteBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteBadRequestErrorData;

  constructor(
    err: DocumentDeleteBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteBadRequestError";
  }
}

/** @internal */
export const DocumentDeleteInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentDeleteInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDeleteInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteInternalServerErrorIssue$outboundSchema: z.ZodType<
  DocumentDeleteInternalServerErrorIssue$Outbound,
  z.ZodTypeDef,
  DocumentDeleteInternalServerErrorIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDeleteInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDeleteInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDeleteInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentDeleteInternalServerErrorIssue$Outbound;
}

export function documentDeleteInternalServerErrorIssueToJSON(
  documentDeleteInternalServerErrorIssue:
    DocumentDeleteInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDeleteInternalServerErrorIssue$outboundSchema.parse(
      documentDeleteInternalServerErrorIssue,
    ),
  );
}

export function documentDeleteInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteInternalServerErrorIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDeleteInternalServerErrorIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteInternalServerError$inboundSchema: z.ZodType<
  DocumentDeleteInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDeleteInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDeleteInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDeleteInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteInternalServerErrorIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDeleteInternalServerError$outboundSchema: z.ZodType<
  DocumentDeleteInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentDeleteInternalServerError
> = z.instanceof(DocumentDeleteInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDeleteInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteInternalServerError$ {
  /** @deprecated use `DocumentDeleteInternalServerError$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDeleteInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDeleteInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDeleteInternalServerError$Outbound;
}

/** @internal */
export const DocumentDeleteBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDeleteBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDeleteBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDeleteBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDeleteBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteBadRequestIssue$ {
  /** @deprecated use `DocumentDeleteBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDeleteBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentDeleteBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDeleteBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDeleteBadRequestIssue$Outbound;
}

export function documentDeleteBadRequestIssueToJSON(
  documentDeleteBadRequestIssue: DocumentDeleteBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDeleteBadRequestIssue$outboundSchema.parse(
      documentDeleteBadRequestIssue,
    ),
  );
}

export function documentDeleteBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDeleteBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteBadRequestError$inboundSchema: z.ZodType<
  DocumentDeleteBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDeleteBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentDeleteBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentDeleteBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDeleteBadRequestError$outboundSchema: z.ZodType<
  DocumentDeleteBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDeleteBadRequestError
> = z.instanceof(DocumentDeleteBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentDeleteBadRequestIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteBadRequestError$ {
  /** @deprecated use `DocumentDeleteBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDeleteBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentDeleteBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDeleteBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDeleteBadRequestError$Outbound;
}
