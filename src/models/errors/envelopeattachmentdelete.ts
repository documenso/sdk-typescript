/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EnvelopeAttachmentDeleteInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type EnvelopeAttachmentDeleteInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentDeleteInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class EnvelopeAttachmentDeleteInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<EnvelopeAttachmentDeleteInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentDeleteInternalServerErrorData;

  constructor(
    err: EnvelopeAttachmentDeleteInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentDeleteInternalServerError";
  }
}

export type EnvelopeAttachmentDeleteBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EnvelopeAttachmentDeleteBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentDeleteBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class EnvelopeAttachmentDeleteBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentDeleteBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentDeleteBadRequestErrorData;

  constructor(
    err: EnvelopeAttachmentDeleteBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentDeleteBadRequestError";
  }
}

/** @internal */
export const EnvelopeAttachmentDeleteInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentDeleteInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EnvelopeAttachmentDeleteInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentDeleteInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentDeleteInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentDeleteInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentDeleteInternalServerErrorIssue$ {
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentDeleteInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentDeleteInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EnvelopeAttachmentDeleteInternalServerErrorIssue$Outbound;
}

export function envelopeAttachmentDeleteInternalServerErrorIssueToJSON(
  envelopeAttachmentDeleteInternalServerErrorIssue:
    EnvelopeAttachmentDeleteInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentDeleteInternalServerErrorIssue$outboundSchema.parse(
      envelopeAttachmentDeleteInternalServerErrorIssue,
    ),
  );
}

export function envelopeAttachmentDeleteInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentDeleteInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentDeleteInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentDeleteInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentDeleteInternalServerError$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentDeleteInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EnvelopeAttachmentDeleteInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EnvelopeAttachmentDeleteInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EnvelopeAttachmentDeleteInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<EnvelopeAttachmentDeleteInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const EnvelopeAttachmentDeleteInternalServerError$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentDeleteInternalServerError$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentDeleteInternalServerError
  > = z.instanceof(EnvelopeAttachmentDeleteInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EnvelopeAttachmentDeleteInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentDeleteInternalServerError$ {
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentDeleteInternalServerError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentDeleteInternalServerError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteInternalServerError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentDeleteInternalServerError$Outbound;
}

/** @internal */
export const EnvelopeAttachmentDeleteBadRequestIssue$inboundSchema: z.ZodType<
  EnvelopeAttachmentDeleteBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type EnvelopeAttachmentDeleteBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentDeleteBadRequestIssue$outboundSchema: z.ZodType<
  EnvelopeAttachmentDeleteBadRequestIssue$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentDeleteBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentDeleteBadRequestIssue$ {
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentDeleteBadRequestIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentDeleteBadRequestIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestIssue$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentDeleteBadRequestIssue$Outbound;
}

export function envelopeAttachmentDeleteBadRequestIssueToJSON(
  envelopeAttachmentDeleteBadRequestIssue:
    EnvelopeAttachmentDeleteBadRequestIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentDeleteBadRequestIssue$outboundSchema.parse(
      envelopeAttachmentDeleteBadRequestIssue,
    ),
  );
}

export function envelopeAttachmentDeleteBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentDeleteBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentDeleteBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentDeleteBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentDeleteBadRequestError$inboundSchema: z.ZodType<
  EnvelopeAttachmentDeleteBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentDeleteBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentDeleteBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentDeleteBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentDeleteBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const EnvelopeAttachmentDeleteBadRequestError$outboundSchema: z.ZodType<
  EnvelopeAttachmentDeleteBadRequestError$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentDeleteBadRequestError
> = z.instanceof(EnvelopeAttachmentDeleteBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => EnvelopeAttachmentDeleteBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentDeleteBadRequestError$ {
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentDeleteBadRequestError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentDeleteBadRequestError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentDeleteBadRequestError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentDeleteBadRequestError$Outbound;
}
