/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateTemplateRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateTemplateRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientCreateTemplateRecipientInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientInternalServerErrorData;

  constructor(
    err: RecipientCreateTemplateRecipientInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientInternalServerError";
  }
}

export type RecipientCreateTemplateRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateTemplateRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateTemplateRecipientBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientBadRequestErrorData;

  constructor(
    err: RecipientCreateTemplateRecipientBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientCreateTemplateRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateTemplateRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientInternalServerErrorIssue$Outbound;
}

export function recipientCreateTemplateRecipientInternalServerErrorIssueToJSON(
  recipientCreateTemplateRecipientInternalServerErrorIssue:
    RecipientCreateTemplateRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientCreateTemplateRecipientInternalServerErrorIssue),
  );
}

export function recipientCreateTemplateRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateTemplateRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientInternalServerError
  > = z.instanceof(RecipientCreateTemplateRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientInternalServerError$ {
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientCreateTemplateRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateTemplateRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientBadRequestIssue$Outbound;
}

export function recipientCreateTemplateRecipientBadRequestIssueToJSON(
  recipientCreateTemplateRecipientBadRequestIssue:
    RecipientCreateTemplateRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientBadRequestIssue$outboundSchema.parse(
      recipientCreateTemplateRecipientBadRequestIssue,
    ),
  );
}

export function recipientCreateTemplateRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateTemplateRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientBadRequestError
  > = z.instanceof(RecipientCreateTemplateRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientBadRequestError$ {
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientBadRequestError$Outbound;
}
