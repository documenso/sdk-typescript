/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateTemplateRecipientTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateTemplateRecipientTemplatesRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientCreateTemplateRecipientTemplatesRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientCreateTemplateRecipientTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody";
  }
}

export type RecipientCreateTemplateRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateTemplateRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateTemplateRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientResponseBodyData;

  constructor(err: RecipientCreateTemplateRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientResponseBody";
  }
}

/** @internal */
export const RecipientCreateTemplateRecipientTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientTemplatesRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateTemplateRecipientTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues$Outbound;
}

export function recipientCreateTemplateRecipientTemplatesRecipientsIssuesToJSON(
  recipientCreateTemplateRecipientTemplatesRecipientsIssues:
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientTemplatesRecipientsIssues$outboundSchema
      .parse(recipientCreateTemplateRecipientTemplatesRecipientsIssues),
  );
}

export function recipientCreateTemplateRecipientTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientCreateTemplateRecipientTemplatesRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody
  > = z.instanceof(
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientCreateTemplateRecipientIssues$inboundSchema: z.ZodType<
  RecipientCreateTemplateRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientCreateTemplateRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateTemplateRecipientIssues$outboundSchema: z.ZodType<
  RecipientCreateTemplateRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientCreateTemplateRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientIssues$ {
  /** @deprecated use `RecipientCreateTemplateRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientIssues$Outbound;
}

export function recipientCreateTemplateRecipientIssuesToJSON(
  recipientCreateTemplateRecipientIssues:
    RecipientCreateTemplateRecipientIssues,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientIssues$outboundSchema.parse(
      recipientCreateTemplateRecipientIssues,
    ),
  );
}

export function recipientCreateTemplateRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientCreateTemplateRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientCreateTemplateRecipientIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientResponseBody(v);
    });

/** @internal */
export type RecipientCreateTemplateRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientResponseBody
  > = z.instanceof(RecipientCreateTemplateRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientCreateTemplateRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientResponseBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientResponseBody$Outbound;
}
