/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientDeleteDocumentRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientDeleteDocumentRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteDocumentRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientDeleteDocumentRecipientInternalServerError extends Error {
  code: string;
  issues?:
    | Array<RecipientDeleteDocumentRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteDocumentRecipientInternalServerErrorData;

  constructor(err: RecipientDeleteDocumentRecipientInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientDeleteDocumentRecipientInternalServerError";
  }
}

export type RecipientDeleteDocumentRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientDeleteDocumentRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientDeleteDocumentRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientDeleteDocumentRecipientBadRequestError extends Error {
  code: string;
  issues?: Array<RecipientDeleteDocumentRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientDeleteDocumentRecipientBadRequestErrorData;

  constructor(err: RecipientDeleteDocumentRecipientBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientDeleteDocumentRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientDeleteDocumentRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientDeleteDocumentRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientDeleteDocumentRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientDeleteDocumentRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteDocumentRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteDocumentRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteDocumentRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientDeleteDocumentRecipientInternalServerErrorIssue$Outbound;
}

export function recipientDeleteDocumentRecipientInternalServerErrorIssueToJSON(
  recipientDeleteDocumentRecipientInternalServerErrorIssue:
    RecipientDeleteDocumentRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientDeleteDocumentRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientDeleteDocumentRecipientInternalServerErrorIssue),
  );
}

export function recipientDeleteDocumentRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteDocumentRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteDocumentRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientDeleteDocumentRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteDocumentRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientDeleteDocumentRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientDeleteDocumentRecipientInternalServerError(v);
    });

/** @internal */
export type RecipientDeleteDocumentRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteDocumentRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientDeleteDocumentRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientDeleteDocumentRecipientInternalServerError
  > = z.instanceof(RecipientDeleteDocumentRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientDeleteDocumentRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteDocumentRecipientInternalServerError$ {
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteDocumentRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteDocumentRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientDeleteDocumentRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientDeleteDocumentRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientDeleteDocumentRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientDeleteDocumentRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientDeleteDocumentRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteDocumentRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteDocumentRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteDocumentRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientDeleteDocumentRecipientBadRequestIssue$Outbound;
}

export function recipientDeleteDocumentRecipientBadRequestIssueToJSON(
  recipientDeleteDocumentRecipientBadRequestIssue:
    RecipientDeleteDocumentRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientDeleteDocumentRecipientBadRequestIssue$outboundSchema.parse(
      recipientDeleteDocumentRecipientBadRequestIssue,
    ),
  );
}

export function recipientDeleteDocumentRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteDocumentRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteDocumentRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientDeleteDocumentRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteDocumentRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientDeleteDocumentRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientDeleteDocumentRecipientBadRequestError(v);
    });

/** @internal */
export type RecipientDeleteDocumentRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientDeleteDocumentRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientDeleteDocumentRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientDeleteDocumentRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientDeleteDocumentRecipientBadRequestError
  > = z.instanceof(RecipientDeleteDocumentRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientDeleteDocumentRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteDocumentRecipientBadRequestError$ {
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteDocumentRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteDocumentRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientDeleteDocumentRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientDeleteDocumentRecipientBadRequestError$Outbound;
}
