/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FolderFindFoldersInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FolderFindFoldersInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderFindFoldersInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FolderFindFoldersInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FolderFindFoldersInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderFindFoldersInternalServerErrorData;

  constructor(
    err: FolderFindFoldersInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderFindFoldersInternalServerError";
  }
}

export type FolderFindFoldersNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type FolderFindFoldersNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderFindFoldersNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class FolderFindFoldersNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<FolderFindFoldersNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderFindFoldersNotFoundErrorData;

  constructor(
    err: FolderFindFoldersNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderFindFoldersNotFoundError";
  }
}

export type FolderFindFoldersBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FolderFindFoldersBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderFindFoldersBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FolderFindFoldersBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FolderFindFoldersBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderFindFoldersBadRequestErrorData;

  constructor(
    err: FolderFindFoldersBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderFindFoldersBadRequestError";
  }
}

/** @internal */
export const FolderFindFoldersInternalServerErrorIssue$inboundSchema: z.ZodType<
  FolderFindFoldersInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderFindFoldersInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderFindFoldersInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FolderFindFoldersInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FolderFindFoldersInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersInternalServerErrorIssue$ {
  /** @deprecated use `FolderFindFoldersInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FolderFindFoldersInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FolderFindFoldersInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderFindFoldersInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FolderFindFoldersInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FolderFindFoldersInternalServerErrorIssue$Outbound;
}

export function folderFindFoldersInternalServerErrorIssueToJSON(
  folderFindFoldersInternalServerErrorIssue:
    FolderFindFoldersInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FolderFindFoldersInternalServerErrorIssue$outboundSchema.parse(
      folderFindFoldersInternalServerErrorIssue,
    ),
  );
}

export function folderFindFoldersInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FolderFindFoldersInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FolderFindFoldersInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FolderFindFoldersInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FolderFindFoldersInternalServerError$inboundSchema: z.ZodType<
  FolderFindFoldersInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FolderFindFoldersInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderFindFoldersInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderFindFoldersInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FolderFindFoldersInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FolderFindFoldersInternalServerError$outboundSchema: z.ZodType<
  FolderFindFoldersInternalServerError$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersInternalServerError
> = z.instanceof(FolderFindFoldersInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderFindFoldersInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersInternalServerError$ {
  /** @deprecated use `FolderFindFoldersInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FolderFindFoldersInternalServerError$inboundSchema;
  /** @deprecated use `FolderFindFoldersInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FolderFindFoldersInternalServerError$outboundSchema;
  /** @deprecated use `FolderFindFoldersInternalServerError$Outbound` instead. */
  export type Outbound = FolderFindFoldersInternalServerError$Outbound;
}

/** @internal */
export const FolderFindFoldersNotFoundIssue$inboundSchema: z.ZodType<
  FolderFindFoldersNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderFindFoldersNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderFindFoldersNotFoundIssue$outboundSchema: z.ZodType<
  FolderFindFoldersNotFoundIssue$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersNotFoundIssue$ {
  /** @deprecated use `FolderFindFoldersNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersNotFoundIssue$inboundSchema;
  /** @deprecated use `FolderFindFoldersNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersNotFoundIssue$outboundSchema;
  /** @deprecated use `FolderFindFoldersNotFoundIssue$Outbound` instead. */
  export type Outbound = FolderFindFoldersNotFoundIssue$Outbound;
}

export function folderFindFoldersNotFoundIssueToJSON(
  folderFindFoldersNotFoundIssue: FolderFindFoldersNotFoundIssue,
): string {
  return JSON.stringify(
    FolderFindFoldersNotFoundIssue$outboundSchema.parse(
      folderFindFoldersNotFoundIssue,
    ),
  );
}

export function folderFindFoldersNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<FolderFindFoldersNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderFindFoldersNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderFindFoldersNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const FolderFindFoldersNotFoundError$inboundSchema: z.ZodType<
  FolderFindFoldersNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FolderFindFoldersNotFoundIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderFindFoldersNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderFindFoldersNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FolderFindFoldersNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const FolderFindFoldersNotFoundError$outboundSchema: z.ZodType<
  FolderFindFoldersNotFoundError$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersNotFoundError
> = z.instanceof(FolderFindFoldersNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => FolderFindFoldersNotFoundIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersNotFoundError$ {
  /** @deprecated use `FolderFindFoldersNotFoundError$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersNotFoundError$inboundSchema;
  /** @deprecated use `FolderFindFoldersNotFoundError$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersNotFoundError$outboundSchema;
  /** @deprecated use `FolderFindFoldersNotFoundError$Outbound` instead. */
  export type Outbound = FolderFindFoldersNotFoundError$Outbound;
}

/** @internal */
export const FolderFindFoldersBadRequestIssue$inboundSchema: z.ZodType<
  FolderFindFoldersBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderFindFoldersBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderFindFoldersBadRequestIssue$outboundSchema: z.ZodType<
  FolderFindFoldersBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersBadRequestIssue$ {
  /** @deprecated use `FolderFindFoldersBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersBadRequestIssue$inboundSchema;
  /** @deprecated use `FolderFindFoldersBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersBadRequestIssue$outboundSchema;
  /** @deprecated use `FolderFindFoldersBadRequestIssue$Outbound` instead. */
  export type Outbound = FolderFindFoldersBadRequestIssue$Outbound;
}

export function folderFindFoldersBadRequestIssueToJSON(
  folderFindFoldersBadRequestIssue: FolderFindFoldersBadRequestIssue,
): string {
  return JSON.stringify(
    FolderFindFoldersBadRequestIssue$outboundSchema.parse(
      folderFindFoldersBadRequestIssue,
    ),
  );
}

export function folderFindFoldersBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FolderFindFoldersBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderFindFoldersBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderFindFoldersBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FolderFindFoldersBadRequestError$inboundSchema: z.ZodType<
  FolderFindFoldersBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FolderFindFoldersBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderFindFoldersBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderFindFoldersBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FolderFindFoldersBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FolderFindFoldersBadRequestError$outboundSchema: z.ZodType<
  FolderFindFoldersBadRequestError$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersBadRequestError
> = z.instanceof(FolderFindFoldersBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderFindFoldersBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersBadRequestError$ {
  /** @deprecated use `FolderFindFoldersBadRequestError$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersBadRequestError$inboundSchema;
  /** @deprecated use `FolderFindFoldersBadRequestError$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersBadRequestError$outboundSchema;
  /** @deprecated use `FolderFindFoldersBadRequestError$Outbound` instead. */
  export type Outbound = FolderFindFoldersBadRequestError$Outbound;
}
