/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentUpdateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentUpdateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentUpdateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentUpdateInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentUpdateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentUpdateInternalServerErrorData;

  constructor(
    err: DocumentUpdateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentUpdateInternalServerError";
  }
}

export type DocumentUpdateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentUpdateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentUpdateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentUpdateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentUpdateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentUpdateBadRequestErrorData;

  constructor(
    err: DocumentUpdateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentUpdateBadRequestError";
  }
}

/** @internal */
export const DocumentUpdateInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentUpdateInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentUpdateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentUpdateInternalServerErrorIssue$outboundSchema: z.ZodType<
  DocumentUpdateInternalServerErrorIssue$Outbound,
  z.ZodTypeDef,
  DocumentUpdateInternalServerErrorIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateInternalServerErrorIssue$ {
  /** @deprecated use `DocumentUpdateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentUpdateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentUpdateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentUpdateInternalServerErrorIssue$Outbound;
}

export function documentUpdateInternalServerErrorIssueToJSON(
  documentUpdateInternalServerErrorIssue:
    DocumentUpdateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentUpdateInternalServerErrorIssue$outboundSchema.parse(
      documentUpdateInternalServerErrorIssue,
    ),
  );
}

export function documentUpdateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateInternalServerErrorIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentUpdateInternalServerErrorIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateInternalServerError$inboundSchema: z.ZodType<
  DocumentUpdateInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentUpdateInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentUpdateInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentUpdateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentUpdateInternalServerErrorIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentUpdateInternalServerError$outboundSchema: z.ZodType<
  DocumentUpdateInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentUpdateInternalServerError
> = z.instanceof(DocumentUpdateInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentUpdateInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateInternalServerError$ {
  /** @deprecated use `DocumentUpdateInternalServerError$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateInternalServerError$inboundSchema;
  /** @deprecated use `DocumentUpdateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateInternalServerError$outboundSchema;
  /** @deprecated use `DocumentUpdateInternalServerError$Outbound` instead. */
  export type Outbound = DocumentUpdateInternalServerError$Outbound;
}

/** @internal */
export const DocumentUpdateBadRequestIssue$inboundSchema: z.ZodType<
  DocumentUpdateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentUpdateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentUpdateBadRequestIssue$outboundSchema: z.ZodType<
  DocumentUpdateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentUpdateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateBadRequestIssue$ {
  /** @deprecated use `DocumentUpdateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentUpdateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentUpdateBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentUpdateBadRequestIssue$Outbound;
}

export function documentUpdateBadRequestIssueToJSON(
  documentUpdateBadRequestIssue: DocumentUpdateBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentUpdateBadRequestIssue$outboundSchema.parse(
      documentUpdateBadRequestIssue,
    ),
  );
}

export function documentUpdateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateBadRequestError$inboundSchema: z.ZodType<
  DocumentUpdateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentUpdateBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentUpdateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentUpdateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentUpdateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentUpdateBadRequestError$outboundSchema: z.ZodType<
  DocumentUpdateBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentUpdateBadRequestError
> = z.instanceof(DocumentUpdateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentUpdateBadRequestIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateBadRequestError$ {
  /** @deprecated use `DocumentUpdateBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateBadRequestError$inboundSchema;
  /** @deprecated use `DocumentUpdateBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateBadRequestError$outboundSchema;
  /** @deprecated use `DocumentUpdateBadRequestError$Outbound` instead. */
  export type Outbound = DocumentUpdateBadRequestError$Outbound;
}
