/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateDocumentFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateDocumentFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateDocumentFieldInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldUpdateDocumentFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateDocumentFieldInternalServerErrorData;

  constructor(
    err: FieldUpdateDocumentFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateDocumentFieldInternalServerError";
  }
}

export type FieldUpdateDocumentFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateDocumentFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateDocumentFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldUpdateDocumentFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateDocumentFieldBadRequestErrorData;

  constructor(
    err: FieldUpdateDocumentFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateDocumentFieldBadRequestError";
  }
}

/** @internal */
export const FieldUpdateDocumentFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateDocumentFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateDocumentFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldUpdateDocumentFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldUpdateDocumentFieldInternalServerErrorIssue$Outbound;
}

export function fieldUpdateDocumentFieldInternalServerErrorIssueToJSON(
  fieldUpdateDocumentFieldInternalServerErrorIssue:
    FieldUpdateDocumentFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldUpdateDocumentFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldUpdateDocumentFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldUpdateDocumentFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateDocumentFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateDocumentFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateDocumentFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateDocumentFieldInternalServerError$inboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldUpdateDocumentFieldInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldUpdateDocumentFieldInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldUpdateDocumentFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateDocumentFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateDocumentFieldInternalServerError$outboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldUpdateDocumentFieldInternalServerError
  > = z.instanceof(FieldUpdateDocumentFieldInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateDocumentFieldInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldInternalServerError$ {
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldUpdateDocumentFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldUpdateDocumentFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateDocumentFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateDocumentFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldUpdateDocumentFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldUpdateDocumentFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldBadRequestIssue$ {
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldBadRequestIssue$Outbound;
}

export function fieldUpdateDocumentFieldBadRequestIssueToJSON(
  fieldUpdateDocumentFieldBadRequestIssue:
    FieldUpdateDocumentFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldUpdateDocumentFieldBadRequestIssue$outboundSchema.parse(
      fieldUpdateDocumentFieldBadRequestIssue,
    ),
  );
}

export function fieldUpdateDocumentFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateDocumentFieldBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateDocumentFieldBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateDocumentFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldUpdateDocumentFieldBadRequestError$inboundSchema: z.ZodType<
  FieldUpdateDocumentFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldUpdateDocumentFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldUpdateDocumentFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldUpdateDocumentFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateDocumentFieldBadRequestError$outboundSchema: z.ZodType<
  FieldUpdateDocumentFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldUpdateDocumentFieldBadRequestError
> = z.instanceof(FieldUpdateDocumentFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateDocumentFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldBadRequestError$ {
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldBadRequestError$Outbound;
}
