/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldUpdateDocumentFieldDocumentsFieldsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldUpdateDocumentFieldDocumentsFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldDocumentsFieldsIssues> | undefined;
};

/**
 * Internal server error
 */
export class FieldUpdateDocumentFieldDocumentsFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldUpdateDocumentFieldDocumentsFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateDocumentFieldDocumentsFieldsResponseBodyData;

  constructor(err: FieldUpdateDocumentFieldDocumentsFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateDocumentFieldDocumentsFieldsResponseBody";
  }
}

export type FieldUpdateDocumentFieldIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldUpdateDocumentFieldResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldUpdateDocumentFieldResponseBody extends Error {
  code: string;
  issues?: Array<FieldUpdateDocumentFieldIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldUpdateDocumentFieldResponseBodyData;

  constructor(err: FieldUpdateDocumentFieldResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldUpdateDocumentFieldResponseBody";
  }
}

/** @internal */
export const FieldUpdateDocumentFieldDocumentsFieldsIssues$inboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldDocumentsFieldsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldUpdateDocumentFieldDocumentsFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateDocumentFieldDocumentsFieldsIssues$outboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldDocumentsFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldUpdateDocumentFieldDocumentsFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldDocumentsFieldsIssues$ {
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldDocumentsFieldsIssues$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldDocumentsFieldsIssues$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsIssues$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldDocumentsFieldsIssues$Outbound;
}

export function fieldUpdateDocumentFieldDocumentsFieldsIssuesToJSON(
  fieldUpdateDocumentFieldDocumentsFieldsIssues:
    FieldUpdateDocumentFieldDocumentsFieldsIssues,
): string {
  return JSON.stringify(
    FieldUpdateDocumentFieldDocumentsFieldsIssues$outboundSchema.parse(
      fieldUpdateDocumentFieldDocumentsFieldsIssues,
    ),
  );
}

export function fieldUpdateDocumentFieldDocumentsFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateDocumentFieldDocumentsFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateDocumentFieldDocumentsFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateDocumentFieldDocumentsFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateDocumentFieldDocumentsFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldUpdateDocumentFieldDocumentsFieldsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new FieldUpdateDocumentFieldDocumentsFieldsResponseBody(v);
    });

/** @internal */
export type FieldUpdateDocumentFieldDocumentsFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldUpdateDocumentFieldDocumentsFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldUpdateDocumentFieldDocumentsFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody
  > = z.instanceof(FieldUpdateDocumentFieldDocumentsFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldUpdateDocumentFieldDocumentsFieldsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldDocumentsFieldsResponseBody$ {
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldDocumentsFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateDocumentFieldDocumentsFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldUpdateDocumentFieldIssues$inboundSchema: z.ZodType<
  FieldUpdateDocumentFieldIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldUpdateDocumentFieldIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldUpdateDocumentFieldIssues$outboundSchema: z.ZodType<
  FieldUpdateDocumentFieldIssues$Outbound,
  z.ZodTypeDef,
  FieldUpdateDocumentFieldIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldIssues$ {
  /** @deprecated use `FieldUpdateDocumentFieldIssues$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateDocumentFieldIssues$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldIssues$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateDocumentFieldIssues$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldIssues$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldIssues$Outbound;
}

export function fieldUpdateDocumentFieldIssuesToJSON(
  fieldUpdateDocumentFieldIssues: FieldUpdateDocumentFieldIssues,
): string {
  return JSON.stringify(
    FieldUpdateDocumentFieldIssues$outboundSchema.parse(
      fieldUpdateDocumentFieldIssues,
    ),
  );
}

export function fieldUpdateDocumentFieldIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateDocumentFieldIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateDocumentFieldIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateDocumentFieldIssues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateDocumentFieldResponseBody$inboundSchema: z.ZodType<
  FieldUpdateDocumentFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldUpdateDocumentFieldIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldUpdateDocumentFieldResponseBody(v);
  });

/** @internal */
export type FieldUpdateDocumentFieldResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldUpdateDocumentFieldIssues$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateDocumentFieldResponseBody$outboundSchema: z.ZodType<
  FieldUpdateDocumentFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldUpdateDocumentFieldResponseBody
> = z.instanceof(FieldUpdateDocumentFieldResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => FieldUpdateDocumentFieldIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateDocumentFieldResponseBody$ {
  /** @deprecated use `FieldUpdateDocumentFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateDocumentFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateDocumentFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateDocumentFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldUpdateDocumentFieldResponseBody$Outbound;
}
