/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateDocumentRecipientsDocumentsRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientCreateDocumentRecipientsDocumentsRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientsDocumentsRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData;

  constructor(
    err: RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody";
  }
}

export type RecipientCreateDocumentRecipientsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateDocumentRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateDocumentRecipientsResponseBody extends Error {
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientsResponseBodyData;

  constructor(err: RecipientCreateDocumentRecipientsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateDocumentRecipientsResponseBody";
  }
}

/** @internal */
export const RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$Outbound;
}

export function recipientCreateDocumentRecipientsDocumentsRecipientsIssuesToJSON(
  recipientCreateDocumentRecipientsDocumentsRecipientsIssues:
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema
      .parse(recipientCreateDocumentRecipientsDocumentsRecipientsIssues),
  );
}

export function recipientCreateDocumentRecipientsDocumentsRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientsDocumentsRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateDocumentRecipientsDocumentsRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody
  > = z.instanceof(
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateDocumentRecipientsDocumentsRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsDocumentsRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientCreateDocumentRecipientsIssues$inboundSchema: z.ZodType<
  RecipientCreateDocumentRecipientsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientCreateDocumentRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateDocumentRecipientsIssues$outboundSchema: z.ZodType<
  RecipientCreateDocumentRecipientsIssues$Outbound,
  z.ZodTypeDef,
  RecipientCreateDocumentRecipientsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsIssues$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsIssues$Outbound` instead. */
  export type Outbound = RecipientCreateDocumentRecipientsIssues$Outbound;
}

export function recipientCreateDocumentRecipientsIssuesToJSON(
  recipientCreateDocumentRecipientsIssues:
    RecipientCreateDocumentRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientsIssues$outboundSchema.parse(
      recipientCreateDocumentRecipientsIssues,
    ),
  );
}

export function recipientCreateDocumentRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateDocumentRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientCreateDocumentRecipientsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientsResponseBody(v);
    });

/** @internal */
export type RecipientCreateDocumentRecipientsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientsIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientCreateDocumentRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsResponseBody
  > = z.instanceof(RecipientCreateDocumentRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientCreateDocumentRecipientsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsResponseBody$Outbound` instead. */
  export type Outbound = RecipientCreateDocumentRecipientsResponseBody$Outbound;
}
