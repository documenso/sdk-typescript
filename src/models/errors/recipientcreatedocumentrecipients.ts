/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateDocumentRecipientsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateDocumentRecipientsInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientsInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientCreateDocumentRecipientsInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientsInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientsInternalServerErrorData;

  constructor(
    err: RecipientCreateDocumentRecipientsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateDocumentRecipientsInternalServerError";
  }
}

export type RecipientCreateDocumentRecipientsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateDocumentRecipientsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateDocumentRecipientsBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientsBadRequestErrorData;

  constructor(
    err: RecipientCreateDocumentRecipientsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateDocumentRecipientsBadRequestError";
  }
}

/** @internal */
export const RecipientCreateDocumentRecipientsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateDocumentRecipientsInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateDocumentRecipientsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsInternalServerErrorIssue$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsInternalServerErrorIssue$Outbound;
}

export function recipientCreateDocumentRecipientsInternalServerErrorIssueToJSON(
  recipientCreateDocumentRecipientsInternalServerErrorIssue:
    RecipientCreateDocumentRecipientsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientsInternalServerErrorIssue$outboundSchema
      .parse(recipientCreateDocumentRecipientsInternalServerErrorIssue),
  );
}

export function recipientCreateDocumentRecipientsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientsInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateDocumentRecipientsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientsInternalServerError$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateDocumentRecipientsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientsInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateDocumentRecipientsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateDocumentRecipientsInternalServerError$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsInternalServerError
  > = z.instanceof(RecipientCreateDocumentRecipientsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateDocumentRecipientsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsInternalServerError$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsInternalServerError$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsInternalServerError$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsInternalServerError$Outbound;
}

/** @internal */
export const RecipientCreateDocumentRecipientsBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateDocumentRecipientsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateDocumentRecipientsBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsBadRequestIssue$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsBadRequestIssue$Outbound;
}

export function recipientCreateDocumentRecipientsBadRequestIssueToJSON(
  recipientCreateDocumentRecipientsBadRequestIssue:
    RecipientCreateDocumentRecipientsBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientsBadRequestIssue$outboundSchema.parse(
      recipientCreateDocumentRecipientsBadRequestIssue,
    ),
  );
}

export function recipientCreateDocumentRecipientsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateDocumentRecipientsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientsBadRequestError$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateDocumentRecipientsBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateDocumentRecipientsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientsBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateDocumentRecipientsBadRequestError$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientsBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientsBadRequestError
  > = z.instanceof(RecipientCreateDocumentRecipientsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateDocumentRecipientsBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientsBadRequestError$ {
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientsBadRequestError$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientsBadRequestError$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientsBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientsBadRequestError$Outbound;
}
