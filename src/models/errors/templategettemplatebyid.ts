/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateGetTemplateByIdTemplatesResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateGetTemplateByIdTemplatesResponseResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdTemplatesResponseIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateGetTemplateByIdTemplatesResponseResponseBody
  extends Error
{
  code: string;
  issues?: Array<TemplateGetTemplateByIdTemplatesResponseIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdTemplatesResponseResponseBodyData;

  constructor(err: TemplateGetTemplateByIdTemplatesResponseResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdTemplatesResponseResponseBody";
  }
}

export type TemplateGetTemplateByIdTemplatesIssues = {
  message: string;
};

/**
 * Not found
 */
export type TemplateGetTemplateByIdTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdTemplatesIssues> | undefined;
};

/**
 * Not found
 */
export class TemplateGetTemplateByIdTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateGetTemplateByIdTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdTemplatesResponseBodyData;

  constructor(err: TemplateGetTemplateByIdTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdTemplatesResponseBody";
  }
}

export type TemplateGetTemplateByIdIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateGetTemplateByIdResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateGetTemplateByIdResponseBody extends Error {
  code: string;
  issues?: Array<TemplateGetTemplateByIdIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdResponseBodyData;

  constructor(err: TemplateGetTemplateByIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdResponseBody";
  }
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseIssues$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateGetTemplateByIdTemplatesResponseIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseIssues$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseIssues$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdTemplatesResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesResponseIssues$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesResponseIssues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesResponseIssues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseIssues$Outbound` instead. */
  export type Outbound =
    TemplateGetTemplateByIdTemplatesResponseIssues$Outbound;
}

export function templateGetTemplateByIdTemplatesResponseIssuesToJSON(
  templateGetTemplateByIdTemplatesResponseIssues:
    TemplateGetTemplateByIdTemplatesResponseIssues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdTemplatesResponseIssues$outboundSchema.parse(
      templateGetTemplateByIdTemplatesResponseIssues,
    ),
  );
}

export function templateGetTemplateByIdTemplatesResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdTemplatesResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdTemplatesResponseIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdTemplatesResponseIssues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseResponseBody$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateGetTemplateByIdTemplatesResponseIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateGetTemplateByIdTemplatesResponseResponseBody(v);
    });

/** @internal */
export type TemplateGetTemplateByIdTemplatesResponseResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateGetTemplateByIdTemplatesResponseIssues$Outbound>
    | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseResponseBody$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdTemplatesResponseResponseBody
  > = z.instanceof(TemplateGetTemplateByIdTemplatesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateGetTemplateByIdTemplatesResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesResponseResponseBody$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesResponseResponseBody$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesResponseResponseBody$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateGetTemplateByIdTemplatesResponseResponseBody$Outbound;
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesIssues$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdTemplatesIssues$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesIssues$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdTemplatesIssues$Outbound;
}

export function templateGetTemplateByIdTemplatesIssuesToJSON(
  templateGetTemplateByIdTemplatesIssues:
    TemplateGetTemplateByIdTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdTemplatesIssues$outboundSchema.parse(
      templateGetTemplateByIdTemplatesIssues,
    ),
  );
}

export function templateGetTemplateByIdTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdTemplatesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdTemplatesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseBody$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateGetTemplateByIdTemplatesIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateGetTemplateByIdTemplatesResponseBody(v);
    });

/** @internal */
export type TemplateGetTemplateByIdTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdTemplatesResponseBody
  > = z.instanceof(TemplateGetTemplateByIdTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateGetTemplateByIdTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesResponseBody$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateGetTemplateByIdIssues$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdIssues$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdIssues$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdIssues$ {
  /** @deprecated use `TemplateGetTemplateByIdIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdIssues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdIssues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdIssues$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdIssues$Outbound;
}

export function templateGetTemplateByIdIssuesToJSON(
  templateGetTemplateByIdIssues: TemplateGetTemplateByIdIssues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdIssues$outboundSchema.parse(
      templateGetTemplateByIdIssues,
    ),
  );
}

export function templateGetTemplateByIdIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdIssues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdResponseBody$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateGetTemplateByIdIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateGetTemplateByIdResponseBody(v);
  });

/** @internal */
export type TemplateGetTemplateByIdResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdResponseBody$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdResponseBody
> = z.instanceof(TemplateGetTemplateByIdResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => TemplateGetTemplateByIdIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdResponseBody$ {
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdResponseBody$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdResponseBody$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdResponseBody$Outbound;
}
