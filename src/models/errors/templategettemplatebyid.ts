/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateGetTemplateByIdInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateGetTemplateByIdInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class TemplateGetTemplateByIdInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<TemplateGetTemplateByIdInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdInternalServerErrorData;

  constructor(
    err: TemplateGetTemplateByIdInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdInternalServerError";
  }
}

export type TemplateGetTemplateByIdNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type TemplateGetTemplateByIdNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class TemplateGetTemplateByIdNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<TemplateGetTemplateByIdNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdNotFoundErrorData;

  constructor(
    err: TemplateGetTemplateByIdNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdNotFoundError";
  }
}

export type TemplateGetTemplateByIdBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateGetTemplateByIdBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateGetTemplateByIdBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<TemplateGetTemplateByIdBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateGetTemplateByIdBadRequestErrorData;

  constructor(
    err: TemplateGetTemplateByIdBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateGetTemplateByIdBadRequestError";
  }
}

/** @internal */
export const TemplateGetTemplateByIdInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateGetTemplateByIdInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdInternalServerErrorIssue$ {
  /** @deprecated use `TemplateGetTemplateByIdInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateGetTemplateByIdInternalServerErrorIssue$Outbound;
}

export function templateGetTemplateByIdInternalServerErrorIssueToJSON(
  templateGetTemplateByIdInternalServerErrorIssue:
    TemplateGetTemplateByIdInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdInternalServerErrorIssue$outboundSchema.parse(
      templateGetTemplateByIdInternalServerErrorIssue,
    ),
  );
}

export function templateGetTemplateByIdInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdInternalServerError$inboundSchema:
  z.ZodType<TemplateGetTemplateByIdInternalServerError, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateGetTemplateByIdInternalServerErrorIssue$inboundSchema
        ),
      ).optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new TemplateGetTemplateByIdInternalServerError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type TemplateGetTemplateByIdInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateGetTemplateByIdInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdInternalServerError$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdInternalServerError
  > = z.instanceof(TemplateGetTemplateByIdInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateGetTemplateByIdInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdInternalServerError$ {
  /** @deprecated use `TemplateGetTemplateByIdInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdInternalServerError$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdInternalServerError$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdInternalServerError$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdInternalServerError$Outbound;
}

/** @internal */
export const TemplateGetTemplateByIdNotFoundIssue$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdNotFoundIssue$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdNotFoundIssue$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdNotFoundIssue$ {
  /** @deprecated use `TemplateGetTemplateByIdNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdNotFoundIssue$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdNotFoundIssue$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdNotFoundIssue$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdNotFoundIssue$Outbound;
}

export function templateGetTemplateByIdNotFoundIssueToJSON(
  templateGetTemplateByIdNotFoundIssue: TemplateGetTemplateByIdNotFoundIssue,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdNotFoundIssue$outboundSchema.parse(
      templateGetTemplateByIdNotFoundIssue,
    ),
  );
}

export function templateGetTemplateByIdNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdNotFoundError$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateGetTemplateByIdNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateGetTemplateByIdNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateGetTemplateByIdNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdNotFoundError$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdNotFoundError$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdNotFoundError
> = z.instanceof(TemplateGetTemplateByIdNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateGetTemplateByIdNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdNotFoundError$ {
  /** @deprecated use `TemplateGetTemplateByIdNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdNotFoundError$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdNotFoundError$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdNotFoundError$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdNotFoundError$Outbound;
}

/** @internal */
export const TemplateGetTemplateByIdBadRequestIssue$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateGetTemplateByIdBadRequestIssue$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdBadRequestIssue$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdBadRequestIssue$ {
  /** @deprecated use `TemplateGetTemplateByIdBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdBadRequestIssue$Outbound;
}

export function templateGetTemplateByIdBadRequestIssueToJSON(
  templateGetTemplateByIdBadRequestIssue:
    TemplateGetTemplateByIdBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdBadRequestIssue$outboundSchema.parse(
      templateGetTemplateByIdBadRequestIssue,
    ),
  );
}

export function templateGetTemplateByIdBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdBadRequestError$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateGetTemplateByIdBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateGetTemplateByIdBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateGetTemplateByIdBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateGetTemplateByIdBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdBadRequestError$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdBadRequestError$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdBadRequestError
> = z.instanceof(TemplateGetTemplateByIdBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateGetTemplateByIdBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdBadRequestError$ {
  /** @deprecated use `TemplateGetTemplateByIdBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdBadRequestError$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdBadRequestError$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdBadRequestError$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdBadRequestError$Outbound;
}
