/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldCreateTemplateFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldCreateTemplateFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldCreateTemplateFieldInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldCreateTemplateFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldInternalServerErrorData;

  constructor(
    err: FieldCreateTemplateFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldInternalServerError";
  }
}

export type FieldCreateTemplateFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldCreateTemplateFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldCreateTemplateFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldCreateTemplateFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldBadRequestErrorData;

  constructor(
    err: FieldCreateTemplateFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldBadRequestError";
  }
}

/** @internal */
export const FieldCreateTemplateFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldCreateTemplateFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldInternalServerErrorIssue$Outbound;
}

export function fieldCreateTemplateFieldInternalServerErrorIssueToJSON(
  fieldCreateTemplateFieldInternalServerErrorIssue:
    FieldCreateTemplateFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldCreateTemplateFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldCreateTemplateFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldInternalServerError$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldCreateTemplateFieldInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldCreateTemplateFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldCreateTemplateFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldInternalServerError$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldInternalServerError
  > = z.instanceof(FieldCreateTemplateFieldInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldCreateTemplateFieldInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldInternalServerError$ {
  /** @deprecated use `FieldCreateTemplateFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldCreateTemplateFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldBadRequestIssue$ {
  /** @deprecated use `FieldCreateTemplateFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldBadRequestIssue$Outbound;
}

export function fieldCreateTemplateFieldBadRequestIssueToJSON(
  fieldCreateTemplateFieldBadRequestIssue:
    FieldCreateTemplateFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldBadRequestIssue$outboundSchema.parse(
      fieldCreateTemplateFieldBadRequestIssue,
    ),
  );
}

export function fieldCreateTemplateFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldBadRequestError$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldCreateTemplateFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldCreateTemplateFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldCreateTemplateFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldBadRequestError$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldBadRequestError
> = z.instanceof(FieldCreateTemplateFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldCreateTemplateFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldBadRequestError$ {
  /** @deprecated use `FieldCreateTemplateFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldBadRequestError$Outbound;
}
