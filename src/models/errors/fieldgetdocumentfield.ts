/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldGetDocumentFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldGetDocumentFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetDocumentFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldGetDocumentFieldInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetDocumentFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetDocumentFieldInternalServerErrorData;

  constructor(
    err: FieldGetDocumentFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetDocumentFieldInternalServerError";
  }
}

export type FieldGetDocumentFieldNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type FieldGetDocumentFieldNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetDocumentFieldNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class FieldGetDocumentFieldNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetDocumentFieldNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetDocumentFieldNotFoundErrorData;

  constructor(
    err: FieldGetDocumentFieldNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetDocumentFieldNotFoundError";
  }
}

export type FieldGetDocumentFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldGetDocumentFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldGetDocumentFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldGetDocumentFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldGetDocumentFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldGetDocumentFieldBadRequestErrorData;

  constructor(
    err: FieldGetDocumentFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldGetDocumentFieldBadRequestError";
  }
}

/** @internal */
export const FieldGetDocumentFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldGetDocumentFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldGetDocumentFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetDocumentFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldGetDocumentFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldGetDocumentFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldGetDocumentFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldInternalServerErrorIssue$Outbound;
}

export function fieldGetDocumentFieldInternalServerErrorIssueToJSON(
  fieldGetDocumentFieldInternalServerErrorIssue:
    FieldGetDocumentFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldGetDocumentFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldGetDocumentFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetDocumentFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetDocumentFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetDocumentFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldInternalServerError$inboundSchema: z.ZodType<
  FieldGetDocumentFieldInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetDocumentFieldInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetDocumentFieldInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetDocumentFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldGetDocumentFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldGetDocumentFieldInternalServerError$outboundSchema: z.ZodType<
  FieldGetDocumentFieldInternalServerError$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldInternalServerError
> = z.instanceof(FieldGetDocumentFieldInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldGetDocumentFieldInternalServerErrorIssue$outboundSchema
      ),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldInternalServerError$ {
  /** @deprecated use `FieldGetDocumentFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldGetDocumentFieldNotFoundIssue$inboundSchema: z.ZodType<
  FieldGetDocumentFieldNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldGetDocumentFieldNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetDocumentFieldNotFoundIssue$outboundSchema: z.ZodType<
  FieldGetDocumentFieldNotFoundIssue$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldNotFoundIssue$ {
  /** @deprecated use `FieldGetDocumentFieldNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldNotFoundIssue$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldNotFoundIssue$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldNotFoundIssue$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldNotFoundIssue$Outbound;
}

export function fieldGetDocumentFieldNotFoundIssueToJSON(
  fieldGetDocumentFieldNotFoundIssue: FieldGetDocumentFieldNotFoundIssue,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldNotFoundIssue$outboundSchema.parse(
      fieldGetDocumentFieldNotFoundIssue,
    ),
  );
}

export function fieldGetDocumentFieldNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetDocumentFieldNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldNotFoundError$inboundSchema: z.ZodType<
  FieldGetDocumentFieldNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetDocumentFieldNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetDocumentFieldNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetDocumentFieldNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldGetDocumentFieldNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const FieldGetDocumentFieldNotFoundError$outboundSchema: z.ZodType<
  FieldGetDocumentFieldNotFoundError$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldNotFoundError
> = z.instanceof(FieldGetDocumentFieldNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldGetDocumentFieldNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldNotFoundError$ {
  /** @deprecated use `FieldGetDocumentFieldNotFoundError$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldNotFoundError$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldNotFoundError$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldNotFoundError$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldNotFoundError$Outbound;
}

/** @internal */
export const FieldGetDocumentFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldGetDocumentFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldGetDocumentFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldGetDocumentFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldGetDocumentFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldBadRequestIssue$ {
  /** @deprecated use `FieldGetDocumentFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldBadRequestIssue$Outbound;
}

export function fieldGetDocumentFieldBadRequestIssueToJSON(
  fieldGetDocumentFieldBadRequestIssue: FieldGetDocumentFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldBadRequestIssue$outboundSchema.parse(
      fieldGetDocumentFieldBadRequestIssue,
    ),
  );
}

export function fieldGetDocumentFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetDocumentFieldBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldBadRequestError$inboundSchema: z.ZodType<
  FieldGetDocumentFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldGetDocumentFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldGetDocumentFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldGetDocumentFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldGetDocumentFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldGetDocumentFieldBadRequestError$outboundSchema: z.ZodType<
  FieldGetDocumentFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldBadRequestError
> = z.instanceof(FieldGetDocumentFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldGetDocumentFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldBadRequestError$ {
  /** @deprecated use `FieldGetDocumentFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldBadRequestError$Outbound;
}
