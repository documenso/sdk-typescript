/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue =
  {
    message: string;
  };

/**
 * Internal server error
 */
export type EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorData =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue
      >
      | undefined;
  };

/**
 * Internal server error
 */
export class EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorData;

  constructor(
    err: EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError";
  }
}

export type EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue>
    | undefined;
};

/**
 * Invalid input data
 */
export class EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestErrorData;

  constructor(
    err: EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError";
  }
}

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$ {
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$Outbound;
}

export function embeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssueToJSON(
  embeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue:
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema
      .parse(
        embeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue,
      ),
  );
}

export function embeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$inboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$Outbound
      >
      | undefined;
  };

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$outboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError
  > = z.instanceof(
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$ {
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$inboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$outboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignVerifyEmbeddingPresignTokenInternalServerError$Outbound;
}

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$inboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$outboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$ {
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$inboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$outboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$Outbound;
}

export function embeddingPresignVerifyEmbeddingPresignTokenBadRequestIssueToJSON(
  embeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue:
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue,
): string {
  return JSON.stringify(
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$outboundSchema
      .parse(embeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue),
  );
}

export function embeddingPresignVerifyEmbeddingPresignTokenBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$inboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$Outbound
      >
      | undefined;
  };

/** @internal */
export const EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$outboundSchema:
  z.ZodType<
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError
  > = z.instanceof(EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$ {
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$inboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$outboundSchema;
  /** @deprecated use `EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignVerifyEmbeddingPresignTokenBadRequestError$Outbound;
}
