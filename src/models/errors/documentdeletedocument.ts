/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDeleteDocumentInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDeleteDocumentInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDeleteDocumentInternalServerError extends Error {
  code: string;
  issues?: Array<DocumentDeleteDocumentInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteDocumentInternalServerErrorData;

  constructor(err: DocumentDeleteDocumentInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteDocumentInternalServerError";
  }
}

export type DocumentDeleteDocumentBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDeleteDocumentBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDeleteDocumentBadRequestError extends Error {
  code: string;
  issues?: Array<DocumentDeleteDocumentBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteDocumentBadRequestErrorData;

  constructor(err: DocumentDeleteDocumentBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteDocumentBadRequestError";
  }
}

/** @internal */
export const DocumentDeleteDocumentInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentDeleteDocumentInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentDeleteDocumentInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteDocumentInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentDeleteDocumentInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentDeleteDocumentInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDeleteDocumentInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentDeleteDocumentInternalServerErrorIssue$Outbound;
}

export function documentDeleteDocumentInternalServerErrorIssueToJSON(
  documentDeleteDocumentInternalServerErrorIssue:
    DocumentDeleteDocumentInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDeleteDocumentInternalServerErrorIssue$outboundSchema.parse(
      documentDeleteDocumentInternalServerErrorIssue,
    ),
  );
}

export function documentDeleteDocumentInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDeleteDocumentInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDeleteDocumentInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDeleteDocumentInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteDocumentInternalServerError$inboundSchema: z.ZodType<
  DocumentDeleteDocumentInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDeleteDocumentInternalServerErrorIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentDeleteDocumentInternalServerError(v);
  });

/** @internal */
export type DocumentDeleteDocumentInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentDeleteDocumentInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentDeleteDocumentInternalServerError$outboundSchema:
  z.ZodType<
    DocumentDeleteDocumentInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentDeleteDocumentInternalServerError
  > = z.instanceof(DocumentDeleteDocumentInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentDeleteDocumentInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentInternalServerError$ {
  /** @deprecated use `DocumentDeleteDocumentInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentInternalServerError$Outbound;
}

/** @internal */
export const DocumentDeleteDocumentBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDeleteDocumentBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDeleteDocumentBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteDocumentBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDeleteDocumentBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDeleteDocumentBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentBadRequestIssue$ {
  /** @deprecated use `DocumentDeleteDocumentBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentBadRequestIssue$Outbound;
}

export function documentDeleteDocumentBadRequestIssueToJSON(
  documentDeleteDocumentBadRequestIssue: DocumentDeleteDocumentBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDeleteDocumentBadRequestIssue$outboundSchema.parse(
      documentDeleteDocumentBadRequestIssue,
    ),
  );
}

export function documentDeleteDocumentBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteDocumentBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDeleteDocumentBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteDocumentBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteDocumentBadRequestError$inboundSchema: z.ZodType<
  DocumentDeleteDocumentBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDeleteDocumentBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentDeleteDocumentBadRequestError(v);
  });

/** @internal */
export type DocumentDeleteDocumentBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDeleteDocumentBadRequestError$outboundSchema: z.ZodType<
  DocumentDeleteDocumentBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDeleteDocumentBadRequestError
> = z.instanceof(DocumentDeleteDocumentBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDeleteDocumentBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentBadRequestError$ {
  /** @deprecated use `DocumentDeleteDocumentBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentBadRequestError$Outbound;
}
