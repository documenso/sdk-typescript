/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDeleteDocumentDocumentsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDeleteDocumentDocumentsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentDocumentsIssues> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDeleteDocumentDocumentsResponseBody extends Error {
  code: string;
  issues?: Array<DocumentDeleteDocumentDocumentsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteDocumentDocumentsResponseBodyData;

  constructor(err: DocumentDeleteDocumentDocumentsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteDocumentDocumentsResponseBody";
  }
}

export type DocumentDeleteDocumentIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDeleteDocumentResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentIssues> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDeleteDocumentResponseBody extends Error {
  code: string;
  issues?: Array<DocumentDeleteDocumentIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDeleteDocumentResponseBodyData;

  constructor(err: DocumentDeleteDocumentResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDeleteDocumentResponseBody";
  }
}

/** @internal */
export const DocumentDeleteDocumentDocumentsIssues$inboundSchema: z.ZodType<
  DocumentDeleteDocumentDocumentsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDeleteDocumentDocumentsIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteDocumentDocumentsIssues$outboundSchema: z.ZodType<
  DocumentDeleteDocumentDocumentsIssues$Outbound,
  z.ZodTypeDef,
  DocumentDeleteDocumentDocumentsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentDocumentsIssues$ {
  /** @deprecated use `DocumentDeleteDocumentDocumentsIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentDocumentsIssues$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentDocumentsIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentDocumentsIssues$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentDocumentsIssues$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentDocumentsIssues$Outbound;
}

export function documentDeleteDocumentDocumentsIssuesToJSON(
  documentDeleteDocumentDocumentsIssues: DocumentDeleteDocumentDocumentsIssues,
): string {
  return JSON.stringify(
    DocumentDeleteDocumentDocumentsIssues$outboundSchema.parse(
      documentDeleteDocumentDocumentsIssues,
    ),
  );
}

export function documentDeleteDocumentDocumentsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteDocumentDocumentsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDeleteDocumentDocumentsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteDocumentDocumentsIssues' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteDocumentDocumentsResponseBody$inboundSchema:
  z.ZodType<
    DocumentDeleteDocumentDocumentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDeleteDocumentDocumentsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentDeleteDocumentDocumentsResponseBody(v);
    });

/** @internal */
export type DocumentDeleteDocumentDocumentsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentDocumentsIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentDeleteDocumentDocumentsResponseBody$outboundSchema:
  z.ZodType<
    DocumentDeleteDocumentDocumentsResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentDeleteDocumentDocumentsResponseBody
  > = z.instanceof(DocumentDeleteDocumentDocumentsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentDeleteDocumentDocumentsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentDocumentsResponseBody$ {
  /** @deprecated use `DocumentDeleteDocumentDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDeleteDocumentDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentDocumentsResponseBody$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentDocumentsResponseBody$Outbound;
}

/** @internal */
export const DocumentDeleteDocumentIssues$inboundSchema: z.ZodType<
  DocumentDeleteDocumentIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDeleteDocumentIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDeleteDocumentIssues$outboundSchema: z.ZodType<
  DocumentDeleteDocumentIssues$Outbound,
  z.ZodTypeDef,
  DocumentDeleteDocumentIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentIssues$ {
  /** @deprecated use `DocumentDeleteDocumentIssues$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteDocumentIssues$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentIssues$outboundSchema` instead. */
  export const outboundSchema = DocumentDeleteDocumentIssues$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentIssues$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentIssues$Outbound;
}

export function documentDeleteDocumentIssuesToJSON(
  documentDeleteDocumentIssues: DocumentDeleteDocumentIssues,
): string {
  return JSON.stringify(
    DocumentDeleteDocumentIssues$outboundSchema.parse(
      documentDeleteDocumentIssues,
    ),
  );
}

export function documentDeleteDocumentIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteDocumentIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDeleteDocumentIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteDocumentIssues' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteDocumentResponseBody$inboundSchema: z.ZodType<
  DocumentDeleteDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentDeleteDocumentIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new DocumentDeleteDocumentResponseBody(v);
  });

/** @internal */
export type DocumentDeleteDocumentResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDeleteDocumentIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentDeleteDocumentResponseBody$outboundSchema: z.ZodType<
  DocumentDeleteDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentDeleteDocumentResponseBody
> = z.instanceof(DocumentDeleteDocumentResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentDeleteDocumentIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteDocumentResponseBody$ {
  /** @deprecated use `DocumentDeleteDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteDocumentResponseBody$inboundSchema;
  /** @deprecated use `DocumentDeleteDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDeleteDocumentResponseBody$outboundSchema;
  /** @deprecated use `DocumentDeleteDocumentResponseBody$Outbound` instead. */
  export type Outbound = DocumentDeleteDocumentResponseBody$Outbound;
}
