/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBodyData;

  constructor(
    err: DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody";
  }
}

export type DocumentGetDocumentWithDetailsByIdDocumentsIssues = {
  message: string;
};

/**
 * Not found
 */
export type DocumentGetDocumentWithDetailsByIdDocumentsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdDocumentsIssues> | undefined;
};

/**
 * Not found
 */
export class DocumentGetDocumentWithDetailsByIdDocumentsResponseBody
  extends Error
{
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdDocumentsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdDocumentsResponseBodyData;

  constructor(
    err: DocumentGetDocumentWithDetailsByIdDocumentsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetDocumentWithDetailsByIdDocumentsResponseBody";
  }
}

export type DocumentGetDocumentWithDetailsByIdIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentGetDocumentWithDetailsByIdResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdIssues> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentGetDocumentWithDetailsByIdResponseBody extends Error {
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdResponseBodyData;

  constructor(err: DocumentGetDocumentWithDetailsByIdResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetDocumentWithDetailsByIdResponseBody";
  }
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$Outbound;
}

export function documentGetDocumentWithDetailsByIdDocumentsResponseIssuesToJSON(
  documentGetDocumentWithDetailsByIdDocumentsResponseIssues:
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$outboundSchema
      .parse(documentGetDocumentWithDetailsByIdDocumentsResponseIssues),
  );
}

export function documentGetDocumentWithDetailsByIdDocumentsResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody(
        v,
      );
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody
  > = z.instanceof(
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentGetDocumentWithDetailsByIdDocumentsResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseResponseBody$Outbound;
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsIssues$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdDocumentsIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsIssues$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsIssues$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdDocumentsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdDocumentsIssues$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsIssues$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsIssues$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsIssues$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdDocumentsIssues$Outbound;
}

export function documentGetDocumentWithDetailsByIdDocumentsIssuesToJSON(
  documentGetDocumentWithDetailsByIdDocumentsIssues:
    DocumentGetDocumentWithDetailsByIdDocumentsIssues,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdDocumentsIssues$outboundSchema.parse(
      documentGetDocumentWithDetailsByIdDocumentsIssues,
    ),
  );
}

export function documentGetDocumentWithDetailsByIdDocumentsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdDocumentsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdDocumentsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdDocumentsIssues' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentGetDocumentWithDetailsByIdDocumentsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdDocumentsResponseBody(v);
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdDocumentsIssues$Outbound>
    | undefined;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody
  > = z.instanceof(DocumentGetDocumentWithDetailsByIdDocumentsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentGetDocumentWithDetailsByIdDocumentsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdDocumentsResponseBody$Outbound;
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdIssues$inboundSchema: z.ZodType<
  DocumentGetDocumentWithDetailsByIdIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentGetDocumentWithDetailsByIdIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdIssues$outboundSchema: z.ZodType<
  DocumentGetDocumentWithDetailsByIdIssues$Outbound,
  z.ZodTypeDef,
  DocumentGetDocumentWithDetailsByIdIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdIssues$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdIssues$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdIssues$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdIssues$Outbound` instead. */
  export type Outbound = DocumentGetDocumentWithDetailsByIdIssues$Outbound;
}

export function documentGetDocumentWithDetailsByIdIssuesToJSON(
  documentGetDocumentWithDetailsByIdIssues:
    DocumentGetDocumentWithDetailsByIdIssues,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdIssues$outboundSchema.parse(
      documentGetDocumentWithDetailsByIdIssues,
    ),
  );
}

export function documentGetDocumentWithDetailsByIdIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdIssues' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdResponseBody$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentGetDocumentWithDetailsByIdIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdResponseBody(v);
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdResponseBody$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdResponseBody
  > = z.instanceof(DocumentGetDocumentWithDetailsByIdResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentGetDocumentWithDetailsByIdIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdResponseBody$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdResponseBody$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdResponseBody$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdResponseBody$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdResponseBody$Outbound;
}
