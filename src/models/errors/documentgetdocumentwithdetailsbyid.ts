/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentGetDocumentWithDetailsByIdInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class DocumentGetDocumentWithDetailsByIdInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdInternalServerErrorData;

  constructor(
    err: DocumentGetDocumentWithDetailsByIdInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetDocumentWithDetailsByIdInternalServerError";
  }
}

export type DocumentGetDocumentWithDetailsByIdNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentGetDocumentWithDetailsByIdNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentGetDocumentWithDetailsByIdNotFoundError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdNotFoundErrorData;

  constructor(
    err: DocumentGetDocumentWithDetailsByIdNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetDocumentWithDetailsByIdNotFoundError";
  }
}

export type DocumentGetDocumentWithDetailsByIdBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentGetDocumentWithDetailsByIdBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentGetDocumentWithDetailsByIdBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentGetDocumentWithDetailsByIdBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetDocumentWithDetailsByIdBadRequestErrorData;

  constructor(
    err: DocumentGetDocumentWithDetailsByIdBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetDocumentWithDetailsByIdBadRequestError";
  }
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$Outbound;
}

export function documentGetDocumentWithDetailsByIdInternalServerErrorIssueToJSON(
  documentGetDocumentWithDetailsByIdInternalServerErrorIssue:
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$outboundSchema
      .parse(documentGetDocumentWithDetailsByIdInternalServerErrorIssue),
  );
}

export function documentGetDocumentWithDetailsByIdInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdInternalServerError$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdInternalServerError$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdInternalServerError
  > = z.instanceof(DocumentGetDocumentWithDetailsByIdInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentGetDocumentWithDetailsByIdInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdInternalServerError$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdInternalServerError$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdInternalServerError$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdInternalServerError$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdInternalServerError$Outbound;
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdNotFoundIssue$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdNotFoundIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdNotFoundIssue$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdNotFoundIssue$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdNotFoundIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdNotFoundIssue$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundIssue$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdNotFoundIssue$Outbound;
}

export function documentGetDocumentWithDetailsByIdNotFoundIssueToJSON(
  documentGetDocumentWithDetailsByIdNotFoundIssue:
    DocumentGetDocumentWithDetailsByIdNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdNotFoundIssue$outboundSchema.parse(
      documentGetDocumentWithDetailsByIdNotFoundIssue,
    ),
  );
}

export function documentGetDocumentWithDetailsByIdNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdNotFoundIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdNotFoundIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdNotFoundError$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdNotFoundError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentGetDocumentWithDetailsByIdNotFoundIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdNotFoundError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdNotFoundIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdNotFoundError$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdNotFoundError$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdNotFoundError
  > = z.instanceof(DocumentGetDocumentWithDetailsByIdNotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentGetDocumentWithDetailsByIdNotFoundIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdNotFoundError$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdNotFoundError$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdNotFoundError$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdNotFoundError$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdNotFoundError$Outbound;
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdBadRequestIssue$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdBadRequestIssue$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdBadRequestIssue$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdBadRequestIssue$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestIssue$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdBadRequestIssue$Outbound;
}

export function documentGetDocumentWithDetailsByIdBadRequestIssueToJSON(
  documentGetDocumentWithDetailsByIdBadRequestIssue:
    DocumentGetDocumentWithDetailsByIdBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentGetDocumentWithDetailsByIdBadRequestIssue$outboundSchema.parse(
      documentGetDocumentWithDetailsByIdBadRequestIssue,
    ),
  );
}

export function documentGetDocumentWithDetailsByIdBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentGetDocumentWithDetailsByIdBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetDocumentWithDetailsByIdBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentGetDocumentWithDetailsByIdBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentWithDetailsByIdBadRequestError$inboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentGetDocumentWithDetailsByIdBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentGetDocumentWithDetailsByIdBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentGetDocumentWithDetailsByIdBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentGetDocumentWithDetailsByIdBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentGetDocumentWithDetailsByIdBadRequestError$outboundSchema:
  z.ZodType<
    DocumentGetDocumentWithDetailsByIdBadRequestError$Outbound,
    z.ZodTypeDef,
    DocumentGetDocumentWithDetailsByIdBadRequestError
  > = z.instanceof(DocumentGetDocumentWithDetailsByIdBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentGetDocumentWithDetailsByIdBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentWithDetailsByIdBadRequestError$ {
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetDocumentWithDetailsByIdBadRequestError$inboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetDocumentWithDetailsByIdBadRequestError$outboundSchema;
  /** @deprecated use `DocumentGetDocumentWithDetailsByIdBadRequestError$Outbound` instead. */
  export type Outbound =
    DocumentGetDocumentWithDetailsByIdBadRequestError$Outbound;
}
