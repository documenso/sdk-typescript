/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateTemplateRecipientsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateTemplateRecipientsInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientsInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientCreateTemplateRecipientsInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientsInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientsInternalServerErrorData;

  constructor(
    err: RecipientCreateTemplateRecipientsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientsInternalServerError";
  }
}

export type RecipientCreateTemplateRecipientsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateTemplateRecipientsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateTemplateRecipientsBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientsBadRequestErrorData;

  constructor(
    err: RecipientCreateTemplateRecipientsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientsBadRequestError";
  }
}

/** @internal */
export const RecipientCreateTemplateRecipientsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateTemplateRecipientsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsInternalServerErrorIssue$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsInternalServerErrorIssue$Outbound;
}

export function recipientCreateTemplateRecipientsInternalServerErrorIssueToJSON(
  recipientCreateTemplateRecipientsInternalServerErrorIssue:
    RecipientCreateTemplateRecipientsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsInternalServerErrorIssue$outboundSchema
      .parse(recipientCreateTemplateRecipientsInternalServerErrorIssue),
  );
}

export function recipientCreateTemplateRecipientsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsInternalServerError$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientsInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateTemplateRecipientsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientsInternalServerError$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsInternalServerError
  > = z.instanceof(RecipientCreateTemplateRecipientsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsInternalServerError$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsInternalServerError$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsInternalServerError$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsInternalServerError$Outbound;
}

/** @internal */
export const RecipientCreateTemplateRecipientsBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateTemplateRecipientsBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsBadRequestIssue$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsBadRequestIssue$Outbound;
}

export function recipientCreateTemplateRecipientsBadRequestIssueToJSON(
  recipientCreateTemplateRecipientsBadRequestIssue:
    RecipientCreateTemplateRecipientsBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsBadRequestIssue$outboundSchema.parse(
      recipientCreateTemplateRecipientsBadRequestIssue,
    ),
  );
}

export function recipientCreateTemplateRecipientsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsBadRequestError$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientsBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientsBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateTemplateRecipientsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientsBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientsBadRequestError$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsBadRequestError
  > = z.instanceof(RecipientCreateTemplateRecipientsBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientsBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsBadRequestError$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsBadRequestError$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsBadRequestError$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsBadRequestError$Outbound;
}
