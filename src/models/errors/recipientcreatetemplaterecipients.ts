/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateTemplateRecipientsTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientCreateTemplateRecipientsTemplatesRecipientsIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientCreateTemplateRecipientsTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody";
  }
}

export type RecipientCreateTemplateRecipientsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateTemplateRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateTemplateRecipientsResponseBody extends Error {
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateTemplateRecipientsResponseBodyData;

  constructor(err: RecipientCreateTemplateRecipientsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateTemplateRecipientsResponseBody";
  }
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$Outbound;
}

export function recipientCreateTemplateRecipientsTemplatesRecipientsIssuesToJSON(
  recipientCreateTemplateRecipientsTemplatesRecipientsIssues:
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema
      .parse(recipientCreateTemplateRecipientsTemplatesRecipientsIssues),
  );
}

export function recipientCreateTemplateRecipientsTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientsTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody
  > = z.instanceof(
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateTemplateRecipientsTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientCreateTemplateRecipientsIssues$inboundSchema: z.ZodType<
  RecipientCreateTemplateRecipientsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientCreateTemplateRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateTemplateRecipientsIssues$outboundSchema: z.ZodType<
  RecipientCreateTemplateRecipientsIssues$Outbound,
  z.ZodTypeDef,
  RecipientCreateTemplateRecipientsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsIssues$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsIssues$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsIssues$Outbound;
}

export function recipientCreateTemplateRecipientsIssuesToJSON(
  recipientCreateTemplateRecipientsIssues:
    RecipientCreateTemplateRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsIssues$outboundSchema.parse(
      recipientCreateTemplateRecipientsIssues,
    ),
  );
}

export function recipientCreateTemplateRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientCreateTemplateRecipientsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientCreateTemplateRecipientsResponseBody(v);
    });

/** @internal */
export type RecipientCreateTemplateRecipientsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateTemplateRecipientsIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsResponseBody
  > = z.instanceof(RecipientCreateTemplateRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientCreateTemplateRecipientsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsResponseBody$Outbound;
}
