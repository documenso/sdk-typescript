/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientCreateDocumentRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientCreateDocumentRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientCreateDocumentRecipientInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientInternalServerErrorData;

  constructor(
    err: RecipientCreateDocumentRecipientInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateDocumentRecipientInternalServerError";
  }
}

export type RecipientCreateDocumentRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientCreateDocumentRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientCreateDocumentRecipientBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientCreateDocumentRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientCreateDocumentRecipientBadRequestErrorData;

  constructor(
    err: RecipientCreateDocumentRecipientBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientCreateDocumentRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientCreateDocumentRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateDocumentRecipientInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientCreateDocumentRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientInternalServerErrorIssue$Outbound;
}

export function recipientCreateDocumentRecipientInternalServerErrorIssueToJSON(
  recipientCreateDocumentRecipientInternalServerErrorIssue:
    RecipientCreateDocumentRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientInternalServerErrorIssue$outboundSchema
      .parse(recipientCreateDocumentRecipientInternalServerErrorIssue),
  );
}

export function recipientCreateDocumentRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateDocumentRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateDocumentRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateDocumentRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateDocumentRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientInternalServerError
  > = z.instanceof(RecipientCreateDocumentRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateDocumentRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientInternalServerError$ {
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientCreateDocumentRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientCreateDocumentRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientCreateDocumentRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientBadRequestIssue$Outbound;
}

export function recipientCreateDocumentRecipientBadRequestIssueToJSON(
  recipientCreateDocumentRecipientBadRequestIssue:
    RecipientCreateDocumentRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientCreateDocumentRecipientBadRequestIssue$outboundSchema.parse(
      recipientCreateDocumentRecipientBadRequestIssue,
    ),
  );
}

export function recipientCreateDocumentRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateDocumentRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateDocumentRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateDocumentRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientCreateDocumentRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientCreateDocumentRecipientBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientCreateDocumentRecipientBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientCreateDocumentRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientCreateDocumentRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientCreateDocumentRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientCreateDocumentRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientCreateDocumentRecipientBadRequestError
  > = z.instanceof(RecipientCreateDocumentRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientCreateDocumentRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateDocumentRecipientBadRequestError$ {
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateDocumentRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateDocumentRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientCreateDocumentRecipientBadRequestError$Outbound` instead. */
  export type Outbound =
    RecipientCreateDocumentRecipientBadRequestError$Outbound;
}
