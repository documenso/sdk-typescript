/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentFindDocumentsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentFindDocumentsInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindDocumentsInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentFindDocumentsInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindDocumentsInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindDocumentsInternalServerErrorData;

  constructor(
    err: DocumentFindDocumentsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindDocumentsInternalServerError";
  }
}

export type DocumentFindDocumentsNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentFindDocumentsNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindDocumentsNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentFindDocumentsNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindDocumentsNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindDocumentsNotFoundErrorData;

  constructor(
    err: DocumentFindDocumentsNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindDocumentsNotFoundError";
  }
}

export type DocumentFindDocumentsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentFindDocumentsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentFindDocumentsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentFindDocumentsBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentFindDocumentsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentFindDocumentsBadRequestErrorData;

  constructor(
    err: DocumentFindDocumentsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentFindDocumentsBadRequestError";
  }
}

/** @internal */
export const DocumentFindDocumentsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentFindDocumentsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentFindDocumentsInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindDocumentsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentFindDocumentsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentFindDocumentsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsInternalServerErrorIssue$ {
  /** @deprecated use `DocumentFindDocumentsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsInternalServerErrorIssue$Outbound;
}

export function documentFindDocumentsInternalServerErrorIssueToJSON(
  documentFindDocumentsInternalServerErrorIssue:
    DocumentFindDocumentsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentFindDocumentsInternalServerErrorIssue$outboundSchema.parse(
      documentFindDocumentsInternalServerErrorIssue,
    ),
  );
}

export function documentFindDocumentsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentFindDocumentsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentFindDocumentsInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentFindDocumentsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsInternalServerError$inboundSchema: z.ZodType<
  DocumentFindDocumentsInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentFindDocumentsInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindDocumentsInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindDocumentsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentFindDocumentsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentFindDocumentsInternalServerError$outboundSchema: z.ZodType<
  DocumentFindDocumentsInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsInternalServerError
> = z.instanceof(DocumentFindDocumentsInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentFindDocumentsInternalServerErrorIssue$outboundSchema
      ),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsInternalServerError$ {
  /** @deprecated use `DocumentFindDocumentsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsInternalServerError$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsInternalServerError$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsInternalServerError$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsInternalServerError$Outbound;
}

/** @internal */
export const DocumentFindDocumentsNotFoundIssue$inboundSchema: z.ZodType<
  DocumentFindDocumentsNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentFindDocumentsNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindDocumentsNotFoundIssue$outboundSchema: z.ZodType<
  DocumentFindDocumentsNotFoundIssue$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsNotFoundIssue$ {
  /** @deprecated use `DocumentFindDocumentsNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsNotFoundIssue$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsNotFoundIssue$Outbound;
}

export function documentFindDocumentsNotFoundIssueToJSON(
  documentFindDocumentsNotFoundIssue: DocumentFindDocumentsNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentFindDocumentsNotFoundIssue$outboundSchema.parse(
      documentFindDocumentsNotFoundIssue,
    ),
  );
}

export function documentFindDocumentsNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentFindDocumentsNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsNotFoundError$inboundSchema: z.ZodType<
  DocumentFindDocumentsNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentFindDocumentsNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindDocumentsNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindDocumentsNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentFindDocumentsNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentFindDocumentsNotFoundError$outboundSchema: z.ZodType<
  DocumentFindDocumentsNotFoundError$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsNotFoundError
> = z.instanceof(DocumentFindDocumentsNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentFindDocumentsNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsNotFoundError$ {
  /** @deprecated use `DocumentFindDocumentsNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsNotFoundError$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsNotFoundError$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsNotFoundError$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsNotFoundError$Outbound;
}

/** @internal */
export const DocumentFindDocumentsBadRequestIssue$inboundSchema: z.ZodType<
  DocumentFindDocumentsBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentFindDocumentsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentFindDocumentsBadRequestIssue$outboundSchema: z.ZodType<
  DocumentFindDocumentsBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsBadRequestIssue$ {
  /** @deprecated use `DocumentFindDocumentsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsBadRequestIssue$Outbound;
}

export function documentFindDocumentsBadRequestIssueToJSON(
  documentFindDocumentsBadRequestIssue: DocumentFindDocumentsBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentFindDocumentsBadRequestIssue$outboundSchema.parse(
      documentFindDocumentsBadRequestIssue,
    ),
  );
}

export function documentFindDocumentsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentFindDocumentsBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsBadRequestError$inboundSchema: z.ZodType<
  DocumentFindDocumentsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentFindDocumentsBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentFindDocumentsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentFindDocumentsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentFindDocumentsBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentFindDocumentsBadRequestError$outboundSchema: z.ZodType<
  DocumentFindDocumentsBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsBadRequestError
> = z.instanceof(DocumentFindDocumentsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentFindDocumentsBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsBadRequestError$ {
  /** @deprecated use `DocumentFindDocumentsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsBadRequestError$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsBadRequestError$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsBadRequestError$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsBadRequestError$Outbound;
}
