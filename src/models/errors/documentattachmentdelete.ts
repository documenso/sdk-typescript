/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentAttachmentDeleteInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentAttachmentDeleteInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentDeleteInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentAttachmentDeleteInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentAttachmentDeleteInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentDeleteInternalServerErrorData;

  constructor(
    err: DocumentAttachmentDeleteInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentDeleteInternalServerError";
  }
}

export type DocumentAttachmentDeleteBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentAttachmentDeleteBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentDeleteBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentAttachmentDeleteBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentDeleteBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentDeleteBadRequestErrorData;

  constructor(
    err: DocumentAttachmentDeleteBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentDeleteBadRequestError";
  }
}

/** @internal */
export const DocumentAttachmentDeleteInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentAttachmentDeleteInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentAttachmentDeleteInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentDeleteInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentAttachmentDeleteInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentDeleteInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentDeleteInternalServerErrorIssue$ {
  /** @deprecated use `DocumentAttachmentDeleteInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentDeleteInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentDeleteInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentAttachmentDeleteInternalServerErrorIssue$Outbound;
}

export function documentAttachmentDeleteInternalServerErrorIssueToJSON(
  documentAttachmentDeleteInternalServerErrorIssue:
    DocumentAttachmentDeleteInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentDeleteInternalServerErrorIssue$outboundSchema.parse(
      documentAttachmentDeleteInternalServerErrorIssue,
    ),
  );
}

export function documentAttachmentDeleteInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentDeleteInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentDeleteInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentDeleteInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentDeleteInternalServerError$inboundSchema:
  z.ZodType<
    DocumentAttachmentDeleteInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentAttachmentDeleteInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentAttachmentDeleteInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentAttachmentDeleteInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentAttachmentDeleteInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentAttachmentDeleteInternalServerError$outboundSchema:
  z.ZodType<
    DocumentAttachmentDeleteInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentDeleteInternalServerError
  > = z.instanceof(DocumentAttachmentDeleteInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentAttachmentDeleteInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentDeleteInternalServerError$ {
  /** @deprecated use `DocumentAttachmentDeleteInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentDeleteInternalServerError$inboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentDeleteInternalServerError$outboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteInternalServerError$Outbound` instead. */
  export type Outbound = DocumentAttachmentDeleteInternalServerError$Outbound;
}

/** @internal */
export const DocumentAttachmentDeleteBadRequestIssue$inboundSchema: z.ZodType<
  DocumentAttachmentDeleteBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentAttachmentDeleteBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentDeleteBadRequestIssue$outboundSchema: z.ZodType<
  DocumentAttachmentDeleteBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentDeleteBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentDeleteBadRequestIssue$ {
  /** @deprecated use `DocumentAttachmentDeleteBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentDeleteBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentDeleteBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentAttachmentDeleteBadRequestIssue$Outbound;
}

export function documentAttachmentDeleteBadRequestIssueToJSON(
  documentAttachmentDeleteBadRequestIssue:
    DocumentAttachmentDeleteBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentDeleteBadRequestIssue$outboundSchema.parse(
      documentAttachmentDeleteBadRequestIssue,
    ),
  );
}

export function documentAttachmentDeleteBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentDeleteBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentDeleteBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentDeleteBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentDeleteBadRequestError$inboundSchema: z.ZodType<
  DocumentAttachmentDeleteBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentDeleteBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentDeleteBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentDeleteBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentDeleteBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentAttachmentDeleteBadRequestError$outboundSchema: z.ZodType<
  DocumentAttachmentDeleteBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentDeleteBadRequestError
> = z.instanceof(DocumentAttachmentDeleteBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentAttachmentDeleteBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentDeleteBadRequestError$ {
  /** @deprecated use `DocumentAttachmentDeleteBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentDeleteBadRequestError$inboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentDeleteBadRequestError$outboundSchema;
  /** @deprecated use `DocumentAttachmentDeleteBadRequestError$Outbound` instead. */
  export type Outbound = DocumentAttachmentDeleteBadRequestError$Outbound;
}
