/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentGetInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentGetInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentGetInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentGetInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetInternalServerErrorData;

  constructor(
    err: DocumentGetInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetInternalServerError";
  }
}

export type DocumentGetNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type DocumentGetNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class DocumentGetNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<DocumentGetNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetNotFoundErrorData;

  constructor(
    err: DocumentGetNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetNotFoundError";
  }
}

export type DocumentGetBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentGetBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentGetBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentGetBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentGetBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentGetBadRequestErrorData;

  constructor(
    err: DocumentGetBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentGetBadRequestError";
  }
}

/** @internal */
export const DocumentGetInternalServerErrorIssue$inboundSchema: z.ZodType<
  DocumentGetInternalServerErrorIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentGetInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetInternalServerErrorIssue$outboundSchema: z.ZodType<
  DocumentGetInternalServerErrorIssue$Outbound,
  z.ZodTypeDef,
  DocumentGetInternalServerErrorIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetInternalServerErrorIssue$ {
  /** @deprecated use `DocumentGetInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentGetInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentGetInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentGetInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentGetInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentGetInternalServerErrorIssue$Outbound;
}

export function documentGetInternalServerErrorIssueToJSON(
  documentGetInternalServerErrorIssue: DocumentGetInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentGetInternalServerErrorIssue$outboundSchema.parse(
      documentGetInternalServerErrorIssue,
    ),
  );
}

export function documentGetInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetInternalServerErrorIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentGetInternalServerErrorIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetInternalServerError$inboundSchema: z.ZodType<
  DocumentGetInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentGetInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentGetInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentGetInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentGetInternalServerErrorIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentGetInternalServerError$outboundSchema: z.ZodType<
  DocumentGetInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentGetInternalServerError
> = z.instanceof(DocumentGetInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentGetInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetInternalServerError$ {
  /** @deprecated use `DocumentGetInternalServerError$inboundSchema` instead. */
  export const inboundSchema = DocumentGetInternalServerError$inboundSchema;
  /** @deprecated use `DocumentGetInternalServerError$outboundSchema` instead. */
  export const outboundSchema = DocumentGetInternalServerError$outboundSchema;
  /** @deprecated use `DocumentGetInternalServerError$Outbound` instead. */
  export type Outbound = DocumentGetInternalServerError$Outbound;
}

/** @internal */
export const DocumentGetNotFoundIssue$inboundSchema: z.ZodType<
  DocumentGetNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentGetNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetNotFoundIssue$outboundSchema: z.ZodType<
  DocumentGetNotFoundIssue$Outbound,
  z.ZodTypeDef,
  DocumentGetNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetNotFoundIssue$ {
  /** @deprecated use `DocumentGetNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentGetNotFoundIssue$inboundSchema;
  /** @deprecated use `DocumentGetNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentGetNotFoundIssue$outboundSchema;
  /** @deprecated use `DocumentGetNotFoundIssue$Outbound` instead. */
  export type Outbound = DocumentGetNotFoundIssue$Outbound;
}

export function documentGetNotFoundIssueToJSON(
  documentGetNotFoundIssue: DocumentGetNotFoundIssue,
): string {
  return JSON.stringify(
    DocumentGetNotFoundIssue$outboundSchema.parse(documentGetNotFoundIssue),
  );
}

export function documentGetNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetNotFoundError$inboundSchema: z.ZodType<
  DocumentGetNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentGetNotFoundIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentGetNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentGetNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentGetNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentGetNotFoundError$outboundSchema: z.ZodType<
  DocumentGetNotFoundError$Outbound,
  z.ZodTypeDef,
  DocumentGetNotFoundError
> = z.instanceof(DocumentGetNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentGetNotFoundIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetNotFoundError$ {
  /** @deprecated use `DocumentGetNotFoundError$inboundSchema` instead. */
  export const inboundSchema = DocumentGetNotFoundError$inboundSchema;
  /** @deprecated use `DocumentGetNotFoundError$outboundSchema` instead. */
  export const outboundSchema = DocumentGetNotFoundError$outboundSchema;
  /** @deprecated use `DocumentGetNotFoundError$Outbound` instead. */
  export type Outbound = DocumentGetNotFoundError$Outbound;
}

/** @internal */
export const DocumentGetBadRequestIssue$inboundSchema: z.ZodType<
  DocumentGetBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentGetBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentGetBadRequestIssue$outboundSchema: z.ZodType<
  DocumentGetBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentGetBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetBadRequestIssue$ {
  /** @deprecated use `DocumentGetBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = DocumentGetBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentGetBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema = DocumentGetBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentGetBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentGetBadRequestIssue$Outbound;
}

export function documentGetBadRequestIssueToJSON(
  documentGetBadRequestIssue: DocumentGetBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentGetBadRequestIssue$outboundSchema.parse(documentGetBadRequestIssue),
  );
}

export function documentGetBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentGetBadRequestError$inboundSchema: z.ZodType<
  DocumentGetBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentGetBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentGetBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentGetBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentGetBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentGetBadRequestError$outboundSchema: z.ZodType<
  DocumentGetBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentGetBadRequestError
> = z.instanceof(DocumentGetBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => DocumentGetBadRequestIssue$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetBadRequestError$ {
  /** @deprecated use `DocumentGetBadRequestError$inboundSchema` instead. */
  export const inboundSchema = DocumentGetBadRequestError$inboundSchema;
  /** @deprecated use `DocumentGetBadRequestError$outboundSchema` instead. */
  export const outboundSchema = DocumentGetBadRequestError$outboundSchema;
  /** @deprecated use `DocumentGetBadRequestError$Outbound` instead. */
  export type Outbound = DocumentGetBadRequestError$Outbound;
}
