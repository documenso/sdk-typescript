/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EnvelopeAttachmentFindInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type EnvelopeAttachmentFindInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentFindInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class EnvelopeAttachmentFindInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentFindInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentFindInternalServerErrorData;

  constructor(
    err: EnvelopeAttachmentFindInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentFindInternalServerError";
  }
}

export type EnvelopeAttachmentFindNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type EnvelopeAttachmentFindNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentFindNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class EnvelopeAttachmentFindNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentFindNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentFindNotFoundErrorData;

  constructor(
    err: EnvelopeAttachmentFindNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentFindNotFoundError";
  }
}

export type EnvelopeAttachmentFindBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EnvelopeAttachmentFindBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentFindBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class EnvelopeAttachmentFindBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<EnvelopeAttachmentFindBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: EnvelopeAttachmentFindBadRequestErrorData;

  constructor(
    err: EnvelopeAttachmentFindBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EnvelopeAttachmentFindBadRequestError";
  }
}

/** @internal */
export const EnvelopeAttachmentFindInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EnvelopeAttachmentFindInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EnvelopeAttachmentFindInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentFindInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentFindInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentFindInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindInternalServerErrorIssue$ {
  /** @deprecated use `EnvelopeAttachmentFindInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EnvelopeAttachmentFindInternalServerErrorIssue$Outbound;
}

export function envelopeAttachmentFindInternalServerErrorIssueToJSON(
  envelopeAttachmentFindInternalServerErrorIssue:
    EnvelopeAttachmentFindInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindInternalServerErrorIssue$outboundSchema.parse(
      envelopeAttachmentFindInternalServerErrorIssue,
    ),
  );
}

export function envelopeAttachmentFindInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EnvelopeAttachmentFindInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentFindInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EnvelopeAttachmentFindInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentFindInternalServerError$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentFindInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentFindInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentFindInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<EnvelopeAttachmentFindInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const EnvelopeAttachmentFindInternalServerError$outboundSchema:
  z.ZodType<
    EnvelopeAttachmentFindInternalServerError$Outbound,
    z.ZodTypeDef,
    EnvelopeAttachmentFindInternalServerError
  > = z.instanceof(EnvelopeAttachmentFindInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EnvelopeAttachmentFindInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindInternalServerError$ {
  /** @deprecated use `EnvelopeAttachmentFindInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindInternalServerError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindInternalServerError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindInternalServerError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindInternalServerError$Outbound;
}

/** @internal */
export const EnvelopeAttachmentFindNotFoundIssue$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type EnvelopeAttachmentFindNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentFindNotFoundIssue$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindNotFoundIssue$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindNotFoundIssue$ {
  /** @deprecated use `EnvelopeAttachmentFindNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindNotFoundIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindNotFoundIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindNotFoundIssue$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindNotFoundIssue$Outbound;
}

export function envelopeAttachmentFindNotFoundIssueToJSON(
  envelopeAttachmentFindNotFoundIssue: EnvelopeAttachmentFindNotFoundIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindNotFoundIssue$outboundSchema.parse(
      envelopeAttachmentFindNotFoundIssue,
    ),
  );
}

export function envelopeAttachmentFindNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentFindNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentFindNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentFindNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentFindNotFoundError$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentFindNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentFindNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentFindNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentFindNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const EnvelopeAttachmentFindNotFoundError$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindNotFoundError$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindNotFoundError
> = z.instanceof(EnvelopeAttachmentFindNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => EnvelopeAttachmentFindNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindNotFoundError$ {
  /** @deprecated use `EnvelopeAttachmentFindNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindNotFoundError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindNotFoundError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindNotFoundError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindNotFoundError$Outbound;
}

/** @internal */
export const EnvelopeAttachmentFindBadRequestIssue$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type EnvelopeAttachmentFindBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const EnvelopeAttachmentFindBadRequestIssue$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindBadRequestIssue$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindBadRequestIssue$ {
  /** @deprecated use `EnvelopeAttachmentFindBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindBadRequestIssue$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindBadRequestIssue$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindBadRequestIssue$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindBadRequestIssue$Outbound;
}

export function envelopeAttachmentFindBadRequestIssueToJSON(
  envelopeAttachmentFindBadRequestIssue: EnvelopeAttachmentFindBadRequestIssue,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindBadRequestIssue$outboundSchema.parse(
      envelopeAttachmentFindBadRequestIssue,
    ),
  );
}

export function envelopeAttachmentFindBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentFindBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EnvelopeAttachmentFindBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentFindBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentFindBadRequestError$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => EnvelopeAttachmentFindBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new EnvelopeAttachmentFindBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type EnvelopeAttachmentFindBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<EnvelopeAttachmentFindBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const EnvelopeAttachmentFindBadRequestError$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindBadRequestError$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindBadRequestError
> = z.instanceof(EnvelopeAttachmentFindBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => EnvelopeAttachmentFindBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindBadRequestError$ {
  /** @deprecated use `EnvelopeAttachmentFindBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EnvelopeAttachmentFindBadRequestError$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EnvelopeAttachmentFindBadRequestError$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindBadRequestError$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindBadRequestError$Outbound;
}
