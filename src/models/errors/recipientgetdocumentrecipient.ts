/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBodyData;

  constructor(
    err:
      RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody";
  }
}

export type RecipientGetDocumentRecipientDocumentsRecipientsIssues = {
  message: string;
};

/**
 * Not found
 */
export type RecipientGetDocumentRecipientDocumentsRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetDocumentRecipientDocumentsRecipientsIssues>
    | undefined;
};

/**
 * Not found
 */
export class RecipientGetDocumentRecipientDocumentsRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientGetDocumentRecipientDocumentsRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetDocumentRecipientDocumentsRecipientsResponseBodyData;

  constructor(
    err: RecipientGetDocumentRecipientDocumentsRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetDocumentRecipientDocumentsRecipientsResponseBody";
  }
}

export type RecipientGetDocumentRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientGetDocumentRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientGetDocumentRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientGetDocumentRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientGetDocumentRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetDocumentRecipientResponseBodyData;

  constructor(err: RecipientGetDocumentRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetDocumentRecipientResponseBody";
  }
}

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$inboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$outboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$Outbound,
    z.ZodTypeDef,
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$ {
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$Outbound` instead. */
  export type Outbound =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$Outbound;
}

export function recipientGetDocumentRecipientDocumentsRecipientsResponseIssuesToJSON(
  recipientGetDocumentRecipientDocumentsRecipientsResponseIssues:
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues,
): string {
  return JSON.stringify(
    RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$outboundSchema
      .parse(recipientGetDocumentRecipientDocumentsRecipientsResponseIssues),
  );
}

export function recipientGetDocumentRecipientDocumentsRecipientsResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$inboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody
  > = z.instanceof(
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetDocumentRecipientDocumentsRecipientsResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$ {
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseResponseBody$Outbound;
}

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetDocumentRecipientDocumentsRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientGetDocumentRecipientDocumentsRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientDocumentsRecipientsIssues$ {
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientGetDocumentRecipientDocumentsRecipientsIssues$Outbound;
}

export function recipientGetDocumentRecipientDocumentsRecipientsIssuesToJSON(
  recipientGetDocumentRecipientDocumentsRecipientsIssues:
    RecipientGetDocumentRecipientDocumentsRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientGetDocumentRecipientDocumentsRecipientsIssues$outboundSchema.parse(
      recipientGetDocumentRecipientDocumentsRecipientsIssues,
    ),
  );
}

export function recipientGetDocumentRecipientDocumentsRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetDocumentRecipientDocumentsRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetDocumentRecipientDocumentsRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetDocumentRecipientDocumentsRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientGetDocumentRecipientDocumentsRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientGetDocumentRecipientDocumentsRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientGetDocumentRecipientDocumentsRecipientsIssues$Outbound>
      | undefined;
  };

/** @internal */
export const RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody
  > = z.instanceof(RecipientGetDocumentRecipientDocumentsRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetDocumentRecipientDocumentsRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$ {
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientGetDocumentRecipientDocumentsRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientGetDocumentRecipientIssues$inboundSchema: z.ZodType<
  RecipientGetDocumentRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientGetDocumentRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetDocumentRecipientIssues$outboundSchema: z.ZodType<
  RecipientGetDocumentRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientGetDocumentRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientIssues$ {
  /** @deprecated use `RecipientGetDocumentRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientGetDocumentRecipientIssues$Outbound;
}

export function recipientGetDocumentRecipientIssuesToJSON(
  recipientGetDocumentRecipientIssues: RecipientGetDocumentRecipientIssues,
): string {
  return JSON.stringify(
    RecipientGetDocumentRecipientIssues$outboundSchema.parse(
      recipientGetDocumentRecipientIssues,
    ),
  );
}

export function recipientGetDocumentRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientGetDocumentRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetDocumentRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetDocumentRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetDocumentRecipientResponseBody$inboundSchema: z.ZodType<
  RecipientGetDocumentRecipientResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => RecipientGetDocumentRecipientIssues$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new RecipientGetDocumentRecipientResponseBody(v);
  });

/** @internal */
export type RecipientGetDocumentRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientGetDocumentRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientGetDocumentRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetDocumentRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetDocumentRecipientResponseBody
  > = z.instanceof(RecipientGetDocumentRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientGetDocumentRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetDocumentRecipientResponseBody$ {
  /** @deprecated use `RecipientGetDocumentRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetDocumentRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetDocumentRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetDocumentRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientGetDocumentRecipientResponseBody$Outbound;
}
