/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldDeleteDocumentFieldInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldDeleteDocumentFieldInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteDocumentFieldInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldDeleteDocumentFieldInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldDeleteDocumentFieldInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteDocumentFieldInternalServerErrorData;

  constructor(
    err: FieldDeleteDocumentFieldInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteDocumentFieldInternalServerError";
  }
}

export type FieldDeleteDocumentFieldBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldDeleteDocumentFieldBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteDocumentFieldBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldDeleteDocumentFieldBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldDeleteDocumentFieldBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldDeleteDocumentFieldBadRequestErrorData;

  constructor(
    err: FieldDeleteDocumentFieldBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldDeleteDocumentFieldBadRequestError";
  }
}

/** @internal */
export const FieldDeleteDocumentFieldInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldDeleteDocumentFieldInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldDeleteDocumentFieldInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteDocumentFieldInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldDeleteDocumentFieldInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldDeleteDocumentFieldInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteDocumentFieldInternalServerErrorIssue$ {
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteDocumentFieldInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteDocumentFieldInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldDeleteDocumentFieldInternalServerErrorIssue$Outbound;
}

export function fieldDeleteDocumentFieldInternalServerErrorIssueToJSON(
  fieldDeleteDocumentFieldInternalServerErrorIssue:
    FieldDeleteDocumentFieldInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldDeleteDocumentFieldInternalServerErrorIssue$outboundSchema.parse(
      fieldDeleteDocumentFieldInternalServerErrorIssue,
    ),
  );
}

export function fieldDeleteDocumentFieldInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldDeleteDocumentFieldInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldDeleteDocumentFieldInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldDeleteDocumentFieldInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldDeleteDocumentFieldInternalServerError$inboundSchema:
  z.ZodType<
    FieldDeleteDocumentFieldInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldDeleteDocumentFieldInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldDeleteDocumentFieldInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldDeleteDocumentFieldInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldDeleteDocumentFieldInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldDeleteDocumentFieldInternalServerError$outboundSchema:
  z.ZodType<
    FieldDeleteDocumentFieldInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldDeleteDocumentFieldInternalServerError
  > = z.instanceof(FieldDeleteDocumentFieldInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldDeleteDocumentFieldInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteDocumentFieldInternalServerError$ {
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteDocumentFieldInternalServerError$inboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteDocumentFieldInternalServerError$outboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldInternalServerError$Outbound` instead. */
  export type Outbound = FieldDeleteDocumentFieldInternalServerError$Outbound;
}

/** @internal */
export const FieldDeleteDocumentFieldBadRequestIssue$inboundSchema: z.ZodType<
  FieldDeleteDocumentFieldBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldDeleteDocumentFieldBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldDeleteDocumentFieldBadRequestIssue$outboundSchema: z.ZodType<
  FieldDeleteDocumentFieldBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldDeleteDocumentFieldBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteDocumentFieldBadRequestIssue$ {
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteDocumentFieldBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteDocumentFieldBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldDeleteDocumentFieldBadRequestIssue$Outbound;
}

export function fieldDeleteDocumentFieldBadRequestIssueToJSON(
  fieldDeleteDocumentFieldBadRequestIssue:
    FieldDeleteDocumentFieldBadRequestIssue,
): string {
  return JSON.stringify(
    FieldDeleteDocumentFieldBadRequestIssue$outboundSchema.parse(
      fieldDeleteDocumentFieldBadRequestIssue,
    ),
  );
}

export function fieldDeleteDocumentFieldBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldDeleteDocumentFieldBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldDeleteDocumentFieldBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldDeleteDocumentFieldBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldDeleteDocumentFieldBadRequestError$inboundSchema: z.ZodType<
  FieldDeleteDocumentFieldBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldDeleteDocumentFieldBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldDeleteDocumentFieldBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldDeleteDocumentFieldBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldDeleteDocumentFieldBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldDeleteDocumentFieldBadRequestError$outboundSchema: z.ZodType<
  FieldDeleteDocumentFieldBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldDeleteDocumentFieldBadRequestError
> = z.instanceof(FieldDeleteDocumentFieldBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldDeleteDocumentFieldBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteDocumentFieldBadRequestError$ {
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldDeleteDocumentFieldBadRequestError$inboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldDeleteDocumentFieldBadRequestError$outboundSchema;
  /** @deprecated use `FieldDeleteDocumentFieldBadRequestError$Outbound` instead. */
  export type Outbound = FieldDeleteDocumentFieldBadRequestError$Outbound;
}
