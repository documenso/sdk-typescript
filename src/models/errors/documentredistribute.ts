/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentRedistributeInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentRedistributeInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentRedistributeInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentRedistributeInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<DocumentRedistributeInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentRedistributeInternalServerErrorData;

  constructor(
    err: DocumentRedistributeInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentRedistributeInternalServerError";
  }
}

export type DocumentRedistributeBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentRedistributeBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentRedistributeBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentRedistributeBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentRedistributeBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentRedistributeBadRequestErrorData;

  constructor(
    err: DocumentRedistributeBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentRedistributeBadRequestError";
  }
}

/** @internal */
export const DocumentRedistributeInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentRedistributeInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentRedistributeInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentRedistributeInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentRedistributeInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentRedistributeInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRedistributeInternalServerErrorIssue$ {
  /** @deprecated use `DocumentRedistributeInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentRedistributeInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentRedistributeInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentRedistributeInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentRedistributeInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = DocumentRedistributeInternalServerErrorIssue$Outbound;
}

export function documentRedistributeInternalServerErrorIssueToJSON(
  documentRedistributeInternalServerErrorIssue:
    DocumentRedistributeInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentRedistributeInternalServerErrorIssue$outboundSchema.parse(
      documentRedistributeInternalServerErrorIssue,
    ),
  );
}

export function documentRedistributeInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentRedistributeInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentRedistributeInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentRedistributeInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentRedistributeInternalServerError$inboundSchema: z.ZodType<
  DocumentRedistributeInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentRedistributeInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentRedistributeInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentRedistributeInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentRedistributeInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentRedistributeInternalServerError$outboundSchema: z.ZodType<
  DocumentRedistributeInternalServerError$Outbound,
  z.ZodTypeDef,
  DocumentRedistributeInternalServerError
> = z.instanceof(DocumentRedistributeInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentRedistributeInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRedistributeInternalServerError$ {
  /** @deprecated use `DocumentRedistributeInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentRedistributeInternalServerError$inboundSchema;
  /** @deprecated use `DocumentRedistributeInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentRedistributeInternalServerError$outboundSchema;
  /** @deprecated use `DocumentRedistributeInternalServerError$Outbound` instead. */
  export type Outbound = DocumentRedistributeInternalServerError$Outbound;
}

/** @internal */
export const DocumentRedistributeBadRequestIssue$inboundSchema: z.ZodType<
  DocumentRedistributeBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentRedistributeBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentRedistributeBadRequestIssue$outboundSchema: z.ZodType<
  DocumentRedistributeBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentRedistributeBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRedistributeBadRequestIssue$ {
  /** @deprecated use `DocumentRedistributeBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentRedistributeBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentRedistributeBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentRedistributeBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentRedistributeBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentRedistributeBadRequestIssue$Outbound;
}

export function documentRedistributeBadRequestIssueToJSON(
  documentRedistributeBadRequestIssue: DocumentRedistributeBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentRedistributeBadRequestIssue$outboundSchema.parse(
      documentRedistributeBadRequestIssue,
    ),
  );
}

export function documentRedistributeBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<DocumentRedistributeBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentRedistributeBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentRedistributeBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentRedistributeBadRequestError$inboundSchema: z.ZodType<
  DocumentRedistributeBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentRedistributeBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentRedistributeBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentRedistributeBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentRedistributeBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentRedistributeBadRequestError$outboundSchema: z.ZodType<
  DocumentRedistributeBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentRedistributeBadRequestError
> = z.instanceof(DocumentRedistributeBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentRedistributeBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRedistributeBadRequestError$ {
  /** @deprecated use `DocumentRedistributeBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentRedistributeBadRequestError$inboundSchema;
  /** @deprecated use `DocumentRedistributeBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentRedistributeBadRequestError$outboundSchema;
  /** @deprecated use `DocumentRedistributeBadRequestError$Outbound` instead. */
  export type Outbound = DocumentRedistributeBadRequestError$Outbound;
}
