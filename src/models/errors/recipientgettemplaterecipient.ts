/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientGetTemplateRecipientInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientGetTemplateRecipientInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class RecipientGetTemplateRecipientInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetTemplateRecipientInternalServerErrorData;

  constructor(
    err: RecipientGetTemplateRecipientInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetTemplateRecipientInternalServerError";
  }
}

export type RecipientGetTemplateRecipientNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type RecipientGetTemplateRecipientNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientGetTemplateRecipientNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class RecipientGetTemplateRecipientNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<RecipientGetTemplateRecipientNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetTemplateRecipientNotFoundErrorData;

  constructor(
    err: RecipientGetTemplateRecipientNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetTemplateRecipientNotFoundError";
  }
}

export type RecipientGetTemplateRecipientBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientGetTemplateRecipientBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<RecipientGetTemplateRecipientBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientGetTemplateRecipientBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<RecipientGetTemplateRecipientBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetTemplateRecipientBadRequestErrorData;

  constructor(
    err: RecipientGetTemplateRecipientBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetTemplateRecipientBadRequestError";
  }
}

/** @internal */
export const RecipientGetTemplateRecipientInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetTemplateRecipientInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetTemplateRecipientInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientInternalServerErrorIssue$ {
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientInternalServerErrorIssue$Outbound;
}

export function recipientGetTemplateRecipientInternalServerErrorIssueToJSON(
  recipientGetTemplateRecipientInternalServerErrorIssue:
    RecipientGetTemplateRecipientInternalServerErrorIssue,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientInternalServerErrorIssue$outboundSchema.parse(
      recipientGetTemplateRecipientInternalServerErrorIssue,
    ),
  );
}

export function recipientGetTemplateRecipientInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetTemplateRecipientInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientGetTemplateRecipientInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientInternalServerError$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientGetTemplateRecipientInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientGetTemplateRecipientInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientGetTemplateRecipientInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientGetTemplateRecipientInternalServerError$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientInternalServerError$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientInternalServerError
  > = z.instanceof(RecipientGetTemplateRecipientInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetTemplateRecipientInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientInternalServerError$ {
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientInternalServerError$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientInternalServerError$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientInternalServerError$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientInternalServerError$Outbound;
}

/** @internal */
export const RecipientGetTemplateRecipientNotFoundIssue$inboundSchema:
  z.ZodType<RecipientGetTemplateRecipientNotFoundIssue, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type RecipientGetTemplateRecipientNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetTemplateRecipientNotFoundIssue$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientNotFoundIssue$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientNotFoundIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientNotFoundIssue$ {
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientNotFoundIssue$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientNotFoundIssue$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundIssue$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientNotFoundIssue$Outbound;
}

export function recipientGetTemplateRecipientNotFoundIssueToJSON(
  recipientGetTemplateRecipientNotFoundIssue:
    RecipientGetTemplateRecipientNotFoundIssue,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientNotFoundIssue$outboundSchema.parse(
      recipientGetTemplateRecipientNotFoundIssue,
    ),
  );
}

export function recipientGetTemplateRecipientNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetTemplateRecipientNotFoundIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientNotFoundIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientGetTemplateRecipientNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientNotFoundError$inboundSchema:
  z.ZodType<RecipientGetTemplateRecipientNotFoundError, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientGetTemplateRecipientNotFoundIssue$inboundSchema),
      ).optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new RecipientGetTemplateRecipientNotFoundError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type RecipientGetTemplateRecipientNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientNotFoundIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientGetTemplateRecipientNotFoundError$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientNotFoundError$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientNotFoundError
  > = z.instanceof(RecipientGetTemplateRecipientNotFoundError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientGetTemplateRecipientNotFoundIssue$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientNotFoundError$ {
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientNotFoundError$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientNotFoundError$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientNotFoundError$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientNotFoundError$Outbound;
}

/** @internal */
export const RecipientGetTemplateRecipientBadRequestIssue$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetTemplateRecipientBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetTemplateRecipientBadRequestIssue$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientBadRequestIssue$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientBadRequestIssue$ {
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientBadRequestIssue$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientBadRequestIssue$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestIssue$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientBadRequestIssue$Outbound;
}

export function recipientGetTemplateRecipientBadRequestIssueToJSON(
  recipientGetTemplateRecipientBadRequestIssue:
    RecipientGetTemplateRecipientBadRequestIssue,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientBadRequestIssue$outboundSchema.parse(
      recipientGetTemplateRecipientBadRequestIssue,
    ),
  );
}

export function recipientGetTemplateRecipientBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetTemplateRecipientBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientGetTemplateRecipientBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientBadRequestError$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => RecipientGetTemplateRecipientBadRequestIssue$inboundSchema),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new RecipientGetTemplateRecipientBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type RecipientGetTemplateRecipientBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const RecipientGetTemplateRecipientBadRequestError$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientBadRequestError$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientBadRequestError
  > = z.instanceof(RecipientGetTemplateRecipientBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetTemplateRecipientBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientBadRequestError$ {
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientBadRequestError$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientBadRequestError$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientBadRequestError$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientBadRequestError$Outbound;
}
