/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$:
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBodyData;

  constructor(
    err:
      RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody";
  }
}

export type RecipientGetTemplateRecipientTemplatesRecipientsIssues = {
  message: string;
};

/**
 * Not found
 */
export type RecipientGetTemplateRecipientTemplatesRecipientsResponseBodyData = {
  message: string;
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientTemplatesRecipientsIssues>
    | undefined;
};

/**
 * Not found
 */
export class RecipientGetTemplateRecipientTemplatesRecipientsResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<RecipientGetTemplateRecipientTemplatesRecipientsIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetTemplateRecipientTemplatesRecipientsResponseBodyData;

  constructor(
    err: RecipientGetTemplateRecipientTemplatesRecipientsResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetTemplateRecipientTemplatesRecipientsResponseBody";
  }
}

export type RecipientGetTemplateRecipientIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type RecipientGetTemplateRecipientResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<RecipientGetTemplateRecipientIssues> | undefined;
};

/**
 * Invalid input data
 */
export class RecipientGetTemplateRecipientResponseBody extends Error {
  code: string;
  issues?: Array<RecipientGetTemplateRecipientIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: RecipientGetTemplateRecipientResponseBodyData;

  constructor(err: RecipientGetTemplateRecipientResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "RecipientGetTemplateRecipientResponseBody";
  }
}

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$ {
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$Outbound;
}

export function recipientGetTemplateRecipientTemplatesRecipientsResponseIssuesToJSON(
  recipientGetTemplateRecipientTemplatesRecipientsResponseIssues:
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$outboundSchema
      .parse(recipientGetTemplateRecipientTemplatesRecipientsResponseIssues),
  );
}

export function recipientGetTemplateRecipientTemplatesRecipientsResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody
  > = z.instanceof(
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetTemplateRecipientTemplatesRecipientsResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$ {
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseResponseBody$Outbound;
}

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsIssues$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type RecipientGetTemplateRecipientTemplatesRecipientsIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsIssues$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsIssues$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientTemplatesRecipientsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientTemplatesRecipientsIssues$ {
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsIssues$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsIssues$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsIssues$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientTemplatesRecipientsIssues$Outbound;
}

export function recipientGetTemplateRecipientTemplatesRecipientsIssuesToJSON(
  recipientGetTemplateRecipientTemplatesRecipientsIssues:
    RecipientGetTemplateRecipientTemplatesRecipientsIssues,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientTemplatesRecipientsIssues$outboundSchema.parse(
      recipientGetTemplateRecipientTemplatesRecipientsIssues,
    ),
  );
}

export function recipientGetTemplateRecipientTemplatesRecipientsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientGetTemplateRecipientTemplatesRecipientsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientTemplatesRecipientsIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetTemplateRecipientTemplatesRecipientsIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        RecipientGetTemplateRecipientTemplatesRecipientsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new RecipientGetTemplateRecipientTemplatesRecipientsResponseBody(
        v,
      );
    });

/** @internal */
export type RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<RecipientGetTemplateRecipientTemplatesRecipientsIssues$Outbound>
      | undefined;
  };

/** @internal */
export const RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody
  > = z.instanceof(RecipientGetTemplateRecipientTemplatesRecipientsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          RecipientGetTemplateRecipientTemplatesRecipientsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$ {
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$Outbound` instead. */
  export type Outbound =
    RecipientGetTemplateRecipientTemplatesRecipientsResponseBody$Outbound;
}

/** @internal */
export const RecipientGetTemplateRecipientIssues$inboundSchema: z.ZodType<
  RecipientGetTemplateRecipientIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type RecipientGetTemplateRecipientIssues$Outbound = {
  message: string;
};

/** @internal */
export const RecipientGetTemplateRecipientIssues$outboundSchema: z.ZodType<
  RecipientGetTemplateRecipientIssues$Outbound,
  z.ZodTypeDef,
  RecipientGetTemplateRecipientIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientIssues$ {
  /** @deprecated use `RecipientGetTemplateRecipientIssues$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientIssues$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientIssues$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientIssues$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientIssues$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientIssues$Outbound;
}

export function recipientGetTemplateRecipientIssuesToJSON(
  recipientGetTemplateRecipientIssues: RecipientGetTemplateRecipientIssues,
): string {
  return JSON.stringify(
    RecipientGetTemplateRecipientIssues$outboundSchema.parse(
      recipientGetTemplateRecipientIssues,
    ),
  );
}

export function recipientGetTemplateRecipientIssuesFromJSON(
  jsonString: string,
): SafeParseResult<RecipientGetTemplateRecipientIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientGetTemplateRecipientIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientGetTemplateRecipientIssues' from JSON`,
  );
}

/** @internal */
export const RecipientGetTemplateRecipientResponseBody$inboundSchema: z.ZodType<
  RecipientGetTemplateRecipientResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => RecipientGetTemplateRecipientIssues$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new RecipientGetTemplateRecipientResponseBody(v);
  });

/** @internal */
export type RecipientGetTemplateRecipientResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<RecipientGetTemplateRecipientIssues$Outbound> | undefined;
};

/** @internal */
export const RecipientGetTemplateRecipientResponseBody$outboundSchema:
  z.ZodType<
    RecipientGetTemplateRecipientResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientGetTemplateRecipientResponseBody
  > = z.instanceof(RecipientGetTemplateRecipientResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => RecipientGetTemplateRecipientIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientGetTemplateRecipientResponseBody$ {
  /** @deprecated use `RecipientGetTemplateRecipientResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientGetTemplateRecipientResponseBody$inboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientGetTemplateRecipientResponseBody$outboundSchema;
  /** @deprecated use `RecipientGetTemplateRecipientResponseBody$Outbound` instead. */
  export type Outbound = RecipientGetTemplateRecipientResponseBody$Outbound;
}
