/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue =
  {
    message: string;
  };

/**
 * Internal server error
 */
export type EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorData =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue
      >
      | undefined;
  };

/**
 * Internal server error
 */
export class EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorData;

  constructor(
    err: EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError";
  }
}

export type EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type EmbeddingPresignCreateEmbeddingPresignTokenBadRequestErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue>
    | undefined;
};

/**
 * Invalid input data
 */
export class EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: EmbeddingPresignCreateEmbeddingPresignTokenBadRequestErrorData;

  constructor(
    err: EmbeddingPresignCreateEmbeddingPresignTokenBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError";
  }
}

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$Outbound;
}

export function embeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssueToJSON(
  embeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue:
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue,
): string {
  return JSON.stringify(
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema
      .parse(
        embeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue,
      ),
  );
}

export function embeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError(
        v,
        { request: v.request$, response: v.response$, body: v.body$ },
      );
    });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$Outbound
      >
      | undefined;
  };

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError
  > = z.instanceof(
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EmbeddingPresignCreateEmbeddingPresignTokenInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenInternalServerError$Outbound;
}

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$Outbound;
}

export function embeddingPresignCreateEmbeddingPresignTokenBadRequestIssueToJSON(
  embeddingPresignCreateEmbeddingPresignTokenBadRequestIssue:
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue,
): string {
  return JSON.stringify(
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$outboundSchema
      .parse(embeddingPresignCreateEmbeddingPresignTokenBadRequestIssue),
  );
}

export function embeddingPresignCreateEmbeddingPresignTokenBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$Outbound
      >
      | undefined;
  };

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError
  > = z.instanceof(EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          EmbeddingPresignCreateEmbeddingPresignTokenBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenBadRequestError$Outbound;
}
