/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ERRORINTERNALSERVERERRORIssues = {
  message: string;
};

/**
 * The error information
 */
export type ErrorinternalservererrorData = {
  /**
   * The error message
   */
  message: string;
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<ERRORINTERNALSERVERERRORIssues> | undefined;
};

/**
 * The error information
 */
export class Errorinternalservererror extends Error {
  /**
   * The error code
   */
  code: string;
  /**
   * An array of issues that were responsible for the error
   */
  issues?: Array<ERRORINTERNALSERVERERRORIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorinternalservererrorData;

  constructor(err: ErrorinternalservererrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "Errorinternalservererror";
  }
}

/** @internal */
export const ERRORINTERNALSERVERERRORIssues$inboundSchema: z.ZodType<
  ERRORINTERNALSERVERERRORIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type ERRORINTERNALSERVERERRORIssues$Outbound = {
  message: string;
};

/** @internal */
export const ERRORINTERNALSERVERERRORIssues$outboundSchema: z.ZodType<
  ERRORINTERNALSERVERERRORIssues$Outbound,
  z.ZodTypeDef,
  ERRORINTERNALSERVERERRORIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ERRORINTERNALSERVERERRORIssues$ {
  /** @deprecated use `ERRORINTERNALSERVERERRORIssues$inboundSchema` instead. */
  export const inboundSchema = ERRORINTERNALSERVERERRORIssues$inboundSchema;
  /** @deprecated use `ERRORINTERNALSERVERERRORIssues$outboundSchema` instead. */
  export const outboundSchema = ERRORINTERNALSERVERERRORIssues$outboundSchema;
  /** @deprecated use `ERRORINTERNALSERVERERRORIssues$Outbound` instead. */
  export type Outbound = ERRORINTERNALSERVERERRORIssues$Outbound;
}

export function errorINTERNALSERVERERRORIssuesToJSON(
  errorinternalservererrorIssues: ERRORINTERNALSERVERERRORIssues,
): string {
  return JSON.stringify(
    ERRORINTERNALSERVERERRORIssues$outboundSchema.parse(
      errorinternalservererrorIssues,
    ),
  );
}

export function errorINTERNALSERVERERRORIssuesFromJSON(
  jsonString: string,
): SafeParseResult<ERRORINTERNALSERVERERRORIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ERRORINTERNALSERVERERRORIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ERRORINTERNALSERVERERRORIssues' from JSON`,
  );
}

/** @internal */
export const Errorinternalservererror$inboundSchema: z.ZodType<
  Errorinternalservererror,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => ERRORINTERNALSERVERERRORIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new Errorinternalservererror(v);
  });

/** @internal */
export type Errorinternalservererror$Outbound = {
  message: string;
  code: string;
  issues?: Array<ERRORINTERNALSERVERERRORIssues$Outbound> | undefined;
};

/** @internal */
export const Errorinternalservererror$outboundSchema: z.ZodType<
  Errorinternalservererror$Outbound,
  z.ZodTypeDef,
  Errorinternalservererror
> = z.instanceof(Errorinternalservererror)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => ERRORINTERNALSERVERERRORIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errorinternalservererror$ {
  /** @deprecated use `Errorinternalservererror$inboundSchema` instead. */
  export const inboundSchema = Errorinternalservererror$inboundSchema;
  /** @deprecated use `Errorinternalservererror$outboundSchema` instead. */
  export const outboundSchema = Errorinternalservererror$outboundSchema;
  /** @deprecated use `Errorinternalservererror$Outbound` instead. */
  export type Outbound = Errorinternalservererror$Outbound;
}
