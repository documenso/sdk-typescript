/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateFindTemplatesTemplatesResponseIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateFindTemplatesTemplatesResponseResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesTemplatesResponseIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateFindTemplatesTemplatesResponseResponseBody extends Error {
  code: string;
  issues?: Array<TemplateFindTemplatesTemplatesResponseIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesTemplatesResponseResponseBodyData;

  constructor(err: TemplateFindTemplatesTemplatesResponseResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesTemplatesResponseResponseBody";
  }
}

export type TemplateFindTemplatesTemplatesIssues = {
  message: string;
};

/**
 * Not found
 */
export type TemplateFindTemplatesTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesTemplatesIssues> | undefined;
};

/**
 * Not found
 */
export class TemplateFindTemplatesTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateFindTemplatesTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesTemplatesResponseBodyData;

  constructor(err: TemplateFindTemplatesTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesTemplatesResponseBody";
  }
}

export type TemplateFindTemplatesIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateFindTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateFindTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateFindTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesResponseBodyData;

  constructor(err: TemplateFindTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesResponseBody";
  }
}

/** @internal */
export const TemplateFindTemplatesTemplatesResponseIssues$inboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesResponseIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateFindTemplatesTemplatesResponseIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesTemplatesResponseIssues$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesResponseIssues$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesTemplatesResponseIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesResponseIssues$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesTemplatesResponseIssues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesResponseIssues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseIssues$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplatesResponseIssues$Outbound;
}

export function templateFindTemplatesTemplatesResponseIssuesToJSON(
  templateFindTemplatesTemplatesResponseIssues:
    TemplateFindTemplatesTemplatesResponseIssues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTemplatesResponseIssues$outboundSchema.parse(
      templateFindTemplatesTemplatesResponseIssues,
    ),
  );
}

export function templateFindTemplatesTemplatesResponseIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesTemplatesResponseIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesTemplatesResponseIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesTemplatesResponseIssues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTemplatesResponseResponseBody$inboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateFindTemplatesTemplatesResponseIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateFindTemplatesTemplatesResponseResponseBody(v);
    });

/** @internal */
export type TemplateFindTemplatesTemplatesResponseResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateFindTemplatesTemplatesResponseIssues$Outbound>
    | undefined;
};

/** @internal */
export const TemplateFindTemplatesTemplatesResponseResponseBody$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesResponseResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesTemplatesResponseResponseBody
  > = z.instanceof(TemplateFindTemplatesTemplatesResponseResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateFindTemplatesTemplatesResponseIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesResponseResponseBody$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesTemplatesResponseResponseBody$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesResponseResponseBody$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateFindTemplatesTemplatesResponseResponseBody$Outbound;
}

/** @internal */
export const TemplateFindTemplatesTemplatesIssues$inboundSchema: z.ZodType<
  TemplateFindTemplatesTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateFindTemplatesTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesTemplatesIssues$outboundSchema: z.ZodType<
  TemplateFindTemplatesTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesIssues$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplatesIssues$Outbound;
}

export function templateFindTemplatesTemplatesIssuesToJSON(
  templateFindTemplatesTemplatesIssues: TemplateFindTemplatesTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTemplatesIssues$outboundSchema.parse(
      templateFindTemplatesTemplatesIssues,
    ),
  );
}

export function templateFindTemplatesTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesTemplatesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesTemplatesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTemplatesResponseBody$inboundSchema:
  z.ZodType<TemplateFindTemplatesTemplatesResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateFindTemplatesTemplatesIssues$inboundSchema),
      ).optional(),
    })
      .transform((v) => {
        return new TemplateFindTemplatesTemplatesResponseBody(v);
      });

/** @internal */
export type TemplateFindTemplatesTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesTemplatesResponseBody
  > = z.instanceof(TemplateFindTemplatesTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateFindTemplatesTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesResponseBody$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateFindTemplatesIssues$inboundSchema: z.ZodType<
  TemplateFindTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateFindTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesIssues$outboundSchema: z.ZodType<
  TemplateFindTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesIssues$ {
  /** @deprecated use `TemplateFindTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesIssues$Outbound;
}

export function templateFindTemplatesIssuesToJSON(
  templateFindTemplatesIssues: TemplateFindTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesIssues$outboundSchema.parse(
      templateFindTemplatesIssues,
    ),
  );
}

export function templateFindTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesResponseBody$inboundSchema: z.ZodType<
  TemplateFindTemplatesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateFindTemplatesIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateFindTemplatesResponseBody(v);
  });

/** @internal */
export type TemplateFindTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesResponseBody$outboundSchema: z.ZodType<
  TemplateFindTemplatesResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesResponseBody
> = z.instanceof(TemplateFindTemplatesResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(z.lazy(() => TemplateFindTemplatesIssues$outboundSchema))
      .optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesResponseBody$ {
  /** @deprecated use `TemplateFindTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesResponseBody$Outbound;
}
