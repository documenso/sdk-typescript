/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateFindTemplatesInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateFindTemplatesInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class TemplateFindTemplatesInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<TemplateFindTemplatesInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesInternalServerErrorData;

  constructor(
    err: TemplateFindTemplatesInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesInternalServerError";
  }
}

export type TemplateFindTemplatesNotFoundIssue = {
  message: string;
};

/**
 * Not found
 */
export type TemplateFindTemplatesNotFoundErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesNotFoundIssue> | undefined;
};

/**
 * Not found
 */
export class TemplateFindTemplatesNotFoundError extends DocumensoError {
  code: string;
  issues?: Array<TemplateFindTemplatesNotFoundIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesNotFoundErrorData;

  constructor(
    err: TemplateFindTemplatesNotFoundErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesNotFoundError";
  }
}

export type TemplateFindTemplatesBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateFindTemplatesBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateFindTemplatesBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<TemplateFindTemplatesBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateFindTemplatesBadRequestErrorData;

  constructor(
    err: TemplateFindTemplatesBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateFindTemplatesBadRequestError";
  }
}

/** @internal */
export const TemplateFindTemplatesInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateFindTemplatesInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateFindTemplatesInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesInternalServerErrorIssue$ {
  /** @deprecated use `TemplateFindTemplatesInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesInternalServerErrorIssue$Outbound;
}

export function templateFindTemplatesInternalServerErrorIssueToJSON(
  templateFindTemplatesInternalServerErrorIssue:
    TemplateFindTemplatesInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateFindTemplatesInternalServerErrorIssue$outboundSchema.parse(
      templateFindTemplatesInternalServerErrorIssue,
    ),
  );
}

export function templateFindTemplatesInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesInternalServerError$inboundSchema: z.ZodType<
  TemplateFindTemplatesInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateFindTemplatesInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateFindTemplatesInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateFindTemplatesInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateFindTemplatesInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateFindTemplatesInternalServerError$outboundSchema: z.ZodType<
  TemplateFindTemplatesInternalServerError$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesInternalServerError
> = z.instanceof(TemplateFindTemplatesInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateFindTemplatesInternalServerErrorIssue$outboundSchema
      ),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesInternalServerError$ {
  /** @deprecated use `TemplateFindTemplatesInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesInternalServerError$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesInternalServerError$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesInternalServerError$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesInternalServerError$Outbound;
}

/** @internal */
export const TemplateFindTemplatesNotFoundIssue$inboundSchema: z.ZodType<
  TemplateFindTemplatesNotFoundIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateFindTemplatesNotFoundIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesNotFoundIssue$outboundSchema: z.ZodType<
  TemplateFindTemplatesNotFoundIssue$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesNotFoundIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesNotFoundIssue$ {
  /** @deprecated use `TemplateFindTemplatesNotFoundIssue$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesNotFoundIssue$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesNotFoundIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesNotFoundIssue$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesNotFoundIssue$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesNotFoundIssue$Outbound;
}

export function templateFindTemplatesNotFoundIssueToJSON(
  templateFindTemplatesNotFoundIssue: TemplateFindTemplatesNotFoundIssue,
): string {
  return JSON.stringify(
    TemplateFindTemplatesNotFoundIssue$outboundSchema.parse(
      templateFindTemplatesNotFoundIssue,
    ),
  );
}

export function templateFindTemplatesNotFoundIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesNotFoundIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesNotFoundIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesNotFoundIssue' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesNotFoundError$inboundSchema: z.ZodType<
  TemplateFindTemplatesNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateFindTemplatesNotFoundIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateFindTemplatesNotFoundError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateFindTemplatesNotFoundError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesNotFoundIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesNotFoundError$outboundSchema: z.ZodType<
  TemplateFindTemplatesNotFoundError$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesNotFoundError
> = z.instanceof(TemplateFindTemplatesNotFoundError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateFindTemplatesNotFoundIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesNotFoundError$ {
  /** @deprecated use `TemplateFindTemplatesNotFoundError$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesNotFoundError$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesNotFoundError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesNotFoundError$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesNotFoundError$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesNotFoundError$Outbound;
}

/** @internal */
export const TemplateFindTemplatesBadRequestIssue$inboundSchema: z.ZodType<
  TemplateFindTemplatesBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateFindTemplatesBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateFindTemplatesBadRequestIssue$outboundSchema: z.ZodType<
  TemplateFindTemplatesBadRequestIssue$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesBadRequestIssue$ {
  /** @deprecated use `TemplateFindTemplatesBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesBadRequestIssue$Outbound;
}

export function templateFindTemplatesBadRequestIssueToJSON(
  templateFindTemplatesBadRequestIssue: TemplateFindTemplatesBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateFindTemplatesBadRequestIssue$outboundSchema.parse(
      templateFindTemplatesBadRequestIssue,
    ),
  );
}

export function templateFindTemplatesBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesBadRequestError$inboundSchema: z.ZodType<
  TemplateFindTemplatesBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateFindTemplatesBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new TemplateFindTemplatesBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TemplateFindTemplatesBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateFindTemplatesBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesBadRequestError$outboundSchema: z.ZodType<
  TemplateFindTemplatesBadRequestError$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesBadRequestError
> = z.instanceof(TemplateFindTemplatesBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateFindTemplatesBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesBadRequestError$ {
  /** @deprecated use `TemplateFindTemplatesBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesBadRequestError$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesBadRequestError$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesBadRequestError$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesBadRequestError$Outbound;
}
