/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentDuplicateDocumentInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentDuplicateDocumentInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateDocumentInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentDuplicateDocumentInternalServerError extends Error {
  code: string;
  issues?: Array<DocumentDuplicateDocumentInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDuplicateDocumentInternalServerErrorData;

  constructor(err: DocumentDuplicateDocumentInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDuplicateDocumentInternalServerError";
  }
}

export type DocumentDuplicateDocumentBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentDuplicateDocumentBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateDocumentBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentDuplicateDocumentBadRequestError extends Error {
  code: string;
  issues?: Array<DocumentDuplicateDocumentBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentDuplicateDocumentBadRequestErrorData;

  constructor(err: DocumentDuplicateDocumentBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentDuplicateDocumentBadRequestError";
  }
}

/** @internal */
export const DocumentDuplicateDocumentInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentDuplicateDocumentInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentDuplicateDocumentInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDuplicateDocumentInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentDuplicateDocumentInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentDuplicateDocumentInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateDocumentInternalServerErrorIssue$ {
  /** @deprecated use `DocumentDuplicateDocumentInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateDocumentInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateDocumentInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentDuplicateDocumentInternalServerErrorIssue$Outbound;
}

export function documentDuplicateDocumentInternalServerErrorIssueToJSON(
  documentDuplicateDocumentInternalServerErrorIssue:
    DocumentDuplicateDocumentInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentDuplicateDocumentInternalServerErrorIssue$outboundSchema.parse(
      documentDuplicateDocumentInternalServerErrorIssue,
    ),
  );
}

export function documentDuplicateDocumentInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDuplicateDocumentInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDuplicateDocumentInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDuplicateDocumentInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDuplicateDocumentInternalServerError$inboundSchema:
  z.ZodType<
    DocumentDuplicateDocumentInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentDuplicateDocumentInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentDuplicateDocumentInternalServerError(v);
    });

/** @internal */
export type DocumentDuplicateDocumentInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentDuplicateDocumentInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentDuplicateDocumentInternalServerError$outboundSchema:
  z.ZodType<
    DocumentDuplicateDocumentInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentDuplicateDocumentInternalServerError
  > = z.instanceof(DocumentDuplicateDocumentInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentDuplicateDocumentInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateDocumentInternalServerError$ {
  /** @deprecated use `DocumentDuplicateDocumentInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateDocumentInternalServerError$inboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateDocumentInternalServerError$outboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentInternalServerError$Outbound` instead. */
  export type Outbound = DocumentDuplicateDocumentInternalServerError$Outbound;
}

/** @internal */
export const DocumentDuplicateDocumentBadRequestIssue$inboundSchema: z.ZodType<
  DocumentDuplicateDocumentBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentDuplicateDocumentBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentDuplicateDocumentBadRequestIssue$outboundSchema: z.ZodType<
  DocumentDuplicateDocumentBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateDocumentBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateDocumentBadRequestIssue$ {
  /** @deprecated use `DocumentDuplicateDocumentBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateDocumentBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateDocumentBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentDuplicateDocumentBadRequestIssue$Outbound;
}

export function documentDuplicateDocumentBadRequestIssueToJSON(
  documentDuplicateDocumentBadRequestIssue:
    DocumentDuplicateDocumentBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentDuplicateDocumentBadRequestIssue$outboundSchema.parse(
      documentDuplicateDocumentBadRequestIssue,
    ),
  );
}

export function documentDuplicateDocumentBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentDuplicateDocumentBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentDuplicateDocumentBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentDuplicateDocumentBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentDuplicateDocumentBadRequestError$inboundSchema: z.ZodType<
  DocumentDuplicateDocumentBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentDuplicateDocumentBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentDuplicateDocumentBadRequestError(v);
  });

/** @internal */
export type DocumentDuplicateDocumentBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentDuplicateDocumentBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentDuplicateDocumentBadRequestError$outboundSchema: z.ZodType<
  DocumentDuplicateDocumentBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateDocumentBadRequestError
> = z.instanceof(DocumentDuplicateDocumentBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentDuplicateDocumentBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateDocumentBadRequestError$ {
  /** @deprecated use `DocumentDuplicateDocumentBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDuplicateDocumentBadRequestError$inboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDuplicateDocumentBadRequestError$outboundSchema;
  /** @deprecated use `DocumentDuplicateDocumentBadRequestError$Outbound` instead. */
  export type Outbound = DocumentDuplicateDocumentBadRequestError$Outbound;
}
