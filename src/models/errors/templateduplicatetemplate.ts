/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDuplicateTemplateTemplatesIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDuplicateTemplateTemplatesResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateTemplatesIssues> | undefined;
};

/**
 * Internal server error
 */
export class TemplateDuplicateTemplateTemplatesResponseBody extends Error {
  code: string;
  issues?: Array<TemplateDuplicateTemplateTemplatesIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDuplicateTemplateTemplatesResponseBodyData;

  constructor(err: TemplateDuplicateTemplateTemplatesResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDuplicateTemplateTemplatesResponseBody";
  }
}

export type TemplateDuplicateTemplateIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDuplicateTemplateResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDuplicateTemplateResponseBody extends Error {
  code: string;
  issues?: Array<TemplateDuplicateTemplateIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDuplicateTemplateResponseBodyData;

  constructor(err: TemplateDuplicateTemplateResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDuplicateTemplateResponseBody";
  }
}

/** @internal */
export const TemplateDuplicateTemplateTemplatesIssues$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateTemplatesIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDuplicateTemplateTemplatesIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDuplicateTemplateTemplatesIssues$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateTemplatesIssues$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateTemplatesIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateTemplatesIssues$ {
  /** @deprecated use `TemplateDuplicateTemplateTemplatesIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateTemplatesIssues$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateTemplatesIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateTemplatesIssues$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateTemplatesIssues$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateTemplatesIssues$Outbound;
}

export function templateDuplicateTemplateTemplatesIssuesToJSON(
  templateDuplicateTemplateTemplatesIssues:
    TemplateDuplicateTemplateTemplatesIssues,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateTemplatesIssues$outboundSchema.parse(
      templateDuplicateTemplateTemplatesIssues,
    ),
  );
}

export function templateDuplicateTemplateTemplatesIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDuplicateTemplateTemplatesIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateTemplatesIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateDuplicateTemplateTemplatesIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateTemplatesResponseBody$inboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateTemplatesResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDuplicateTemplateTemplatesIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateDuplicateTemplateTemplatesResponseBody(v);
    });

/** @internal */
export type TemplateDuplicateTemplateTemplatesResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateTemplatesIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateDuplicateTemplateTemplatesResponseBody$outboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateTemplatesResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateDuplicateTemplateTemplatesResponseBody
  > = z.instanceof(TemplateDuplicateTemplateTemplatesResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateDuplicateTemplateTemplatesIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateTemplatesResponseBody$ {
  /** @deprecated use `TemplateDuplicateTemplateTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateTemplatesResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateDuplicateTemplateTemplatesResponseBody$Outbound;
}

/** @internal */
export const TemplateDuplicateTemplateIssues$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDuplicateTemplateIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDuplicateTemplateIssues$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateIssues$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateIssues$ {
  /** @deprecated use `TemplateDuplicateTemplateIssues$inboundSchema` instead. */
  export const inboundSchema = TemplateDuplicateTemplateIssues$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateIssues$outboundSchema` instead. */
  export const outboundSchema = TemplateDuplicateTemplateIssues$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateIssues$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateIssues$Outbound;
}

export function templateDuplicateTemplateIssuesToJSON(
  templateDuplicateTemplateIssues: TemplateDuplicateTemplateIssues,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateIssues$outboundSchema.parse(
      templateDuplicateTemplateIssues,
    ),
  );
}

export function templateDuplicateTemplateIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDuplicateTemplateIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateResponseBody$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => TemplateDuplicateTemplateIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new TemplateDuplicateTemplateResponseBody(v);
  });

/** @internal */
export type TemplateDuplicateTemplateResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateDuplicateTemplateResponseBody$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateResponseBody
> = z.instanceof(TemplateDuplicateTemplateResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDuplicateTemplateIssues$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateResponseBody$ {
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateResponseBody$Outbound;
}
