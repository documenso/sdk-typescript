/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDuplicateTemplateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDuplicateTemplateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class TemplateDuplicateTemplateInternalServerError extends Error {
  code: string;
  issues?: Array<TemplateDuplicateTemplateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDuplicateTemplateInternalServerErrorData;

  constructor(err: TemplateDuplicateTemplateInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDuplicateTemplateInternalServerError";
  }
}

export type TemplateDuplicateTemplateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDuplicateTemplateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDuplicateTemplateBadRequestError extends Error {
  code: string;
  issues?: Array<TemplateDuplicateTemplateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDuplicateTemplateBadRequestErrorData;

  constructor(err: TemplateDuplicateTemplateBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDuplicateTemplateBadRequestError";
  }
}

/** @internal */
export const TemplateDuplicateTemplateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateDuplicateTemplateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDuplicateTemplateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateDuplicateTemplateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateInternalServerErrorIssue$ {
  /** @deprecated use `TemplateDuplicateTemplateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateDuplicateTemplateInternalServerErrorIssue$Outbound;
}

export function templateDuplicateTemplateInternalServerErrorIssueToJSON(
  templateDuplicateTemplateInternalServerErrorIssue:
    TemplateDuplicateTemplateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateInternalServerErrorIssue$outboundSchema.parse(
      templateDuplicateTemplateInternalServerErrorIssue,
    ),
  );
}

export function templateDuplicateTemplateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDuplicateTemplateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateDuplicateTemplateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateInternalServerError$inboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateDuplicateTemplateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateDuplicateTemplateInternalServerError(v);
    });

/** @internal */
export type TemplateDuplicateTemplateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateDuplicateTemplateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateDuplicateTemplateInternalServerError$outboundSchema:
  z.ZodType<
    TemplateDuplicateTemplateInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateDuplicateTemplateInternalServerError
  > = z.instanceof(TemplateDuplicateTemplateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateDuplicateTemplateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateInternalServerError$ {
  /** @deprecated use `TemplateDuplicateTemplateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateInternalServerError$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateInternalServerError$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateInternalServerError$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateInternalServerError$Outbound;
}

/** @internal */
export const TemplateDuplicateTemplateBadRequestIssue$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDuplicateTemplateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDuplicateTemplateBadRequestIssue$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateBadRequestIssue$ {
  /** @deprecated use `TemplateDuplicateTemplateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateBadRequestIssue$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateBadRequestIssue$Outbound;
}

export function templateDuplicateTemplateBadRequestIssueToJSON(
  templateDuplicateTemplateBadRequestIssue:
    TemplateDuplicateTemplateBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateBadRequestIssue$outboundSchema.parse(
      templateDuplicateTemplateBadRequestIssue,
    ),
  );
}

export function templateDuplicateTemplateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDuplicateTemplateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateDuplicateTemplateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateBadRequestError$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => TemplateDuplicateTemplateBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new TemplateDuplicateTemplateBadRequestError(v);
  });

/** @internal */
export type TemplateDuplicateTemplateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDuplicateTemplateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const TemplateDuplicateTemplateBadRequestError$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateBadRequestError$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateBadRequestError
> = z.instanceof(TemplateDuplicateTemplateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDuplicateTemplateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateBadRequestError$ {
  /** @deprecated use `TemplateDuplicateTemplateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateBadRequestError$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateBadRequestError$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateBadRequestError$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateBadRequestError$Outbound;
}
