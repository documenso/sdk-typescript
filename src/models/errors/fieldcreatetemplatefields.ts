/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldCreateTemplateFieldsTemplatesFieldsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsTemplatesFieldsIssues> | undefined;
};

/**
 * Internal server error
 */
export class FieldCreateTemplateFieldsTemplatesFieldsResponseBody
  extends Error
{
  code: string;
  issues?: Array<FieldCreateTemplateFieldsTemplatesFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData;

  constructor(err: FieldCreateTemplateFieldsTemplatesFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldsTemplatesFieldsResponseBody";
  }
}

export type FieldCreateTemplateFieldsIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldCreateTemplateFieldsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsIssues> | undefined;
};

/**
 * Invalid input data
 */
export class FieldCreateTemplateFieldsResponseBody extends Error {
  code: string;
  issues?: Array<FieldCreateTemplateFieldsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldsResponseBodyData;

  constructor(err: FieldCreateTemplateFieldsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldsResponseBody";
  }
}

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsIssues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsTemplatesFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsIssues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsIssues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsTemplatesFieldsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTemplatesFieldsIssues$ {
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsIssues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsIssues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsIssues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsIssues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsIssues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsTemplatesFieldsIssues$Outbound;
}

export function fieldCreateTemplateFieldsTemplatesFieldsIssuesToJSON(
  fieldCreateTemplateFieldsTemplatesFieldsIssues:
    FieldCreateTemplateFieldsTemplatesFieldsIssues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsTemplatesFieldsIssues$outboundSchema.parse(
      fieldCreateTemplateFieldsTemplatesFieldsIssues,
    ),
  );
}

export function fieldCreateTemplateFieldsTemplatesFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsTemplatesFieldsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsTemplatesFieldsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsTemplatesFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsTemplatesFieldsIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new FieldCreateTemplateFieldsTemplatesFieldsResponseBody(v);
    });

/** @internal */
export type FieldCreateTemplateFieldsTemplatesFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldCreateTemplateFieldsTemplatesFieldsIssues$Outbound>
    | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody
  > = z.instanceof(FieldCreateTemplateFieldsTemplatesFieldsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldCreateTemplateFieldsTemplatesFieldsIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTemplatesFieldsResponseBody$ {
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsResponseBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsTemplatesFieldsResponseBody$Outbound;
}

/** @internal */
export const FieldCreateTemplateFieldsIssues$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsIssues$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldsIssues$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsIssues$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsIssues$ {
  /** @deprecated use `FieldCreateTemplateFieldsIssues$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsIssues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsIssues$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsIssues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsIssues$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsIssues$Outbound;
}

export function fieldCreateTemplateFieldsIssuesToJSON(
  fieldCreateTemplateFieldsIssues: FieldCreateTemplateFieldsIssues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsIssues$outboundSchema.parse(
      fieldCreateTemplateFieldsIssues,
    ),
  );
}

export function fieldCreateTemplateFieldsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsIssues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsResponseBody$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FieldCreateTemplateFieldsIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new FieldCreateTemplateFieldsResponseBody(v);
  });

/** @internal */
export type FieldCreateTemplateFieldsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsIssues$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsResponseBody$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponseBody$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsResponseBody
> = z.instanceof(FieldCreateTemplateFieldsResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldCreateTemplateFieldsIssues$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsResponseBody$ {
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsResponseBody$Outbound;
}
