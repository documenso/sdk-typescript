/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FieldCreateTemplateFieldsInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FieldCreateTemplateFieldsInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FieldCreateTemplateFieldsInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<FieldCreateTemplateFieldsInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldsInternalServerErrorData;

  constructor(
    err: FieldCreateTemplateFieldsInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldsInternalServerError";
  }
}

export type FieldCreateTemplateFieldsBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FieldCreateTemplateFieldsBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FieldCreateTemplateFieldsBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FieldCreateTemplateFieldsBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FieldCreateTemplateFieldsBadRequestErrorData;

  constructor(
    err: FieldCreateTemplateFieldsBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FieldCreateTemplateFieldsBadRequestError";
  }
}

/** @internal */
export const FieldCreateTemplateFieldsInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldsInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsInternalServerErrorIssue$ {
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsInternalServerErrorIssue$Outbound;
}

export function fieldCreateTemplateFieldsInternalServerErrorIssueToJSON(
  fieldCreateTemplateFieldsInternalServerErrorIssue:
    FieldCreateTemplateFieldsInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsInternalServerErrorIssue$outboundSchema.parse(
      fieldCreateTemplateFieldsInternalServerErrorIssue,
    ),
  );
}

export function fieldCreateTemplateFieldsInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsInternalServerError$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new FieldCreateTemplateFieldsInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type FieldCreateTemplateFieldsInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FieldCreateTemplateFieldsInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsInternalServerError$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsInternalServerError$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsInternalServerError
  > = z.instanceof(FieldCreateTemplateFieldsInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          FieldCreateTemplateFieldsInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsInternalServerError$ {
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsInternalServerError$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsInternalServerError$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsInternalServerError$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsInternalServerError$Outbound;
}

/** @internal */
export const FieldCreateTemplateFieldsBadRequestIssue$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FieldCreateTemplateFieldsBadRequestIssue$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsBadRequestIssue$ {
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsBadRequestIssue$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsBadRequestIssue$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestIssue$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsBadRequestIssue$Outbound;
}

export function fieldCreateTemplateFieldsBadRequestIssueToJSON(
  fieldCreateTemplateFieldsBadRequestIssue:
    FieldCreateTemplateFieldsBadRequestIssue,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsBadRequestIssue$outboundSchema.parse(
      fieldCreateTemplateFieldsBadRequestIssue,
    ),
  );
}

export function fieldCreateTemplateFieldsBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsBadRequestError$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FieldCreateTemplateFieldsBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FieldCreateTemplateFieldsBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FieldCreateTemplateFieldsBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FieldCreateTemplateFieldsBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsBadRequestError$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsBadRequestError$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsBadRequestError
> = z.instanceof(FieldCreateTemplateFieldsBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FieldCreateTemplateFieldsBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsBadRequestError$ {
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsBadRequestError$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsBadRequestError$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsBadRequestError$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsBadRequestError$Outbound;
}
