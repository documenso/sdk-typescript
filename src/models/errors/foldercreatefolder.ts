/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type FolderCreateFolderInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type FolderCreateFolderInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderCreateFolderInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class FolderCreateFolderInternalServerError extends DocumensoError {
  code: string;
  issues?: Array<FolderCreateFolderInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderCreateFolderInternalServerErrorData;

  constructor(
    err: FolderCreateFolderInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderCreateFolderInternalServerError";
  }
}

export type FolderCreateFolderBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type FolderCreateFolderBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<FolderCreateFolderBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class FolderCreateFolderBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<FolderCreateFolderBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: FolderCreateFolderBadRequestErrorData;

  constructor(
    err: FolderCreateFolderBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "FolderCreateFolderBadRequestError";
  }
}

/** @internal */
export const FolderCreateFolderInternalServerErrorIssue$inboundSchema:
  z.ZodType<FolderCreateFolderInternalServerErrorIssue, z.ZodTypeDef, unknown> =
    z.object({
      message: z.string(),
    });

/** @internal */
export type FolderCreateFolderInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderCreateFolderInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    FolderCreateFolderInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    FolderCreateFolderInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderInternalServerErrorIssue$ {
  /** @deprecated use `FolderCreateFolderInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    FolderCreateFolderInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `FolderCreateFolderInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderCreateFolderInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `FolderCreateFolderInternalServerErrorIssue$Outbound` instead. */
  export type Outbound = FolderCreateFolderInternalServerErrorIssue$Outbound;
}

export function folderCreateFolderInternalServerErrorIssueToJSON(
  folderCreateFolderInternalServerErrorIssue:
    FolderCreateFolderInternalServerErrorIssue,
): string {
  return JSON.stringify(
    FolderCreateFolderInternalServerErrorIssue$outboundSchema.parse(
      folderCreateFolderInternalServerErrorIssue,
    ),
  );
}

export function folderCreateFolderInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  FolderCreateFolderInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FolderCreateFolderInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FolderCreateFolderInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const FolderCreateFolderInternalServerError$inboundSchema: z.ZodType<
  FolderCreateFolderInternalServerError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => FolderCreateFolderInternalServerErrorIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderCreateFolderInternalServerError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderCreateFolderInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<FolderCreateFolderInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const FolderCreateFolderInternalServerError$outboundSchema: z.ZodType<
  FolderCreateFolderInternalServerError$Outbound,
  z.ZodTypeDef,
  FolderCreateFolderInternalServerError
> = z.instanceof(FolderCreateFolderInternalServerError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderCreateFolderInternalServerErrorIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderInternalServerError$ {
  /** @deprecated use `FolderCreateFolderInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    FolderCreateFolderInternalServerError$inboundSchema;
  /** @deprecated use `FolderCreateFolderInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    FolderCreateFolderInternalServerError$outboundSchema;
  /** @deprecated use `FolderCreateFolderInternalServerError$Outbound` instead. */
  export type Outbound = FolderCreateFolderInternalServerError$Outbound;
}

/** @internal */
export const FolderCreateFolderBadRequestIssue$inboundSchema: z.ZodType<
  FolderCreateFolderBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type FolderCreateFolderBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const FolderCreateFolderBadRequestIssue$outboundSchema: z.ZodType<
  FolderCreateFolderBadRequestIssue$Outbound,
  z.ZodTypeDef,
  FolderCreateFolderBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderBadRequestIssue$ {
  /** @deprecated use `FolderCreateFolderBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderBadRequestIssue$inboundSchema;
  /** @deprecated use `FolderCreateFolderBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    FolderCreateFolderBadRequestIssue$outboundSchema;
  /** @deprecated use `FolderCreateFolderBadRequestIssue$Outbound` instead. */
  export type Outbound = FolderCreateFolderBadRequestIssue$Outbound;
}

export function folderCreateFolderBadRequestIssueToJSON(
  folderCreateFolderBadRequestIssue: FolderCreateFolderBadRequestIssue,
): string {
  return JSON.stringify(
    FolderCreateFolderBadRequestIssue$outboundSchema.parse(
      folderCreateFolderBadRequestIssue,
    ),
  );
}

export function folderCreateFolderBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<FolderCreateFolderBadRequestIssue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderCreateFolderBadRequestIssue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderCreateFolderBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const FolderCreateFolderBadRequestError$inboundSchema: z.ZodType<
  FolderCreateFolderBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => FolderCreateFolderBadRequestIssue$inboundSchema))
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new FolderCreateFolderBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type FolderCreateFolderBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<FolderCreateFolderBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const FolderCreateFolderBadRequestError$outboundSchema: z.ZodType<
  FolderCreateFolderBadRequestError$Outbound,
  z.ZodTypeDef,
  FolderCreateFolderBadRequestError
> = z.instanceof(FolderCreateFolderBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => FolderCreateFolderBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderBadRequestError$ {
  /** @deprecated use `FolderCreateFolderBadRequestError$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderBadRequestError$inboundSchema;
  /** @deprecated use `FolderCreateFolderBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    FolderCreateFolderBadRequestError$outboundSchema;
  /** @deprecated use `FolderCreateFolderBadRequestError$Outbound` instead. */
  export type Outbound = FolderCreateFolderBadRequestError$Outbound;
}
