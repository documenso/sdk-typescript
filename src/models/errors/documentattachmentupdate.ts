/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentAttachmentUpdateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentAttachmentUpdateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentUpdateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentAttachmentUpdateInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentAttachmentUpdateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentUpdateInternalServerErrorData;

  constructor(
    err: DocumentAttachmentUpdateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentUpdateInternalServerError";
  }
}

export type DocumentAttachmentUpdateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentAttachmentUpdateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentUpdateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentAttachmentUpdateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentUpdateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentUpdateBadRequestErrorData;

  constructor(
    err: DocumentAttachmentUpdateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentUpdateBadRequestError";
  }
}

/** @internal */
export const DocumentAttachmentUpdateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentAttachmentUpdateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentAttachmentUpdateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentUpdateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentAttachmentUpdateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentUpdateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentUpdateInternalServerErrorIssue$ {
  /** @deprecated use `DocumentAttachmentUpdateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentUpdateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentUpdateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentAttachmentUpdateInternalServerErrorIssue$Outbound;
}

export function documentAttachmentUpdateInternalServerErrorIssueToJSON(
  documentAttachmentUpdateInternalServerErrorIssue:
    DocumentAttachmentUpdateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentUpdateInternalServerErrorIssue$outboundSchema.parse(
      documentAttachmentUpdateInternalServerErrorIssue,
    ),
  );
}

export function documentAttachmentUpdateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentUpdateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentUpdateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentUpdateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentUpdateInternalServerError$inboundSchema:
  z.ZodType<
    DocumentAttachmentUpdateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentAttachmentUpdateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentAttachmentUpdateInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentAttachmentUpdateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentAttachmentUpdateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentAttachmentUpdateInternalServerError$outboundSchema:
  z.ZodType<
    DocumentAttachmentUpdateInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentUpdateInternalServerError
  > = z.instanceof(DocumentAttachmentUpdateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentAttachmentUpdateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentUpdateInternalServerError$ {
  /** @deprecated use `DocumentAttachmentUpdateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentUpdateInternalServerError$inboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentUpdateInternalServerError$outboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateInternalServerError$Outbound` instead. */
  export type Outbound = DocumentAttachmentUpdateInternalServerError$Outbound;
}

/** @internal */
export const DocumentAttachmentUpdateBadRequestIssue$inboundSchema: z.ZodType<
  DocumentAttachmentUpdateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentAttachmentUpdateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentUpdateBadRequestIssue$outboundSchema: z.ZodType<
  DocumentAttachmentUpdateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentUpdateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentUpdateBadRequestIssue$ {
  /** @deprecated use `DocumentAttachmentUpdateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentUpdateBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentUpdateBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentAttachmentUpdateBadRequestIssue$Outbound;
}

export function documentAttachmentUpdateBadRequestIssueToJSON(
  documentAttachmentUpdateBadRequestIssue:
    DocumentAttachmentUpdateBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentUpdateBadRequestIssue$outboundSchema.parse(
      documentAttachmentUpdateBadRequestIssue,
    ),
  );
}

export function documentAttachmentUpdateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentUpdateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentUpdateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentUpdateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentUpdateBadRequestError$inboundSchema: z.ZodType<
  DocumentAttachmentUpdateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentUpdateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentUpdateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentUpdateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentUpdateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentAttachmentUpdateBadRequestError$outboundSchema: z.ZodType<
  DocumentAttachmentUpdateBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentUpdateBadRequestError
> = z.instanceof(DocumentAttachmentUpdateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentAttachmentUpdateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentUpdateBadRequestError$ {
  /** @deprecated use `DocumentAttachmentUpdateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentUpdateBadRequestError$inboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentUpdateBadRequestError$outboundSchema;
  /** @deprecated use `DocumentAttachmentUpdateBadRequestError$Outbound` instead. */
  export type Outbound = DocumentAttachmentUpdateBadRequestError$Outbound;
}
