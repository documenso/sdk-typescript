/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentMoveDocumentToTeamDocumentsIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentMoveDocumentToTeamDocumentsResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamDocumentsIssues> | undefined;
};

/**
 * Internal server error
 */
export class DocumentMoveDocumentToTeamDocumentsResponseBody extends Error {
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamDocumentsIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentMoveDocumentToTeamDocumentsResponseBodyData;

  constructor(err: DocumentMoveDocumentToTeamDocumentsResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentMoveDocumentToTeamDocumentsResponseBody";
  }
}

export type DocumentMoveDocumentToTeamIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentMoveDocumentToTeamResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamIssues> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentMoveDocumentToTeamResponseBody extends Error {
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentMoveDocumentToTeamResponseBodyData;

  constructor(err: DocumentMoveDocumentToTeamResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentMoveDocumentToTeamResponseBody";
  }
}

/** @internal */
export const DocumentMoveDocumentToTeamDocumentsIssues$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamDocumentsIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentMoveDocumentToTeamDocumentsIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentMoveDocumentToTeamDocumentsIssues$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamDocumentsIssues$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamDocumentsIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamDocumentsIssues$ {
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsIssues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamDocumentsIssues$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsIssues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamDocumentsIssues$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsIssues$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamDocumentsIssues$Outbound;
}

export function documentMoveDocumentToTeamDocumentsIssuesToJSON(
  documentMoveDocumentToTeamDocumentsIssues:
    DocumentMoveDocumentToTeamDocumentsIssues,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamDocumentsIssues$outboundSchema.parse(
      documentMoveDocumentToTeamDocumentsIssues,
    ),
  );
}

export function documentMoveDocumentToTeamDocumentsIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentMoveDocumentToTeamDocumentsIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamDocumentsIssues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentMoveDocumentToTeamDocumentsIssues' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamDocumentsResponseBody$inboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamDocumentsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentMoveDocumentToTeamDocumentsIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentMoveDocumentToTeamDocumentsResponseBody(v);
    });

/** @internal */
export type DocumentMoveDocumentToTeamDocumentsResponseBody$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentMoveDocumentToTeamDocumentsIssues$Outbound>
    | undefined;
};

/** @internal */
export const DocumentMoveDocumentToTeamDocumentsResponseBody$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamDocumentsResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamDocumentsResponseBody
  > = z.instanceof(DocumentMoveDocumentToTeamDocumentsResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentMoveDocumentToTeamDocumentsIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamDocumentsResponseBody$ {
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamDocumentsResponseBody$Outbound` instead. */
  export type Outbound =
    DocumentMoveDocumentToTeamDocumentsResponseBody$Outbound;
}

/** @internal */
export const DocumentMoveDocumentToTeamIssues$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentMoveDocumentToTeamIssues$Outbound = {
  message: string;
};

/** @internal */
export const DocumentMoveDocumentToTeamIssues$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamIssues$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamIssues$ {
  /** @deprecated use `DocumentMoveDocumentToTeamIssues$inboundSchema` instead. */
  export const inboundSchema = DocumentMoveDocumentToTeamIssues$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamIssues$outboundSchema` instead. */
  export const outboundSchema = DocumentMoveDocumentToTeamIssues$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamIssues$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamIssues$Outbound;
}

export function documentMoveDocumentToTeamIssuesToJSON(
  documentMoveDocumentToTeamIssues: DocumentMoveDocumentToTeamIssues,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamIssues$outboundSchema.parse(
      documentMoveDocumentToTeamIssues,
    ),
  );
}

export function documentMoveDocumentToTeamIssuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMoveDocumentToTeamIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentMoveDocumentToTeamIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMoveDocumentToTeamIssues' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamResponseBody$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(z.lazy(() => DocumentMoveDocumentToTeamIssues$inboundSchema))
    .optional(),
})
  .transform((v) => {
    return new DocumentMoveDocumentToTeamResponseBody(v);
  });

/** @internal */
export type DocumentMoveDocumentToTeamResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamIssues$Outbound> | undefined;
};

/** @internal */
export const DocumentMoveDocumentToTeamResponseBody$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamResponseBody
> = z.instanceof(DocumentMoveDocumentToTeamResponseBody)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentMoveDocumentToTeamIssues$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamResponseBody$ {
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamResponseBody$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamResponseBody$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamResponseBody$Outbound;
}
