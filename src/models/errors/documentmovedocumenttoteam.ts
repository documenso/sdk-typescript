/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentMoveDocumentToTeamInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentMoveDocumentToTeamInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentMoveDocumentToTeamInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class DocumentMoveDocumentToTeamInternalServerError extends Error {
  code: string;
  issues?:
    | Array<DocumentMoveDocumentToTeamInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentMoveDocumentToTeamInternalServerErrorData;

  constructor(err: DocumentMoveDocumentToTeamInternalServerErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentMoveDocumentToTeamInternalServerError";
  }
}

export type DocumentMoveDocumentToTeamBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentMoveDocumentToTeamBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentMoveDocumentToTeamBadRequestError extends Error {
  code: string;
  issues?: Array<DocumentMoveDocumentToTeamBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentMoveDocumentToTeamBadRequestErrorData;

  constructor(err: DocumentMoveDocumentToTeamBadRequestErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentMoveDocumentToTeamBadRequestError";
  }
}

/** @internal */
export const DocumentMoveDocumentToTeamInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentMoveDocumentToTeamInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentMoveDocumentToTeamInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamInternalServerErrorIssue$ {
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentMoveDocumentToTeamInternalServerErrorIssue$Outbound;
}

export function documentMoveDocumentToTeamInternalServerErrorIssueToJSON(
  documentMoveDocumentToTeamInternalServerErrorIssue:
    DocumentMoveDocumentToTeamInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamInternalServerErrorIssue$outboundSchema.parse(
      documentMoveDocumentToTeamInternalServerErrorIssue,
    ),
  );
}

export function documentMoveDocumentToTeamInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentMoveDocumentToTeamInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentMoveDocumentToTeamInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamInternalServerError$inboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentMoveDocumentToTeamInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new DocumentMoveDocumentToTeamInternalServerError(v);
    });

/** @internal */
export type DocumentMoveDocumentToTeamInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentMoveDocumentToTeamInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentMoveDocumentToTeamInternalServerError$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamInternalServerError
  > = z.instanceof(DocumentMoveDocumentToTeamInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentMoveDocumentToTeamInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamInternalServerError$ {
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamInternalServerError$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamInternalServerError$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamInternalServerError$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamInternalServerError$Outbound;
}

/** @internal */
export const DocumentMoveDocumentToTeamBadRequestIssue$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentMoveDocumentToTeamBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentMoveDocumentToTeamBadRequestIssue$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamBadRequestIssue$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamBadRequestIssue$ {
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamBadRequestIssue$Outbound;
}

export function documentMoveDocumentToTeamBadRequestIssueToJSON(
  documentMoveDocumentToTeamBadRequestIssue:
    DocumentMoveDocumentToTeamBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamBadRequestIssue$outboundSchema.parse(
      documentMoveDocumentToTeamBadRequestIssue,
    ),
  );
}

export function documentMoveDocumentToTeamBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentMoveDocumentToTeamBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentMoveDocumentToTeamBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamBadRequestError$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentMoveDocumentToTeamBadRequestIssue$inboundSchema),
  ).optional(),
})
  .transform((v) => {
    return new DocumentMoveDocumentToTeamBadRequestError(v);
  });

/** @internal */
export type DocumentMoveDocumentToTeamBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentMoveDocumentToTeamBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentMoveDocumentToTeamBadRequestError$outboundSchema:
  z.ZodType<
    DocumentMoveDocumentToTeamBadRequestError$Outbound,
    z.ZodTypeDef,
    DocumentMoveDocumentToTeamBadRequestError
  > = z.instanceof(DocumentMoveDocumentToTeamBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => DocumentMoveDocumentToTeamBadRequestIssue$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamBadRequestError$ {
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamBadRequestError$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamBadRequestError$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamBadRequestError$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamBadRequestError$Outbound;
}
