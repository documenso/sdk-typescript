/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDeleteTemplateDirectLinkInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDeleteTemplateDirectLinkInternalServerErrorData = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateDirectLinkInternalServerErrorIssue>
    | undefined;
};

/**
 * Internal server error
 */
export class TemplateDeleteTemplateDirectLinkInternalServerError
  extends DocumensoError
{
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateDirectLinkInternalServerErrorIssue>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateDirectLinkInternalServerErrorData;

  constructor(
    err: TemplateDeleteTemplateDirectLinkInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateDirectLinkInternalServerError";
  }
}

export type TemplateDeleteTemplateDirectLinkBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDeleteTemplateDirectLinkBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateDirectLinkBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDeleteTemplateDirectLinkBadRequestError
  extends DocumensoError
{
  code: string;
  issues?: Array<TemplateDeleteTemplateDirectLinkBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateDirectLinkBadRequestErrorData;

  constructor(
    err: TemplateDeleteTemplateDirectLinkBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateDirectLinkBadRequestError";
  }
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$Outbound =
  {
    message: string;
  };

/** @internal */
export const TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$Outbound;
}

export function templateDeleteTemplateDirectLinkInternalServerErrorIssueToJSON(
  templateDeleteTemplateDirectLinkInternalServerErrorIssue:
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$outboundSchema
      .parse(templateDeleteTemplateDirectLinkInternalServerErrorIssue),
  );
}

export function templateDeleteTemplateDirectLinkInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDeleteTemplateDirectLinkInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateDirectLinkInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkInternalServerError$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateDeleteTemplateDirectLinkInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateDeleteTemplateDirectLinkInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateDeleteTemplateDirectLinkInternalServerError$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkInternalServerError$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkInternalServerError
  > = z.instanceof(TemplateDeleteTemplateDirectLinkInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateDeleteTemplateDirectLinkInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkInternalServerError$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkInternalServerError$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkInternalServerError$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkInternalServerError$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkInternalServerError$Outbound;
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkBadRequestIssue$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkBadRequestIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateDeleteTemplateDirectLinkBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateDirectLinkBadRequestIssue$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkBadRequestIssue$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkBadRequestIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkBadRequestIssue$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkBadRequestIssue$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkBadRequestIssue$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestIssue$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkBadRequestIssue$Outbound;
}

export function templateDeleteTemplateDirectLinkBadRequestIssueToJSON(
  templateDeleteTemplateDirectLinkBadRequestIssue:
    TemplateDeleteTemplateDirectLinkBadRequestIssue,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateDirectLinkBadRequestIssue$outboundSchema.parse(
      templateDeleteTemplateDirectLinkBadRequestIssue,
    ),
  );
}

export function templateDeleteTemplateDirectLinkBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDeleteTemplateDirectLinkBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateDirectLinkBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateDeleteTemplateDirectLinkBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkBadRequestError$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkBadRequestError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateDeleteTemplateDirectLinkBadRequestIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new TemplateDeleteTemplateDirectLinkBadRequestError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type TemplateDeleteTemplateDirectLinkBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateDirectLinkBadRequestIssue$Outbound>
    | undefined;
};

/** @internal */
export const TemplateDeleteTemplateDirectLinkBadRequestError$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkBadRequestError$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkBadRequestError
  > = z.instanceof(TemplateDeleteTemplateDirectLinkBadRequestError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateDeleteTemplateDirectLinkBadRequestIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkBadRequestError$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkBadRequestError$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkBadRequestError$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkBadRequestError$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkBadRequestError$Outbound;
}
