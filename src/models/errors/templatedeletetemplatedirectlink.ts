/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues = {
  message: string;
};

/**
 * Internal server error
 */
export type TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBodyData =
  {
    message: string;
    code: string;
    issues?:
      | Array<TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues>
      | undefined;
  };

/**
 * Internal server error
 */
export class TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody
  extends Error
{
  code: string;
  issues?:
    | Array<TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues>
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBodyData;

  constructor(
    err: TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBodyData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name =
      "TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody";
  }
}

export type TemplateDeleteTemplateDirectLinkIssues = {
  message: string;
};

/**
 * Invalid input data
 */
export type TemplateDeleteTemplateDirectLinkResponseBodyData = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateDirectLinkIssues> | undefined;
};

/**
 * Invalid input data
 */
export class TemplateDeleteTemplateDirectLinkResponseBody extends Error {
  code: string;
  issues?: Array<TemplateDeleteTemplateDirectLinkIssues> | undefined;

  /** The original data that was passed to this error instance. */
  data$: TemplateDeleteTemplateDirectLinkResponseBodyData;

  constructor(err: TemplateDeleteTemplateDirectLinkResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "TemplateDeleteTemplateDirectLinkResponseBody";
  }
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$Outbound =
  {
    message: string;
  };

/** @internal */
export const TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$Outbound;
}

export function templateDeleteTemplateDirectLinkTemplatesDirectLinkIssuesToJSON(
  templateDeleteTemplateDirectLinkTemplatesDirectLinkIssues:
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$outboundSchema
      .parse(templateDeleteTemplateDirectLinkTemplatesDirectLinkIssues),
  );
}

export function templateDeleteTemplateDirectLinkTemplatesDirectLinkIssuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$inboundSchema
      ),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody(
        v,
      );
    });

/** @internal */
export type TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$Outbound =
  {
    message: string;
    code: string;
    issues?:
      | Array<
        TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$Outbound
      >
      | undefined;
  };

/** @internal */
export const TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody
  > = z.instanceof(
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          TemplateDeleteTemplateDirectLinkTemplatesDirectLinkIssues$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateDeleteTemplateDirectLinkTemplatesDirectLinkResponseBody$Outbound;
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkIssues$inboundSchema: z.ZodType<
  TemplateDeleteTemplateDirectLinkIssues,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type TemplateDeleteTemplateDirectLinkIssues$Outbound = {
  message: string;
};

/** @internal */
export const TemplateDeleteTemplateDirectLinkIssues$outboundSchema: z.ZodType<
  TemplateDeleteTemplateDirectLinkIssues$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateDirectLinkIssues
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkIssues$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkIssues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkIssues$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkIssues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkIssues$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkIssues$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateDirectLinkIssues$Outbound;
}

export function templateDeleteTemplateDirectLinkIssuesToJSON(
  templateDeleteTemplateDirectLinkIssues:
    TemplateDeleteTemplateDirectLinkIssues,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateDirectLinkIssues$outboundSchema.parse(
      templateDeleteTemplateDirectLinkIssues,
    ),
  );
}

export function templateDeleteTemplateDirectLinkIssuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateDirectLinkIssues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDeleteTemplateDirectLinkIssues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateDirectLinkIssues' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateDirectLinkResponseBody$inboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => TemplateDeleteTemplateDirectLinkIssues$inboundSchema),
    ).optional(),
  })
    .transform((v) => {
      return new TemplateDeleteTemplateDirectLinkResponseBody(v);
    });

/** @internal */
export type TemplateDeleteTemplateDirectLinkResponseBody$Outbound = {
  message: string;
  code: string;
  issues?: Array<TemplateDeleteTemplateDirectLinkIssues$Outbound> | undefined;
};

/** @internal */
export const TemplateDeleteTemplateDirectLinkResponseBody$outboundSchema:
  z.ZodType<
    TemplateDeleteTemplateDirectLinkResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateDeleteTemplateDirectLinkResponseBody
  > = z.instanceof(TemplateDeleteTemplateDirectLinkResponseBody)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() => TemplateDeleteTemplateDirectLinkIssues$outboundSchema),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateDirectLinkResponseBody$ {
  /** @deprecated use `TemplateDeleteTemplateDirectLinkResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDeleteTemplateDirectLinkResponseBody$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDeleteTemplateDirectLinkResponseBody$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateDirectLinkResponseBody$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateDirectLinkResponseBody$Outbound;
}
