/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { DocumensoError } from "./documensoerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DocumentAttachmentCreateInternalServerErrorIssue = {
  message: string;
};

/**
 * Internal server error
 */
export type DocumentAttachmentCreateInternalServerErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentCreateInternalServerErrorIssue> | undefined;
};

/**
 * Internal server error
 */
export class DocumentAttachmentCreateInternalServerError
  extends DocumensoError
{
  code: string;
  issues?: Array<DocumentAttachmentCreateInternalServerErrorIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentCreateInternalServerErrorData;

  constructor(
    err: DocumentAttachmentCreateInternalServerErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentCreateInternalServerError";
  }
}

export type DocumentAttachmentCreateBadRequestIssue = {
  message: string;
};

/**
 * Invalid input data
 */
export type DocumentAttachmentCreateBadRequestErrorData = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentCreateBadRequestIssue> | undefined;
};

/**
 * Invalid input data
 */
export class DocumentAttachmentCreateBadRequestError extends DocumensoError {
  code: string;
  issues?: Array<DocumentAttachmentCreateBadRequestIssue> | undefined;

  /** The original data that was passed to this error instance. */
  data$: DocumentAttachmentCreateBadRequestErrorData;

  constructor(
    err: DocumentAttachmentCreateBadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.issues != null) this.issues = err.issues;

    this.name = "DocumentAttachmentCreateBadRequestError";
  }
}

/** @internal */
export const DocumentAttachmentCreateInternalServerErrorIssue$inboundSchema:
  z.ZodType<
    DocumentAttachmentCreateInternalServerErrorIssue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
  });

/** @internal */
export type DocumentAttachmentCreateInternalServerErrorIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentCreateInternalServerErrorIssue$outboundSchema:
  z.ZodType<
    DocumentAttachmentCreateInternalServerErrorIssue$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentCreateInternalServerErrorIssue
  > = z.object({
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentCreateInternalServerErrorIssue$ {
  /** @deprecated use `DocumentAttachmentCreateInternalServerErrorIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentCreateInternalServerErrorIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentCreateInternalServerErrorIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentCreateInternalServerErrorIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentCreateInternalServerErrorIssue$Outbound` instead. */
  export type Outbound =
    DocumentAttachmentCreateInternalServerErrorIssue$Outbound;
}

export function documentAttachmentCreateInternalServerErrorIssueToJSON(
  documentAttachmentCreateInternalServerErrorIssue:
    DocumentAttachmentCreateInternalServerErrorIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentCreateInternalServerErrorIssue$outboundSchema.parse(
      documentAttachmentCreateInternalServerErrorIssue,
    ),
  );
}

export function documentAttachmentCreateInternalServerErrorIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentCreateInternalServerErrorIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentCreateInternalServerErrorIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentCreateInternalServerErrorIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentCreateInternalServerError$inboundSchema:
  z.ZodType<
    DocumentAttachmentCreateInternalServerError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() =>
        DocumentAttachmentCreateInternalServerErrorIssue$inboundSchema
      ),
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new DocumentAttachmentCreateInternalServerError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type DocumentAttachmentCreateInternalServerError$Outbound = {
  message: string;
  code: string;
  issues?:
    | Array<DocumentAttachmentCreateInternalServerErrorIssue$Outbound>
    | undefined;
};

/** @internal */
export const DocumentAttachmentCreateInternalServerError$outboundSchema:
  z.ZodType<
    DocumentAttachmentCreateInternalServerError$Outbound,
    z.ZodTypeDef,
    DocumentAttachmentCreateInternalServerError
  > = z.instanceof(DocumentAttachmentCreateInternalServerError)
    .transform(v => v.data$)
    .pipe(z.object({
      message: z.string(),
      code: z.string(),
      issues: z.array(
        z.lazy(() =>
          DocumentAttachmentCreateInternalServerErrorIssue$outboundSchema
        ),
      ).optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentCreateInternalServerError$ {
  /** @deprecated use `DocumentAttachmentCreateInternalServerError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentCreateInternalServerError$inboundSchema;
  /** @deprecated use `DocumentAttachmentCreateInternalServerError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentCreateInternalServerError$outboundSchema;
  /** @deprecated use `DocumentAttachmentCreateInternalServerError$Outbound` instead. */
  export type Outbound = DocumentAttachmentCreateInternalServerError$Outbound;
}

/** @internal */
export const DocumentAttachmentCreateBadRequestIssue$inboundSchema: z.ZodType<
  DocumentAttachmentCreateBadRequestIssue,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
});

/** @internal */
export type DocumentAttachmentCreateBadRequestIssue$Outbound = {
  message: string;
};

/** @internal */
export const DocumentAttachmentCreateBadRequestIssue$outboundSchema: z.ZodType<
  DocumentAttachmentCreateBadRequestIssue$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentCreateBadRequestIssue
> = z.object({
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentCreateBadRequestIssue$ {
  /** @deprecated use `DocumentAttachmentCreateBadRequestIssue$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentCreateBadRequestIssue$inboundSchema;
  /** @deprecated use `DocumentAttachmentCreateBadRequestIssue$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentCreateBadRequestIssue$outboundSchema;
  /** @deprecated use `DocumentAttachmentCreateBadRequestIssue$Outbound` instead. */
  export type Outbound = DocumentAttachmentCreateBadRequestIssue$Outbound;
}

export function documentAttachmentCreateBadRequestIssueToJSON(
  documentAttachmentCreateBadRequestIssue:
    DocumentAttachmentCreateBadRequestIssue,
): string {
  return JSON.stringify(
    DocumentAttachmentCreateBadRequestIssue$outboundSchema.parse(
      documentAttachmentCreateBadRequestIssue,
    ),
  );
}

export function documentAttachmentCreateBadRequestIssueFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentAttachmentCreateBadRequestIssue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentAttachmentCreateBadRequestIssue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentAttachmentCreateBadRequestIssue' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentCreateBadRequestError$inboundSchema: z.ZodType<
  DocumentAttachmentCreateBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  code: z.string(),
  issues: z.array(
    z.lazy(() => DocumentAttachmentCreateBadRequestIssue$inboundSchema),
  ).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DocumentAttachmentCreateBadRequestError(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DocumentAttachmentCreateBadRequestError$Outbound = {
  message: string;
  code: string;
  issues?: Array<DocumentAttachmentCreateBadRequestIssue$Outbound> | undefined;
};

/** @internal */
export const DocumentAttachmentCreateBadRequestError$outboundSchema: z.ZodType<
  DocumentAttachmentCreateBadRequestError$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentCreateBadRequestError
> = z.instanceof(DocumentAttachmentCreateBadRequestError)
  .transform(v => v.data$)
  .pipe(z.object({
    message: z.string(),
    code: z.string(),
    issues: z.array(
      z.lazy(() => DocumentAttachmentCreateBadRequestIssue$outboundSchema),
    ).optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentCreateBadRequestError$ {
  /** @deprecated use `DocumentAttachmentCreateBadRequestError$inboundSchema` instead. */
  export const inboundSchema =
    DocumentAttachmentCreateBadRequestError$inboundSchema;
  /** @deprecated use `DocumentAttachmentCreateBadRequestError$outboundSchema` instead. */
  export const outboundSchema =
    DocumentAttachmentCreateBadRequestError$outboundSchema;
  /** @deprecated use `DocumentAttachmentCreateBadRequestError$Outbound` instead. */
  export type Outbound = DocumentAttachmentCreateBadRequestError$Outbound;
}
