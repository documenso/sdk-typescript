/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentDuplicateRequest = {
  documentId: number;
};

/**
 * Successful response
 */
export type DocumentDuplicateResponse = {
  /**
   * The envelope ID
   */
  id: string;
  /**
   * The legacy document ID
   */
  documentId: number;
};

/** @internal */
export const DocumentDuplicateRequest$inboundSchema: z.ZodType<
  DocumentDuplicateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
});

/** @internal */
export type DocumentDuplicateRequest$Outbound = {
  documentId: number;
};

/** @internal */
export const DocumentDuplicateRequest$outboundSchema: z.ZodType<
  DocumentDuplicateRequest$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateRequest
> = z.object({
  documentId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateRequest$ {
  /** @deprecated use `DocumentDuplicateRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentDuplicateRequest$inboundSchema;
  /** @deprecated use `DocumentDuplicateRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentDuplicateRequest$outboundSchema;
  /** @deprecated use `DocumentDuplicateRequest$Outbound` instead. */
  export type Outbound = DocumentDuplicateRequest$Outbound;
}

export function documentDuplicateRequestToJSON(
  documentDuplicateRequest: DocumentDuplicateRequest,
): string {
  return JSON.stringify(
    DocumentDuplicateRequest$outboundSchema.parse(documentDuplicateRequest),
  );
}

export function documentDuplicateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDuplicateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDuplicateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDuplicateRequest' from JSON`,
  );
}

/** @internal */
export const DocumentDuplicateResponse$inboundSchema: z.ZodType<
  DocumentDuplicateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  documentId: z.number(),
});

/** @internal */
export type DocumentDuplicateResponse$Outbound = {
  id: string;
  documentId: number;
};

/** @internal */
export const DocumentDuplicateResponse$outboundSchema: z.ZodType<
  DocumentDuplicateResponse$Outbound,
  z.ZodTypeDef,
  DocumentDuplicateResponse
> = z.object({
  id: z.string(),
  documentId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDuplicateResponse$ {
  /** @deprecated use `DocumentDuplicateResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentDuplicateResponse$inboundSchema;
  /** @deprecated use `DocumentDuplicateResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentDuplicateResponse$outboundSchema;
  /** @deprecated use `DocumentDuplicateResponse$Outbound` instead. */
  export type Outbound = DocumentDuplicateResponse$Outbound;
}

export function documentDuplicateResponseToJSON(
  documentDuplicateResponse: DocumentDuplicateResponse,
): string {
  return JSON.stringify(
    DocumentDuplicateResponse$outboundSchema.parse(documentDuplicateResponse),
  );
}

export function documentDuplicateResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDuplicateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDuplicateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDuplicateResponse' from JSON`,
  );
}
