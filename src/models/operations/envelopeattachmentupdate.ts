/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvelopeAttachmentUpdateData = {
  label: string;
  data: string;
};

export type EnvelopeAttachmentUpdateRequest = {
  id: string;
  data: EnvelopeAttachmentUpdateData;
};

/** @internal */
export const EnvelopeAttachmentUpdateData$inboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  data: z.string(),
});

/** @internal */
export type EnvelopeAttachmentUpdateData$Outbound = {
  label: string;
  data: string;
};

/** @internal */
export const EnvelopeAttachmentUpdateData$outboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateData$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentUpdateData
> = z.object({
  label: z.string(),
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateData$ {
  /** @deprecated use `EnvelopeAttachmentUpdateData$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentUpdateData$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateData$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentUpdateData$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateData$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentUpdateData$Outbound;
}

export function envelopeAttachmentUpdateDataToJSON(
  envelopeAttachmentUpdateData: EnvelopeAttachmentUpdateData,
): string {
  return JSON.stringify(
    EnvelopeAttachmentUpdateData$outboundSchema.parse(
      envelopeAttachmentUpdateData,
    ),
  );
}

export function envelopeAttachmentUpdateDataFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentUpdateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentUpdateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentUpdateData' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentUpdateRequest$inboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  data: z.lazy(() => EnvelopeAttachmentUpdateData$inboundSchema),
});

/** @internal */
export type EnvelopeAttachmentUpdateRequest$Outbound = {
  id: string;
  data: EnvelopeAttachmentUpdateData$Outbound;
};

/** @internal */
export const EnvelopeAttachmentUpdateRequest$outboundSchema: z.ZodType<
  EnvelopeAttachmentUpdateRequest$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentUpdateRequest
> = z.object({
  id: z.string(),
  data: z.lazy(() => EnvelopeAttachmentUpdateData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentUpdateRequest$ {
  /** @deprecated use `EnvelopeAttachmentUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentUpdateRequest$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentUpdateRequest$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentUpdateRequest$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentUpdateRequest$Outbound;
}

export function envelopeAttachmentUpdateRequestToJSON(
  envelopeAttachmentUpdateRequest: EnvelopeAttachmentUpdateRequest,
): string {
  return JSON.stringify(
    EnvelopeAttachmentUpdateRequest$outboundSchema.parse(
      envelopeAttachmentUpdateRequest,
    ),
  );
}

export function envelopeAttachmentUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentUpdateRequest' from JSON`,
  );
}
