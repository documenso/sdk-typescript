/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldGetTemplateFieldRequest = {
  fieldId: number;
};

export const FieldGetTemplateFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldGetTemplateFieldType = ClosedEnum<
  typeof FieldGetTemplateFieldType
>;

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  >;

export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues = {
  value: string;
};

export type FieldGetTemplateFieldFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type;
  values?:
    | Array<FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  >;

export type FieldGetTemplateFieldFieldMetaTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldGetTemplateFieldFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type;
  values?:
    | Array<FieldGetTemplateFieldFieldMetaTemplatesFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type =
  {
    Radio: "radio",
  } as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  >;

export type FieldGetTemplateFieldFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldGetTemplateFieldFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type;
  values?: Array<FieldGetTemplateFieldFieldMetaValues> | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldGetTemplateFieldFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  >;

export type FieldGetTemplateFieldFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type = {
  Date: "date",
} as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type =
  ClosedEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  >;

export type FieldGetTemplateFieldFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType = {
  Email: "email",
} as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType =
  ClosedEnum<typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType>;

export type FieldGetTemplateFieldFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaTemplatesFieldsType = {
  Name: "name",
} as const;
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsType = ClosedEnum<
  typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsType
>;

export type FieldGetTemplateFieldFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsType;
  fontSize?: number | undefined;
};

export const FieldGetTemplateFieldFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldGetTemplateFieldFieldMetaType = ClosedEnum<
  typeof FieldGetTemplateFieldFieldMetaType
>;

export type FieldGetTemplateFieldFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldGetTemplateFieldFieldMeta =
  | FieldGetTemplateFieldFieldMeta1
  | FieldGetTemplateFieldFieldMeta2
  | FieldGetTemplateFieldFieldMeta3
  | FieldGetTemplateFieldFieldMeta4
  | FieldGetTemplateFieldFieldMeta7
  | FieldGetTemplateFieldFieldMeta9
  | FieldGetTemplateFieldFieldMeta5
  | FieldGetTemplateFieldFieldMeta8
  | FieldGetTemplateFieldFieldMeta6;

/**
 * Successful response
 */
export type FieldGetTemplateFieldResponseBody = {
  type: FieldGetTemplateFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldGetTemplateFieldFieldMeta1
    | FieldGetTemplateFieldFieldMeta2
    | FieldGetTemplateFieldFieldMeta3
    | FieldGetTemplateFieldFieldMeta4
    | FieldGetTemplateFieldFieldMeta7
    | FieldGetTemplateFieldFieldMeta9
    | FieldGetTemplateFieldFieldMeta5
    | FieldGetTemplateFieldFieldMeta8
    | FieldGetTemplateFieldFieldMeta6
    | null;
};

/** @internal */
export const FieldGetTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldGetTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldId: z.number(),
});

/** @internal */
export type FieldGetTemplateFieldRequest$Outbound = {
  fieldId: number;
};

/** @internal */
export const FieldGetTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldGetTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldRequest
> = z.object({
  fieldId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldRequest$ {
  /** @deprecated use `FieldGetTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldRequest$Outbound;
}

export function fieldGetTemplateFieldRequestToJSON(
  fieldGetTemplateFieldRequest: FieldGetTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldRequest$outboundSchema.parse(
      fieldGetTemplateFieldRequest,
    ),
  );
}

export function fieldGetTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldType
> = z.nativeEnum(FieldGetTemplateFieldType);

/** @internal */
export const FieldGetTemplateFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldType
> = FieldGetTemplateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldType$ {
  /** @deprecated use `FieldGetTemplateFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound;
}

export function fieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValuesToJSON(
  fieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema
      .parse(fieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues),
  );
}

export function fieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta9$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta9$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta9$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta9$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta9$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta9$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta9$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta9$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta9$Outbound;
}

export function fieldGetTemplateFieldFieldMeta9ToJSON(
  fieldGetTemplateFieldFieldMeta9: FieldGetTemplateFieldFieldMeta9,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta9$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta9,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$Outbound;
}

export function fieldGetTemplateFieldFieldMetaTemplatesFieldsValuesToJSON(
  fieldGetTemplateFieldFieldMetaTemplatesFieldsValues:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaTemplatesFieldsValues,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetTemplateFieldFieldMetaTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta8$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta8$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta8$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta8$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta8$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta8$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta8$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta8$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta8$Outbound;
}

export function fieldGetTemplateFieldFieldMeta8ToJSON(
  fieldGetTemplateFieldFieldMeta8: FieldGetTemplateFieldFieldMeta8,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta8$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta8,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaValues$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaValues$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaValues$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaValues$Outbound;
}

export function fieldGetTemplateFieldFieldMetaValuesToJSON(
  fieldGetTemplateFieldFieldMetaValues: FieldGetTemplateFieldFieldMetaValues,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaValues$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaValues,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta7$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema,
  values: z.array(
    z.lazy(() => FieldGetTemplateFieldFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetTemplateFieldFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta7$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema,
  values: z.array(
    z.lazy(() => FieldGetTemplateFieldFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta7$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta7$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta7$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta7$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta7$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta7$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta7$Outbound;
}

export function fieldGetTemplateFieldFieldMeta7ToJSON(
  fieldGetTemplateFieldFieldMeta7: FieldGetTemplateFieldFieldMeta7,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta7$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta7,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta6$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta6$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta6$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta6$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta6$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta6$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta6$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta6$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta6$Outbound;
}

export function fieldGetTemplateFieldFieldMeta6ToJSON(
  fieldGetTemplateFieldFieldMeta6: FieldGetTemplateFieldFieldMeta6,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta6$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta6,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta5$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta5$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta5$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta5$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta5$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta5$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta5$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta5$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta5$Outbound;
}

export function fieldGetTemplateFieldFieldMeta5ToJSON(
  fieldGetTemplateFieldFieldMeta5: FieldGetTemplateFieldFieldMeta5,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta5$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta5,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  > = z.nativeEnum(
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type,
  );

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  > =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta4$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta4$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta4$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta4$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta4$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta4$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta4$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta4$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta4$Outbound;
}

export function fieldGetTemplateFieldFieldMeta4ToJSON(
  fieldGetTemplateFieldFieldMeta4: FieldGetTemplateFieldFieldMeta4,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta4$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta4,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType
  > = z.nativeEnum(FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType);

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType
  > = FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta3$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta3$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta3$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta3$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta3$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta3$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta3$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta3$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta3$Outbound;
}

export function fieldGetTemplateFieldFieldMeta3ToJSON(
  fieldGetTemplateFieldFieldMeta3: FieldGetTemplateFieldFieldMeta3,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta3$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta3,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsType> = z
    .nativeEnum(FieldGetTemplateFieldFieldMetaTemplatesFieldsType);

/** @internal */
export const FieldGetTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldGetTemplateFieldFieldMetaTemplatesFieldsType> =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaTemplatesFieldsType$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta2$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta2$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta2$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta2$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta2$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta2$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta2$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta2$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta2$Outbound;
}

export function fieldGetTemplateFieldFieldMeta2ToJSON(
  fieldGetTemplateFieldFieldMeta2: FieldGetTemplateFieldFieldMeta2,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta2$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta2,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldFieldMetaType
> = z.nativeEnum(FieldGetTemplateFieldFieldMetaType);

/** @internal */
export const FieldGetTemplateFieldFieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldFieldMetaType
> = FieldGetTemplateFieldFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaType$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaType$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMetaType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta1$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMeta1$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta1$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta1$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta1$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta1$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta1$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta1$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta1$Outbound;
}

export function fieldGetTemplateFieldFieldMeta1ToJSON(
  fieldGetTemplateFieldFieldMeta1: FieldGetTemplateFieldFieldMeta1,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta1$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta1,
    ),
  );
}

export function fieldGetTemplateFieldFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMeta$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldGetTemplateFieldFieldMeta1$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta2$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta3$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta4$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta7$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta9$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta5$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta8$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldGetTemplateFieldFieldMeta$Outbound =
  | FieldGetTemplateFieldFieldMeta1$Outbound
  | FieldGetTemplateFieldFieldMeta2$Outbound
  | FieldGetTemplateFieldFieldMeta3$Outbound
  | FieldGetTemplateFieldFieldMeta4$Outbound
  | FieldGetTemplateFieldFieldMeta7$Outbound
  | FieldGetTemplateFieldFieldMeta9$Outbound
  | FieldGetTemplateFieldFieldMeta5$Outbound
  | FieldGetTemplateFieldFieldMeta8$Outbound
  | FieldGetTemplateFieldFieldMeta6$Outbound;

/** @internal */
export const FieldGetTemplateFieldFieldMeta$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMeta
> = z.union([
  z.lazy(() => FieldGetTemplateFieldFieldMeta1$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta2$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta3$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta4$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta7$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta9$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta5$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta8$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMeta$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMeta$Outbound;
}

export function fieldGetTemplateFieldFieldMetaToJSON(
  fieldGetTemplateFieldFieldMeta: FieldGetTemplateFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMeta$outboundSchema.parse(
      fieldGetTemplateFieldFieldMeta,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldResponseBody$inboundSchema: z.ZodType<
  FieldGetTemplateFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldGetTemplateFieldType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldGetTemplateFieldFieldMeta1$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta2$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta3$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta4$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta7$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta9$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta5$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta8$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldGetTemplateFieldResponseBody$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldGetTemplateFieldFieldMeta1$Outbound
    | FieldGetTemplateFieldFieldMeta2$Outbound
    | FieldGetTemplateFieldFieldMeta3$Outbound
    | FieldGetTemplateFieldFieldMeta4$Outbound
    | FieldGetTemplateFieldFieldMeta7$Outbound
    | FieldGetTemplateFieldFieldMeta9$Outbound
    | FieldGetTemplateFieldFieldMeta5$Outbound
    | FieldGetTemplateFieldFieldMeta8$Outbound
    | FieldGetTemplateFieldFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldGetTemplateFieldResponseBody$outboundSchema: z.ZodType<
  FieldGetTemplateFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldResponseBody
> = z.object({
  type: FieldGetTemplateFieldType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldGetTemplateFieldFieldMeta1$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta2$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta3$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta4$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta7$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta9$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta5$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta8$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldResponseBody$ {
  /** @deprecated use `FieldGetTemplateFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldResponseBody$Outbound;
}

export function fieldGetTemplateFieldResponseBodyToJSON(
  fieldGetTemplateFieldResponseBody: FieldGetTemplateFieldResponseBody,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldResponseBody$outboundSchema.parse(
      fieldGetTemplateFieldResponseBody,
    ),
  );
}

export function fieldGetTemplateFieldResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldResponseBody' from JSON`,
  );
}
