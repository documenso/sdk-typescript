/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldGetTemplateFieldRequest = {
  fieldId: number;
};

export const FieldGetTemplateFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldGetTemplateFieldType = ClosedEnum<
  typeof FieldGetTemplateFieldType
>;

export const FieldGetTemplateFieldTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldGetTemplateFieldTypeDropdown = ClosedEnum<
  typeof FieldGetTemplateFieldTypeDropdown
>;

export type FieldGetTemplateFieldValue3 = {
  value: string;
};

export type FieldGetTemplateFieldFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeDropdown;
  values?: Array<FieldGetTemplateFieldValue3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldGetTemplateFieldTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldGetTemplateFieldTypeCheckbox = ClosedEnum<
  typeof FieldGetTemplateFieldTypeCheckbox
>;

export type FieldGetTemplateFieldValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldGetTemplateFieldFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeCheckbox;
  values?: Array<FieldGetTemplateFieldValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldGetTemplateFieldTypeRadio = {
  Radio: "radio",
} as const;
export type FieldGetTemplateFieldTypeRadio = ClosedEnum<
  typeof FieldGetTemplateFieldTypeRadio
>;

export type FieldGetTemplateFieldValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldGetTemplateFieldFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeRadio;
  values?: Array<FieldGetTemplateFieldValue1> | undefined;
};

export const FieldGetTemplateFieldTypeNumber = {
  Number: "number",
} as const;
export type FieldGetTemplateFieldTypeNumber = ClosedEnum<
  typeof FieldGetTemplateFieldTypeNumber
>;

export const FieldGetTemplateFieldTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign6 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign6
>;

export type FieldGetTemplateFieldFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign6 | undefined;
};

export const FieldGetTemplateFieldTypeText = {
  Text: "text",
} as const;
export type FieldGetTemplateFieldTypeText = ClosedEnum<
  typeof FieldGetTemplateFieldTypeText
>;

export const FieldGetTemplateFieldTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign5 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign5
>;

export type FieldGetTemplateFieldFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign5 | undefined;
};

export const FieldGetTemplateFieldTypeDate = {
  Date: "date",
} as const;
export type FieldGetTemplateFieldTypeDate = ClosedEnum<
  typeof FieldGetTemplateFieldTypeDate
>;

export const FieldGetTemplateFieldTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign4 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign4
>;

export type FieldGetTemplateFieldFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign4 | undefined;
};

export const FieldGetTemplateFieldTypeEmail = {
  Email: "email",
} as const;
export type FieldGetTemplateFieldTypeEmail = ClosedEnum<
  typeof FieldGetTemplateFieldTypeEmail
>;

export const FieldGetTemplateFieldTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign3 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign3
>;

export type FieldGetTemplateFieldFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign3 | undefined;
};

export const FieldGetTemplateFieldTypeName = {
  Name: "name",
} as const;
export type FieldGetTemplateFieldTypeName = ClosedEnum<
  typeof FieldGetTemplateFieldTypeName
>;

export const FieldGetTemplateFieldTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign2 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign2
>;

export type FieldGetTemplateFieldFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign2 | undefined;
};

export const FieldGetTemplateFieldTypeInitials = {
  Initials: "initials",
} as const;
export type FieldGetTemplateFieldTypeInitials = ClosedEnum<
  typeof FieldGetTemplateFieldTypeInitials
>;

export const FieldGetTemplateFieldTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldGetTemplateFieldTextAlign1 = ClosedEnum<
  typeof FieldGetTemplateFieldTextAlign1
>;

export type FieldGetTemplateFieldFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetTemplateFieldTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldGetTemplateFieldTextAlign1 | undefined;
};

export type FieldGetTemplateFieldFieldMetaUnion =
  | FieldGetTemplateFieldFieldMetaRadio
  | FieldGetTemplateFieldFieldMetaInitials
  | FieldGetTemplateFieldFieldMetaName
  | FieldGetTemplateFieldFieldMetaEmail
  | FieldGetTemplateFieldFieldMetaDate
  | FieldGetTemplateFieldFieldMetaDropdown
  | FieldGetTemplateFieldFieldMetaCheckbox
  | FieldGetTemplateFieldFieldMetaText
  | FieldGetTemplateFieldFieldMetaNumber;

/**
 * Successful response
 */
export type FieldGetTemplateFieldResponse = {
  type: FieldGetTemplateFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldGetTemplateFieldFieldMetaRadio
    | FieldGetTemplateFieldFieldMetaInitials
    | FieldGetTemplateFieldFieldMetaName
    | FieldGetTemplateFieldFieldMetaEmail
    | FieldGetTemplateFieldFieldMetaDate
    | FieldGetTemplateFieldFieldMetaDropdown
    | FieldGetTemplateFieldFieldMetaCheckbox
    | FieldGetTemplateFieldFieldMetaText
    | FieldGetTemplateFieldFieldMetaNumber
    | null;
};

/** @internal */
export const FieldGetTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldGetTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldId: z.number(),
});

/** @internal */
export type FieldGetTemplateFieldRequest$Outbound = {
  fieldId: number;
};

/** @internal */
export const FieldGetTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldGetTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldRequest
> = z.object({
  fieldId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldRequest$ {
  /** @deprecated use `FieldGetTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldRequest$Outbound;
}

export function fieldGetTemplateFieldRequestToJSON(
  fieldGetTemplateFieldRequest: FieldGetTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldRequest$outboundSchema.parse(
      fieldGetTemplateFieldRequest,
    ),
  );
}

export function fieldGetTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldType
> = z.nativeEnum(FieldGetTemplateFieldType);

/** @internal */
export const FieldGetTemplateFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldType
> = FieldGetTemplateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldType$ {
  /** @deprecated use `FieldGetTemplateFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldType$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldType$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeDropdown
> = z.nativeEnum(FieldGetTemplateFieldTypeDropdown);

/** @internal */
export const FieldGetTemplateFieldTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeDropdown
> = FieldGetTemplateFieldTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeDropdown$ {
  /** @deprecated use `FieldGetTemplateFieldTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeDropdown$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldValue3$inboundSchema: z.ZodType<
  FieldGetTemplateFieldValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldValue3$Outbound = {
  value: string;
};

/** @internal */
export const FieldGetTemplateFieldValue3$outboundSchema: z.ZodType<
  FieldGetTemplateFieldValue3$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldValue3$ {
  /** @deprecated use `FieldGetTemplateFieldValue3$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldValue3$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue3$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldValue3$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue3$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldValue3$Outbound;
}

export function fieldGetTemplateFieldValue3ToJSON(
  fieldGetTemplateFieldValue3: FieldGetTemplateFieldValue3,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldValue3$outboundSchema.parse(
      fieldGetTemplateFieldValue3,
    ),
  );
}

export function fieldGetTemplateFieldValue3FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldValue3' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaDropdown$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue3$inboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetTemplateFieldValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaDropdown$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaDropdown$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue3$outboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaDropdown$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaDropdown$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaDropdown$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDropdown$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaDropdown$Outbound;
}

export function fieldGetTemplateFieldFieldMetaDropdownToJSON(
  fieldGetTemplateFieldFieldMetaDropdown:
    FieldGetTemplateFieldFieldMetaDropdown,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaDropdown$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaDropdown,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeCheckbox
> = z.nativeEnum(FieldGetTemplateFieldTypeCheckbox);

/** @internal */
export const FieldGetTemplateFieldTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeCheckbox
> = FieldGetTemplateFieldTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeCheckbox$ {
  /** @deprecated use `FieldGetTemplateFieldTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldValue2$inboundSchema: z.ZodType<
  FieldGetTemplateFieldValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetTemplateFieldValue2$outboundSchema: z.ZodType<
  FieldGetTemplateFieldValue2$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldValue2$ {
  /** @deprecated use `FieldGetTemplateFieldValue2$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldValue2$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue2$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldValue2$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue2$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldValue2$Outbound;
}

export function fieldGetTemplateFieldValue2ToJSON(
  fieldGetTemplateFieldValue2: FieldGetTemplateFieldValue2,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldValue2$outboundSchema.parse(
      fieldGetTemplateFieldValue2,
    ),
  );
}

export function fieldGetTemplateFieldValue2FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldValue2' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue2$inboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetTemplateFieldValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaCheckbox$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue2$outboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaCheckbox$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaCheckbox$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaCheckbox$Outbound;
}

export function fieldGetTemplateFieldFieldMetaCheckboxToJSON(
  fieldGetTemplateFieldFieldMetaCheckbox:
    FieldGetTemplateFieldFieldMetaCheckbox,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaCheckbox,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeRadio
> = z.nativeEnum(FieldGetTemplateFieldTypeRadio);

/** @internal */
export const FieldGetTemplateFieldTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeRadio
> = FieldGetTemplateFieldTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeRadio$ {
  /** @deprecated use `FieldGetTemplateFieldTypeRadio$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeRadio$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeRadio$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeRadio$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldValue1$inboundSchema: z.ZodType<
  FieldGetTemplateFieldValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldGetTemplateFieldValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetTemplateFieldValue1$outboundSchema: z.ZodType<
  FieldGetTemplateFieldValue1$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldValue1$ {
  /** @deprecated use `FieldGetTemplateFieldValue1$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldValue1$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue1$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldValue1$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldValue1$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldValue1$Outbound;
}

export function fieldGetTemplateFieldValue1ToJSON(
  fieldGetTemplateFieldValue1: FieldGetTemplateFieldValue1,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldValue1$outboundSchema.parse(
      fieldGetTemplateFieldValue1,
    ),
  );
}

export function fieldGetTemplateFieldValue1FromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldValue1' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaRadio$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue1$inboundSchema))
    .optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetTemplateFieldValue1$Outbound> | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaRadio$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaRadio$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => FieldGetTemplateFieldValue1$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaRadio$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaRadio$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaRadio$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaRadio$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaRadio$Outbound;
}

export function fieldGetTemplateFieldFieldMetaRadioToJSON(
  fieldGetTemplateFieldFieldMetaRadio: FieldGetTemplateFieldFieldMetaRadio,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaRadio$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaRadio,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeNumber
> = z.nativeEnum(FieldGetTemplateFieldTypeNumber);

/** @internal */
export const FieldGetTemplateFieldTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeNumber
> = FieldGetTemplateFieldTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeNumber$ {
  /** @deprecated use `FieldGetTemplateFieldTypeNumber$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeNumber$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeNumber$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeNumber$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign6
> = z.nativeEnum(FieldGetTemplateFieldTextAlign6);

/** @internal */
export const FieldGetTemplateFieldTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign6
> = FieldGetTemplateFieldTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign6$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign6$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign6$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign6$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign6$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaNumber$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeNumber$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaNumber$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaNumber$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeNumber$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaNumber$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaNumber$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaNumber$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaNumber$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaNumber$Outbound;
}

export function fieldGetTemplateFieldFieldMetaNumberToJSON(
  fieldGetTemplateFieldFieldMetaNumber: FieldGetTemplateFieldFieldMetaNumber,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaNumber$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaNumber,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeText$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeText
> = z.nativeEnum(FieldGetTemplateFieldTypeText);

/** @internal */
export const FieldGetTemplateFieldTypeText$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeText
> = FieldGetTemplateFieldTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeText$ {
  /** @deprecated use `FieldGetTemplateFieldTypeText$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeText$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeText$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeText$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign5
> = z.nativeEnum(FieldGetTemplateFieldTextAlign5);

/** @internal */
export const FieldGetTemplateFieldTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign5
> = FieldGetTemplateFieldTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign5$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign5$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign5$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign5$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign5$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaText$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaText$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaText$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaText$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaText$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMetaText$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaText$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaText$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaText$Outbound;
}

export function fieldGetTemplateFieldFieldMetaTextToJSON(
  fieldGetTemplateFieldFieldMetaText: FieldGetTemplateFieldFieldMetaText,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaText$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaText,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaText' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeDate
> = z.nativeEnum(FieldGetTemplateFieldTypeDate);

/** @internal */
export const FieldGetTemplateFieldTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeDate
> = FieldGetTemplateFieldTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeDate$ {
  /** @deprecated use `FieldGetTemplateFieldTypeDate$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeDate$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeDate$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeDate$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign4
> = z.nativeEnum(FieldGetTemplateFieldTextAlign4);

/** @internal */
export const FieldGetTemplateFieldTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign4
> = FieldGetTemplateFieldTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign4$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign4$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign4$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign4$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign4$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaDate$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaDate$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaDate$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaDate$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMetaDate$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaDate$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaDate$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaDate$Outbound;
}

export function fieldGetTemplateFieldFieldMetaDateToJSON(
  fieldGetTemplateFieldFieldMetaDate: FieldGetTemplateFieldFieldMetaDate,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaDate$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaDate,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeEmail
> = z.nativeEnum(FieldGetTemplateFieldTypeEmail);

/** @internal */
export const FieldGetTemplateFieldTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeEmail
> = FieldGetTemplateFieldTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeEmail$ {
  /** @deprecated use `FieldGetTemplateFieldTypeEmail$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeEmail$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeEmail$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeEmail$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign3
> = z.nativeEnum(FieldGetTemplateFieldTextAlign3);

/** @internal */
export const FieldGetTemplateFieldTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign3
> = FieldGetTemplateFieldTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign3$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign3$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign3$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign3$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign3$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaEmail$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaEmail$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaEmail$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaEmail$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaEmail$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaEmail$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaEmail$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaEmail$Outbound;
}

export function fieldGetTemplateFieldFieldMetaEmailToJSON(
  fieldGetTemplateFieldFieldMetaEmail: FieldGetTemplateFieldFieldMetaEmail,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaEmail$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaEmail,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeName$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeName
> = z.nativeEnum(FieldGetTemplateFieldTypeName);

/** @internal */
export const FieldGetTemplateFieldTypeName$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeName
> = FieldGetTemplateFieldTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeName$ {
  /** @deprecated use `FieldGetTemplateFieldTypeName$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeName$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeName$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTypeName$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign2
> = z.nativeEnum(FieldGetTemplateFieldTextAlign2);

/** @internal */
export const FieldGetTemplateFieldTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign2
> = FieldGetTemplateFieldTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign2$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign2$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign2$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign2$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign2$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaName$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaName$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaName$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaName$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaName$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldFieldMetaName$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaName$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaName$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaName$Outbound;
}

export function fieldGetTemplateFieldFieldMetaNameToJSON(
  fieldGetTemplateFieldFieldMetaName: FieldGetTemplateFieldFieldMetaName,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaName$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaName,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaName' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeInitials
> = z.nativeEnum(FieldGetTemplateFieldTypeInitials);

/** @internal */
export const FieldGetTemplateFieldTypeInitials$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTypeInitials
> = FieldGetTemplateFieldTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTypeInitials$ {
  /** @deprecated use `FieldGetTemplateFieldTypeInitials$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTypeInitials$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldTypeInitials$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign1
> = z.nativeEnum(FieldGetTemplateFieldTextAlign1);

/** @internal */
export const FieldGetTemplateFieldTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetTemplateFieldTextAlign1
> = FieldGetTemplateFieldTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldTextAlign1$ {
  /** @deprecated use `FieldGetTemplateFieldTextAlign1$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldTextAlign1$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldTextAlign1$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldTextAlign1$outboundSchema;
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaInitials$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type FieldGetTemplateFieldFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldGetTemplateFieldFieldMetaInitials$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaInitials$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetTemplateFieldTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: FieldGetTemplateFieldTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaInitials$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaInitials$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaInitials$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaInitials$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaInitials$Outbound;
}

export function fieldGetTemplateFieldFieldMetaInitialsToJSON(
  fieldGetTemplateFieldFieldMetaInitials:
    FieldGetTemplateFieldFieldMetaInitials,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaInitials$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaInitials,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldFieldMetaUnion$inboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldGetTemplateFieldFieldMetaRadio$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaInitials$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaName$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaEmail$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaDate$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaDropdown$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaText$inboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaNumber$inboundSchema),
]);

/** @internal */
export type FieldGetTemplateFieldFieldMetaUnion$Outbound =
  | FieldGetTemplateFieldFieldMetaRadio$Outbound
  | FieldGetTemplateFieldFieldMetaInitials$Outbound
  | FieldGetTemplateFieldFieldMetaName$Outbound
  | FieldGetTemplateFieldFieldMetaEmail$Outbound
  | FieldGetTemplateFieldFieldMetaDate$Outbound
  | FieldGetTemplateFieldFieldMetaDropdown$Outbound
  | FieldGetTemplateFieldFieldMetaCheckbox$Outbound
  | FieldGetTemplateFieldFieldMetaText$Outbound
  | FieldGetTemplateFieldFieldMetaNumber$Outbound;

/** @internal */
export const FieldGetTemplateFieldFieldMetaUnion$outboundSchema: z.ZodType<
  FieldGetTemplateFieldFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldFieldMetaUnion
> = z.union([
  z.lazy(() => FieldGetTemplateFieldFieldMetaRadio$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaInitials$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaName$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaEmail$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaDate$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaDropdown$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaText$outboundSchema),
  z.lazy(() => FieldGetTemplateFieldFieldMetaNumber$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldFieldMetaUnion$ {
  /** @deprecated use `FieldGetTemplateFieldFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetTemplateFieldFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetTemplateFieldFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldFieldMetaUnion$Outbound;
}

export function fieldGetTemplateFieldFieldMetaUnionToJSON(
  fieldGetTemplateFieldFieldMetaUnion: FieldGetTemplateFieldFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldFieldMetaUnion$outboundSchema.parse(
      fieldGetTemplateFieldFieldMetaUnion,
    ),
  );
}

export function fieldGetTemplateFieldFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetTemplateFieldFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldGetTemplateFieldResponse$inboundSchema: z.ZodType<
  FieldGetTemplateFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldGetTemplateFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldGetTemplateFieldFieldMetaRadio$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaInitials$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaName$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaEmail$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaDate$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaDropdown$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaCheckbox$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaText$inboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaNumber$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldGetTemplateFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldGetTemplateFieldFieldMetaRadio$Outbound
    | FieldGetTemplateFieldFieldMetaInitials$Outbound
    | FieldGetTemplateFieldFieldMetaName$Outbound
    | FieldGetTemplateFieldFieldMetaEmail$Outbound
    | FieldGetTemplateFieldFieldMetaDate$Outbound
    | FieldGetTemplateFieldFieldMetaDropdown$Outbound
    | FieldGetTemplateFieldFieldMetaCheckbox$Outbound
    | FieldGetTemplateFieldFieldMetaText$Outbound
    | FieldGetTemplateFieldFieldMetaNumber$Outbound
    | null;
};

/** @internal */
export const FieldGetTemplateFieldResponse$outboundSchema: z.ZodType<
  FieldGetTemplateFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldGetTemplateFieldResponse
> = z.object({
  type: FieldGetTemplateFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldGetTemplateFieldFieldMetaRadio$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaInitials$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaName$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaEmail$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaDate$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaDropdown$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaCheckbox$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaText$outboundSchema),
      z.lazy(() => FieldGetTemplateFieldFieldMetaNumber$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetTemplateFieldResponse$ {
  /** @deprecated use `FieldGetTemplateFieldResponse$inboundSchema` instead. */
  export const inboundSchema = FieldGetTemplateFieldResponse$inboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponse$outboundSchema` instead. */
  export const outboundSchema = FieldGetTemplateFieldResponse$outboundSchema;
  /** @deprecated use `FieldGetTemplateFieldResponse$Outbound` instead. */
  export type Outbound = FieldGetTemplateFieldResponse$Outbound;
}

export function fieldGetTemplateFieldResponseToJSON(
  fieldGetTemplateFieldResponse: FieldGetTemplateFieldResponse,
): string {
  return JSON.stringify(
    FieldGetTemplateFieldResponse$outboundSchema.parse(
      fieldGetTemplateFieldResponse,
    ),
  );
}

export function fieldGetTemplateFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetTemplateFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetTemplateFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetTemplateFieldResponse' from JSON`,
  );
}
