/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateTemplateFieldTypeDropdownRequestBody1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldTypeDropdownRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDropdownRequestBody1
>;

export const FieldCreateTemplateFieldTypeDropdownRequestBody2 = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldTypeDropdownRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDropdownRequestBody2
>;

export type FieldCreateTemplateFieldValueDropdown = {
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaDropdownRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeDropdownRequestBody2;
  values?: Array<FieldCreateTemplateFieldValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldCreateTemplateFieldFieldDropdown = {
  type: FieldCreateTemplateFieldTypeDropdownRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaDropdownRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeCheckboxRequestBody1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldCreateTemplateFieldTypeCheckboxRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeCheckboxRequestBody1
>;

export const FieldCreateTemplateFieldTypeCheckboxRequestBody2 = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldTypeCheckboxRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeCheckboxRequestBody2
>;

export type FieldCreateTemplateFieldValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaCheckboxRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeCheckboxRequestBody2;
  values?: Array<FieldCreateTemplateFieldValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldCreateTemplateFieldFieldCheckbox = {
  type: FieldCreateTemplateFieldTypeCheckboxRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaCheckboxRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeRadioRequestBody1 = {
  Radio: "RADIO",
} as const;
export type FieldCreateTemplateFieldTypeRadioRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeRadioRequestBody1
>;

export const FieldCreateTemplateFieldTypeRadioRequestBody2 = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldTypeRadioRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeRadioRequestBody2
>;

export type FieldCreateTemplateFieldValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaRadioRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeRadioRequestBody2;
  values?: Array<FieldCreateTemplateFieldValueRadio> | undefined;
};

export type FieldCreateTemplateFieldFieldRadio = {
  type: FieldCreateTemplateFieldTypeRadioRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaRadioRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeNumberRequestBody1 = {
  Number: "NUMBER",
} as const;
export type FieldCreateTemplateFieldTypeNumberRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNumberRequestBody1
>;

export const FieldCreateTemplateFieldTypeNumberRequestBody2 = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldTypeNumberRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNumberRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignNumber
>;

export type FieldCreateTemplateFieldFieldMetaNumberRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeNumberRequestBody2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignNumber | undefined;
};

export type FieldCreateTemplateFieldFieldNumber = {
  type: FieldCreateTemplateFieldTypeNumberRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaNumberRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeTextRequestBody1 = {
  Text: "TEXT",
} as const;
export type FieldCreateTemplateFieldTypeTextRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeTextRequestBody1
>;

export const FieldCreateTemplateFieldTypeTextRequestBody2 = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldTypeTextRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeTextRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignText = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignText
>;

export type FieldCreateTemplateFieldFieldMetaTextRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeTextRequestBody2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignText | undefined;
};

export type FieldCreateTemplateFieldFieldText = {
  type: FieldCreateTemplateFieldTypeTextRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaTextRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeDateRequestBody1 = {
  Date: "DATE",
} as const;
export type FieldCreateTemplateFieldTypeDateRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDateRequestBody1
>;

export const FieldCreateTemplateFieldTypeDateRequestBody2 = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldTypeDateRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDateRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignDate = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignDate
>;

export type FieldCreateTemplateFieldFieldMetaDateRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeDateRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignDate | undefined;
};

export type FieldCreateTemplateFieldFieldDate = {
  type: FieldCreateTemplateFieldTypeDateRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaDateRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeEmailRequestBody1 = {
  Email: "EMAIL",
} as const;
export type FieldCreateTemplateFieldTypeEmailRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeEmailRequestBody1
>;

export const FieldCreateTemplateFieldTypeEmailRequestBody2 = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldTypeEmailRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeEmailRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignEmail
>;

export type FieldCreateTemplateFieldFieldMetaEmailRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeEmailRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignEmail | undefined;
};

export type FieldCreateTemplateFieldFieldEmail = {
  type: FieldCreateTemplateFieldTypeEmailRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaEmailRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeNameRequestBody1 = {
  Name: "NAME",
} as const;
export type FieldCreateTemplateFieldTypeNameRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNameRequestBody1
>;

export const FieldCreateTemplateFieldTypeNameRequestBody2 = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldTypeNameRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNameRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignName = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignName
>;

export type FieldCreateTemplateFieldFieldMetaNameRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeNameRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignName | undefined;
};

export type FieldCreateTemplateFieldFieldName = {
  type: FieldCreateTemplateFieldTypeNameRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaNameRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeInitialsRequestBody1 = {
  Initials: "INITIALS",
} as const;
export type FieldCreateTemplateFieldTypeInitialsRequestBody1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeInitialsRequestBody1
>;

export const FieldCreateTemplateFieldTypeInitialsRequestBody2 = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldTypeInitialsRequestBody2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeInitialsRequestBody2
>;

export const FieldCreateTemplateFieldTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignInitials
>;

export type FieldCreateTemplateFieldFieldMetaInitialsRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeInitialsRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignInitials | undefined;
};

export type FieldCreateTemplateFieldFieldInitials = {
  type: FieldCreateTemplateFieldTypeInitialsRequestBody1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaInitialsRequestBody | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateTemplateFieldTypeFreeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeFreeSignature
>;

export type FieldCreateTemplateFieldFieldFreeSignature = {
  type: FieldCreateTemplateFieldTypeFreeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateTemplateFieldTypeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeSignature
>;

export type FieldCreateTemplateFieldFieldSignature = {
  type: FieldCreateTemplateFieldTypeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateTemplateFieldFieldUnion =
  | FieldCreateTemplateFieldFieldSignature
  | FieldCreateTemplateFieldFieldFreeSignature
  | FieldCreateTemplateFieldFieldInitials
  | FieldCreateTemplateFieldFieldName
  | FieldCreateTemplateFieldFieldEmail
  | FieldCreateTemplateFieldFieldDate
  | FieldCreateTemplateFieldFieldText
  | FieldCreateTemplateFieldFieldNumber
  | FieldCreateTemplateFieldFieldRadio
  | FieldCreateTemplateFieldFieldCheckbox
  | FieldCreateTemplateFieldFieldDropdown;

export type FieldCreateTemplateFieldRequest = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldFieldSignature
    | FieldCreateTemplateFieldFieldFreeSignature
    | FieldCreateTemplateFieldFieldInitials
    | FieldCreateTemplateFieldFieldName
    | FieldCreateTemplateFieldFieldEmail
    | FieldCreateTemplateFieldFieldDate
    | FieldCreateTemplateFieldFieldText
    | FieldCreateTemplateFieldFieldNumber
    | FieldCreateTemplateFieldFieldRadio
    | FieldCreateTemplateFieldFieldCheckbox
    | FieldCreateTemplateFieldFieldDropdown;
};

export const FieldCreateTemplateFieldTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldTypeResponse = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeResponse
>;

export const FieldCreateTemplateFieldFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeDropdown
>;

export type FieldCreateTemplateFieldValueResponse3 = {
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeDropdown;
  values?: Array<FieldCreateTemplateFieldValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox
>;

export type FieldCreateTemplateFieldValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeCheckbox;
  values?: Array<FieldCreateTemplateFieldValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeRadio = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeRadio
>;

export type FieldCreateTemplateFieldValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeRadio;
  values?: Array<FieldCreateTemplateFieldValueResponse1> | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeNumber
>;

export const FieldCreateTemplateFieldTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse6 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse6
>;

export type FieldCreateTemplateFieldFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse6 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeText = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeText
>;

export const FieldCreateTemplateFieldTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse5 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse5
>;

export type FieldCreateTemplateFieldFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse5 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeDate = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeDate
>;

export const FieldCreateTemplateFieldTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse4 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse4
>;

export type FieldCreateTemplateFieldFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse4 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeEmail
>;

export const FieldCreateTemplateFieldTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse3 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse3
>;

export type FieldCreateTemplateFieldFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse3 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeName = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeName
>;

export const FieldCreateTemplateFieldTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse2
>;

export type FieldCreateTemplateFieldFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse2 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeInitials
>;

export const FieldCreateTemplateFieldTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse1
>;

export type FieldCreateTemplateFieldFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse1 | undefined;
};

export type FieldCreateTemplateFieldFieldMetaUnion =
  | FieldCreateTemplateFieldFieldMetaRadioResponse
  | FieldCreateTemplateFieldFieldMetaInitialsResponse
  | FieldCreateTemplateFieldFieldMetaNameResponse
  | FieldCreateTemplateFieldFieldMetaEmailResponse
  | FieldCreateTemplateFieldFieldMetaDateResponse
  | FieldCreateTemplateFieldFieldMetaDropdownResponse
  | FieldCreateTemplateFieldFieldMetaCheckboxResponse
  | FieldCreateTemplateFieldFieldMetaTextResponse
  | FieldCreateTemplateFieldFieldMetaNumberResponse;

/**
 * Successful response
 */
export type FieldCreateTemplateFieldResponse = {
  type: FieldCreateTemplateFieldTypeResponse;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMetaRadioResponse
    | FieldCreateTemplateFieldFieldMetaInitialsResponse
    | FieldCreateTemplateFieldFieldMetaNameResponse
    | FieldCreateTemplateFieldFieldMetaEmailResponse
    | FieldCreateTemplateFieldFieldMetaDateResponse
    | FieldCreateTemplateFieldFieldMetaDropdownResponse
    | FieldCreateTemplateFieldFieldMetaCheckboxResponse
    | FieldCreateTemplateFieldFieldMetaTextResponse
    | FieldCreateTemplateFieldFieldMetaNumberResponse
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDropdownRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequestBody1> =
    FieldCreateTemplateFieldTypeDropdownRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDropdownRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDropdownRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequestBody2> =
    FieldCreateTemplateFieldTypeDropdownRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDropdownRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueDropdown$Outbound;
}

export function fieldCreateTemplateFieldValueDropdownToJSON(
  fieldCreateTemplateFieldValueDropdown: FieldCreateTemplateFieldValueDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldValueDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDropdownRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDropdownRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDropdownRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDropdownRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDropdownRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaDropdownRequestBody:
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDropdownRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDropdownRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDropdownRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDropdownRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDropdownRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeDropdownRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaDropdownRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldDropdown
> = z.object({
  type: FieldCreateTemplateFieldTypeDropdownRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldDropdown$Outbound;
}

export function fieldCreateTemplateFieldFieldDropdownToJSON(
  fieldCreateTemplateFieldFieldDropdown: FieldCreateTemplateFieldFieldDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldFieldDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeCheckboxRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequestBody1> =
    FieldCreateTemplateFieldTypeCheckboxRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeCheckboxRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeCheckboxRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequestBody2> =
    FieldCreateTemplateFieldTypeCheckboxRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeCheckboxRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueCheckbox$Outbound;
}

export function fieldCreateTemplateFieldValueCheckboxToJSON(
  fieldCreateTemplateFieldValueCheckbox: FieldCreateTemplateFieldValueCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldValueCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeCheckboxRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaCheckboxRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaCheckboxRequestBody:
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaCheckboxRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaCheckboxRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaCheckboxRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaCheckboxRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeCheckboxRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldCheckbox
> = z.object({
  type: FieldCreateTemplateFieldTypeCheckboxRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldCheckbox$Outbound;
}

export function fieldCreateTemplateFieldFieldCheckboxToJSON(
  fieldCreateTemplateFieldFieldCheckbox: FieldCreateTemplateFieldFieldCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldFieldCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeRadioRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequestBody1> =
    FieldCreateTemplateFieldTypeRadioRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeRadioRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeRadioRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeRadioRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeRadioRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequestBody2> =
    FieldCreateTemplateFieldTypeRadioRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeRadioRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeRadioRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeRadioRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldValueRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueRadio$Outbound;
}

export function fieldCreateTemplateFieldValueRadioToJSON(
  fieldCreateTemplateFieldValueRadio: FieldCreateTemplateFieldValueRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueRadio$outboundSchema.parse(
      fieldCreateTemplateFieldValueRadio,
    ),
  );
}

export function fieldCreateTemplateFieldValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeRadioRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaRadioRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaRadioRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeRadioRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaRadioRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaRadioRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaRadioRequestBody:
    FieldCreateTemplateFieldFieldMetaRadioRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaRadioRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaRadioRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaRadioRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaRadioRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaRadioRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeRadioRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaRadioRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldRadio
> = z.object({
  type: FieldCreateTemplateFieldTypeRadioRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaRadioRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldRadio$Outbound;
}

export function fieldCreateTemplateFieldFieldRadioToJSON(
  fieldCreateTemplateFieldFieldRadio: FieldCreateTemplateFieldFieldRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldRadio$outboundSchema.parse(
      fieldCreateTemplateFieldFieldRadio,
    ),
  );
}

export function fieldCreateTemplateFieldFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNumberRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequestBody1> =
    FieldCreateTemplateFieldTypeNumberRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNumberRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNumberRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNumberRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNumberRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequestBody2> =
    FieldCreateTemplateFieldTypeNumberRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNumberRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNumberRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNumberRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignNumber> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignNumber);

/** @internal */
export const FieldCreateTemplateFieldTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignNumber> =
    FieldCreateTemplateFieldTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNumberRequestBody2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignNumber$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNumberRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNumberRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNumberRequestBody2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNumberRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNumberRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaNumberRequestBody:
    FieldCreateTemplateFieldFieldMetaNumberRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNumberRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNumberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNumberRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNumberRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNumberRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldNumber$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeNumberRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaNumberRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldNumber$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldNumber
> = z.object({
  type: FieldCreateTemplateFieldTypeNumberRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNumberRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldNumber$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldNumber$Outbound;
}

export function fieldCreateTemplateFieldFieldNumberToJSON(
  fieldCreateTemplateFieldFieldNumber: FieldCreateTemplateFieldFieldNumber,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldNumber$outboundSchema.parse(
      fieldCreateTemplateFieldFieldNumber,
    ),
  );
}

export function fieldCreateTemplateFieldFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeTextRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequestBody1> =
    FieldCreateTemplateFieldTypeTextRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeTextRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeTextRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeTextRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeTextRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequestBody2> =
    FieldCreateTemplateFieldTypeTextRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeTextRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeTextRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeTextRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignText> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignText,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignText> =
    FieldCreateTemplateFieldTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignText$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeTextRequestBody2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTextRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTextRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeTextRequestBody2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTextRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTextRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTextRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaTextRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTextRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaTextRequestBody:
    FieldCreateTemplateFieldFieldMetaTextRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTextRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaTextRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaTextRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTextRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTextRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTextRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldText$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeTextRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaTextRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldText$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaTextRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldText$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldText$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldText
> = z.object({
  type: FieldCreateTemplateFieldTypeTextRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaTextRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldText$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldText$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldText$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldText$Outbound;
}

export function fieldCreateTemplateFieldFieldTextToJSON(
  fieldCreateTemplateFieldFieldText: FieldCreateTemplateFieldFieldText,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldText$outboundSchema.parse(
      fieldCreateTemplateFieldFieldText,
    ),
  );
}

export function fieldCreateTemplateFieldFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldText' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDateRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequestBody1> =
    FieldCreateTemplateFieldTypeDateRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDateRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDateRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDateRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDateRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequestBody2> =
    FieldCreateTemplateFieldTypeDateRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDateRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDateRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDateRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignDate> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignDate,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignDate> =
    FieldCreateTemplateFieldTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignDate$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDateRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDateRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDateRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDateRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDateRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDateRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDateRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaDateRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDateRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaDateRequestBody:
    FieldCreateTemplateFieldFieldMetaDateRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDateRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDateRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDateRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDateRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldDate$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeDateRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDateRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldDate$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaDateRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldDate$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDate$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldDate
> = z.object({
  type: FieldCreateTemplateFieldTypeDateRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDateRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldDate$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldDate$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldDate$Outbound;
}

export function fieldCreateTemplateFieldFieldDateToJSON(
  fieldCreateTemplateFieldFieldDate: FieldCreateTemplateFieldFieldDate,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldDate$outboundSchema.parse(
      fieldCreateTemplateFieldFieldDate,
    ),
  );
}

export function fieldCreateTemplateFieldFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeEmailRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequestBody1> =
    FieldCreateTemplateFieldTypeEmailRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeEmailRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeEmailRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeEmailRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeEmailRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequestBody2> =
    FieldCreateTemplateFieldTypeEmailRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeEmailRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeEmailRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeEmailRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignEmail> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignEmail,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignEmail> =
    FieldCreateTemplateFieldTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeEmailRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaEmailRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaEmailRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeEmailRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignEmail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaEmailRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaEmailRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaEmailRequestBody:
    FieldCreateTemplateFieldFieldMetaEmailRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaEmailRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaEmailRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaEmailRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaEmailRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaEmailRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldEmail$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeEmailRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaEmailRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldEmail$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldEmail
> = z.object({
  type: FieldCreateTemplateFieldTypeEmailRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaEmailRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldEmail$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldEmail$Outbound;
}

export function fieldCreateTemplateFieldFieldEmailToJSON(
  fieldCreateTemplateFieldFieldEmail: FieldCreateTemplateFieldFieldEmail,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldEmail$outboundSchema.parse(
      fieldCreateTemplateFieldFieldEmail,
    ),
  );
}

export function fieldCreateTemplateFieldFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNameRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequestBody1> =
    FieldCreateTemplateFieldTypeNameRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNameRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNameRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNameRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNameRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequestBody2> =
    FieldCreateTemplateFieldTypeNameRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNameRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNameRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNameRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignName> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignName,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignName> =
    FieldCreateTemplateFieldTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignName$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNameRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNameRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNameRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNameRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNameRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNameRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNameRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaNameRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNameRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaNameRequestBody:
    FieldCreateTemplateFieldFieldMetaNameRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNameRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNameRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNameRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNameRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNameRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNameRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldName$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeNameRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNameRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldName$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaNameRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldName$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldName$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldName
> = z.object({
  type: FieldCreateTemplateFieldTypeNameRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNameRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldName$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldName$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldName$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldName$Outbound;
}

export function fieldCreateTemplateFieldFieldNameToJSON(
  fieldCreateTemplateFieldFieldName: FieldCreateTemplateFieldFieldName,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldName$outboundSchema.parse(
      fieldCreateTemplateFieldFieldName,
    ),
  );
}

export function fieldCreateTemplateFieldFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldName' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequestBody1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeInitialsRequestBody1);

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequestBody1> =
    FieldCreateTemplateFieldTypeInitialsRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeInitialsRequestBody1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequestBody1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequestBody1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequestBody2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeInitialsRequestBody2);

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequestBody2> =
    FieldCreateTemplateFieldTypeInitialsRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeInitialsRequestBody2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequestBody2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequestBody2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignInitials> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignInitials);

/** @internal */
export const FieldCreateTemplateFieldTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignInitials> =
    FieldCreateTemplateFieldTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsRequestBody$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeInitialsRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaInitialsRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsRequestBody$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeInitialsRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaInitialsRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequestBody$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaInitialsRequestBodyToJSON(
  fieldCreateTemplateFieldFieldMetaInitialsRequestBody:
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaInitialsRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaInitialsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaInitialsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaInitialsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaInitialsRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldInitials$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeInitialsRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaInitialsRequestBody$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldInitials$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldInitials
> = z.object({
  type: FieldCreateTemplateFieldTypeInitialsRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsRequestBody$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldInitials$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldInitials$Outbound;
}

export function fieldCreateTemplateFieldFieldInitialsToJSON(
  fieldCreateTemplateFieldFieldInitials: FieldCreateTemplateFieldFieldInitials,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldInitials$outboundSchema.parse(
      fieldCreateTemplateFieldFieldInitials,
    ),
  );
}

export function fieldCreateTemplateFieldFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeFreeSignature> = z
    .nativeEnum(FieldCreateTemplateFieldTypeFreeSignature);

/** @internal */
export const FieldCreateTemplateFieldTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeFreeSignature> =
    FieldCreateTemplateFieldTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldFreeSignature$inboundSchema:
  z.ZodType<FieldCreateTemplateFieldFieldFreeSignature, z.ZodTypeDef, unknown> =
    z.object({
      type: FieldCreateTemplateFieldTypeFreeSignature$inboundSchema,
      recipientId: z.number(),
      pageNumber: z.number(),
      pageX: z.number(),
      pageY: z.number(),
      width: z.number(),
      height: z.number(),
    });

/** @internal */
export type FieldCreateTemplateFieldFieldFreeSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldFreeSignature
  > = z.object({
    type: FieldCreateTemplateFieldTypeFreeSignature$outboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldFreeSignature$Outbound;
}

export function fieldCreateTemplateFieldFieldFreeSignatureToJSON(
  fieldCreateTemplateFieldFieldFreeSignature:
    FieldCreateTemplateFieldFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldFreeSignature$outboundSchema.parse(
      fieldCreateTemplateFieldFieldFreeSignature,
    ),
  );
}

export function fieldCreateTemplateFieldFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeSignature> = z.nativeEnum(
    FieldCreateTemplateFieldTypeSignature,
  );

/** @internal */
export const FieldCreateTemplateFieldTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeSignature> =
    FieldCreateTemplateFieldTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldSignature$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeSignature$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldSignature$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldSignature
> = z.object({
  type: FieldCreateTemplateFieldTypeSignature$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldSignature$Outbound;
}

export function fieldCreateTemplateFieldFieldSignatureToJSON(
  fieldCreateTemplateFieldFieldSignature:
    FieldCreateTemplateFieldFieldSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldSignature$outboundSchema.parse(
      fieldCreateTemplateFieldFieldSignature,
    ),
  );
}

export function fieldCreateTemplateFieldFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldInitials$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldName$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldEmail$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDate$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldText$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldNumber$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldRadio$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldFieldUnion$Outbound =
  | FieldCreateTemplateFieldFieldSignature$Outbound
  | FieldCreateTemplateFieldFieldFreeSignature$Outbound
  | FieldCreateTemplateFieldFieldInitials$Outbound
  | FieldCreateTemplateFieldFieldName$Outbound
  | FieldCreateTemplateFieldFieldEmail$Outbound
  | FieldCreateTemplateFieldFieldDate$Outbound
  | FieldCreateTemplateFieldFieldText$Outbound
  | FieldCreateTemplateFieldFieldNumber$Outbound
  | FieldCreateTemplateFieldFieldRadio$Outbound
  | FieldCreateTemplateFieldFieldCheckbox$Outbound
  | FieldCreateTemplateFieldFieldDropdown$Outbound;

/** @internal */
export const FieldCreateTemplateFieldFieldUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldInitials$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldName$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldEmail$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDate$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldText$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldNumber$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldRadio$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldUnion$Outbound;
}

export function fieldCreateTemplateFieldFieldUnionToJSON(
  fieldCreateTemplateFieldFieldUnion: FieldCreateTemplateFieldFieldUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldUnion$outboundSchema.parse(
      fieldCreateTemplateFieldFieldUnion,
    ),
  );
}

export function fieldCreateTemplateFieldFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldFieldSignature$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldInitials$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldName$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldEmail$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDate$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldText$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldNumber$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldRadio$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDropdown$inboundSchema),
  ]),
});

/** @internal */
export type FieldCreateTemplateFieldRequest$Outbound = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldFieldSignature$Outbound
    | FieldCreateTemplateFieldFieldFreeSignature$Outbound
    | FieldCreateTemplateFieldFieldInitials$Outbound
    | FieldCreateTemplateFieldFieldName$Outbound
    | FieldCreateTemplateFieldFieldEmail$Outbound
    | FieldCreateTemplateFieldFieldDate$Outbound
    | FieldCreateTemplateFieldFieldText$Outbound
    | FieldCreateTemplateFieldFieldNumber$Outbound
    | FieldCreateTemplateFieldFieldRadio$Outbound
    | FieldCreateTemplateFieldFieldCheckbox$Outbound
    | FieldCreateTemplateFieldFieldDropdown$Outbound;
};

/** @internal */
export const FieldCreateTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldRequest
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldFieldSignature$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldInitials$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldName$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldEmail$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDate$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldText$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldNumber$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldRadio$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDropdown$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldRequest$Outbound;
}

export function fieldCreateTemplateFieldRequestToJSON(
  fieldCreateTemplateFieldRequest: FieldCreateTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldRequest$outboundSchema.parse(
      fieldCreateTemplateFieldRequest,
    ),
  );
}

export function fieldCreateTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeResponse> = z.nativeEnum(
    FieldCreateTemplateFieldTypeResponse,
  );

/** @internal */
export const FieldCreateTemplateFieldTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeResponse> =
    FieldCreateTemplateFieldTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeResponse$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDropdown> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeDropdown);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDropdown> =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse3$Outbound;
}

export function fieldCreateTemplateFieldValueResponse3ToJSON(
  fieldCreateTemplateFieldValueResponse3:
    FieldCreateTemplateFieldValueResponse3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse3$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse3,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDropdownResponseToJSON(
  fieldCreateTemplateFieldFieldMetaDropdownResponse:
    FieldCreateTemplateFieldFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDropdownResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeCheckbox);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox> =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse2$Outbound;
}

export function fieldCreateTemplateFieldValueResponse2ToJSON(
  fieldCreateTemplateFieldValueResponse2:
    FieldCreateTemplateFieldValueResponse2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse2$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse2,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaCheckboxResponseToJSON(
  fieldCreateTemplateFieldFieldMetaCheckboxResponse:
    FieldCreateTemplateFieldFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeRadio> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeRadio);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeRadio> =
    FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse1$Outbound;
}

export function fieldCreateTemplateFieldValueResponse1ToJSON(
  fieldCreateTemplateFieldValueResponse1:
    FieldCreateTemplateFieldValueResponse1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse1$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse1,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaRadioResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaRadioResponseToJSON(
  fieldCreateTemplateFieldFieldMetaRadioResponse:
    FieldCreateTemplateFieldFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaRadioResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeNumber> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeNumber);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeNumber> =
    FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse6> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse6);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse6> =
    FieldCreateTemplateFieldTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse6$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNumberResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNumberResponseToJSON(
  fieldCreateTemplateFieldFieldMetaNumberResponse:
    FieldCreateTemplateFieldFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNumberResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeText> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeText);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeText> =
    FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeText$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse5> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse5);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse5> =
    FieldCreateTemplateFieldTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse5$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTextResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaTextResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTextResponseToJSON(
  fieldCreateTemplateFieldFieldMetaTextResponse:
    FieldCreateTemplateFieldFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaTextResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDate> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeDate);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDate> =
    FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeDate$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse4> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse4);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse4> =
    FieldCreateTemplateFieldTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse4$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDateResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaDateResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDateResponseToJSON(
  fieldCreateTemplateFieldFieldMetaDateResponse:
    FieldCreateTemplateFieldFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDateResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeEmail> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeEmail);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeEmail> =
    FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse3> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse3);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse3> =
    FieldCreateTemplateFieldTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaEmailResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaEmailResponseToJSON(
  fieldCreateTemplateFieldFieldMetaEmailResponse:
    FieldCreateTemplateFieldFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaEmailResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeName> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeName);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeName> =
    FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeName$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse2> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse2);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse2> =
    FieldCreateTemplateFieldTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNameResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaNameResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNameResponseToJSON(
  fieldCreateTemplateFieldFieldMetaNameResponse:
    FieldCreateTemplateFieldFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNameResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeInitials> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeInitials);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeInitials> =
    FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse1> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse1);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse1> =
    FieldCreateTemplateFieldTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaInitialsResponseToJSON(
  fieldCreateTemplateFieldFieldMetaInitialsResponse:
    FieldCreateTemplateFieldFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaInitialsResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldFieldMetaUnion$Outbound =
  | FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaNameResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaDateResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaTextResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound;

/** @internal */
export const FieldCreateTemplateFieldFieldMetaUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMetaUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaUnion$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaUnionToJSON(
  fieldCreateTemplateFieldFieldMetaUnion:
    FieldCreateTemplateFieldFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaUnion$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaUnion,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldResponse$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema
      ),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaNameResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaDateResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaTextResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldResponse$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldResponse
> = z.object({
  type: FieldCreateTemplateFieldTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldResponse$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponse$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldResponse$Outbound;
}

export function fieldCreateTemplateFieldResponseToJSON(
  fieldCreateTemplateFieldResponse: FieldCreateTemplateFieldResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldResponse$outboundSchema.parse(
      fieldCreateTemplateFieldResponse,
    ),
  );
}

export function fieldCreateTemplateFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldResponse' from JSON`,
  );
}
