/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type =
  {
    Dropdown: "DROPDOWN",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues = {
  value: string;
};

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType;
    values?:
      | Array<FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues>
      | undefined;
    defaultValue?: string | undefined;
  };

export type FieldCreateTemplateFieldField11 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type =
  {
    Checkbox: "CHECKBOX",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType;
    values?:
      | Array<FieldCreateTemplateFieldFieldTemplatesFieldsValues>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

export type FieldCreateTemplateFieldField10 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type =
  {
    Radio: "RADIO",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType;
    values?: Array<FieldCreateTemplateFieldFieldValues> | undefined;
  };

export type FieldCreateTemplateFieldField9 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type =
  {
    Number: "NUMBER",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType =
  {
    Number: "number",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldField8 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type =
  {
    Text: "TEXT",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType =
  {
    Text: "text",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldField7 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type =
  {
    Date: "DATE",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType =
  {
    Date: "date",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldField6 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type =
  {
    Email: "EMAIL",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType =
  {
    Email: "email",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldField5 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type =
  {
    Name: "NAME",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type
  >;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType =
  {
    Name: "name",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType
  >;

export type FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldField4 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type;
  fieldMeta?: FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestType = {
  Initials: "INITIALS",
} as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestType =
  ClosedEnum<typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestType>;

export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType =
  {
    Initials: "initials",
  } as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType
  >;

export type FieldCreateTemplateFieldFieldFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldField3 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestType;
  fieldMeta?: FieldCreateTemplateFieldFieldFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldTemplatesFieldsType = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateTemplateFieldFieldTemplatesFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldTemplatesFieldsType
>;

export type FieldCreateTemplateFieldField2 = {
  type: FieldCreateTemplateFieldFieldTemplatesFieldsType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldFieldType = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateTemplateFieldFieldType = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldType
>;

export type FieldCreateTemplateFieldField1 = {
  type: FieldCreateTemplateFieldFieldType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateTemplateFieldField =
  | FieldCreateTemplateFieldField1
  | FieldCreateTemplateFieldField2
  | FieldCreateTemplateFieldField3
  | FieldCreateTemplateFieldField4
  | FieldCreateTemplateFieldField5
  | FieldCreateTemplateFieldField6
  | FieldCreateTemplateFieldField7
  | FieldCreateTemplateFieldField8
  | FieldCreateTemplateFieldField9
  | FieldCreateTemplateFieldField10
  | FieldCreateTemplateFieldField11;

export type FieldCreateTemplateFieldRequestBody = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldField1
    | FieldCreateTemplateFieldField2
    | FieldCreateTemplateFieldField3
    | FieldCreateTemplateFieldField4
    | FieldCreateTemplateFieldField5
    | FieldCreateTemplateFieldField6
    | FieldCreateTemplateFieldField7
    | FieldCreateTemplateFieldField8
    | FieldCreateTemplateFieldField9
    | FieldCreateTemplateFieldField10
    | FieldCreateTemplateFieldField11;
};

export const FieldCreateTemplateFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldType = ClosedEnum<
  typeof FieldCreateTemplateFieldType
>;

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  >;

export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues = {
  value: string;
};

export type FieldCreateTemplateFieldFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type;
  values?:
    | Array<FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  >;

export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type;
  values?:
    | Array<FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type =
  {
    Radio: "radio",
  } as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  >;

export type FieldCreateTemplateFieldFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type;
  values?: Array<FieldCreateTemplateFieldFieldMetaValues> | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldCreateTemplateFieldFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  >;

export type FieldCreateTemplateFieldFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  >;

export type FieldCreateTemplateFieldFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType
  >;

export type FieldCreateTemplateFieldFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsType = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsType
>;

export type FieldCreateTemplateFieldFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTemplatesFieldsType;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldFieldMetaType = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaType
>;

export type FieldCreateTemplateFieldFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldFieldMeta =
  | FieldCreateTemplateFieldFieldMeta1
  | FieldCreateTemplateFieldFieldMeta2
  | FieldCreateTemplateFieldFieldMeta3
  | FieldCreateTemplateFieldFieldMeta4
  | FieldCreateTemplateFieldFieldMeta7
  | FieldCreateTemplateFieldFieldMeta9
  | FieldCreateTemplateFieldFieldMeta5
  | FieldCreateTemplateFieldFieldMeta8
  | FieldCreateTemplateFieldFieldMeta6;

/**
 * Successful response
 */
export type FieldCreateTemplateFieldResponseBody = {
  type: FieldCreateTemplateFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMeta1
    | FieldCreateTemplateFieldFieldMeta2
    | FieldCreateTemplateFieldFieldMeta3
    | FieldCreateTemplateFieldFieldMeta4
    | FieldCreateTemplateFieldFieldMeta7
    | FieldCreateTemplateFieldFieldMeta9
    | FieldCreateTemplateFieldFieldMeta5
    | FieldCreateTemplateFieldFieldMeta8
    | FieldCreateTemplateFieldFieldMeta6
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestValuesToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestValues:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$outboundSchema
      .parse(fieldCreateTemplateFieldFieldTemplatesFieldsRequestValues),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<
        FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$Outbound
      >
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldFieldTemplatesFieldsRequestValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField11$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField11$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField11$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField11$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField11
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField11$ {
  /** @deprecated use `FieldCreateTemplateFieldField11$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField11$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField11$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField11$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField11$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField11$Outbound;
}

export function fieldCreateTemplateFieldField11ToJSON(
  fieldCreateTemplateFieldField11: FieldCreateTemplateFieldField11,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField11$outboundSchema.parse(
      fieldCreateTemplateFieldField11,
    ),
  );
}

export function fieldCreateTemplateFieldField11FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField11' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsValues$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsValuesToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsValues:
    FieldCreateTemplateFieldFieldTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsValues$outboundSchema.parse(
      fieldCreateTemplateFieldFieldTemplatesFieldsValues,
    ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldFieldTemplatesFieldsValues$inboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<FieldCreateTemplateFieldFieldTemplatesFieldsValues$Outbound>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldFieldTemplatesFieldsValues$outboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField10$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField10$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField10$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField10$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField10
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField10$ {
  /** @deprecated use `FieldCreateTemplateFieldField10$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField10$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField10$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField10$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField10$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField10$Outbound;
}

export function fieldCreateTemplateFieldField10ToJSON(
  fieldCreateTemplateFieldField10: FieldCreateTemplateFieldField10,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField10$outboundSchema.parse(
      fieldCreateTemplateFieldField10,
    ),
  );
}

export function fieldCreateTemplateFieldField10FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField10' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldValues$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldFieldValues$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldValues$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldValues$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldValues$Outbound;
}

export function fieldCreateTemplateFieldFieldValuesToJSON(
  fieldCreateTemplateFieldFieldValues: FieldCreateTemplateFieldFieldValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldValues$outboundSchema.parse(
      fieldCreateTemplateFieldFieldValues,
    ),
  );
}

export function fieldCreateTemplateFieldFieldValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldFieldValues$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldCreateTemplateFieldFieldValues$Outbound> | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldFieldValues$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField9$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField9$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField9$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField9$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField9
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField9$ {
  /** @deprecated use `FieldCreateTemplateFieldField9$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField9$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField9$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField9$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField9$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField9$Outbound;
}

export function fieldCreateTemplateFieldField9ToJSON(
  fieldCreateTemplateFieldField9: FieldCreateTemplateFieldField9,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField9$outboundSchema.parse(
      fieldCreateTemplateFieldField9,
    ),
  );
}

export function fieldCreateTemplateFieldField9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField9' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField8$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField8$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField8$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField8$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField8
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField8$ {
  /** @deprecated use `FieldCreateTemplateFieldField8$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField8$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField8$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField8$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField8$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField8$Outbound;
}

export function fieldCreateTemplateFieldField8ToJSON(
  fieldCreateTemplateFieldField8: FieldCreateTemplateFieldField8,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField8$outboundSchema.parse(
      fieldCreateTemplateFieldField8,
    ),
  );
}

export function fieldCreateTemplateFieldField8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField8' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField7$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField7$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField7$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField7$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField7
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField7$ {
  /** @deprecated use `FieldCreateTemplateFieldField7$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField7$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField7$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField7$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField7$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField7$Outbound;
}

export function fieldCreateTemplateFieldField7ToJSON(
  fieldCreateTemplateFieldField7: FieldCreateTemplateFieldField7,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField7$outboundSchema.parse(
      fieldCreateTemplateFieldField7,
    ),
  );
}

export function fieldCreateTemplateFieldField7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField7' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField6$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField6$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField6$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField6$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField6
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody6Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField6$ {
  /** @deprecated use `FieldCreateTemplateFieldField6$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField6$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField6$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField6$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField6$Outbound;
}

export function fieldCreateTemplateFieldField6ToJSON(
  fieldCreateTemplateFieldField6: FieldCreateTemplateFieldField6,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField6$outboundSchema.parse(
      fieldCreateTemplateFieldField6,
    ),
  );
}

export function fieldCreateTemplateFieldField6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField6' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$outboundSchema
      .parse(fieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField5$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField5$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField5$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField5$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField5
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody5Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField5$ {
  /** @deprecated use `FieldCreateTemplateFieldField5$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField5$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField5$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField5$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField5$Outbound;
}

export function fieldCreateTemplateFieldField5ToJSON(
  fieldCreateTemplateFieldField5: FieldCreateTemplateFieldField5,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField5$outboundSchema.parse(
      fieldCreateTemplateFieldField5,
    ),
  );
}

export function fieldCreateTemplateFieldField5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField5' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsFieldMetaToJSON(
  fieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta:
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$outboundSchema.parse(
      fieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta,
    ),
  );
}

export function fieldCreateTemplateFieldFieldTemplatesFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField4$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField4$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField4$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField4$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField4
> = z.object({
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBody4Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldTemplatesFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField4$ {
  /** @deprecated use `FieldCreateTemplateFieldField4$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField4$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField4$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField4$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField4$Outbound;
}

export function fieldCreateTemplateFieldField4ToJSON(
  fieldCreateTemplateFieldField4: FieldCreateTemplateFieldField4,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField4$outboundSchema.parse(
      fieldCreateTemplateFieldField4,
    ),
  );
}

export function fieldCreateTemplateFieldField4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField4' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestType
  > = z.nativeEnum(FieldCreateTemplateFieldFieldTemplatesFieldsRequestType);

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestType
  > = FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType
  > =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldFieldMeta$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldFieldMeta$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldTemplatesFieldsRequestRequestBodyType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldFieldMetaToJSON(
  fieldCreateTemplateFieldFieldFieldMeta:
    FieldCreateTemplateFieldFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldFieldMeta$outboundSchema.parse(
      fieldCreateTemplateFieldFieldFieldMeta,
    ),
  );
}

export function fieldCreateTemplateFieldFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$inboundSchema,
  fieldMeta: z.lazy(() => FieldCreateTemplateFieldFieldFieldMeta$inboundSchema)
    .optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField3$Outbound = {
  type: string;
  fieldMeta?: FieldCreateTemplateFieldFieldFieldMeta$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField3
> = z.object({
  type: FieldCreateTemplateFieldFieldTemplatesFieldsRequestType$outboundSchema,
  fieldMeta: z.lazy(() => FieldCreateTemplateFieldFieldFieldMeta$outboundSchema)
    .optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField3$ {
  /** @deprecated use `FieldCreateTemplateFieldField3$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField3$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField3$Outbound;
}

export function fieldCreateTemplateFieldField3ToJSON(
  fieldCreateTemplateFieldField3: FieldCreateTemplateFieldField3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField3$outboundSchema.parse(
      fieldCreateTemplateFieldField3,
    ),
  );
}

export function fieldCreateTemplateFieldField3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldTemplatesFieldsType> = z
    .nativeEnum(FieldCreateTemplateFieldFieldTemplatesFieldsType);

/** @internal */
export const FieldCreateTemplateFieldFieldTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldTemplatesFieldsType> =
    FieldCreateTemplateFieldFieldTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldTemplatesFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldField2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldFieldTemplatesFieldsType$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField2$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField2
> = z.object({
  type: FieldCreateTemplateFieldFieldTemplatesFieldsType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField2$ {
  /** @deprecated use `FieldCreateTemplateFieldField2$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField2$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField2$Outbound;
}

export function fieldCreateTemplateFieldField2ToJSON(
  fieldCreateTemplateFieldField2: FieldCreateTemplateFieldField2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField2$outboundSchema.parse(
      fieldCreateTemplateFieldField2,
    ),
  );
}

export function fieldCreateTemplateFieldField2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldFieldType
> = z.nativeEnum(FieldCreateTemplateFieldFieldType);

/** @internal */
export const FieldCreateTemplateFieldFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldFieldType
> = FieldCreateTemplateFieldFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldField1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldFieldType$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldField1$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldField1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField1
> = z.object({
  type: FieldCreateTemplateFieldFieldType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField1$ {
  /** @deprecated use `FieldCreateTemplateFieldField1$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField1$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField1$Outbound;
}

export function fieldCreateTemplateFieldField1ToJSON(
  fieldCreateTemplateFieldField1: FieldCreateTemplateFieldField1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField1$outboundSchema.parse(
      fieldCreateTemplateFieldField1,
    ),
  );
}

export function fieldCreateTemplateFieldField1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldField$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldField,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldField1$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField2$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField3$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField4$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField5$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField6$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField7$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField8$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField9$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField10$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField11$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldField$Outbound =
  | FieldCreateTemplateFieldField1$Outbound
  | FieldCreateTemplateFieldField2$Outbound
  | FieldCreateTemplateFieldField3$Outbound
  | FieldCreateTemplateFieldField4$Outbound
  | FieldCreateTemplateFieldField5$Outbound
  | FieldCreateTemplateFieldField6$Outbound
  | FieldCreateTemplateFieldField7$Outbound
  | FieldCreateTemplateFieldField8$Outbound
  | FieldCreateTemplateFieldField9$Outbound
  | FieldCreateTemplateFieldField10$Outbound
  | FieldCreateTemplateFieldField11$Outbound;

/** @internal */
export const FieldCreateTemplateFieldField$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldField$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldField
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldField1$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField2$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField3$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField4$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField5$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField6$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField7$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField8$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField9$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField10$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldField11$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldField$ {
  /** @deprecated use `FieldCreateTemplateFieldField$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldField$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldField$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldField$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldField$Outbound;
}

export function fieldCreateTemplateFieldFieldToJSON(
  fieldCreateTemplateFieldField: FieldCreateTemplateFieldField,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldField$outboundSchema.parse(
      fieldCreateTemplateFieldField,
    ),
  );
}

export function fieldCreateTemplateFieldFieldFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldField' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldRequestBody$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldField1$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField2$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField3$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField4$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField5$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField6$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField7$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField8$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField9$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField10$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField11$inboundSchema),
  ]),
});

/** @internal */
export type FieldCreateTemplateFieldRequestBody$Outbound = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldField1$Outbound
    | FieldCreateTemplateFieldField2$Outbound
    | FieldCreateTemplateFieldField3$Outbound
    | FieldCreateTemplateFieldField4$Outbound
    | FieldCreateTemplateFieldField5$Outbound
    | FieldCreateTemplateFieldField6$Outbound
    | FieldCreateTemplateFieldField7$Outbound
    | FieldCreateTemplateFieldField8$Outbound
    | FieldCreateTemplateFieldField9$Outbound
    | FieldCreateTemplateFieldField10$Outbound
    | FieldCreateTemplateFieldField11$Outbound;
};

/** @internal */
export const FieldCreateTemplateFieldRequestBody$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequestBody$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldRequestBody
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldField1$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField2$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField3$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField4$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField5$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField6$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField7$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField8$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField9$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField10$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldField11$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequestBody$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldRequestBody$Outbound;
}

export function fieldCreateTemplateFieldRequestBodyToJSON(
  fieldCreateTemplateFieldRequestBody: FieldCreateTemplateFieldRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldType
> = z.nativeEnum(FieldCreateTemplateFieldType);

/** @internal */
export const FieldCreateTemplateFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldType
> = FieldCreateTemplateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldType$ {
  /** @deprecated use `FieldCreateTemplateFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValuesToJSON(
  fieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema
      .parse(fieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues),
  );
}

export function fieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta9$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta9$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta9$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta9$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta9$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta9$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta9$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta9$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta9ToJSON(
  fieldCreateTemplateFieldFieldMeta9: FieldCreateTemplateFieldFieldMeta9,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta9$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta9,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTemplatesFieldsValuesToJSON(
  fieldCreateTemplateFieldFieldMetaTemplatesFieldsValues:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaTemplatesFieldsValues,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta8$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta8$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldFieldMetaTemplatesFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta8$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta8$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta8$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta8$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta8$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta8$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta8ToJSON(
  fieldCreateTemplateFieldFieldMeta8: FieldCreateTemplateFieldFieldMeta8,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta8$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta8,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaValues$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaValues$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaValues$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaValues$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaValuesToJSON(
  fieldCreateTemplateFieldFieldMetaValues:
    FieldCreateTemplateFieldFieldMetaValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaValues$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaValues,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta7$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateTemplateFieldFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta7$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateTemplateFieldFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta7$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta7$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta7$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta7$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta7$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta7$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta7ToJSON(
  fieldCreateTemplateFieldFieldMeta7: FieldCreateTemplateFieldFieldMeta7,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta7$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta7,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta6$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta6$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta6$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta6$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta6$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta6$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta6$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta6ToJSON(
  fieldCreateTemplateFieldFieldMeta6: FieldCreateTemplateFieldFieldMeta6,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta6$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta6,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta5$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta5$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta5$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta5$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta5$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta5$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta5$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta5ToJSON(
  fieldCreateTemplateFieldFieldMeta5: FieldCreateTemplateFieldFieldMeta5,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta5$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta5,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta4$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta4$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta4$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta4$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta4$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta4$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta4$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta4ToJSON(
  fieldCreateTemplateFieldFieldMeta4: FieldCreateTemplateFieldFieldMeta4,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta4$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta4,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType
  > = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType
  > =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta3$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta3$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta3$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta3ToJSON(
  fieldCreateTemplateFieldFieldMeta3: FieldCreateTemplateFieldFieldMeta3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta3$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta3,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsType> =
    z.nativeEnum(FieldCreateTemplateFieldFieldMetaTemplatesFieldsType);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTemplatesFieldsType> =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldFieldMetaTemplatesFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta2$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta2$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta2$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta2ToJSON(
  fieldCreateTemplateFieldFieldMeta2: FieldCreateTemplateFieldFieldMeta2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta2$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta2,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaType> = z.nativeEnum(
    FieldCreateTemplateFieldFieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaType> =
    FieldCreateTemplateFieldFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMeta1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta1$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta1$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta1$Outbound;
}

export function fieldCreateTemplateFieldFieldMeta1ToJSON(
  fieldCreateTemplateFieldFieldMeta1: FieldCreateTemplateFieldFieldMeta1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta1$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta1,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMeta$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMeta1$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta2$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta3$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta4$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta7$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta9$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta5$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta8$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldFieldMeta$Outbound =
  | FieldCreateTemplateFieldFieldMeta1$Outbound
  | FieldCreateTemplateFieldFieldMeta2$Outbound
  | FieldCreateTemplateFieldFieldMeta3$Outbound
  | FieldCreateTemplateFieldFieldMeta4$Outbound
  | FieldCreateTemplateFieldFieldMeta7$Outbound
  | FieldCreateTemplateFieldFieldMeta9$Outbound
  | FieldCreateTemplateFieldFieldMeta5$Outbound
  | FieldCreateTemplateFieldFieldMeta8$Outbound
  | FieldCreateTemplateFieldFieldMeta6$Outbound;

/** @internal */
export const FieldCreateTemplateFieldFieldMeta$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMeta
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMeta1$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta2$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta3$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta4$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta7$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta9$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta5$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta8$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaToJSON(
  fieldCreateTemplateFieldFieldMeta: FieldCreateTemplateFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMeta$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMeta,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldResponseBody$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldFieldMeta1$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta2$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta3$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta4$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta7$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta9$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta5$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta8$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldResponseBody$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMeta1$Outbound
    | FieldCreateTemplateFieldFieldMeta2$Outbound
    | FieldCreateTemplateFieldFieldMeta3$Outbound
    | FieldCreateTemplateFieldFieldMeta4$Outbound
    | FieldCreateTemplateFieldFieldMeta7$Outbound
    | FieldCreateTemplateFieldFieldMeta9$Outbound
    | FieldCreateTemplateFieldFieldMeta5$Outbound
    | FieldCreateTemplateFieldFieldMeta8$Outbound
    | FieldCreateTemplateFieldFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldResponseBody$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldResponseBody
> = z.object({
  type: FieldCreateTemplateFieldType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldFieldMeta1$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta2$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta3$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta4$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta7$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta9$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta5$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta8$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldResponseBody$ {
  /** @deprecated use `FieldCreateTemplateFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldResponseBody$Outbound;
}

export function fieldCreateTemplateFieldResponseBodyToJSON(
  fieldCreateTemplateFieldResponseBody: FieldCreateTemplateFieldResponseBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldResponseBody$outboundSchema.parse(
      fieldCreateTemplateFieldResponseBody,
    ),
  );
}

export function fieldCreateTemplateFieldResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldResponseBody' from JSON`,
  );
}
