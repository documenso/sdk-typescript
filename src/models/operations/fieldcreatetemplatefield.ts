/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateTemplateFieldTypeDropdownRequest1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldTypeDropdownRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDropdownRequest1
>;

export const FieldCreateTemplateFieldTypeDropdownRequest2 = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldTypeDropdownRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDropdownRequest2
>;

export type FieldCreateTemplateFieldValueDropdown = {
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaDropdownRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeDropdownRequest2;
  values?: Array<FieldCreateTemplateFieldValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldCreateTemplateFieldFieldDropdown = {
  type: FieldCreateTemplateFieldTypeDropdownRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaDropdownRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeCheckboxRequest1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldCreateTemplateFieldTypeCheckboxRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeCheckboxRequest1
>;

export const FieldCreateTemplateFieldTypeCheckboxRequest2 = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldTypeCheckboxRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeCheckboxRequest2
>;

export type FieldCreateTemplateFieldValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaCheckboxRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeCheckboxRequest2;
  values?: Array<FieldCreateTemplateFieldValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldCreateTemplateFieldFieldCheckbox = {
  type: FieldCreateTemplateFieldTypeCheckboxRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaCheckboxRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeRadioRequest1 = {
  Radio: "RADIO",
} as const;
export type FieldCreateTemplateFieldTypeRadioRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeRadioRequest1
>;

export const FieldCreateTemplateFieldTypeRadioRequest2 = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldTypeRadioRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeRadioRequest2
>;

export type FieldCreateTemplateFieldValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaRadioRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeRadioRequest2;
  values?: Array<FieldCreateTemplateFieldValueRadio> | undefined;
};

export type FieldCreateTemplateFieldFieldRadio = {
  type: FieldCreateTemplateFieldTypeRadioRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaRadioRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeNumberRequest1 = {
  Number: "NUMBER",
} as const;
export type FieldCreateTemplateFieldTypeNumberRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNumberRequest1
>;

export const FieldCreateTemplateFieldTypeNumberRequest2 = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldTypeNumberRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNumberRequest2
>;

export const FieldCreateTemplateFieldTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignNumber
>;

export type FieldCreateTemplateFieldFieldMetaNumberRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeNumberRequest2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignNumber | undefined;
};

export type FieldCreateTemplateFieldFieldNumber = {
  type: FieldCreateTemplateFieldTypeNumberRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaNumberRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeTextRequest1 = {
  Text: "TEXT",
} as const;
export type FieldCreateTemplateFieldTypeTextRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeTextRequest1
>;

export const FieldCreateTemplateFieldTypeTextRequest2 = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldTypeTextRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeTextRequest2
>;

export const FieldCreateTemplateFieldTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignText = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignText
>;

export type FieldCreateTemplateFieldFieldMetaTextRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeTextRequest2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignText | undefined;
};

export type FieldCreateTemplateFieldFieldText = {
  type: FieldCreateTemplateFieldTypeTextRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaTextRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeDateRequest1 = {
  Date: "DATE",
} as const;
export type FieldCreateTemplateFieldTypeDateRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDateRequest1
>;

export const FieldCreateTemplateFieldTypeDateRequest2 = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldTypeDateRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeDateRequest2
>;

export const FieldCreateTemplateFieldTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignDate = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignDate
>;

export type FieldCreateTemplateFieldFieldMetaDateRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeDateRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignDate | undefined;
};

export type FieldCreateTemplateFieldFieldDate = {
  type: FieldCreateTemplateFieldTypeDateRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaDateRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeEmailRequest1 = {
  Email: "EMAIL",
} as const;
export type FieldCreateTemplateFieldTypeEmailRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeEmailRequest1
>;

export const FieldCreateTemplateFieldTypeEmailRequest2 = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldTypeEmailRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeEmailRequest2
>;

export const FieldCreateTemplateFieldTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignEmail
>;

export type FieldCreateTemplateFieldFieldMetaEmailRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeEmailRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignEmail | undefined;
};

export type FieldCreateTemplateFieldFieldEmail = {
  type: FieldCreateTemplateFieldTypeEmailRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaEmailRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeNameRequest1 = {
  Name: "NAME",
} as const;
export type FieldCreateTemplateFieldTypeNameRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNameRequest1
>;

export const FieldCreateTemplateFieldTypeNameRequest2 = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldTypeNameRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeNameRequest2
>;

export const FieldCreateTemplateFieldTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignName = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignName
>;

export type FieldCreateTemplateFieldFieldMetaNameRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeNameRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignName | undefined;
};

export type FieldCreateTemplateFieldFieldName = {
  type: FieldCreateTemplateFieldTypeNameRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaNameRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeInitialsRequest1 = {
  Initials: "INITIALS",
} as const;
export type FieldCreateTemplateFieldTypeInitialsRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeInitialsRequest1
>;

export const FieldCreateTemplateFieldTypeInitialsRequest2 = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldTypeInitialsRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeInitialsRequest2
>;

export const FieldCreateTemplateFieldTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignInitials
>;

export type FieldCreateTemplateFieldFieldMetaInitialsRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldTypeInitialsRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignInitials | undefined;
};

export type FieldCreateTemplateFieldFieldInitials = {
  type: FieldCreateTemplateFieldTypeInitialsRequest1;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaInitialsRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateTemplateFieldTypeFreeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeFreeSignature
>;

export type FieldCreateTemplateFieldFieldFreeSignature = {
  type: FieldCreateTemplateFieldTypeFreeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateTemplateFieldTypeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeSignature
>;

export type FieldCreateTemplateFieldFieldSignature = {
  type: FieldCreateTemplateFieldTypeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateTemplateFieldFieldUnion =
  | FieldCreateTemplateFieldFieldSignature
  | FieldCreateTemplateFieldFieldFreeSignature
  | FieldCreateTemplateFieldFieldInitials
  | FieldCreateTemplateFieldFieldName
  | FieldCreateTemplateFieldFieldEmail
  | FieldCreateTemplateFieldFieldDate
  | FieldCreateTemplateFieldFieldText
  | FieldCreateTemplateFieldFieldNumber
  | FieldCreateTemplateFieldFieldRadio
  | FieldCreateTemplateFieldFieldCheckbox
  | FieldCreateTemplateFieldFieldDropdown;

export type FieldCreateTemplateFieldRequest = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldFieldSignature
    | FieldCreateTemplateFieldFieldFreeSignature
    | FieldCreateTemplateFieldFieldInitials
    | FieldCreateTemplateFieldFieldName
    | FieldCreateTemplateFieldFieldEmail
    | FieldCreateTemplateFieldFieldDate
    | FieldCreateTemplateFieldFieldText
    | FieldCreateTemplateFieldFieldNumber
    | FieldCreateTemplateFieldFieldRadio
    | FieldCreateTemplateFieldFieldCheckbox
    | FieldCreateTemplateFieldFieldDropdown;
};

export const FieldCreateTemplateFieldTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldTypeResponse = ClosedEnum<
  typeof FieldCreateTemplateFieldTypeResponse
>;

export const FieldCreateTemplateFieldFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeDropdown
>;

export type FieldCreateTemplateFieldValueResponse3 = {
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeDropdown;
  values?: Array<FieldCreateTemplateFieldValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox
>;

export type FieldCreateTemplateFieldValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeCheckbox;
  values?: Array<FieldCreateTemplateFieldValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeRadio = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeRadio
>;

export type FieldCreateTemplateFieldValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeRadio;
  values?: Array<FieldCreateTemplateFieldValueResponse1> | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeNumber
>;

export const FieldCreateTemplateFieldTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse6 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse6
>;

export type FieldCreateTemplateFieldFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse6 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeText = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeText
>;

export const FieldCreateTemplateFieldTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse5 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse5
>;

export type FieldCreateTemplateFieldFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse5 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeDate = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeDate
>;

export const FieldCreateTemplateFieldTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse4 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse4
>;

export type FieldCreateTemplateFieldFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse4 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeEmail
>;

export const FieldCreateTemplateFieldTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse3 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse3
>;

export type FieldCreateTemplateFieldFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse3 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeName = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeName
>;

export const FieldCreateTemplateFieldTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse2 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse2
>;

export type FieldCreateTemplateFieldFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse2 | undefined;
};

export const FieldCreateTemplateFieldFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldFieldMetaTypeInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldFieldMetaTypeInitials
>;

export const FieldCreateTemplateFieldTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldTextAlignResponse1 = ClosedEnum<
  typeof FieldCreateTemplateFieldTextAlignResponse1
>;

export type FieldCreateTemplateFieldFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldTextAlignResponse1 | undefined;
};

export type FieldCreateTemplateFieldFieldMetaUnion =
  | FieldCreateTemplateFieldFieldMetaRadioResponse
  | FieldCreateTemplateFieldFieldMetaInitialsResponse
  | FieldCreateTemplateFieldFieldMetaNameResponse
  | FieldCreateTemplateFieldFieldMetaEmailResponse
  | FieldCreateTemplateFieldFieldMetaDateResponse
  | FieldCreateTemplateFieldFieldMetaDropdownResponse
  | FieldCreateTemplateFieldFieldMetaCheckboxResponse
  | FieldCreateTemplateFieldFieldMetaTextResponse
  | FieldCreateTemplateFieldFieldMetaNumberResponse;

/**
 * Successful response
 */
export type FieldCreateTemplateFieldResponse = {
  type: FieldCreateTemplateFieldTypeResponse;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMetaRadioResponse
    | FieldCreateTemplateFieldFieldMetaInitialsResponse
    | FieldCreateTemplateFieldFieldMetaNameResponse
    | FieldCreateTemplateFieldFieldMetaEmailResponse
    | FieldCreateTemplateFieldFieldMetaDateResponse
    | FieldCreateTemplateFieldFieldMetaDropdownResponse
    | FieldCreateTemplateFieldFieldMetaCheckboxResponse
    | FieldCreateTemplateFieldFieldMetaTextResponse
    | FieldCreateTemplateFieldFieldMetaNumberResponse
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDropdownRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequest1> =
    FieldCreateTemplateFieldTypeDropdownRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDropdownRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDropdownRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeDropdownRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDropdownRequest2> =
    FieldCreateTemplateFieldTypeDropdownRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDropdownRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDropdownRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDropdownRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueDropdown$Outbound;
}

export function fieldCreateTemplateFieldValueDropdownToJSON(
  fieldCreateTemplateFieldValueDropdown: FieldCreateTemplateFieldValueDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldValueDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDropdownRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDropdownRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDropdownRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDropdownRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDropdownRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaDropdownRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDropdownRequestToJSON(
  fieldCreateTemplateFieldFieldMetaDropdownRequest:
    FieldCreateTemplateFieldFieldMetaDropdownRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDropdownRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDropdownRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDropdownRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDropdownRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDropdownRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDropdownRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeDropdownRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaDropdownRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldDropdown
> = z.object({
  type: FieldCreateTemplateFieldTypeDropdownRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldDropdown$Outbound;
}

export function fieldCreateTemplateFieldFieldDropdownToJSON(
  fieldCreateTemplateFieldFieldDropdown: FieldCreateTemplateFieldFieldDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldFieldDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeCheckboxRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequest1> =
    FieldCreateTemplateFieldTypeCheckboxRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeCheckboxRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeCheckboxRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeCheckboxRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeCheckboxRequest2> =
    FieldCreateTemplateFieldTypeCheckboxRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeCheckboxRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeCheckboxRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeCheckboxRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueCheckbox$Outbound;
}

export function fieldCreateTemplateFieldValueCheckboxToJSON(
  fieldCreateTemplateFieldValueCheckbox: FieldCreateTemplateFieldValueCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldValueCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeCheckboxRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaCheckboxRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaCheckboxRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeCheckboxRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaCheckboxRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaCheckboxRequestToJSON(
  fieldCreateTemplateFieldFieldMetaCheckboxRequest:
    FieldCreateTemplateFieldFieldMetaCheckboxRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaCheckboxRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaCheckboxRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaCheckboxRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaCheckboxRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaCheckboxRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeCheckboxRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaCheckboxRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldCheckbox
> = z.object({
  type: FieldCreateTemplateFieldTypeCheckboxRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldCheckbox$Outbound;
}

export function fieldCreateTemplateFieldFieldCheckboxToJSON(
  fieldCreateTemplateFieldFieldCheckbox: FieldCreateTemplateFieldFieldCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldFieldCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeRadioRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequest1> =
    FieldCreateTemplateFieldTypeRadioRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeRadioRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeRadioRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeRadioRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeRadioRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeRadioRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeRadioRequest2> =
    FieldCreateTemplateFieldTypeRadioRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeRadioRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeRadioRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeRadioRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeRadioRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldValueRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueRadio$Outbound;
}

export function fieldCreateTemplateFieldValueRadioToJSON(
  fieldCreateTemplateFieldValueRadio: FieldCreateTemplateFieldValueRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueRadio$outboundSchema.parse(
      fieldCreateTemplateFieldValueRadio,
    ),
  );
}

export function fieldCreateTemplateFieldValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeRadioRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaRadioRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaRadioRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeRadioRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaRadioRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaRadioRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaRadioRequestToJSON(
  fieldCreateTemplateFieldFieldMetaRadioRequest:
    FieldCreateTemplateFieldFieldMetaRadioRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaRadioRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaRadioRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaRadioRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaRadioRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaRadioRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaRadioRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeRadioRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaRadioRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaRadioRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldRadio
> = z.object({
  type: FieldCreateTemplateFieldTypeRadioRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaRadioRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldRadio$Outbound;
}

export function fieldCreateTemplateFieldFieldRadioToJSON(
  fieldCreateTemplateFieldFieldRadio: FieldCreateTemplateFieldFieldRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldRadio$outboundSchema.parse(
      fieldCreateTemplateFieldFieldRadio,
    ),
  );
}

export function fieldCreateTemplateFieldFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNumberRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequest1> =
    FieldCreateTemplateFieldTypeNumberRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNumberRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNumberRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNumberRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNumberRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeNumberRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNumberRequest2> =
    FieldCreateTemplateFieldTypeNumberRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNumberRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNumberRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNumberRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNumberRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignNumber> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignNumber);

/** @internal */
export const FieldCreateTemplateFieldTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignNumber> =
    FieldCreateTemplateFieldTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNumberRequest2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignNumber$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNumberRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNumberRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNumberRequest2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNumberRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaNumberRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNumberRequestToJSON(
  fieldCreateTemplateFieldFieldMetaNumberRequest:
    FieldCreateTemplateFieldFieldMetaNumberRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNumberRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNumberRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNumberRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNumberRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNumberRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNumberRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldNumber$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeNumberRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNumberRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaNumberRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldNumber$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldNumber
> = z.object({
  type: FieldCreateTemplateFieldTypeNumberRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNumberRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldNumber$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldNumber$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldNumber$Outbound;
}

export function fieldCreateTemplateFieldFieldNumberToJSON(
  fieldCreateTemplateFieldFieldNumber: FieldCreateTemplateFieldFieldNumber,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldNumber$outboundSchema.parse(
      fieldCreateTemplateFieldFieldNumber,
    ),
  );
}

export function fieldCreateTemplateFieldFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeTextRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequest1> =
    FieldCreateTemplateFieldTypeTextRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeTextRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeTextRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeTextRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeTextRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeTextRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeTextRequest2> =
    FieldCreateTemplateFieldTypeTextRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeTextRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeTextRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeTextRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeTextRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignText> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignText,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignText> =
    FieldCreateTemplateFieldTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignText$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeTextRequest2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTextRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTextRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeTextRequest2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTextRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTextRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTextRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaTextRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTextRequestToJSON(
  fieldCreateTemplateFieldFieldMetaTextRequest:
    FieldCreateTemplateFieldFieldMetaTextRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTextRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaTextRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTextRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTextRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTextRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldText$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeTextRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaTextRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldText$Outbound = {
  type: string;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaTextRequest$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldText$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldText$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldText
> = z.object({
  type: FieldCreateTemplateFieldTypeTextRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaTextRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldText$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldText$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldText$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldText$Outbound;
}

export function fieldCreateTemplateFieldFieldTextToJSON(
  fieldCreateTemplateFieldFieldText: FieldCreateTemplateFieldFieldText,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldText$outboundSchema.parse(
      fieldCreateTemplateFieldFieldText,
    ),
  );
}

export function fieldCreateTemplateFieldFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldText' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDateRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequest1> =
    FieldCreateTemplateFieldTypeDateRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDateRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDateRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDateRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeDateRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeDateRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeDateRequest2> =
    FieldCreateTemplateFieldTypeDateRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeDateRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeDateRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeDateRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeDateRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignDate> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignDate,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignDate> =
    FieldCreateTemplateFieldTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignDate$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDateRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDateRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDateRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeDateRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDateRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDateRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDateRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaDateRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDateRequestToJSON(
  fieldCreateTemplateFieldFieldMetaDateRequest:
    FieldCreateTemplateFieldFieldMetaDateRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDateRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDateRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDateRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldDate$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeDateRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDateRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldDate$Outbound = {
  type: string;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaDateRequest$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldDate$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldDate$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldDate
> = z.object({
  type: FieldCreateTemplateFieldTypeDateRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDateRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldDate$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldDate$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldDate$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldDate$Outbound;
}

export function fieldCreateTemplateFieldFieldDateToJSON(
  fieldCreateTemplateFieldFieldDate: FieldCreateTemplateFieldFieldDate,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldDate$outboundSchema.parse(
      fieldCreateTemplateFieldFieldDate,
    ),
  );
}

export function fieldCreateTemplateFieldFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeEmailRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequest1> =
    FieldCreateTemplateFieldTypeEmailRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeEmailRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeEmailRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeEmailRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeEmailRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeEmailRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeEmailRequest2> =
    FieldCreateTemplateFieldTypeEmailRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeEmailRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeEmailRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeEmailRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeEmailRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignEmail> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignEmail,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignEmail> =
    FieldCreateTemplateFieldTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeEmailRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaEmailRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaEmailRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeEmailRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignEmail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaEmailRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaEmailRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaEmailRequestToJSON(
  fieldCreateTemplateFieldFieldMetaEmailRequest:
    FieldCreateTemplateFieldFieldMetaEmailRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaEmailRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaEmailRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaEmailRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaEmailRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaEmailRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldEmail$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeEmailRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaEmailRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaEmailRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldEmail$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldEmail
> = z.object({
  type: FieldCreateTemplateFieldTypeEmailRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaEmailRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldEmail$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldEmail$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldEmail$Outbound;
}

export function fieldCreateTemplateFieldFieldEmailToJSON(
  fieldCreateTemplateFieldFieldEmail: FieldCreateTemplateFieldFieldEmail,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldEmail$outboundSchema.parse(
      fieldCreateTemplateFieldFieldEmail,
    ),
  );
}

export function fieldCreateTemplateFieldFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNameRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequest1> =
    FieldCreateTemplateFieldTypeNameRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNameRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNameRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNameRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeNameRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeNameRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeNameRequest2> =
    FieldCreateTemplateFieldTypeNameRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeNameRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeNameRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeNameRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeNameRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignName> = z.nativeEnum(
    FieldCreateTemplateFieldTextAlignName,
  );

/** @internal */
export const FieldCreateTemplateFieldTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignName> =
    FieldCreateTemplateFieldTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignName$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNameRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNameRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNameRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeNameRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNameRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNameRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNameRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaNameRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNameRequestToJSON(
  fieldCreateTemplateFieldFieldMetaNameRequest:
    FieldCreateTemplateFieldFieldMetaNameRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNameRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNameRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNameRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNameRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNameRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldName$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeNameRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNameRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldName$Outbound = {
  type: string;
  fieldMeta?: FieldCreateTemplateFieldFieldMetaNameRequest$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldName$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldName$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldName
> = z.object({
  type: FieldCreateTemplateFieldTypeNameRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaNameRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldName$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldName$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldName$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldName$Outbound;
}

export function fieldCreateTemplateFieldFieldNameToJSON(
  fieldCreateTemplateFieldFieldName: FieldCreateTemplateFieldFieldName,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldName$outboundSchema.parse(
      fieldCreateTemplateFieldFieldName,
    ),
  );
}

export function fieldCreateTemplateFieldFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldName' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldTypeInitialsRequest1);

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequest1> =
    FieldCreateTemplateFieldTypeInitialsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeInitialsRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldTypeInitialsRequest2);

/** @internal */
export const FieldCreateTemplateFieldTypeInitialsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeInitialsRequest2> =
    FieldCreateTemplateFieldTypeInitialsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeInitialsRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeInitialsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeInitialsRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignInitials> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignInitials);

/** @internal */
export const FieldCreateTemplateFieldTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignInitials> =
    FieldCreateTemplateFieldTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeInitialsRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaInitialsRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaInitialsRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldTypeInitialsRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaInitialsRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaInitialsRequest$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaInitialsRequestToJSON(
  fieldCreateTemplateFieldFieldMetaInitialsRequest:
    FieldCreateTemplateFieldFieldMetaInitialsRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaInitialsRequest$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaInitialsRequest,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaInitialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaInitialsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaInitialsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaInitialsRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldInitials$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeInitialsRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldFieldMetaInitialsRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldInitials$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldInitials
> = z.object({
  type: FieldCreateTemplateFieldTypeInitialsRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldInitials$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldInitials$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldInitials$Outbound;
}

export function fieldCreateTemplateFieldFieldInitialsToJSON(
  fieldCreateTemplateFieldFieldInitials: FieldCreateTemplateFieldFieldInitials,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldInitials$outboundSchema.parse(
      fieldCreateTemplateFieldFieldInitials,
    ),
  );
}

export function fieldCreateTemplateFieldFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeFreeSignature> = z
    .nativeEnum(FieldCreateTemplateFieldTypeFreeSignature);

/** @internal */
export const FieldCreateTemplateFieldTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeFreeSignature> =
    FieldCreateTemplateFieldTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldFreeSignature$inboundSchema:
  z.ZodType<FieldCreateTemplateFieldFieldFreeSignature, z.ZodTypeDef, unknown> =
    z.object({
      type: FieldCreateTemplateFieldTypeFreeSignature$inboundSchema,
      recipientId: z.number(),
      pageNumber: z.number(),
      pageX: z.number(),
      pageY: z.number(),
      width: z.number(),
      height: z.number(),
    });

/** @internal */
export type FieldCreateTemplateFieldFieldFreeSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldFreeSignature
  > = z.object({
    type: FieldCreateTemplateFieldTypeFreeSignature$outboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldFreeSignature$Outbound;
}

export function fieldCreateTemplateFieldFieldFreeSignatureToJSON(
  fieldCreateTemplateFieldFieldFreeSignature:
    FieldCreateTemplateFieldFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldFreeSignature$outboundSchema.parse(
      fieldCreateTemplateFieldFieldFreeSignature,
    ),
  );
}

export function fieldCreateTemplateFieldFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeSignature> = z.nativeEnum(
    FieldCreateTemplateFieldTypeSignature,
  );

/** @internal */
export const FieldCreateTemplateFieldTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeSignature> =
    FieldCreateTemplateFieldTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldSignature$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeSignature$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldFieldSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldFieldSignature$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldSignature
> = z.object({
  type: FieldCreateTemplateFieldTypeSignature$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldSignature$Outbound;
}

export function fieldCreateTemplateFieldFieldSignatureToJSON(
  fieldCreateTemplateFieldFieldSignature:
    FieldCreateTemplateFieldFieldSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldSignature$outboundSchema.parse(
      fieldCreateTemplateFieldFieldSignature,
    ),
  );
}

export function fieldCreateTemplateFieldFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldInitials$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldName$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldEmail$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDate$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldText$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldNumber$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldRadio$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldFieldUnion$Outbound =
  | FieldCreateTemplateFieldFieldSignature$Outbound
  | FieldCreateTemplateFieldFieldFreeSignature$Outbound
  | FieldCreateTemplateFieldFieldInitials$Outbound
  | FieldCreateTemplateFieldFieldName$Outbound
  | FieldCreateTemplateFieldFieldEmail$Outbound
  | FieldCreateTemplateFieldFieldDate$Outbound
  | FieldCreateTemplateFieldFieldText$Outbound
  | FieldCreateTemplateFieldFieldNumber$Outbound
  | FieldCreateTemplateFieldFieldRadio$Outbound
  | FieldCreateTemplateFieldFieldCheckbox$Outbound
  | FieldCreateTemplateFieldFieldDropdown$Outbound;

/** @internal */
export const FieldCreateTemplateFieldFieldUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldInitials$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldName$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldEmail$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDate$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldText$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldNumber$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldRadio$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldFieldUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldUnion$Outbound;
}

export function fieldCreateTemplateFieldFieldUnionToJSON(
  fieldCreateTemplateFieldFieldUnion: FieldCreateTemplateFieldFieldUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldUnion$outboundSchema.parse(
      fieldCreateTemplateFieldFieldUnion,
    ),
  );
}

export function fieldCreateTemplateFieldFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldFieldSignature$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldInitials$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldName$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldEmail$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDate$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldText$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldNumber$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldRadio$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$inboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDropdown$inboundSchema),
  ]),
});

/** @internal */
export type FieldCreateTemplateFieldRequest$Outbound = {
  templateId: number;
  field:
    | FieldCreateTemplateFieldFieldSignature$Outbound
    | FieldCreateTemplateFieldFieldFreeSignature$Outbound
    | FieldCreateTemplateFieldFieldInitials$Outbound
    | FieldCreateTemplateFieldFieldName$Outbound
    | FieldCreateTemplateFieldFieldEmail$Outbound
    | FieldCreateTemplateFieldFieldDate$Outbound
    | FieldCreateTemplateFieldFieldText$Outbound
    | FieldCreateTemplateFieldFieldNumber$Outbound
    | FieldCreateTemplateFieldFieldRadio$Outbound
    | FieldCreateTemplateFieldFieldCheckbox$Outbound
    | FieldCreateTemplateFieldFieldDropdown$Outbound;
};

/** @internal */
export const FieldCreateTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldRequest
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldCreateTemplateFieldFieldSignature$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldFreeSignature$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldInitials$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldName$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldEmail$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDate$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldText$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldNumber$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldRadio$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldCheckbox$outboundSchema),
    z.lazy(() => FieldCreateTemplateFieldFieldDropdown$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldRequest$Outbound;
}

export function fieldCreateTemplateFieldRequestToJSON(
  fieldCreateTemplateFieldRequest: FieldCreateTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldRequest$outboundSchema.parse(
      fieldCreateTemplateFieldRequest,
    ),
  );
}

export function fieldCreateTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeResponse> = z.nativeEnum(
    FieldCreateTemplateFieldTypeResponse,
  );

/** @internal */
export const FieldCreateTemplateFieldTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTypeResponse> =
    FieldCreateTemplateFieldTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTypeResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTypeResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTypeResponse$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDropdown> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeDropdown);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDropdown> =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse3$Outbound;
}

export function fieldCreateTemplateFieldValueResponse3ToJSON(
  fieldCreateTemplateFieldValueResponse3:
    FieldCreateTemplateFieldValueResponse3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse3$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse3,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDropdownResponseToJSON(
  fieldCreateTemplateFieldFieldMetaDropdownResponse:
    FieldCreateTemplateFieldFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDropdownResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeCheckbox);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeCheckbox> =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse2$Outbound;
}

export function fieldCreateTemplateFieldValueResponse2ToJSON(
  fieldCreateTemplateFieldValueResponse2:
    FieldCreateTemplateFieldValueResponse2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse2$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse2,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaCheckboxResponseToJSON(
  fieldCreateTemplateFieldFieldMetaCheckboxResponse:
    FieldCreateTemplateFieldFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeRadio> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeRadio);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeRadio> =
    FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldValueResponse1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldValueResponse1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldValueResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldValueResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldValueResponse1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldValueResponse1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldValueResponse1$Outbound;
}

export function fieldCreateTemplateFieldValueResponse1ToJSON(
  fieldCreateTemplateFieldValueResponse1:
    FieldCreateTemplateFieldValueResponse1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldValueResponse1$outboundSchema.parse(
      fieldCreateTemplateFieldValueResponse1,
    ),
  );
}

export function fieldCreateTemplateFieldValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldValueResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldValueResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaRadioResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaRadioResponseToJSON(
  fieldCreateTemplateFieldFieldMetaRadioResponse:
    FieldCreateTemplateFieldFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaRadioResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeNumber> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeNumber);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeNumber> =
    FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse6> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse6);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse6> =
    FieldCreateTemplateFieldTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse6$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNumberResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNumberResponseToJSON(
  fieldCreateTemplateFieldFieldMetaNumberResponse:
    FieldCreateTemplateFieldFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNumberResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeText> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeText);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeText> =
    FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeText$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse5> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse5);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse5> =
    FieldCreateTemplateFieldTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse5$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTextResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTextResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaTextResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaTextResponseToJSON(
  fieldCreateTemplateFieldFieldMetaTextResponse:
    FieldCreateTemplateFieldFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaTextResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDate> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeDate);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeDate> =
    FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeDate$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse4> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse4);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse4> =
    FieldCreateTemplateFieldTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse4$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaDateResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaDateResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaDateResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaDateResponseToJSON(
  fieldCreateTemplateFieldFieldMetaDateResponse:
    FieldCreateTemplateFieldFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaDateResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeEmail> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeEmail);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeEmail> =
    FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse3> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse3);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse3> =
    FieldCreateTemplateFieldTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaEmailResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaEmailResponseToJSON(
  fieldCreateTemplateFieldFieldMetaEmailResponse:
    FieldCreateTemplateFieldFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaEmailResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeName> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeName);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeName> =
    FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeName$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse2> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse2);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse2> =
    FieldCreateTemplateFieldTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaNameResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaNameResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaNameResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaNameResponseToJSON(
  fieldCreateTemplateFieldFieldMetaNameResponse:
    FieldCreateTemplateFieldFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaNameResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeInitials> = z
    .nativeEnum(FieldCreateTemplateFieldFieldMetaTypeInitials);

/** @internal */
export const FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldFieldMetaTypeInitials> =
    FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaTypeInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse1> = z
    .nativeEnum(FieldCreateTemplateFieldTextAlignResponse1);

/** @internal */
export const FieldCreateTemplateFieldTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldTextAlignResponse1> =
    FieldCreateTemplateFieldTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldTextAlignResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaInitialsResponseToJSON(
  fieldCreateTemplateFieldFieldMetaInitialsResponse:
    FieldCreateTemplateFieldFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaInitialsResponse,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldFieldMetaUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldFieldMetaUnion$Outbound =
  | FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaNameResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaDateResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaTextResponse$Outbound
  | FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound;

/** @internal */
export const FieldCreateTemplateFieldFieldMetaUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldFieldMetaUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldFieldMetaUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldFieldMetaUnion$Outbound;
}

export function fieldCreateTemplateFieldFieldMetaUnionToJSON(
  fieldCreateTemplateFieldFieldMetaUnion:
    FieldCreateTemplateFieldFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldFieldMetaUnion$outboundSchema.parse(
      fieldCreateTemplateFieldFieldMetaUnion,
    ),
  );
}

export function fieldCreateTemplateFieldFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldResponse$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaNameResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaDateResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDropdownResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() => FieldCreateTemplateFieldFieldMetaTextResponse$inboundSchema),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNumberResponse$inboundSchema
      ),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldFieldMetaRadioResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaInitialsResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaNameResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaEmailResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaDateResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaDropdownResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaCheckboxResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaTextResponse$Outbound
    | FieldCreateTemplateFieldFieldMetaNumberResponse$Outbound
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldResponse$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldResponse
> = z.object({
  type: FieldCreateTemplateFieldTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaDropdownResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldFieldMetaNumberResponse$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldResponse$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponse$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldResponse$Outbound;
}

export function fieldCreateTemplateFieldResponseToJSON(
  fieldCreateTemplateFieldResponse: FieldCreateTemplateFieldResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldResponse$outboundSchema.parse(
      fieldCreateTemplateFieldResponse,
    ),
  );
}

export function fieldCreateTemplateFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldResponse' from JSON`,
  );
}
