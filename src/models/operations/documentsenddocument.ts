/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentSendDocumentDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentSendDocumentDateFormat = ClosedEnum<
  typeof DocumentSendDocumentDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentSendDocumentDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentSendDocumentDistributionMethod = ClosedEnum<
  typeof DocumentSendDocumentDistributionMethod
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentSendDocumentLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentSendDocumentLanguage = ClosedEnum<
  typeof DocumentSendDocumentLanguage
>;

export type DocumentSendDocumentEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentSendDocumentMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentSendDocumentDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: DocumentSendDocumentDistributionMethod | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentSendDocumentLanguage | undefined;
  emailSettings?: DocumentSendDocumentEmailSettings | undefined;
};

export type DocumentSendDocumentRequest = {
  /**
   * The ID of the document to send.
   */
  documentId: number;
  meta?: DocumentSendDocumentMeta | undefined;
};

export const DocumentSendDocumentVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentSendDocumentVisibility = ClosedEnum<
  typeof DocumentSendDocumentVisibility
>;

export const DocumentSendDocumentStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentSendDocumentStatus = ClosedEnum<
  typeof DocumentSendDocumentStatus
>;

export const DocumentSendDocumentSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentSendDocumentSource = ClosedEnum<
  typeof DocumentSendDocumentSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentSendDocumentGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentSendDocumentGlobalAccessAuth = ClosedEnum<
  typeof DocumentSendDocumentGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentSendDocumentGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentSendDocumentGlobalActionAuth = ClosedEnum<
  typeof DocumentSendDocumentGlobalActionAuth
>;

export type DocumentSendDocumentAuthOptions = {
  globalAccessAuth: Array<DocumentSendDocumentGlobalAccessAuth>;
  globalActionAuth: Array<DocumentSendDocumentGlobalActionAuth>;
};

export type DocumentSendDocumentFormValues = string | boolean | number;

/**
 * Successful response
 */
export type DocumentSendDocumentResponse = {
  visibility: DocumentSendDocumentVisibility;
  status: DocumentSendDocumentStatus;
  source: DocumentSendDocumentSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentSendDocumentAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentSendDocumentDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentDateFormat
> = z.nativeEnum(DocumentSendDocumentDateFormat);

/** @internal */
export const DocumentSendDocumentDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentDateFormat
> = DocumentSendDocumentDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentDateFormat$ {
  /** @deprecated use `DocumentSendDocumentDateFormat$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentDateFormat$inboundSchema;
  /** @deprecated use `DocumentSendDocumentDateFormat$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentDateFormat$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentDistributionMethod> = z.nativeEnum(
    DocumentSendDocumentDistributionMethod,
  );

/** @internal */
export const DocumentSendDocumentDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentDistributionMethod> =
    DocumentSendDocumentDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentDistributionMethod$ {
  /** @deprecated use `DocumentSendDocumentDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSendDocumentDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentSendDocumentDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentLanguage$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentLanguage
> = z.nativeEnum(DocumentSendDocumentLanguage);

/** @internal */
export const DocumentSendDocumentLanguage$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentLanguage
> = DocumentSendDocumentLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentLanguage$ {
  /** @deprecated use `DocumentSendDocumentLanguage$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentLanguage$inboundSchema;
  /** @deprecated use `DocumentSendDocumentLanguage$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentLanguage$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentEmailSettings$inboundSchema: z.ZodType<
  DocumentSendDocumentEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentSendDocumentEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentSendDocumentEmailSettings$outboundSchema: z.ZodType<
  DocumentSendDocumentEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentEmailSettings$ {
  /** @deprecated use `DocumentSendDocumentEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentEmailSettings$inboundSchema;
  /** @deprecated use `DocumentSendDocumentEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentEmailSettings$outboundSchema;
  /** @deprecated use `DocumentSendDocumentEmailSettings$Outbound` instead. */
  export type Outbound = DocumentSendDocumentEmailSettings$Outbound;
}

export function documentSendDocumentEmailSettingsToJSON(
  documentSendDocumentEmailSettings: DocumentSendDocumentEmailSettings,
): string {
  return JSON.stringify(
    DocumentSendDocumentEmailSettings$outboundSchema.parse(
      documentSendDocumentEmailSettings,
    ),
  );
}

export function documentSendDocumentEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentMeta$inboundSchema: z.ZodType<
  DocumentSendDocumentMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentSendDocumentDateFormat$inboundSchema.optional(),
  distributionMethod: DocumentSendDocumentDistributionMethod$inboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentSendDocumentLanguage$inboundSchema.optional(),
  emailSettings: z.lazy(() => DocumentSendDocumentEmailSettings$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentSendDocumentMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  emailSettings?: DocumentSendDocumentEmailSettings$Outbound | undefined;
};

/** @internal */
export const DocumentSendDocumentMeta$outboundSchema: z.ZodType<
  DocumentSendDocumentMeta$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentSendDocumentDateFormat$outboundSchema.optional(),
  distributionMethod: DocumentSendDocumentDistributionMethod$outboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentSendDocumentLanguage$outboundSchema.optional(),
  emailSettings: z.lazy(() => DocumentSendDocumentEmailSettings$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentMeta$ {
  /** @deprecated use `DocumentSendDocumentMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentSendDocumentMeta$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentSendDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentSendDocumentMeta$Outbound;
}

export function documentSendDocumentMetaToJSON(
  documentSendDocumentMeta: DocumentSendDocumentMeta,
): string {
  return JSON.stringify(
    DocumentSendDocumentMeta$outboundSchema.parse(documentSendDocumentMeta),
  );
}

export function documentSendDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentRequest$inboundSchema: z.ZodType<
  DocumentSendDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  meta: z.lazy(() => DocumentSendDocumentMeta$inboundSchema).optional(),
});

/** @internal */
export type DocumentSendDocumentRequest$Outbound = {
  documentId: number;
  meta?: DocumentSendDocumentMeta$Outbound | undefined;
};

/** @internal */
export const DocumentSendDocumentRequest$outboundSchema: z.ZodType<
  DocumentSendDocumentRequest$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentRequest
> = z.object({
  documentId: z.number(),
  meta: z.lazy(() => DocumentSendDocumentMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentRequest$ {
  /** @deprecated use `DocumentSendDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentRequest$inboundSchema;
  /** @deprecated use `DocumentSendDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentRequest$outboundSchema;
  /** @deprecated use `DocumentSendDocumentRequest$Outbound` instead. */
  export type Outbound = DocumentSendDocumentRequest$Outbound;
}

export function documentSendDocumentRequestToJSON(
  documentSendDocumentRequest: DocumentSendDocumentRequest,
): string {
  return JSON.stringify(
    DocumentSendDocumentRequest$outboundSchema.parse(
      documentSendDocumentRequest,
    ),
  );
}

export function documentSendDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentRequest' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentVisibility
> = z.nativeEnum(DocumentSendDocumentVisibility);

/** @internal */
export const DocumentSendDocumentVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentVisibility
> = DocumentSendDocumentVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentVisibility$ {
  /** @deprecated use `DocumentSendDocumentVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentVisibility$inboundSchema;
  /** @deprecated use `DocumentSendDocumentVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentVisibility$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentStatus
> = z.nativeEnum(DocumentSendDocumentStatus);

/** @internal */
export const DocumentSendDocumentStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentStatus
> = DocumentSendDocumentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentStatus$ {
  /** @deprecated use `DocumentSendDocumentStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentStatus$inboundSchema;
  /** @deprecated use `DocumentSendDocumentStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentStatus$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentSource
> = z.nativeEnum(DocumentSendDocumentSource);

/** @internal */
export const DocumentSendDocumentSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSendDocumentSource
> = DocumentSendDocumentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentSource$ {
  /** @deprecated use `DocumentSendDocumentSource$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentSource$inboundSchema;
  /** @deprecated use `DocumentSendDocumentSource$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentSource$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentGlobalAccessAuth> = z.nativeEnum(
    DocumentSendDocumentGlobalAccessAuth,
  );

/** @internal */
export const DocumentSendDocumentGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentGlobalAccessAuth> =
    DocumentSendDocumentGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentGlobalAccessAuth$ {
  /** @deprecated use `DocumentSendDocumentGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSendDocumentGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentSendDocumentGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentGlobalActionAuth> = z.nativeEnum(
    DocumentSendDocumentGlobalActionAuth,
  );

/** @internal */
export const DocumentSendDocumentGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSendDocumentGlobalActionAuth> =
    DocumentSendDocumentGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentGlobalActionAuth$ {
  /** @deprecated use `DocumentSendDocumentGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSendDocumentGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentSendDocumentGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSendDocumentGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentSendDocumentAuthOptions$inboundSchema: z.ZodType<
  DocumentSendDocumentAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(DocumentSendDocumentGlobalAccessAuth$inboundSchema),
  globalActionAuth: z.array(DocumentSendDocumentGlobalActionAuth$inboundSchema),
});

/** @internal */
export type DocumentSendDocumentAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentSendDocumentAuthOptions$outboundSchema: z.ZodType<
  DocumentSendDocumentAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    DocumentSendDocumentGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.array(
    DocumentSendDocumentGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentAuthOptions$ {
  /** @deprecated use `DocumentSendDocumentAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentAuthOptions$inboundSchema;
  /** @deprecated use `DocumentSendDocumentAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentAuthOptions$outboundSchema;
  /** @deprecated use `DocumentSendDocumentAuthOptions$Outbound` instead. */
  export type Outbound = DocumentSendDocumentAuthOptions$Outbound;
}

export function documentSendDocumentAuthOptionsToJSON(
  documentSendDocumentAuthOptions: DocumentSendDocumentAuthOptions,
): string {
  return JSON.stringify(
    DocumentSendDocumentAuthOptions$outboundSchema.parse(
      documentSendDocumentAuthOptions,
    ),
  );
}

export function documentSendDocumentAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentFormValues$inboundSchema: z.ZodType<
  DocumentSendDocumentFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentSendDocumentFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentSendDocumentFormValues$outboundSchema: z.ZodType<
  DocumentSendDocumentFormValues$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentFormValues$ {
  /** @deprecated use `DocumentSendDocumentFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentFormValues$inboundSchema;
  /** @deprecated use `DocumentSendDocumentFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentFormValues$outboundSchema;
  /** @deprecated use `DocumentSendDocumentFormValues$Outbound` instead. */
  export type Outbound = DocumentSendDocumentFormValues$Outbound;
}

export function documentSendDocumentFormValuesToJSON(
  documentSendDocumentFormValues: DocumentSendDocumentFormValues,
): string {
  return JSON.stringify(
    DocumentSendDocumentFormValues$outboundSchema.parse(
      documentSendDocumentFormValues,
    ),
  );
}

export function documentSendDocumentFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentSendDocumentResponse$inboundSchema: z.ZodType<
  DocumentSendDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentSendDocumentVisibility$inboundSchema,
  status: DocumentSendDocumentStatus$inboundSchema,
  source: DocumentSendDocumentSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentSendDocumentAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/** @internal */
export type DocumentSendDocumentResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentSendDocumentAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentSendDocumentResponse$outboundSchema: z.ZodType<
  DocumentSendDocumentResponse$Outbound,
  z.ZodTypeDef,
  DocumentSendDocumentResponse
> = z.object({
  visibility: DocumentSendDocumentVisibility$outboundSchema,
  status: DocumentSendDocumentStatus$outboundSchema,
  source: DocumentSendDocumentSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentSendDocumentAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSendDocumentResponse$ {
  /** @deprecated use `DocumentSendDocumentResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentSendDocumentResponse$inboundSchema;
  /** @deprecated use `DocumentSendDocumentResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentSendDocumentResponse$outboundSchema;
  /** @deprecated use `DocumentSendDocumentResponse$Outbound` instead. */
  export type Outbound = DocumentSendDocumentResponse$Outbound;
}

export function documentSendDocumentResponseToJSON(
  documentSendDocumentResponse: DocumentSendDocumentResponse,
): string {
  return JSON.stringify(
    DocumentSendDocumentResponse$outboundSchema.parse(
      documentSendDocumentResponse,
    ),
  );
}

export function documentSendDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSendDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSendDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSendDocumentResponse' from JSON`,
  );
}
