/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmbeddingPresignCreateEmbeddingPresignTokenRequest = {
  /**
   * Expiration time in minutes (default: 60, max: 10,080)
   */
  expiresIn?: number | undefined;
};

/**
 * Successful response
 */
export type EmbeddingPresignCreateEmbeddingPresignTokenResponse = {
  token: string;
  expiresAt: string;
  /**
   * Expiration time in seconds
   */
  expiresIn: number;
};

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenRequest$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    expiresIn: z.number().default(60),
  });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenRequest$Outbound = {
  expiresIn: number;
};

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenRequest$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenRequest$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenRequest
  > = z.object({
    expiresIn: z.number().default(60),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenRequest$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenRequest$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenRequest$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenRequest$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenRequest$Outbound;
}

export function embeddingPresignCreateEmbeddingPresignTokenRequestToJSON(
  embeddingPresignCreateEmbeddingPresignTokenRequest:
    EmbeddingPresignCreateEmbeddingPresignTokenRequest,
): string {
  return JSON.stringify(
    EmbeddingPresignCreateEmbeddingPresignTokenRequest$outboundSchema.parse(
      embeddingPresignCreateEmbeddingPresignTokenRequest,
    ),
  );
}

export function embeddingPresignCreateEmbeddingPresignTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignCreateEmbeddingPresignTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignCreateEmbeddingPresignTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmbeddingPresignCreateEmbeddingPresignTokenRequest' from JSON`,
  );
}

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenResponse$inboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    expiresAt: z.string(),
    expiresIn: z.number(),
  });

/** @internal */
export type EmbeddingPresignCreateEmbeddingPresignTokenResponse$Outbound = {
  token: string;
  expiresAt: string;
  expiresIn: number;
};

/** @internal */
export const EmbeddingPresignCreateEmbeddingPresignTokenResponse$outboundSchema:
  z.ZodType<
    EmbeddingPresignCreateEmbeddingPresignTokenResponse$Outbound,
    z.ZodTypeDef,
    EmbeddingPresignCreateEmbeddingPresignTokenResponse
  > = z.object({
    token: z.string(),
    expiresAt: z.string(),
    expiresIn: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingPresignCreateEmbeddingPresignTokenResponse$ {
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenResponse$inboundSchema` instead. */
  export const inboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenResponse$inboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenResponse$outboundSchema` instead. */
  export const outboundSchema =
    EmbeddingPresignCreateEmbeddingPresignTokenResponse$outboundSchema;
  /** @deprecated use `EmbeddingPresignCreateEmbeddingPresignTokenResponse$Outbound` instead. */
  export type Outbound =
    EmbeddingPresignCreateEmbeddingPresignTokenResponse$Outbound;
}

export function embeddingPresignCreateEmbeddingPresignTokenResponseToJSON(
  embeddingPresignCreateEmbeddingPresignTokenResponse:
    EmbeddingPresignCreateEmbeddingPresignTokenResponse,
): string {
  return JSON.stringify(
    EmbeddingPresignCreateEmbeddingPresignTokenResponse$outboundSchema.parse(
      embeddingPresignCreateEmbeddingPresignTokenResponse,
    ),
  );
}

export function embeddingPresignCreateEmbeddingPresignTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EmbeddingPresignCreateEmbeddingPresignTokenResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmbeddingPresignCreateEmbeddingPresignTokenResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmbeddingPresignCreateEmbeddingPresignTokenResponse' from JSON`,
  );
}
