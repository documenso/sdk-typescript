/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentMoveDocumentToTeamRequestBody = {
  /**
   * The ID of the document to move to a team.
   */
  documentId: number;
  /**
   * The ID of the team to move the document to.
   */
  teamId: number;
};

export const DocumentMoveDocumentToTeamVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentMoveDocumentToTeamVisibility = ClosedEnum<
  typeof DocumentMoveDocumentToTeamVisibility
>;

export const DocumentMoveDocumentToTeamStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
} as const;
export type DocumentMoveDocumentToTeamStatus = ClosedEnum<
  typeof DocumentMoveDocumentToTeamStatus
>;

export const DocumentMoveDocumentToTeamSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentMoveDocumentToTeamSource = ClosedEnum<
  typeof DocumentMoveDocumentToTeamSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentMoveDocumentToTeamGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentMoveDocumentToTeamGlobalAccessAuth = ClosedEnum<
  typeof DocumentMoveDocumentToTeamGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentMoveDocumentToTeamGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentMoveDocumentToTeamGlobalActionAuth = ClosedEnum<
  typeof DocumentMoveDocumentToTeamGlobalActionAuth
>;

export type DocumentMoveDocumentToTeamAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: DocumentMoveDocumentToTeamGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: DocumentMoveDocumentToTeamGlobalActionAuth | null;
};

export type DocumentMoveDocumentToTeamFormValues = string | boolean | number;

/**
 * Successful response
 */
export type DocumentMoveDocumentToTeamResponseBody = {
  visibility: DocumentMoveDocumentToTeamVisibility;
  status: DocumentMoveDocumentToTeamStatus;
  source: DocumentMoveDocumentToTeamSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentMoveDocumentToTeamAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
};

/** @internal */
export const DocumentMoveDocumentToTeamRequestBody$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  teamId: z.number(),
});

/** @internal */
export type DocumentMoveDocumentToTeamRequestBody$Outbound = {
  documentId: number;
  teamId: number;
};

/** @internal */
export const DocumentMoveDocumentToTeamRequestBody$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamRequestBody$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamRequestBody
> = z.object({
  documentId: z.number(),
  teamId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamRequestBody$ {
  /** @deprecated use `DocumentMoveDocumentToTeamRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamRequestBody$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamRequestBody$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamRequestBody$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamRequestBody$Outbound;
}

export function documentMoveDocumentToTeamRequestBodyToJSON(
  documentMoveDocumentToTeamRequestBody: DocumentMoveDocumentToTeamRequestBody,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamRequestBody$outboundSchema.parse(
      documentMoveDocumentToTeamRequestBody,
    ),
  );
}

export function documentMoveDocumentToTeamRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMoveDocumentToTeamRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMoveDocumentToTeamRequestBody' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamVisibility$inboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamVisibility> = z.nativeEnum(
    DocumentMoveDocumentToTeamVisibility,
  );

/** @internal */
export const DocumentMoveDocumentToTeamVisibility$outboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamVisibility> =
    DocumentMoveDocumentToTeamVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamVisibility$ {
  /** @deprecated use `DocumentMoveDocumentToTeamVisibility$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamVisibility$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamVisibility$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamVisibility$outboundSchema;
}

/** @internal */
export const DocumentMoveDocumentToTeamStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentMoveDocumentToTeamStatus
> = z.nativeEnum(DocumentMoveDocumentToTeamStatus);

/** @internal */
export const DocumentMoveDocumentToTeamStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentMoveDocumentToTeamStatus
> = DocumentMoveDocumentToTeamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamStatus$ {
  /** @deprecated use `DocumentMoveDocumentToTeamStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentMoveDocumentToTeamStatus$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentMoveDocumentToTeamStatus$outboundSchema;
}

/** @internal */
export const DocumentMoveDocumentToTeamSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentMoveDocumentToTeamSource
> = z.nativeEnum(DocumentMoveDocumentToTeamSource);

/** @internal */
export const DocumentMoveDocumentToTeamSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentMoveDocumentToTeamSource
> = DocumentMoveDocumentToTeamSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamSource$ {
  /** @deprecated use `DocumentMoveDocumentToTeamSource$inboundSchema` instead. */
  export const inboundSchema = DocumentMoveDocumentToTeamSource$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamSource$outboundSchema` instead. */
  export const outboundSchema = DocumentMoveDocumentToTeamSource$outboundSchema;
}

/** @internal */
export const DocumentMoveDocumentToTeamGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamGlobalAccessAuth> = z
    .nativeEnum(DocumentMoveDocumentToTeamGlobalAccessAuth);

/** @internal */
export const DocumentMoveDocumentToTeamGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamGlobalAccessAuth> =
    DocumentMoveDocumentToTeamGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamGlobalAccessAuth$ {
  /** @deprecated use `DocumentMoveDocumentToTeamGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentMoveDocumentToTeamGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamGlobalActionAuth> = z
    .nativeEnum(DocumentMoveDocumentToTeamGlobalActionAuth);

/** @internal */
export const DocumentMoveDocumentToTeamGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentMoveDocumentToTeamGlobalActionAuth> =
    DocumentMoveDocumentToTeamGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamGlobalActionAuth$ {
  /** @deprecated use `DocumentMoveDocumentToTeamGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentMoveDocumentToTeamAuthOptions$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    DocumentMoveDocumentToTeamGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    DocumentMoveDocumentToTeamGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type DocumentMoveDocumentToTeamAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const DocumentMoveDocumentToTeamAuthOptions$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    DocumentMoveDocumentToTeamGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    DocumentMoveDocumentToTeamGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamAuthOptions$ {
  /** @deprecated use `DocumentMoveDocumentToTeamAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamAuthOptions$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamAuthOptions$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamAuthOptions$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamAuthOptions$Outbound;
}

export function documentMoveDocumentToTeamAuthOptionsToJSON(
  documentMoveDocumentToTeamAuthOptions: DocumentMoveDocumentToTeamAuthOptions,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamAuthOptions$outboundSchema.parse(
      documentMoveDocumentToTeamAuthOptions,
    ),
  );
}

export function documentMoveDocumentToTeamAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMoveDocumentToTeamAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMoveDocumentToTeamAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamFormValues$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentMoveDocumentToTeamFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const DocumentMoveDocumentToTeamFormValues$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamFormValues$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamFormValues$ {
  /** @deprecated use `DocumentMoveDocumentToTeamFormValues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamFormValues$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamFormValues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamFormValues$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamFormValues$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamFormValues$Outbound;
}

export function documentMoveDocumentToTeamFormValuesToJSON(
  documentMoveDocumentToTeamFormValues: DocumentMoveDocumentToTeamFormValues,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamFormValues$outboundSchema.parse(
      documentMoveDocumentToTeamFormValues,
    ),
  );
}

export function documentMoveDocumentToTeamFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMoveDocumentToTeamFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMoveDocumentToTeamFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentMoveDocumentToTeamResponseBody$inboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentMoveDocumentToTeamVisibility$inboundSchema,
  status: DocumentMoveDocumentToTeamStatus$inboundSchema,
  source: DocumentMoveDocumentToTeamSource$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentMoveDocumentToTeamAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
});

/** @internal */
export type DocumentMoveDocumentToTeamResponseBody$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentMoveDocumentToTeamAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
};

/** @internal */
export const DocumentMoveDocumentToTeamResponseBody$outboundSchema: z.ZodType<
  DocumentMoveDocumentToTeamResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentMoveDocumentToTeamResponseBody
> = z.object({
  visibility: DocumentMoveDocumentToTeamVisibility$outboundSchema,
  status: DocumentMoveDocumentToTeamStatus$outboundSchema,
  source: DocumentMoveDocumentToTeamSource$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentMoveDocumentToTeamAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentMoveDocumentToTeamResponseBody$ {
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentMoveDocumentToTeamResponseBody$inboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentMoveDocumentToTeamResponseBody$outboundSchema;
  /** @deprecated use `DocumentMoveDocumentToTeamResponseBody$Outbound` instead. */
  export type Outbound = DocumentMoveDocumentToTeamResponseBody$Outbound;
}

export function documentMoveDocumentToTeamResponseBodyToJSON(
  documentMoveDocumentToTeamResponseBody:
    DocumentMoveDocumentToTeamResponseBody,
): string {
  return JSON.stringify(
    DocumentMoveDocumentToTeamResponseBody$outboundSchema.parse(
      documentMoveDocumentToTeamResponseBody,
    ),
  );
}

export function documentMoveDocumentToTeamResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DocumentMoveDocumentToTeamResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentMoveDocumentToTeamResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentMoveDocumentToTeamResponseBody' from JSON`,
  );
}
