/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type =
  {
    Dropdown: "DROPDOWN",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldDocumentsFieldsValues = {
  value: string;
};

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType;
    values?:
      | Array<FieldCreateDocumentFieldFieldDocumentsFieldsValues>
      | undefined;
    defaultValue?: string | undefined;
  };

export type Field11 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type =
  {
    Checkbox: "CHECKBOX",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType;
    values?: Array<FieldCreateDocumentFieldFieldValues> | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

export type Field10 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type =
  {
    Radio: "RADIO",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType
  >;

export type FieldValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType;
    values?: Array<FieldValues> | undefined;
  };

export type Field9 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type =
  {
    Number: "NUMBER",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType =
  {
    Number: "number",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

export type Field8 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type =
  {
    Text: "TEXT",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType =
  {
    Text: "text",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

export type Field7 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type =
  {
    Date: "DATE",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType =
  {
    Date: "date",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType;
  fontSize?: number | undefined;
};

export type Field6 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type =
  {
    Email: "EMAIL",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType =
  {
    Email: "email",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType
  >;

export type FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType;
  fontSize?: number | undefined;
};

export type Field5 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type;
  fieldMeta?: FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType =
  {
    Name: "NAME",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType
  >;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type =
  {
    Name: "name",
  } as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type
  >;

export type FieldCreateDocumentFieldFieldFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type;
  fontSize?: number | undefined;
};

export type Field4 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType;
  fieldMeta?: FieldCreateDocumentFieldFieldFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldDocumentsFieldsType = {
  Initials: "INITIALS",
} as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldFieldDocumentsFieldsType
>;

export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestType = {
  Initials: "initials",
} as const;
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestType =
  ClosedEnum<typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestType>;

export type FieldFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestType;
  fontSize?: number | undefined;
};

export type Field3 = {
  type: FieldCreateDocumentFieldFieldDocumentsFieldsType;
  fieldMeta?: FieldFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldFieldType = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateDocumentFieldFieldType = ClosedEnum<
  typeof FieldCreateDocumentFieldFieldType
>;

export type Field2 = {
  type: FieldCreateDocumentFieldFieldType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldType = {
  Signature: "SIGNATURE",
} as const;
export type FieldType = ClosedEnum<typeof FieldType>;

export type Field1 = {
  type: FieldType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type Field =
  | Field1
  | Field2
  | Field3
  | Field4
  | Field5
  | Field6
  | Field7
  | Field8
  | Field9
  | Field10
  | Field11;

export type FieldCreateDocumentFieldRequestBody = {
  documentId: number;
  field:
    | Field1
    | Field2
    | Field3
    | Field4
    | Field5
    | Field6
    | Field7
    | Field8
    | Field9
    | Field10
    | Field11;
};

export const FieldCreateDocumentFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateDocumentFieldType = ClosedEnum<
  typeof FieldCreateDocumentFieldType
>;

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  >;

export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues = {
  value: string;
};

export type FieldCreateDocumentFieldFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type;
  values?:
    | Array<FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  >;

export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type;
  values?:
    | Array<FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type =
  {
    Radio: "radio",
  } as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type
  >;

export type FieldCreateDocumentFieldFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type;
  values?: Array<FieldCreateDocumentFieldFieldMetaValues> | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldCreateDocumentFieldFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  >;

export type FieldCreateDocumentFieldFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type = {
  Date: "date",
} as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  >;

export type FieldCreateDocumentFieldFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType = {
  Email: "email",
} as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType
  >;

export type FieldCreateDocumentFieldFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsType = {
  Name: "name",
} as const;
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsType
>;

export type FieldCreateDocumentFieldFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldMetaDocumentsFieldsType;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldCreateDocumentFieldFieldMetaType = ClosedEnum<
  typeof FieldCreateDocumentFieldFieldMetaType
>;

export type FieldCreateDocumentFieldFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateDocumentFieldFieldMeta =
  | FieldCreateDocumentFieldFieldMeta1
  | FieldCreateDocumentFieldFieldMeta2
  | FieldCreateDocumentFieldFieldMeta3
  | FieldCreateDocumentFieldFieldMeta4
  | FieldCreateDocumentFieldFieldMeta7
  | FieldCreateDocumentFieldFieldMeta9
  | FieldCreateDocumentFieldFieldMeta5
  | FieldCreateDocumentFieldFieldMeta8
  | FieldCreateDocumentFieldFieldMeta6;

/**
 * Successful response
 */
export type FieldCreateDocumentFieldResponseBody = {
  type: FieldCreateDocumentFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldFieldMeta1
    | FieldCreateDocumentFieldFieldMeta2
    | FieldCreateDocumentFieldFieldMeta3
    | FieldCreateDocumentFieldFieldMeta4
    | FieldCreateDocumentFieldFieldMeta7
    | FieldCreateDocumentFieldFieldMeta9
    | FieldCreateDocumentFieldFieldMeta5
    | FieldCreateDocumentFieldFieldMeta8
    | FieldCreateDocumentFieldFieldMeta6
    | null;
};

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsValues$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsValues$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsValues$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsValuesToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsValues:
    FieldCreateDocumentFieldFieldDocumentsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsValues$outboundSchema.parse(
      fieldCreateDocumentFieldFieldDocumentsFieldsValues,
    ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldFieldDocumentsFieldsValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<FieldCreateDocumentFieldFieldDocumentsFieldsValues$Outbound>
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldFieldDocumentsFieldsValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta' from JSON`,
  );
}

/** @internal */
export const Field11$inboundSchema: z.ZodType<Field11, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field11$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field11$outboundSchema: z.ZodType<
  Field11$Outbound,
  z.ZodTypeDef,
  Field11
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field11$ {
  /** @deprecated use `Field11$inboundSchema` instead. */
  export const inboundSchema = Field11$inboundSchema;
  /** @deprecated use `Field11$outboundSchema` instead. */
  export const outboundSchema = Field11$outboundSchema;
  /** @deprecated use `Field11$Outbound` instead. */
  export type Outbound = Field11$Outbound;
}

export function field11ToJSON(field11: Field11): string {
  return JSON.stringify(Field11$outboundSchema.parse(field11));
}

export function field11FromJSON(
  jsonString: string,
): SafeParseResult<Field11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field11' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldValues$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldFieldValues$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldValues$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldValues$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldValues$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldValues$Outbound;
}

export function fieldCreateDocumentFieldFieldValuesToJSON(
  fieldCreateDocumentFieldFieldValues: FieldCreateDocumentFieldFieldValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldValues$outboundSchema.parse(
      fieldCreateDocumentFieldFieldValues,
    ),
  );
}

export function fieldCreateDocumentFieldFieldValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldFieldValues$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldCreateDocumentFieldFieldValues$Outbound> | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldFieldValues$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta' from JSON`,
  );
}

/** @internal */
export const Field10$inboundSchema: z.ZodType<Field10, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field10$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field10$outboundSchema: z.ZodType<
  Field10$Outbound,
  z.ZodTypeDef,
  Field10
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field10$ {
  /** @deprecated use `Field10$inboundSchema` instead. */
  export const inboundSchema = Field10$inboundSchema;
  /** @deprecated use `Field10$outboundSchema` instead. */
  export const outboundSchema = Field10$outboundSchema;
  /** @deprecated use `Field10$Outbound` instead. */
  export type Outbound = Field10$Outbound;
}

export function field10ToJSON(field10: Field10): string {
  return JSON.stringify(Field10$outboundSchema.parse(field10));
}

export function field10FromJSON(
  jsonString: string,
): SafeParseResult<Field10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field10' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldValues$inboundSchema: z.ZodType<
  FieldValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldValues$outboundSchema: z.ZodType<
  FieldValues$Outbound,
  z.ZodTypeDef,
  FieldValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldValues$ {
  /** @deprecated use `FieldValues$inboundSchema` instead. */
  export const inboundSchema = FieldValues$inboundSchema;
  /** @deprecated use `FieldValues$outboundSchema` instead. */
  export const outboundSchema = FieldValues$outboundSchema;
  /** @deprecated use `FieldValues$Outbound` instead. */
  export type Outbound = FieldValues$Outbound;
}

export function fieldValuesToJSON(fieldValues: FieldValues): string {
  return JSON.stringify(FieldValues$outboundSchema.parse(fieldValues));
}

export function fieldValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema,
    values: z.array(z.lazy(() => FieldValues$inboundSchema)).optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldValues$Outbound> | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema,
    values: z.array(z.lazy(() => FieldValues$outboundSchema)).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta' from JSON`,
  );
}

/** @internal */
export const Field9$inboundSchema: z.ZodType<Field9, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field9$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field9$outboundSchema: z.ZodType<
  Field9$Outbound,
  z.ZodTypeDef,
  Field9
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field9$ {
  /** @deprecated use `Field9$inboundSchema` instead. */
  export const inboundSchema = Field9$inboundSchema;
  /** @deprecated use `Field9$outboundSchema` instead. */
  export const outboundSchema = Field9$outboundSchema;
  /** @deprecated use `Field9$Outbound` instead. */
  export type Outbound = Field9$Outbound;
}

export function field9ToJSON(field9: Field9): string {
  return JSON.stringify(Field9$outboundSchema.parse(field9));
}

export function field9FromJSON(
  jsonString: string,
): SafeParseResult<Field9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field9' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta' from JSON`,
  );
}

/** @internal */
export const Field8$inboundSchema: z.ZodType<Field8, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field8$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field8$outboundSchema: z.ZodType<
  Field8$Outbound,
  z.ZodTypeDef,
  Field8
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field8$ {
  /** @deprecated use `Field8$inboundSchema` instead. */
  export const inboundSchema = Field8$inboundSchema;
  /** @deprecated use `Field8$outboundSchema` instead. */
  export const outboundSchema = Field8$outboundSchema;
  /** @deprecated use `Field8$Outbound` instead. */
  export type Outbound = Field8$Outbound;
}

export function field8ToJSON(field8: Field8): string {
  return JSON.stringify(Field8$outboundSchema.parse(field8));
}

export function field8FromJSON(
  jsonString: string,
): SafeParseResult<Field8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field8' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta' from JSON`,
  );
}

/** @internal */
export const Field7$inboundSchema: z.ZodType<Field7, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field7$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field7$outboundSchema: z.ZodType<
  Field7$Outbound,
  z.ZodTypeDef,
  Field7
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody7Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field7$ {
  /** @deprecated use `Field7$inboundSchema` instead. */
  export const inboundSchema = Field7$inboundSchema;
  /** @deprecated use `Field7$outboundSchema` instead. */
  export const outboundSchema = Field7$outboundSchema;
  /** @deprecated use `Field7$Outbound` instead. */
  export type Outbound = Field7$Outbound;
}

export function field7ToJSON(field7: Field7): string {
  return JSON.stringify(Field7$outboundSchema.parse(field7));
}

export function field7FromJSON(
  jsonString: string,
): SafeParseResult<Field7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field7' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$outboundSchema
      .parse(fieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta' from JSON`,
  );
}

/** @internal */
export const Field6$inboundSchema: z.ZodType<Field6, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field6$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field6$outboundSchema: z.ZodType<
  Field6$Outbound,
  z.ZodTypeDef,
  Field6
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody6Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field6$ {
  /** @deprecated use `Field6$inboundSchema` instead. */
  export const inboundSchema = Field6$inboundSchema;
  /** @deprecated use `Field6$outboundSchema` instead. */
  export const outboundSchema = Field6$outboundSchema;
  /** @deprecated use `Field6$Outbound` instead. */
  export type Outbound = Field6$Outbound;
}

export function field6ToJSON(field6: Field6): string {
  return JSON.stringify(Field6$outboundSchema.parse(field6));
}

export function field6FromJSON(
  jsonString: string,
): SafeParseResult<Field6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field6' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsFieldMetaToJSON(
  fieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta:
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$outboundSchema.parse(
      fieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta,
    ),
  );
}

export function fieldCreateDocumentFieldFieldDocumentsFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const Field5$inboundSchema: z.ZodType<Field5, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field5$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field5$outboundSchema: z.ZodType<
  Field5$Outbound,
  z.ZodTypeDef,
  Field5
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody5Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldFieldDocumentsFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field5$ {
  /** @deprecated use `Field5$inboundSchema` instead. */
  export const inboundSchema = Field5$inboundSchema;
  /** @deprecated use `Field5$outboundSchema` instead. */
  export const outboundSchema = Field5$outboundSchema;
  /** @deprecated use `Field5$Outbound` instead. */
  export type Outbound = Field5$Outbound;
}

export function field5ToJSON(field5: Field5): string {
  return JSON.stringify(Field5$outboundSchema.parse(field5));
}

export function field5FromJSON(
  jsonString: string,
): SafeParseResult<Field5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field5' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type
  > =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldFieldMeta$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldFieldMeta$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBody4Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldFieldMetaToJSON(
  fieldCreateDocumentFieldFieldFieldMeta:
    FieldCreateDocumentFieldFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldFieldMeta$outboundSchema.parse(
      fieldCreateDocumentFieldFieldFieldMeta,
    ),
  );
}

export function fieldCreateDocumentFieldFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const Field4$inboundSchema: z.ZodType<Field4, z.ZodTypeDef, unknown> = z
  .object({
    type:
      FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldFieldFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field4$Outbound = {
  type: string;
  fieldMeta?: FieldCreateDocumentFieldFieldFieldMeta$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field4$outboundSchema: z.ZodType<
  Field4$Outbound,
  z.ZodTypeDef,
  Field4
> = z.object({
  type:
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestRequestBodyType$outboundSchema,
  fieldMeta: z.lazy(() => FieldCreateDocumentFieldFieldFieldMeta$outboundSchema)
    .optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field4$ {
  /** @deprecated use `Field4$inboundSchema` instead. */
  export const inboundSchema = Field4$inboundSchema;
  /** @deprecated use `Field4$outboundSchema` instead. */
  export const outboundSchema = Field4$outboundSchema;
  /** @deprecated use `Field4$Outbound` instead. */
  export type Outbound = Field4$Outbound;
}

export function field4ToJSON(field4: Field4): string {
  return JSON.stringify(Field4$outboundSchema.parse(field4));
}

export function field4FromJSON(
  jsonString: string,
): SafeParseResult<Field4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field4' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldDocumentsFieldsType> = z
    .nativeEnum(FieldCreateDocumentFieldFieldDocumentsFieldsType);

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldDocumentsFieldsType> =
    FieldCreateDocumentFieldFieldDocumentsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestType
  > = z.nativeEnum(FieldCreateDocumentFieldFieldDocumentsFieldsRequestType);

/** @internal */
export const FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldDocumentsFieldsRequestType
  > = FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$outboundSchema;
}

/** @internal */
export const FieldFieldMeta$inboundSchema: z.ZodType<
  FieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldFieldMeta$outboundSchema: z.ZodType<
  FieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldDocumentsFieldsRequestType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldFieldMeta$ {
  /** @deprecated use `FieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema = FieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldFieldMeta$Outbound;
}

export function fieldFieldMetaToJSON(fieldFieldMeta: FieldFieldMeta): string {
  return JSON.stringify(FieldFieldMeta$outboundSchema.parse(fieldFieldMeta));
}

export function fieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const Field3$inboundSchema: z.ZodType<Field3, z.ZodTypeDef, unknown> = z
  .object({
    type: FieldCreateDocumentFieldFieldDocumentsFieldsType$inboundSchema,
    fieldMeta: z.lazy(() => FieldFieldMeta$inboundSchema).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field3$Outbound = {
  type: string;
  fieldMeta?: FieldFieldMeta$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field3$outboundSchema: z.ZodType<
  Field3$Outbound,
  z.ZodTypeDef,
  Field3
> = z.object({
  type: FieldCreateDocumentFieldFieldDocumentsFieldsType$outboundSchema,
  fieldMeta: z.lazy(() => FieldFieldMeta$outboundSchema).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field3$ {
  /** @deprecated use `Field3$inboundSchema` instead. */
  export const inboundSchema = Field3$inboundSchema;
  /** @deprecated use `Field3$outboundSchema` instead. */
  export const outboundSchema = Field3$outboundSchema;
  /** @deprecated use `Field3$Outbound` instead. */
  export type Outbound = Field3$Outbound;
}

export function field3ToJSON(field3: Field3): string {
  return JSON.stringify(Field3$outboundSchema.parse(field3));
}

export function field3FromJSON(
  jsonString: string,
): SafeParseResult<Field3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field3' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldFieldType
> = z.nativeEnum(FieldCreateDocumentFieldFieldType);

/** @internal */
export const FieldCreateDocumentFieldFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldFieldType
> = FieldCreateDocumentFieldFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldType$outboundSchema;
}

/** @internal */
export const Field2$inboundSchema: z.ZodType<Field2, z.ZodTypeDef, unknown> = z
  .object({
    type: FieldCreateDocumentFieldFieldType$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field2$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field2$outboundSchema: z.ZodType<
  Field2$Outbound,
  z.ZodTypeDef,
  Field2
> = z.object({
  type: FieldCreateDocumentFieldFieldType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field2$ {
  /** @deprecated use `Field2$inboundSchema` instead. */
  export const inboundSchema = Field2$inboundSchema;
  /** @deprecated use `Field2$outboundSchema` instead. */
  export const outboundSchema = Field2$outboundSchema;
  /** @deprecated use `Field2$Outbound` instead. */
  export type Outbound = Field2$Outbound;
}

export function field2ToJSON(field2: Field2): string {
  return JSON.stringify(Field2$outboundSchema.parse(field2));
}

export function field2FromJSON(
  jsonString: string,
): SafeParseResult<Field2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field2' from JSON`,
  );
}

/** @internal */
export const FieldType$inboundSchema: z.ZodNativeEnum<typeof FieldType> = z
  .nativeEnum(FieldType);

/** @internal */
export const FieldType$outboundSchema: z.ZodNativeEnum<typeof FieldType> =
  FieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldType$ {
  /** @deprecated use `FieldType$inboundSchema` instead. */
  export const inboundSchema = FieldType$inboundSchema;
  /** @deprecated use `FieldType$outboundSchema` instead. */
  export const outboundSchema = FieldType$outboundSchema;
}

/** @internal */
export const Field1$inboundSchema: z.ZodType<Field1, z.ZodTypeDef, unknown> = z
  .object({
    type: FieldType$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Field1$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Field1$outboundSchema: z.ZodType<
  Field1$Outbound,
  z.ZodTypeDef,
  Field1
> = z.object({
  type: FieldType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field1$ {
  /** @deprecated use `Field1$inboundSchema` instead. */
  export const inboundSchema = Field1$inboundSchema;
  /** @deprecated use `Field1$outboundSchema` instead. */
  export const outboundSchema = Field1$outboundSchema;
  /** @deprecated use `Field1$Outbound` instead. */
  export type Outbound = Field1$Outbound;
}

export function field1ToJSON(field1: Field1): string {
  return JSON.stringify(Field1$outboundSchema.parse(field1));
}

export function field1FromJSON(
  jsonString: string,
): SafeParseResult<Field1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field1' from JSON`,
  );
}

/** @internal */
export const Field$inboundSchema: z.ZodType<Field, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Field1$inboundSchema),
    z.lazy(() => Field2$inboundSchema),
    z.lazy(() => Field3$inboundSchema),
    z.lazy(() => Field4$inboundSchema),
    z.lazy(() => Field5$inboundSchema),
    z.lazy(() => Field6$inboundSchema),
    z.lazy(() => Field7$inboundSchema),
    z.lazy(() => Field8$inboundSchema),
    z.lazy(() => Field9$inboundSchema),
    z.lazy(() => Field10$inboundSchema),
    z.lazy(() => Field11$inboundSchema),
  ]);

/** @internal */
export type Field$Outbound =
  | Field1$Outbound
  | Field2$Outbound
  | Field3$Outbound
  | Field4$Outbound
  | Field5$Outbound
  | Field6$Outbound
  | Field7$Outbound
  | Field8$Outbound
  | Field9$Outbound
  | Field10$Outbound
  | Field11$Outbound;

/** @internal */
export const Field$outboundSchema: z.ZodType<
  Field$Outbound,
  z.ZodTypeDef,
  Field
> = z.union([
  z.lazy(() => Field1$outboundSchema),
  z.lazy(() => Field2$outboundSchema),
  z.lazy(() => Field3$outboundSchema),
  z.lazy(() => Field4$outboundSchema),
  z.lazy(() => Field5$outboundSchema),
  z.lazy(() => Field6$outboundSchema),
  z.lazy(() => Field7$outboundSchema),
  z.lazy(() => Field8$outboundSchema),
  z.lazy(() => Field9$outboundSchema),
  z.lazy(() => Field10$outboundSchema),
  z.lazy(() => Field11$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field$ {
  /** @deprecated use `Field$inboundSchema` instead. */
  export const inboundSchema = Field$inboundSchema;
  /** @deprecated use `Field$outboundSchema` instead. */
  export const outboundSchema = Field$outboundSchema;
  /** @deprecated use `Field$Outbound` instead. */
  export type Outbound = Field$Outbound;
}

export function fieldToJSON(field: Field): string {
  return JSON.stringify(Field$outboundSchema.parse(field));
}

export function fieldFromJSON(
  jsonString: string,
): SafeParseResult<Field, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Field$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Field' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldRequestBody$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  field: z.union([
    z.lazy(() => Field1$inboundSchema),
    z.lazy(() => Field2$inboundSchema),
    z.lazy(() => Field3$inboundSchema),
    z.lazy(() => Field4$inboundSchema),
    z.lazy(() => Field5$inboundSchema),
    z.lazy(() => Field6$inboundSchema),
    z.lazy(() => Field7$inboundSchema),
    z.lazy(() => Field8$inboundSchema),
    z.lazy(() => Field9$inboundSchema),
    z.lazy(() => Field10$inboundSchema),
    z.lazy(() => Field11$inboundSchema),
  ]),
});

/** @internal */
export type FieldCreateDocumentFieldRequestBody$Outbound = {
  documentId: number;
  field:
    | Field1$Outbound
    | Field2$Outbound
    | Field3$Outbound
    | Field4$Outbound
    | Field5$Outbound
    | Field6$Outbound
    | Field7$Outbound
    | Field8$Outbound
    | Field9$Outbound
    | Field10$Outbound
    | Field11$Outbound;
};

/** @internal */
export const FieldCreateDocumentFieldRequestBody$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldRequestBody$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldRequestBody
> = z.object({
  documentId: z.number(),
  field: z.union([
    z.lazy(() => Field1$outboundSchema),
    z.lazy(() => Field2$outboundSchema),
    z.lazy(() => Field3$outboundSchema),
    z.lazy(() => Field4$outboundSchema),
    z.lazy(() => Field5$outboundSchema),
    z.lazy(() => Field6$outboundSchema),
    z.lazy(() => Field7$outboundSchema),
    z.lazy(() => Field8$outboundSchema),
    z.lazy(() => Field9$outboundSchema),
    z.lazy(() => Field10$outboundSchema),
    z.lazy(() => Field11$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldRequestBody$ {
  /** @deprecated use `FieldCreateDocumentFieldRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldRequestBody$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldRequestBody$Outbound;
}

export function fieldCreateDocumentFieldRequestBodyToJSON(
  fieldCreateDocumentFieldRequestBody: FieldCreateDocumentFieldRequestBody,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldRequestBody$outboundSchema.parse(
      fieldCreateDocumentFieldRequestBody,
    ),
  );
}

export function fieldCreateDocumentFieldRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldType
> = z.nativeEnum(FieldCreateDocumentFieldType);

/** @internal */
export const FieldCreateDocumentFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldType
> = FieldCreateDocumentFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldType$ {
  /** @deprecated use `FieldCreateDocumentFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldCreateDocumentFieldType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$Outbound;
}

export function fieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValuesToJSON(
  fieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$outboundSchema
      .parse(fieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues),
  );
}

export function fieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta9$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta9$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta9$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta9$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta9$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta9$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta9$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta9$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta9ToJSON(
  fieldCreateDocumentFieldFieldMeta9: FieldCreateDocumentFieldFieldMeta9,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta9$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta9,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$Outbound;
}

export function fieldCreateDocumentFieldFieldMetaDocumentsFieldsValuesToJSON(
  fieldCreateDocumentFieldFieldMetaDocumentsFieldsValues:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMetaDocumentsFieldsValues,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMetaDocumentsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta8$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta8$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta8$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta8$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta8$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta8$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta8$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta8$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta8ToJSON(
  fieldCreateDocumentFieldFieldMeta8: FieldCreateDocumentFieldFieldMeta8,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta8$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta8,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaValues$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMetaValues$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaValues$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMetaValues$Outbound;
}

export function fieldCreateDocumentFieldFieldMetaValuesToJSON(
  fieldCreateDocumentFieldFieldMetaValues:
    FieldCreateDocumentFieldFieldMetaValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMetaValues$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMetaValues,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta7$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$inboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateDocumentFieldFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta7$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody7Type$outboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateDocumentFieldFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta7$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta7$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta7$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta7$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta7$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta7$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta7ToJSON(
  fieldCreateDocumentFieldFieldMeta7: FieldCreateDocumentFieldFieldMeta7,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta7$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta7,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta6$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta6$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta6$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta6$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta6$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta6$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta6$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta6$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta6ToJSON(
  fieldCreateDocumentFieldFieldMeta6: FieldCreateDocumentFieldFieldMeta6,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta6$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta6,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta5$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta5$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta5$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta5$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta5$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta5$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta5$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta5$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta5ToJSON(
  fieldCreateDocumentFieldFieldMeta5: FieldCreateDocumentFieldFieldMeta5,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta5$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta5,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta4$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta4$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta4$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta4$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta4$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta4$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta4$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta4$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta4ToJSON(
  fieldCreateDocumentFieldFieldMeta4: FieldCreateDocumentFieldFieldMeta4,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta4$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta4,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType
  > = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType
  > =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta3$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta3$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta3$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta3$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta3$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta3$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta3$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta3$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta3ToJSON(
  fieldCreateDocumentFieldFieldMeta3: FieldCreateDocumentFieldFieldMeta3,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta3$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta3,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsType> =
    z.nativeEnum(FieldCreateDocumentFieldFieldMetaDocumentsFieldsType);

/** @internal */
export const FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldMetaDocumentsFieldsType> =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta2$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta2$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta2$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta2$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta2$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta2$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta2$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta2ToJSON(
  fieldCreateDocumentFieldFieldMeta2: FieldCreateDocumentFieldFieldMeta2,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta2$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta2,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldMetaType> = z.nativeEnum(
    FieldCreateDocumentFieldFieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldFieldMetaType> =
    FieldCreateDocumentFieldFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldFieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta1$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldFieldMeta1$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta1$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta1$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta1$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta1$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta1$Outbound;
}

export function fieldCreateDocumentFieldFieldMeta1ToJSON(
  fieldCreateDocumentFieldFieldMeta1: FieldCreateDocumentFieldFieldMeta1,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta1$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta1,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldFieldMeta$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldFieldMeta1$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta2$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta3$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta4$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta7$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta9$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta5$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta8$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldCreateDocumentFieldFieldMeta$Outbound =
  | FieldCreateDocumentFieldFieldMeta1$Outbound
  | FieldCreateDocumentFieldFieldMeta2$Outbound
  | FieldCreateDocumentFieldFieldMeta3$Outbound
  | FieldCreateDocumentFieldFieldMeta4$Outbound
  | FieldCreateDocumentFieldFieldMeta7$Outbound
  | FieldCreateDocumentFieldFieldMeta9$Outbound
  | FieldCreateDocumentFieldFieldMeta5$Outbound
  | FieldCreateDocumentFieldFieldMeta8$Outbound
  | FieldCreateDocumentFieldFieldMeta6$Outbound;

/** @internal */
export const FieldCreateDocumentFieldFieldMeta$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldFieldMeta
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldFieldMeta1$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta2$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta3$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta4$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta7$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta9$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta5$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta8$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldFieldMetaToJSON(
  fieldCreateDocumentFieldFieldMeta: FieldCreateDocumentFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldFieldMeta$outboundSchema.parse(
      fieldCreateDocumentFieldFieldMeta,
    ),
  );
}

export function fieldCreateDocumentFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateDocumentFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldResponseBody$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldCreateDocumentFieldFieldMeta1$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta2$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta3$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta4$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta7$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta9$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta5$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta8$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateDocumentFieldResponseBody$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldFieldMeta1$Outbound
    | FieldCreateDocumentFieldFieldMeta2$Outbound
    | FieldCreateDocumentFieldFieldMeta3$Outbound
    | FieldCreateDocumentFieldFieldMeta4$Outbound
    | FieldCreateDocumentFieldFieldMeta7$Outbound
    | FieldCreateDocumentFieldFieldMeta9$Outbound
    | FieldCreateDocumentFieldFieldMeta5$Outbound
    | FieldCreateDocumentFieldFieldMeta8$Outbound
    | FieldCreateDocumentFieldFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldCreateDocumentFieldResponseBody$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldResponseBody
> = z.object({
  type: FieldCreateDocumentFieldType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldCreateDocumentFieldFieldMeta1$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta2$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta3$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta4$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta7$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta9$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta5$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta8$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldResponseBody$ {
  /** @deprecated use `FieldCreateDocumentFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldResponseBody$Outbound;
}

export function fieldCreateDocumentFieldResponseBodyToJSON(
  fieldCreateDocumentFieldResponseBody: FieldCreateDocumentFieldResponseBody,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldResponseBody$outboundSchema.parse(
      fieldCreateDocumentFieldResponseBody,
    ),
  );
}

export function fieldCreateDocumentFieldResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldResponseBody' from JSON`,
  );
}
