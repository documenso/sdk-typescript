/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvelopeAttachmentCreateData = {
  label: string;
  data: string;
};

export type EnvelopeAttachmentCreateRequest = {
  envelopeId: string;
  data: EnvelopeAttachmentCreateData;
};

/** @internal */
export const EnvelopeAttachmentCreateData$inboundSchema: z.ZodType<
  EnvelopeAttachmentCreateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  data: z.string(),
});

/** @internal */
export type EnvelopeAttachmentCreateData$Outbound = {
  label: string;
  data: string;
};

/** @internal */
export const EnvelopeAttachmentCreateData$outboundSchema: z.ZodType<
  EnvelopeAttachmentCreateData$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentCreateData
> = z.object({
  label: z.string(),
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateData$ {
  /** @deprecated use `EnvelopeAttachmentCreateData$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentCreateData$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateData$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentCreateData$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateData$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentCreateData$Outbound;
}

export function envelopeAttachmentCreateDataToJSON(
  envelopeAttachmentCreateData: EnvelopeAttachmentCreateData,
): string {
  return JSON.stringify(
    EnvelopeAttachmentCreateData$outboundSchema.parse(
      envelopeAttachmentCreateData,
    ),
  );
}

export function envelopeAttachmentCreateDataFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentCreateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentCreateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentCreateData' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentCreateRequest$inboundSchema: z.ZodType<
  EnvelopeAttachmentCreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  data: z.lazy(() => EnvelopeAttachmentCreateData$inboundSchema),
});

/** @internal */
export type EnvelopeAttachmentCreateRequest$Outbound = {
  envelopeId: string;
  data: EnvelopeAttachmentCreateData$Outbound;
};

/** @internal */
export const EnvelopeAttachmentCreateRequest$outboundSchema: z.ZodType<
  EnvelopeAttachmentCreateRequest$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentCreateRequest
> = z.object({
  envelopeId: z.string(),
  data: z.lazy(() => EnvelopeAttachmentCreateData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentCreateRequest$ {
  /** @deprecated use `EnvelopeAttachmentCreateRequest$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentCreateRequest$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateRequest$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentCreateRequest$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentCreateRequest$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentCreateRequest$Outbound;
}

export function envelopeAttachmentCreateRequestToJSON(
  envelopeAttachmentCreateRequest: EnvelopeAttachmentCreateRequest,
): string {
  return JSON.stringify(
    EnvelopeAttachmentCreateRequest$outboundSchema.parse(
      envelopeAttachmentCreateRequest,
    ),
  );
}

export function envelopeAttachmentCreateRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentCreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentCreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentCreateRequest' from JSON`,
  );
}
