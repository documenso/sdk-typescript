/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RecipientDeleteTemplateRecipientRequest = {
  recipientId: number;
};

/**
 * Successful response
 */
export type RecipientDeleteTemplateRecipientResponse = {
  success: boolean;
};

/** @internal */
export const RecipientDeleteTemplateRecipientRequest$inboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientId: z.number(),
});

/** @internal */
export type RecipientDeleteTemplateRecipientRequest$Outbound = {
  recipientId: number;
};

/** @internal */
export const RecipientDeleteTemplateRecipientRequest$outboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientRequest$Outbound,
  z.ZodTypeDef,
  RecipientDeleteTemplateRecipientRequest
> = z.object({
  recipientId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientRequest$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientRequest$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientRequest$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientRequest$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientRequest$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientRequest$Outbound` instead. */
  export type Outbound = RecipientDeleteTemplateRecipientRequest$Outbound;
}

export function recipientDeleteTemplateRecipientRequestToJSON(
  recipientDeleteTemplateRecipientRequest:
    RecipientDeleteTemplateRecipientRequest,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientRequest$outboundSchema.parse(
      recipientDeleteTemplateRecipientRequest,
    ),
  );
}

export function recipientDeleteTemplateRecipientRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteTemplateRecipientRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientDeleteTemplateRecipientRequest' from JSON`,
  );
}

/** @internal */
export const RecipientDeleteTemplateRecipientResponse$inboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type RecipientDeleteTemplateRecipientResponse$Outbound = {
  success: boolean;
};

/** @internal */
export const RecipientDeleteTemplateRecipientResponse$outboundSchema: z.ZodType<
  RecipientDeleteTemplateRecipientResponse$Outbound,
  z.ZodTypeDef,
  RecipientDeleteTemplateRecipientResponse
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientDeleteTemplateRecipientResponse$ {
  /** @deprecated use `RecipientDeleteTemplateRecipientResponse$inboundSchema` instead. */
  export const inboundSchema =
    RecipientDeleteTemplateRecipientResponse$inboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientResponse$outboundSchema` instead. */
  export const outboundSchema =
    RecipientDeleteTemplateRecipientResponse$outboundSchema;
  /** @deprecated use `RecipientDeleteTemplateRecipientResponse$Outbound` instead. */
  export type Outbound = RecipientDeleteTemplateRecipientResponse$Outbound;
}

export function recipientDeleteTemplateRecipientResponseToJSON(
  recipientDeleteTemplateRecipientResponse:
    RecipientDeleteTemplateRecipientResponse,
): string {
  return JSON.stringify(
    RecipientDeleteTemplateRecipientResponse$outboundSchema.parse(
      recipientDeleteTemplateRecipientResponse,
    ),
  );
}

export function recipientDeleteTemplateRecipientResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientDeleteTemplateRecipientResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientDeleteTemplateRecipientResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientDeleteTemplateRecipientResponse' from JSON`,
  );
}
