/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter documents by how it was created.
 */
export const Source = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
/**
 * Filter documents by how it was created.
 */
export type Source = ClosedEnum<typeof Source>;

/**
 * Filter documents by the current status
 */
export const Status = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
} as const;
/**
 * Filter documents by the current status
 */
export type Status = ClosedEnum<typeof Status>;

export const OrderByColumn = {
  CreatedAt: "createdAt",
} as const;
export type OrderByColumn = ClosedEnum<typeof OrderByColumn>;

export const OrderByDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type OrderByDirection = ClosedEnum<typeof OrderByDirection>;

export type DocumentFindDocumentsRequest = {
  /**
   * The search query.
   */
  query?: string | undefined;
  /**
   * The pagination page number, starts at 1.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  perPage?: number | undefined;
  /**
   * Filter documents by the template ID used to create it.
   */
  templateId?: number | undefined;
  /**
   * Filter documents by how it was created.
   */
  source?: Source | undefined;
  /**
   * Filter documents by the current status
   */
  status?: Status | undefined;
  orderByColumn?: OrderByColumn | undefined;
  orderByDirection?: OrderByDirection | undefined;
};

export const DocumentFindDocumentsVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentFindDocumentsVisibility = ClosedEnum<
  typeof DocumentFindDocumentsVisibility
>;

export const DocumentFindDocumentsStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
} as const;
export type DocumentFindDocumentsStatus = ClosedEnum<
  typeof DocumentFindDocumentsStatus
>;

export const DocumentFindDocumentsSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentFindDocumentsSource = ClosedEnum<
  typeof DocumentFindDocumentsSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentFindDocumentsGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentFindDocumentsGlobalAccessAuth = ClosedEnum<
  typeof DocumentFindDocumentsGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentFindDocumentsGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentFindDocumentsGlobalActionAuth = ClosedEnum<
  typeof DocumentFindDocumentsGlobalActionAuth
>;

export type DocumentFindDocumentsAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: DocumentFindDocumentsGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: DocumentFindDocumentsGlobalActionAuth | null;
};

export type DocumentFindDocumentsFormValues = string | boolean | number;

export type DocumentFindDocumentsUser = {
  id: number;
  name: string | null;
  email: string;
};

export const DocumentFindDocumentsRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type DocumentFindDocumentsRole = ClosedEnum<
  typeof DocumentFindDocumentsRole
>;

export const DocumentFindDocumentsReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type DocumentFindDocumentsReadStatus = ClosedEnum<
  typeof DocumentFindDocumentsReadStatus
>;

export const DocumentFindDocumentsSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type DocumentFindDocumentsSigningStatus = ClosedEnum<
  typeof DocumentFindDocumentsSigningStatus
>;

export const DocumentFindDocumentsSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type DocumentFindDocumentsSendStatus = ClosedEnum<
  typeof DocumentFindDocumentsSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentFindDocumentsAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentFindDocumentsAccessAuth = ClosedEnum<
  typeof DocumentFindDocumentsAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentFindDocumentsActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentFindDocumentsActionAuth = ClosedEnum<
  typeof DocumentFindDocumentsActionAuth
>;

export type DocumentFindDocumentsDocumentsAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth: DocumentFindDocumentsAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth: DocumentFindDocumentsActionAuth | null;
};

export type DocumentFindDocumentsRecipients = {
  role: DocumentFindDocumentsRole;
  readStatus: DocumentFindDocumentsReadStatus;
  signingStatus: DocumentFindDocumentsSigningStatus;
  sendStatus: DocumentFindDocumentsSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentFindDocumentsDocumentsAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export type Team = {
  id: number;
  url: string;
};

export type DocumentFindDocumentsData = {
  visibility: DocumentFindDocumentsVisibility;
  status: DocumentFindDocumentsStatus;
  source: DocumentFindDocumentsSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentFindDocumentsAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  user: DocumentFindDocumentsUser;
  recipients: Array<DocumentFindDocumentsRecipients>;
  team: Team | null;
};

/**
 * Successful response
 */
export type DocumentFindDocumentsResponseBody = {
  data: Array<DocumentFindDocumentsData>;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The current page number, starts at 1.
   */
  currentPage: number;
  /**
   * The number of items per page.
   */
  perPage: number;
  /**
   * The total number of pages.
   */
  totalPages: number;
};

/** @internal */
export const Source$inboundSchema: z.ZodNativeEnum<typeof Source> = z
  .nativeEnum(Source);

/** @internal */
export const Source$outboundSchema: z.ZodNativeEnum<typeof Source> =
  Source$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const OrderByColumn$inboundSchema: z.ZodNativeEnum<
  typeof OrderByColumn
> = z.nativeEnum(OrderByColumn);

/** @internal */
export const OrderByColumn$outboundSchema: z.ZodNativeEnum<
  typeof OrderByColumn
> = OrderByColumn$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderByColumn$ {
  /** @deprecated use `OrderByColumn$inboundSchema` instead. */
  export const inboundSchema = OrderByColumn$inboundSchema;
  /** @deprecated use `OrderByColumn$outboundSchema` instead. */
  export const outboundSchema = OrderByColumn$outboundSchema;
}

/** @internal */
export const OrderByDirection$inboundSchema: z.ZodNativeEnum<
  typeof OrderByDirection
> = z.nativeEnum(OrderByDirection);

/** @internal */
export const OrderByDirection$outboundSchema: z.ZodNativeEnum<
  typeof OrderByDirection
> = OrderByDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderByDirection$ {
  /** @deprecated use `OrderByDirection$inboundSchema` instead. */
  export const inboundSchema = OrderByDirection$inboundSchema;
  /** @deprecated use `OrderByDirection$outboundSchema` instead. */
  export const outboundSchema = OrderByDirection$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsRequest$inboundSchema: z.ZodType<
  DocumentFindDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  templateId: z.number().optional(),
  source: Source$inboundSchema.optional(),
  status: Status$inboundSchema.optional(),
  orderByColumn: OrderByColumn$inboundSchema.optional(),
  orderByDirection: OrderByDirection$inboundSchema.default("desc"),
});

/** @internal */
export type DocumentFindDocumentsRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  templateId?: number | undefined;
  source?: string | undefined;
  status?: string | undefined;
  orderByColumn?: string | undefined;
  orderByDirection: string;
};

/** @internal */
export const DocumentFindDocumentsRequest$outboundSchema: z.ZodType<
  DocumentFindDocumentsRequest$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  templateId: z.number().optional(),
  source: Source$outboundSchema.optional(),
  status: Status$outboundSchema.optional(),
  orderByColumn: OrderByColumn$outboundSchema.optional(),
  orderByDirection: OrderByDirection$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsRequest$ {
  /** @deprecated use `DocumentFindDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsRequest$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsRequest$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsRequest$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsRequest$Outbound;
}

export function documentFindDocumentsRequestToJSON(
  documentFindDocumentsRequest: DocumentFindDocumentsRequest,
): string {
  return JSON.stringify(
    DocumentFindDocumentsRequest$outboundSchema.parse(
      documentFindDocumentsRequest,
    ),
  );
}

export function documentFindDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsRequest' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsVisibility
> = z.nativeEnum(DocumentFindDocumentsVisibility);

/** @internal */
export const DocumentFindDocumentsVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsVisibility
> = DocumentFindDocumentsVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsVisibility$ {
  /** @deprecated use `DocumentFindDocumentsVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsVisibility$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsVisibility$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsStatus
> = z.nativeEnum(DocumentFindDocumentsStatus);

/** @internal */
export const DocumentFindDocumentsStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsStatus
> = DocumentFindDocumentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsStatus$ {
  /** @deprecated use `DocumentFindDocumentsStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsStatus$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsStatus$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSource
> = z.nativeEnum(DocumentFindDocumentsSource);

/** @internal */
export const DocumentFindDocumentsSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSource
> = DocumentFindDocumentsSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsSource$ {
  /** @deprecated use `DocumentFindDocumentsSource$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsSource$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsSource$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsSource$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentFindDocumentsGlobalAccessAuth> = z.nativeEnum(
    DocumentFindDocumentsGlobalAccessAuth,
  );

/** @internal */
export const DocumentFindDocumentsGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentFindDocumentsGlobalAccessAuth> =
    DocumentFindDocumentsGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsGlobalAccessAuth$ {
  /** @deprecated use `DocumentFindDocumentsGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentFindDocumentsGlobalActionAuth> = z.nativeEnum(
    DocumentFindDocumentsGlobalActionAuth,
  );

/** @internal */
export const DocumentFindDocumentsGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentFindDocumentsGlobalActionAuth> =
    DocumentFindDocumentsGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsGlobalActionAuth$ {
  /** @deprecated use `DocumentFindDocumentsGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsAuthOptions$inboundSchema: z.ZodType<
  DocumentFindDocumentsAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    DocumentFindDocumentsGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    DocumentFindDocumentsGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type DocumentFindDocumentsAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const DocumentFindDocumentsAuthOptions$outboundSchema: z.ZodType<
  DocumentFindDocumentsAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    DocumentFindDocumentsGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    DocumentFindDocumentsGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsAuthOptions$ {
  /** @deprecated use `DocumentFindDocumentsAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsAuthOptions$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsAuthOptions$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsAuthOptions$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsAuthOptions$Outbound;
}

export function documentFindDocumentsAuthOptionsToJSON(
  documentFindDocumentsAuthOptions: DocumentFindDocumentsAuthOptions,
): string {
  return JSON.stringify(
    DocumentFindDocumentsAuthOptions$outboundSchema.parse(
      documentFindDocumentsAuthOptions,
    ),
  );
}

export function documentFindDocumentsAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsFormValues$inboundSchema: z.ZodType<
  DocumentFindDocumentsFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentFindDocumentsFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const DocumentFindDocumentsFormValues$outboundSchema: z.ZodType<
  DocumentFindDocumentsFormValues$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsFormValues$ {
  /** @deprecated use `DocumentFindDocumentsFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsFormValues$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsFormValues$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsFormValues$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsFormValues$Outbound;
}

export function documentFindDocumentsFormValuesToJSON(
  documentFindDocumentsFormValues: DocumentFindDocumentsFormValues,
): string {
  return JSON.stringify(
    DocumentFindDocumentsFormValues$outboundSchema.parse(
      documentFindDocumentsFormValues,
    ),
  );
}

export function documentFindDocumentsFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsUser$inboundSchema: z.ZodType<
  DocumentFindDocumentsUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/** @internal */
export type DocumentFindDocumentsUser$Outbound = {
  id: number;
  name: string | null;
  email: string;
};

/** @internal */
export const DocumentFindDocumentsUser$outboundSchema: z.ZodType<
  DocumentFindDocumentsUser$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsUser
> = z.object({
  id: z.number().int(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsUser$ {
  /** @deprecated use `DocumentFindDocumentsUser$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsUser$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsUser$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsUser$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsUser$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsUser$Outbound;
}

export function documentFindDocumentsUserToJSON(
  documentFindDocumentsUser: DocumentFindDocumentsUser,
): string {
  return JSON.stringify(
    DocumentFindDocumentsUser$outboundSchema.parse(documentFindDocumentsUser),
  );
}

export function documentFindDocumentsUserFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsUser' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsRole$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsRole
> = z.nativeEnum(DocumentFindDocumentsRole);

/** @internal */
export const DocumentFindDocumentsRole$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsRole
> = DocumentFindDocumentsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsRole$ {
  /** @deprecated use `DocumentFindDocumentsRole$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsRole$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsRole$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsRole$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsReadStatus
> = z.nativeEnum(DocumentFindDocumentsReadStatus);

/** @internal */
export const DocumentFindDocumentsReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsReadStatus
> = DocumentFindDocumentsReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsReadStatus$ {
  /** @deprecated use `DocumentFindDocumentsReadStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsReadStatus$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsReadStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsReadStatus$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsSigningStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSigningStatus
> = z.nativeEnum(DocumentFindDocumentsSigningStatus);

/** @internal */
export const DocumentFindDocumentsSigningStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSigningStatus
> = DocumentFindDocumentsSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsSigningStatus$ {
  /** @deprecated use `DocumentFindDocumentsSigningStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsSigningStatus$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsSigningStatus$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSendStatus
> = z.nativeEnum(DocumentFindDocumentsSendStatus);

/** @internal */
export const DocumentFindDocumentsSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsSendStatus
> = DocumentFindDocumentsSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsSendStatus$ {
  /** @deprecated use `DocumentFindDocumentsSendStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsSendStatus$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsSendStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsSendStatus$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsAccessAuth
> = z.nativeEnum(DocumentFindDocumentsAccessAuth);

/** @internal */
export const DocumentFindDocumentsAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsAccessAuth
> = DocumentFindDocumentsAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsAccessAuth$ {
  /** @deprecated use `DocumentFindDocumentsAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsAccessAuth$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsActionAuth
> = z.nativeEnum(DocumentFindDocumentsActionAuth);

/** @internal */
export const DocumentFindDocumentsActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindDocumentsActionAuth
> = DocumentFindDocumentsActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsActionAuth$ {
  /** @deprecated use `DocumentFindDocumentsActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsActionAuth$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsActionAuth$outboundSchema;
}

/** @internal */
export const DocumentFindDocumentsDocumentsAuthOptions$inboundSchema: z.ZodType<
  DocumentFindDocumentsDocumentsAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAuth: z.nullable(DocumentFindDocumentsAccessAuth$inboundSchema),
  actionAuth: z.nullable(DocumentFindDocumentsActionAuth$inboundSchema),
});

/** @internal */
export type DocumentFindDocumentsDocumentsAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const DocumentFindDocumentsDocumentsAuthOptions$outboundSchema:
  z.ZodType<
    DocumentFindDocumentsDocumentsAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentFindDocumentsDocumentsAuthOptions
  > = z.object({
    accessAuth: z.nullable(DocumentFindDocumentsAccessAuth$outboundSchema),
    actionAuth: z.nullable(DocumentFindDocumentsActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsDocumentsAuthOptions$ {
  /** @deprecated use `DocumentFindDocumentsDocumentsAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentFindDocumentsDocumentsAuthOptions$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsDocumentsAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsDocumentsAuthOptions$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsDocumentsAuthOptions$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsDocumentsAuthOptions$Outbound;
}

export function documentFindDocumentsDocumentsAuthOptionsToJSON(
  documentFindDocumentsDocumentsAuthOptions:
    DocumentFindDocumentsDocumentsAuthOptions,
): string {
  return JSON.stringify(
    DocumentFindDocumentsDocumentsAuthOptions$outboundSchema.parse(
      documentFindDocumentsDocumentsAuthOptions,
    ),
  );
}

export function documentFindDocumentsDocumentsAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentFindDocumentsDocumentsAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentFindDocumentsDocumentsAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentFindDocumentsDocumentsAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsRecipients$inboundSchema: z.ZodType<
  DocumentFindDocumentsRecipients,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DocumentFindDocumentsRole$inboundSchema,
  readStatus: DocumentFindDocumentsReadStatus$inboundSchema,
  signingStatus: DocumentFindDocumentsSigningStatus$inboundSchema,
  sendStatus: DocumentFindDocumentsSendStatus$inboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindDocumentsDocumentsAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type DocumentFindDocumentsRecipients$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentFindDocumentsDocumentsAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const DocumentFindDocumentsRecipients$outboundSchema: z.ZodType<
  DocumentFindDocumentsRecipients$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsRecipients
> = z.object({
  role: DocumentFindDocumentsRole$outboundSchema,
  readStatus: DocumentFindDocumentsReadStatus$outboundSchema,
  signingStatus: DocumentFindDocumentsSigningStatus$outboundSchema,
  sendStatus: DocumentFindDocumentsSendStatus$outboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindDocumentsDocumentsAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsRecipients$ {
  /** @deprecated use `DocumentFindDocumentsRecipients$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsRecipients$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsRecipients$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsRecipients$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsRecipients$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsRecipients$Outbound;
}

export function documentFindDocumentsRecipientsToJSON(
  documentFindDocumentsRecipients: DocumentFindDocumentsRecipients,
): string {
  return JSON.stringify(
    DocumentFindDocumentsRecipients$outboundSchema.parse(
      documentFindDocumentsRecipients,
    ),
  );
}

export function documentFindDocumentsRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsRecipients, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsRecipients$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsRecipients' from JSON`,
  );
}

/** @internal */
export const Team$inboundSchema: z.ZodType<Team, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int(),
    url: z.string(),
  });

/** @internal */
export type Team$Outbound = {
  id: number;
  url: string;
};

/** @internal */
export const Team$outboundSchema: z.ZodType<Team$Outbound, z.ZodTypeDef, Team> =
  z.object({
    id: z.number().int(),
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Team$ {
  /** @deprecated use `Team$inboundSchema` instead. */
  export const inboundSchema = Team$inboundSchema;
  /** @deprecated use `Team$outboundSchema` instead. */
  export const outboundSchema = Team$outboundSchema;
  /** @deprecated use `Team$Outbound` instead. */
  export type Outbound = Team$Outbound;
}

export function teamToJSON(team: Team): string {
  return JSON.stringify(Team$outboundSchema.parse(team));
}

export function teamFromJSON(
  jsonString: string,
): SafeParseResult<Team, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Team$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Team' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsData$inboundSchema: z.ZodType<
  DocumentFindDocumentsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentFindDocumentsVisibility$inboundSchema,
  status: DocumentFindDocumentsStatus$inboundSchema,
  source: DocumentFindDocumentsSource$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindDocumentsAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  user: z.lazy(() => DocumentFindDocumentsUser$inboundSchema),
  recipients: z.array(
    z.lazy(() => DocumentFindDocumentsRecipients$inboundSchema),
  ),
  team: z.nullable(z.lazy(() => Team$inboundSchema)),
});

/** @internal */
export type DocumentFindDocumentsData$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentFindDocumentsAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  user: DocumentFindDocumentsUser$Outbound;
  recipients: Array<DocumentFindDocumentsRecipients$Outbound>;
  team: Team$Outbound | null;
};

/** @internal */
export const DocumentFindDocumentsData$outboundSchema: z.ZodType<
  DocumentFindDocumentsData$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsData
> = z.object({
  visibility: DocumentFindDocumentsVisibility$outboundSchema,
  status: DocumentFindDocumentsStatus$outboundSchema,
  source: DocumentFindDocumentsSource$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindDocumentsAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  user: z.lazy(() => DocumentFindDocumentsUser$outboundSchema),
  recipients: z.array(
    z.lazy(() => DocumentFindDocumentsRecipients$outboundSchema),
  ),
  team: z.nullable(z.lazy(() => Team$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsData$ {
  /** @deprecated use `DocumentFindDocumentsData$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsData$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsData$outboundSchema` instead. */
  export const outboundSchema = DocumentFindDocumentsData$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsData$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsData$Outbound;
}

export function documentFindDocumentsDataToJSON(
  documentFindDocumentsData: DocumentFindDocumentsData,
): string {
  return JSON.stringify(
    DocumentFindDocumentsData$outboundSchema.parse(documentFindDocumentsData),
  );
}

export function documentFindDocumentsDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsData' from JSON`,
  );
}

/** @internal */
export const DocumentFindDocumentsResponseBody$inboundSchema: z.ZodType<
  DocumentFindDocumentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => DocumentFindDocumentsData$inboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/** @internal */
export type DocumentFindDocumentsResponseBody$Outbound = {
  data: Array<DocumentFindDocumentsData$Outbound>;
  count: number;
  currentPage: number;
  perPage: number;
  totalPages: number;
};

/** @internal */
export const DocumentFindDocumentsResponseBody$outboundSchema: z.ZodType<
  DocumentFindDocumentsResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentFindDocumentsResponseBody
> = z.object({
  data: z.array(z.lazy(() => DocumentFindDocumentsData$outboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindDocumentsResponseBody$ {
  /** @deprecated use `DocumentFindDocumentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = DocumentFindDocumentsResponseBody$inboundSchema;
  /** @deprecated use `DocumentFindDocumentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentFindDocumentsResponseBody$outboundSchema;
  /** @deprecated use `DocumentFindDocumentsResponseBody$Outbound` instead. */
  export type Outbound = DocumentFindDocumentsResponseBody$Outbound;
}

export function documentFindDocumentsResponseBodyToJSON(
  documentFindDocumentsResponseBody: DocumentFindDocumentsResponseBody,
): string {
  return JSON.stringify(
    DocumentFindDocumentsResponseBody$outboundSchema.parse(
      documentFindDocumentsResponseBody,
    ),
  );
}

export function documentFindDocumentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindDocumentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindDocumentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindDocumentsResponseBody' from JSON`,
  );
}
