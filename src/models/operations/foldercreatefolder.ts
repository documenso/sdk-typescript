/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FolderCreateFolderTypeRequest = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type FolderCreateFolderTypeRequest = ClosedEnum<
  typeof FolderCreateFolderTypeRequest
>;

export type FolderCreateFolderRequest = {
  name: string;
  /**
   * The folder ID to place this folder within. Leave empty to place folder at the root level.
   */
  parentId?: string | undefined;
  type?: FolderCreateFolderTypeRequest | undefined;
};

export const FolderCreateFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type FolderCreateFolderVisibility = ClosedEnum<
  typeof FolderCreateFolderVisibility
>;

export const FolderCreateFolderTypeResponse = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type FolderCreateFolderTypeResponse = ClosedEnum<
  typeof FolderCreateFolderTypeResponse
>;

/**
 * Successful response
 */
export type FolderCreateFolderResponse = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: FolderCreateFolderVisibility;
  type: FolderCreateFolderTypeResponse;
};

/** @internal */
export const FolderCreateFolderTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderTypeRequest
> = z.nativeEnum(FolderCreateFolderTypeRequest);

/** @internal */
export const FolderCreateFolderTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderTypeRequest
> = FolderCreateFolderTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderTypeRequest$ {
  /** @deprecated use `FolderCreateFolderTypeRequest$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderTypeRequest$inboundSchema;
  /** @deprecated use `FolderCreateFolderTypeRequest$outboundSchema` instead. */
  export const outboundSchema = FolderCreateFolderTypeRequest$outboundSchema;
}

/** @internal */
export const FolderCreateFolderRequest$inboundSchema: z.ZodType<
  FolderCreateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  parentId: z.string().optional(),
  type: FolderCreateFolderTypeRequest$inboundSchema.optional(),
});

/** @internal */
export type FolderCreateFolderRequest$Outbound = {
  name: string;
  parentId?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const FolderCreateFolderRequest$outboundSchema: z.ZodType<
  FolderCreateFolderRequest$Outbound,
  z.ZodTypeDef,
  FolderCreateFolderRequest
> = z.object({
  name: z.string(),
  parentId: z.string().optional(),
  type: FolderCreateFolderTypeRequest$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderRequest$ {
  /** @deprecated use `FolderCreateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderRequest$inboundSchema;
  /** @deprecated use `FolderCreateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = FolderCreateFolderRequest$outboundSchema;
  /** @deprecated use `FolderCreateFolderRequest$Outbound` instead. */
  export type Outbound = FolderCreateFolderRequest$Outbound;
}

export function folderCreateFolderRequestToJSON(
  folderCreateFolderRequest: FolderCreateFolderRequest,
): string {
  return JSON.stringify(
    FolderCreateFolderRequest$outboundSchema.parse(folderCreateFolderRequest),
  );
}

export function folderCreateFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<FolderCreateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderCreateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderCreateFolderRequest' from JSON`,
  );
}

/** @internal */
export const FolderCreateFolderVisibility$inboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderVisibility
> = z.nativeEnum(FolderCreateFolderVisibility);

/** @internal */
export const FolderCreateFolderVisibility$outboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderVisibility
> = FolderCreateFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderVisibility$ {
  /** @deprecated use `FolderCreateFolderVisibility$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderVisibility$inboundSchema;
  /** @deprecated use `FolderCreateFolderVisibility$outboundSchema` instead. */
  export const outboundSchema = FolderCreateFolderVisibility$outboundSchema;
}

/** @internal */
export const FolderCreateFolderTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderTypeResponse
> = z.nativeEnum(FolderCreateFolderTypeResponse);

/** @internal */
export const FolderCreateFolderTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof FolderCreateFolderTypeResponse
> = FolderCreateFolderTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderTypeResponse$ {
  /** @deprecated use `FolderCreateFolderTypeResponse$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderTypeResponse$inboundSchema;
  /** @deprecated use `FolderCreateFolderTypeResponse$outboundSchema` instead. */
  export const outboundSchema = FolderCreateFolderTypeResponse$outboundSchema;
}

/** @internal */
export const FolderCreateFolderResponse$inboundSchema: z.ZodType<
  FolderCreateFolderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderCreateFolderVisibility$inboundSchema,
  type: FolderCreateFolderTypeResponse$inboundSchema,
});

/** @internal */
export type FolderCreateFolderResponse$Outbound = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: string;
  type: string;
};

/** @internal */
export const FolderCreateFolderResponse$outboundSchema: z.ZodType<
  FolderCreateFolderResponse$Outbound,
  z.ZodTypeDef,
  FolderCreateFolderResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderCreateFolderVisibility$outboundSchema,
  type: FolderCreateFolderTypeResponse$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderCreateFolderResponse$ {
  /** @deprecated use `FolderCreateFolderResponse$inboundSchema` instead. */
  export const inboundSchema = FolderCreateFolderResponse$inboundSchema;
  /** @deprecated use `FolderCreateFolderResponse$outboundSchema` instead. */
  export const outboundSchema = FolderCreateFolderResponse$outboundSchema;
  /** @deprecated use `FolderCreateFolderResponse$Outbound` instead. */
  export type Outbound = FolderCreateFolderResponse$Outbound;
}

export function folderCreateFolderResponseToJSON(
  folderCreateFolderResponse: FolderCreateFolderResponse,
): string {
  return JSON.stringify(
    FolderCreateFolderResponse$outboundSchema.parse(folderCreateFolderResponse),
  );
}

export function folderCreateFolderResponseFromJSON(
  jsonString: string,
): SafeParseResult<FolderCreateFolderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderCreateFolderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderCreateFolderResponse' from JSON`,
  );
}
