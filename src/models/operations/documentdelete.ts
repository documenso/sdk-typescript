/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentDeleteRequest = {
  documentId: number;
};

/**
 * Successful response
 */
export type DocumentDeleteResponse = {
  success: boolean;
};

/** @internal */
export const DocumentDeleteRequest$inboundSchema: z.ZodType<
  DocumentDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
});

/** @internal */
export type DocumentDeleteRequest$Outbound = {
  documentId: number;
};

/** @internal */
export const DocumentDeleteRequest$outboundSchema: z.ZodType<
  DocumentDeleteRequest$Outbound,
  z.ZodTypeDef,
  DocumentDeleteRequest
> = z.object({
  documentId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteRequest$ {
  /** @deprecated use `DocumentDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteRequest$inboundSchema;
  /** @deprecated use `DocumentDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentDeleteRequest$outboundSchema;
  /** @deprecated use `DocumentDeleteRequest$Outbound` instead. */
  export type Outbound = DocumentDeleteRequest$Outbound;
}

export function documentDeleteRequestToJSON(
  documentDeleteRequest: DocumentDeleteRequest,
): string {
  return JSON.stringify(
    DocumentDeleteRequest$outboundSchema.parse(documentDeleteRequest),
  );
}

export function documentDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteRequest' from JSON`,
  );
}

/** @internal */
export const DocumentDeleteResponse$inboundSchema: z.ZodType<
  DocumentDeleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type DocumentDeleteResponse$Outbound = {
  success: boolean;
};

/** @internal */
export const DocumentDeleteResponse$outboundSchema: z.ZodType<
  DocumentDeleteResponse$Outbound,
  z.ZodTypeDef,
  DocumentDeleteResponse
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDeleteResponse$ {
  /** @deprecated use `DocumentDeleteResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentDeleteResponse$inboundSchema;
  /** @deprecated use `DocumentDeleteResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentDeleteResponse$outboundSchema;
  /** @deprecated use `DocumentDeleteResponse$Outbound` instead. */
  export type Outbound = DocumentDeleteResponse$Outbound;
}

export function documentDeleteResponseToJSON(
  documentDeleteResponse: DocumentDeleteResponse,
): string {
  return JSON.stringify(
    DocumentDeleteResponse$outboundSchema.parse(documentDeleteResponse),
  );
}

export function documentDeleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDeleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDeleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDeleteResponse' from JSON`,
  );
}
