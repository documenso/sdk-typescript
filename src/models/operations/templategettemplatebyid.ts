/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateGetTemplateByIdRequest = {
  templateId: number;
};

export const TemplateGetTemplateByIdType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateGetTemplateByIdType = ClosedEnum<
  typeof TemplateGetTemplateByIdType
>;

export const TemplateGetTemplateByIdVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateGetTemplateByIdVisibility = ClosedEnum<
  typeof TemplateGetTemplateByIdVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateGetTemplateByIdGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateGetTemplateByIdGlobalAccessAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateGetTemplateByIdGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateGetTemplateByIdGlobalActionAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdGlobalActionAuth
>;

export type TemplateGetTemplateByIdAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: TemplateGetTemplateByIdGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: TemplateGetTemplateByIdGlobalActionAuth | null;
};

export const TemplateGetTemplateByIdTemplatesType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type TemplateGetTemplateByIdTemplatesType = ClosedEnum<
  typeof TemplateGetTemplateByIdTemplatesType
>;

export type TemplateDocumentData = {
  type: TemplateGetTemplateByIdTemplatesType;
  id: string;
  data: string;
  initialData: string;
};

export const TemplateGetTemplateByIdSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateGetTemplateByIdSigningOrder = ClosedEnum<
  typeof TemplateGetTemplateByIdSigningOrder
>;

export const TemplateGetTemplateByIdDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateGetTemplateByIdDistributionMethod = ClosedEnum<
  typeof TemplateGetTemplateByIdDistributionMethod
>;

export type TemplateGetTemplateByIdEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type TemplateMeta = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: TemplateGetTemplateByIdSigningOrder | null;
  typedSignatureEnabled: boolean;
  distributionMethod: TemplateGetTemplateByIdDistributionMethod;
  templateId: number;
  redirectUrl: string | null;
  language: string;
  emailSettings: TemplateGetTemplateByIdEmailSettings | null;
};

export type DirectLink = {
  id: string;
  templateId: number;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
};

export type User = {
  id: number;
  name: string | null;
  email: string;
};

export const TemplateGetTemplateByIdRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type TemplateGetTemplateByIdRole = ClosedEnum<
  typeof TemplateGetTemplateByIdRole
>;

export const TemplateGetTemplateByIdReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateGetTemplateByIdReadStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdReadStatus
>;

export const TemplateGetTemplateByIdSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateGetTemplateByIdSigningStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdSigningStatus
>;

export const TemplateGetTemplateByIdSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateGetTemplateByIdSendStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateGetTemplateByIdAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateGetTemplateByIdAccessAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateGetTemplateByIdActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateGetTemplateByIdActionAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdActionAuth
>;

export type TemplateGetTemplateByIdTemplatesAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth: TemplateGetTemplateByIdAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth: TemplateGetTemplateByIdActionAuth | null;
};

export type TemplateGetTemplateByIdRecipients = {
  role: TemplateGetTemplateByIdRole;
  readStatus: TemplateGetTemplateByIdReadStatus;
  signingStatus: TemplateGetTemplateByIdSigningStatus;
  sendStatus: TemplateGetTemplateByIdSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateGetTemplateByIdTemplatesAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const TemplateGetTemplateByIdTemplatesResponseType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateGetTemplateByIdTemplatesResponseType = ClosedEnum<
  typeof TemplateGetTemplateByIdTemplatesResponseType
>;

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type =
  ClosedEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  >;

export type TemplateGetTemplateByIdFieldMetaTemplatesResponseValues = {
  value: string;
};

export type TemplateGetTemplateByIdFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type;
  values?:
    | Array<TemplateGetTemplateByIdFieldMetaTemplatesResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type =
  ClosedEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  >;

export type TemplateGetTemplateByIdFieldMetaTemplatesValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateGetTemplateByIdFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type;
  values?: Array<TemplateGetTemplateByIdFieldMetaTemplatesValues> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType =
  {
    Radio: "radio",
  } as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType =
  ClosedEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  >;

export type TemplateGetTemplateByIdFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateGetTemplateByIdFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType;
  values?: Array<TemplateGetTemplateByIdFieldMetaValues> | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type TemplateGetTemplateByIdFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType
  >;

export type TemplateGetTemplateByIdFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type = {
  Date: "date",
} as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type =
  ClosedEnum<typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type>;

export type TemplateGetTemplateByIdFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type;
  fontSize?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesResponseType = {
  Email: "email",
} as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesResponseType = ClosedEnum<
  typeof TemplateGetTemplateByIdFieldMetaTemplatesResponseType
>;

export type TemplateGetTemplateByIdFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponseType;
  fontSize?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaTemplatesType = {
  Name: "name",
} as const;
export type TemplateGetTemplateByIdFieldMetaTemplatesType = ClosedEnum<
  typeof TemplateGetTemplateByIdFieldMetaTemplatesType
>;

export type TemplateGetTemplateByIdFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdFieldMetaTemplatesType;
  fontSize?: number | undefined;
};

export const TemplateGetTemplateByIdFieldMetaType = {
  Initials: "initials",
} as const;
export type TemplateGetTemplateByIdFieldMetaType = ClosedEnum<
  typeof TemplateGetTemplateByIdFieldMetaType
>;

export type TemplateGetTemplateByIdFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdFieldMetaType;
  fontSize?: number | undefined;
};

export type TemplateGetTemplateByIdFieldMeta =
  | TemplateGetTemplateByIdFieldMeta1
  | TemplateGetTemplateByIdFieldMeta2
  | TemplateGetTemplateByIdFieldMeta3
  | TemplateGetTemplateByIdFieldMeta4
  | TemplateGetTemplateByIdFieldMeta7
  | TemplateGetTemplateByIdFieldMeta9
  | TemplateGetTemplateByIdFieldMeta5
  | TemplateGetTemplateByIdFieldMeta8
  | TemplateGetTemplateByIdFieldMeta6;

export type TemplateGetTemplateByIdFields = {
  type: TemplateGetTemplateByIdTemplatesResponseType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateGetTemplateByIdFieldMeta1
    | TemplateGetTemplateByIdFieldMeta2
    | TemplateGetTemplateByIdFieldMeta3
    | TemplateGetTemplateByIdFieldMeta4
    | TemplateGetTemplateByIdFieldMeta7
    | TemplateGetTemplateByIdFieldMeta9
    | TemplateGetTemplateByIdFieldMeta5
    | TemplateGetTemplateByIdFieldMeta8
    | TemplateGetTemplateByIdFieldMeta6
    | null;
};

/**
 * Successful response
 */
export type TemplateGetTemplateByIdResponseBody = {
  type: TemplateGetTemplateByIdType;
  visibility: TemplateGetTemplateByIdVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateGetTemplateByIdAuthOptions | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  templateDocumentData: TemplateDocumentData;
  templateMeta: TemplateMeta | null;
  directLink: DirectLink | null;
  user: User;
  recipients: Array<TemplateGetTemplateByIdRecipients>;
  fields: Array<TemplateGetTemplateByIdFields>;
};

/** @internal */
export const TemplateGetTemplateByIdRequest$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
});

/** @internal */
export type TemplateGetTemplateByIdRequest$Outbound = {
  templateId: number;
};

/** @internal */
export const TemplateGetTemplateByIdRequest$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdRequest$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdRequest
> = z.object({
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRequest$ {
  /** @deprecated use `TemplateGetTemplateByIdRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRequest$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdRequest$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRequest$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdRequest$Outbound;
}

export function templateGetTemplateByIdRequestToJSON(
  templateGetTemplateByIdRequest: TemplateGetTemplateByIdRequest,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdRequest$outboundSchema.parse(
      templateGetTemplateByIdRequest,
    ),
  );
}

export function templateGetTemplateByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdRequest' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdType
> = z.nativeEnum(TemplateGetTemplateByIdType);

/** @internal */
export const TemplateGetTemplateByIdType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdType
> = TemplateGetTemplateByIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdType$ {
  /** @deprecated use `TemplateGetTemplateByIdType$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdType$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdVisibility
> = z.nativeEnum(TemplateGetTemplateByIdVisibility);

/** @internal */
export const TemplateGetTemplateByIdVisibility$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdVisibility
> = TemplateGetTemplateByIdVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdVisibility$ {
  /** @deprecated use `TemplateGetTemplateByIdVisibility$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdVisibility$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdVisibility$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalAccessAuth> = z
    .nativeEnum(TemplateGetTemplateByIdGlobalAccessAuth);

/** @internal */
export const TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalAccessAuth> =
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdGlobalAccessAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalActionAuth> = z
    .nativeEnum(TemplateGetTemplateByIdGlobalActionAuth);

/** @internal */
export const TemplateGetTemplateByIdGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalActionAuth> =
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdGlobalActionAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdAuthOptions$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateGetTemplateByIdAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const TemplateGetTemplateByIdAuthOptions$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateGetTemplateByIdGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdAuthOptions$ {
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdAuthOptions$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdAuthOptions$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdAuthOptions$Outbound;
}

export function templateGetTemplateByIdAuthOptionsToJSON(
  templateGetTemplateByIdAuthOptions: TemplateGetTemplateByIdAuthOptions,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdAuthOptions$outboundSchema.parse(
      templateGetTemplateByIdAuthOptions,
    ),
  );
}

export function templateGetTemplateByIdAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplatesType> = z.nativeEnum(
    TemplateGetTemplateByIdTemplatesType,
  );

/** @internal */
export const TemplateGetTemplateByIdTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplatesType> =
    TemplateGetTemplateByIdTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesType$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateDocumentData$inboundSchema: z.ZodType<
  TemplateDocumentData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateGetTemplateByIdTemplatesType$inboundSchema,
  id: z.string(),
  data: z.string(),
  initialData: z.string(),
});

/** @internal */
export type TemplateDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
};

/** @internal */
export const TemplateDocumentData$outboundSchema: z.ZodType<
  TemplateDocumentData$Outbound,
  z.ZodTypeDef,
  TemplateDocumentData
> = z.object({
  type: TemplateGetTemplateByIdTemplatesType$outboundSchema,
  id: z.string(),
  data: z.string(),
  initialData: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDocumentData$ {
  /** @deprecated use `TemplateDocumentData$inboundSchema` instead. */
  export const inboundSchema = TemplateDocumentData$inboundSchema;
  /** @deprecated use `TemplateDocumentData$outboundSchema` instead. */
  export const outboundSchema = TemplateDocumentData$outboundSchema;
  /** @deprecated use `TemplateDocumentData$Outbound` instead. */
  export type Outbound = TemplateDocumentData$Outbound;
}

export function templateDocumentDataToJSON(
  templateDocumentData: TemplateDocumentData,
): string {
  return JSON.stringify(
    TemplateDocumentData$outboundSchema.parse(templateDocumentData),
  );
}

export function templateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDocumentData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDocumentData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDocumentData' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSigningOrder
> = z.nativeEnum(TemplateGetTemplateByIdSigningOrder);

/** @internal */
export const TemplateGetTemplateByIdSigningOrder$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningOrder> =
    TemplateGetTemplateByIdSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSigningOrder$ {
  /** @deprecated use `TemplateGetTemplateByIdSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdSigningOrder$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdDistributionMethod> = z
    .nativeEnum(TemplateGetTemplateByIdDistributionMethod);

/** @internal */
export const TemplateGetTemplateByIdDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdDistributionMethod> =
    TemplateGetTemplateByIdDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdDistributionMethod$ {
  /** @deprecated use `TemplateGetTemplateByIdDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdEmailSettings$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type TemplateGetTemplateByIdEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateGetTemplateByIdEmailSettings$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdEmailSettings$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdEmailSettings$ {
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdEmailSettings$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdEmailSettings$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdEmailSettings$Outbound;
}

export function templateGetTemplateByIdEmailSettingsToJSON(
  templateGetTemplateByIdEmailSettings: TemplateGetTemplateByIdEmailSettings,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdEmailSettings$outboundSchema.parse(
      templateGetTemplateByIdEmailSettings,
    ),
  );
}

export function templateGetTemplateByIdEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateMeta$inboundSchema: z.ZodType<
  TemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  signingOrder: z.nullable(TemplateGetTemplateByIdSigningOrder$inboundSchema),
  typedSignatureEnabled: z.boolean(),
  distributionMethod: TemplateGetTemplateByIdDistributionMethod$inboundSchema,
  templateId: z.number().int(),
  redirectUrl: z.nullable(z.string()),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdEmailSettings$inboundSchema),
  ),
});

/** @internal */
export type TemplateMeta$Outbound = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: string | null;
  typedSignatureEnabled: boolean;
  distributionMethod: string;
  templateId: number;
  redirectUrl: string | null;
  language: string;
  emailSettings: TemplateGetTemplateByIdEmailSettings$Outbound | null;
};

/** @internal */
export const TemplateMeta$outboundSchema: z.ZodType<
  TemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateMeta
> = z.object({
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  signingOrder: z.nullable(TemplateGetTemplateByIdSigningOrder$outboundSchema),
  typedSignatureEnabled: z.boolean(),
  distributionMethod: TemplateGetTemplateByIdDistributionMethod$outboundSchema,
  templateId: z.number().int(),
  redirectUrl: z.nullable(z.string()),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdEmailSettings$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateMeta$ {
  /** @deprecated use `TemplateMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateMeta$inboundSchema;
  /** @deprecated use `TemplateMeta$outboundSchema` instead. */
  export const outboundSchema = TemplateMeta$outboundSchema;
  /** @deprecated use `TemplateMeta$Outbound` instead. */
  export type Outbound = TemplateMeta$Outbound;
}

export function templateMetaToJSON(templateMeta: TemplateMeta): string {
  return JSON.stringify(TemplateMeta$outboundSchema.parse(templateMeta));
}

export function templateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateMeta' from JSON`,
  );
}

/** @internal */
export const DirectLink$inboundSchema: z.ZodType<
  DirectLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  templateId: z.number().int(),
  token: z.string(),
  createdAt: z.string(),
  enabled: z.boolean(),
  directTemplateRecipientId: z.number().int(),
});

/** @internal */
export type DirectLink$Outbound = {
  id: string;
  templateId: number;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
};

/** @internal */
export const DirectLink$outboundSchema: z.ZodType<
  DirectLink$Outbound,
  z.ZodTypeDef,
  DirectLink
> = z.object({
  id: z.string(),
  templateId: z.number().int(),
  token: z.string(),
  createdAt: z.string(),
  enabled: z.boolean(),
  directTemplateRecipientId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectLink$ {
  /** @deprecated use `DirectLink$inboundSchema` instead. */
  export const inboundSchema = DirectLink$inboundSchema;
  /** @deprecated use `DirectLink$outboundSchema` instead. */
  export const outboundSchema = DirectLink$outboundSchema;
  /** @deprecated use `DirectLink$Outbound` instead. */
  export type Outbound = DirectLink$Outbound;
}

export function directLinkToJSON(directLink: DirectLink): string {
  return JSON.stringify(DirectLink$outboundSchema.parse(directLink));
}

export function directLinkFromJSON(
  jsonString: string,
): SafeParseResult<DirectLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DirectLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DirectLink' from JSON`,
  );
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int(),
    name: z.nullable(z.string()),
    email: z.string(),
  });

/** @internal */
export type User$Outbound = {
  id: number;
  name: string | null;
  email: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    id: z.number().int(),
    name: z.nullable(z.string()),
    email: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdRole$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdRole
> = z.nativeEnum(TemplateGetTemplateByIdRole);

/** @internal */
export const TemplateGetTemplateByIdRole$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdRole
> = TemplateGetTemplateByIdRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRole$ {
  /** @deprecated use `TemplateGetTemplateByIdRole$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRole$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRole$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdRole$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdReadStatus
> = z.nativeEnum(TemplateGetTemplateByIdReadStatus);

/** @internal */
export const TemplateGetTemplateByIdReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdReadStatus
> = TemplateGetTemplateByIdReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdReadStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdReadStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdReadStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdReadStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdSigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningStatus> = z.nativeEnum(
    TemplateGetTemplateByIdSigningStatus,
  );

/** @internal */
export const TemplateGetTemplateByIdSigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningStatus> =
    TemplateGetTemplateByIdSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSigningStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdSigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdSigningStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSendStatus
> = z.nativeEnum(TemplateGetTemplateByIdSendStatus);

/** @internal */
export const TemplateGetTemplateByIdSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSendStatus
> = TemplateGetTemplateByIdSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSendStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdSendStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdSendStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSendStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSendStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdAccessAuth
> = z.nativeEnum(TemplateGetTemplateByIdAccessAuth);

/** @internal */
export const TemplateGetTemplateByIdAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdAccessAuth
> = TemplateGetTemplateByIdAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdAccessAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdAccessAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdAccessAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdActionAuth
> = z.nativeEnum(TemplateGetTemplateByIdActionAuth);

/** @internal */
export const TemplateGetTemplateByIdActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdActionAuth
> = TemplateGetTemplateByIdActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdActionAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdActionAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdActionAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdActionAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesAuthOptions$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.nullable(TemplateGetTemplateByIdAccessAuth$inboundSchema),
    actionAuth: z.nullable(TemplateGetTemplateByIdActionAuth$inboundSchema),
  });

/** @internal */
export type TemplateGetTemplateByIdTemplatesAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const TemplateGetTemplateByIdTemplatesAuthOptions$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplatesAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdTemplatesAuthOptions
  > = z.object({
    accessAuth: z.nullable(TemplateGetTemplateByIdAccessAuth$outboundSchema),
    actionAuth: z.nullable(TemplateGetTemplateByIdActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesAuthOptions$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesAuthOptions$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesAuthOptions$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesAuthOptions$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdTemplatesAuthOptions$Outbound;
}

export function templateGetTemplateByIdTemplatesAuthOptionsToJSON(
  templateGetTemplateByIdTemplatesAuthOptions:
    TemplateGetTemplateByIdTemplatesAuthOptions,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdTemplatesAuthOptions$outboundSchema.parse(
      templateGetTemplateByIdTemplatesAuthOptions,
    ),
  );
}

export function templateGetTemplateByIdTemplatesAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdTemplatesAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdTemplatesAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdTemplatesAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdRecipients$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdRecipients,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: TemplateGetTemplateByIdRole$inboundSchema,
  readStatus: TemplateGetTemplateByIdReadStatus$inboundSchema,
  signingStatus: TemplateGetTemplateByIdSigningStatus$inboundSchema,
  sendStatus: TemplateGetTemplateByIdSendStatus$inboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdTemplatesAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type TemplateGetTemplateByIdRecipients$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateGetTemplateByIdTemplatesAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const TemplateGetTemplateByIdRecipients$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdRecipients$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdRecipients
> = z.object({
  role: TemplateGetTemplateByIdRole$outboundSchema,
  readStatus: TemplateGetTemplateByIdReadStatus$outboundSchema,
  signingStatus: TemplateGetTemplateByIdSigningStatus$outboundSchema,
  sendStatus: TemplateGetTemplateByIdSendStatus$outboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdTemplatesAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRecipients$ {
  /** @deprecated use `TemplateGetTemplateByIdRecipients$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRecipients$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipients$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdRecipients$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipients$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdRecipients$Outbound;
}

export function templateGetTemplateByIdRecipientsToJSON(
  templateGetTemplateByIdRecipients: TemplateGetTemplateByIdRecipients,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdRecipients$outboundSchema.parse(
      templateGetTemplateByIdRecipients,
    ),
  );
}

export function templateGetTemplateByIdRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdRecipients, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdRecipients$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdRecipients' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplatesResponseType> = z
    .nativeEnum(TemplateGetTemplateByIdTemplatesResponseType);

/** @internal */
export const TemplateGetTemplateByIdTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplatesResponseType> =
    TemplateGetTemplateByIdTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplatesResponseType$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplatesResponseType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplatesResponseType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  > = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  > =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$Outbound = {
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$Outbound` instead. */
  export type Outbound =
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$Outbound;
}

export function templateGetTemplateByIdFieldMetaTemplatesResponseValuesToJSON(
  templateGetTemplateByIdFieldMetaTemplatesResponseValues:
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$outboundSchema
      .parse(templateGetTemplateByIdFieldMetaTemplatesResponseValues),
  );
}

export function templateGetTemplateByIdFieldMetaTemplatesResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdFieldMetaTemplatesResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaTemplatesResponseValues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta9$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$Outbound>
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta9$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta9$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      TemplateGetTemplateByIdFieldMetaTemplatesResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta9$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta9$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta9$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta9$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta9$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta9$Outbound;
}

export function templateGetTemplateByIdFieldMeta9ToJSON(
  templateGetTemplateByIdFieldMeta9: TemplateGetTemplateByIdFieldMeta9,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta9$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta9,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta9' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  > = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  > =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesValues$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdFieldMetaTemplatesValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type TemplateGetTemplateByIdFieldMetaTemplatesValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesValues$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdFieldMetaTemplatesValues$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdFieldMetaTemplatesValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesValues$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesValues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesValues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesValues$Outbound` instead. */
  export type Outbound =
    TemplateGetTemplateByIdFieldMetaTemplatesValues$Outbound;
}

export function templateGetTemplateByIdFieldMetaTemplatesValuesToJSON(
  templateGetTemplateByIdFieldMetaTemplatesValues:
    TemplateGetTemplateByIdFieldMetaTemplatesValues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaTemplatesValues$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaTemplatesValues,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaTemplatesValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdFieldMetaTemplatesValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaTemplatesValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaTemplatesValues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta8$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema,
  values: z.array(
    z.lazy(() => TemplateGetTemplateByIdFieldMetaTemplatesValues$inboundSchema),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateGetTemplateByIdFieldMetaTemplatesValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta8$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta8$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      TemplateGetTemplateByIdFieldMetaTemplatesValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta8$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta8$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta8$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta8$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta8$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta8$Outbound;
}

export function templateGetTemplateByIdFieldMeta8ToJSON(
  templateGetTemplateByIdFieldMeta8: TemplateGetTemplateByIdFieldMeta8,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta8$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta8,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta8' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  > = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  > =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaValues$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaValues$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaValues$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaValues$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaValues$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaValues$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaValues$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaValues$Outbound;
}

export function templateGetTemplateByIdFieldMetaValuesToJSON(
  templateGetTemplateByIdFieldMetaValues:
    TemplateGetTemplateByIdFieldMetaValues,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaValues$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaValues,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta7$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema,
  values: z.array(
    z.lazy(() => TemplateGetTemplateByIdFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateGetTemplateByIdFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta7$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta7$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema,
  values: z.array(
    z.lazy(() => TemplateGetTemplateByIdFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta7$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta7$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta7$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta7$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta7$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta7$Outbound;
}

export function templateGetTemplateByIdFieldMeta7ToJSON(
  templateGetTemplateByIdFieldMeta7: TemplateGetTemplateByIdFieldMeta7,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta7$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta7,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta7' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta6$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta6$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta6$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta6$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta6$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta6$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta6$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta6$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta6$Outbound;
}

export function templateGetTemplateByIdFieldMeta6ToJSON(
  templateGetTemplateByIdFieldMeta6: TemplateGetTemplateByIdFieldMeta6,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta6$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta6,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta6' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType
  > =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta5$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta5$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta5$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta5$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta5$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta5$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta5$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta5$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta5$Outbound;
}

export function templateGetTemplateByIdFieldMeta5ToJSON(
  templateGetTemplateByIdFieldMeta5: TemplateGetTemplateByIdFieldMeta5,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta5$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta5,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta5' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type
  > = z.nativeEnum(TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type);

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type
  > = TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta4$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta4$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta4$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta4$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta4$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta4$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta4$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta4$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta4$Outbound;
}

export function templateGetTemplateByIdFieldMeta4ToJSON(
  templateGetTemplateByIdFieldMeta4: TemplateGetTemplateByIdFieldMeta4,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta4$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta4,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta4' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponseType
  > = z.nativeEnum(TemplateGetTemplateByIdFieldMetaTemplatesResponseType);

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateGetTemplateByIdFieldMetaTemplatesResponseType
  > = TemplateGetTemplateByIdFieldMetaTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesResponseType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponseType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesResponseType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta3$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta3$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta3$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta3$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta3$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta3$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta3$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta3$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta3$Outbound;
}

export function templateGetTemplateByIdFieldMeta3ToJSON(
  templateGetTemplateByIdFieldMeta3: TemplateGetTemplateByIdFieldMeta3,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta3$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta3,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta3' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFieldMetaTemplatesType> = z
    .nativeEnum(TemplateGetTemplateByIdFieldMetaTemplatesType);

/** @internal */
export const TemplateGetTemplateByIdFieldMetaTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFieldMetaTemplatesType> =
    TemplateGetTemplateByIdFieldMetaTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaTemplatesType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta2$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta2$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta2$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaTemplatesType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta2$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta2$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta2$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta2$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta2$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta2$Outbound;
}

export function templateGetTemplateByIdFieldMeta2ToJSON(
  templateGetTemplateByIdFieldMeta2: TemplateGetTemplateByIdFieldMeta2,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta2$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta2,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta2' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFieldMetaType> = z.nativeEnum(
    TemplateGetTemplateByIdFieldMetaType,
  );

/** @internal */
export const TemplateGetTemplateByIdFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFieldMetaType> =
    TemplateGetTemplateByIdFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta1$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMeta1$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta1$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta1$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta1$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta1$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMeta1$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta1$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta1$Outbound;
}

export function templateGetTemplateByIdFieldMeta1ToJSON(
  templateGetTemplateByIdFieldMeta1: TemplateGetTemplateByIdFieldMeta1,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta1$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta1,
    ),
  );
}

export function templateGetTemplateByIdFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta1' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMeta$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TemplateGetTemplateByIdFieldMeta1$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta2$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta3$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta4$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta7$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta9$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta5$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta8$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta6$inboundSchema),
]);

/** @internal */
export type TemplateGetTemplateByIdFieldMeta$Outbound =
  | TemplateGetTemplateByIdFieldMeta1$Outbound
  | TemplateGetTemplateByIdFieldMeta2$Outbound
  | TemplateGetTemplateByIdFieldMeta3$Outbound
  | TemplateGetTemplateByIdFieldMeta4$Outbound
  | TemplateGetTemplateByIdFieldMeta7$Outbound
  | TemplateGetTemplateByIdFieldMeta9$Outbound
  | TemplateGetTemplateByIdFieldMeta5$Outbound
  | TemplateGetTemplateByIdFieldMeta8$Outbound
  | TemplateGetTemplateByIdFieldMeta6$Outbound;

/** @internal */
export const TemplateGetTemplateByIdFieldMeta$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMeta$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMeta
> = z.union([
  z.lazy(() => TemplateGetTemplateByIdFieldMeta1$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta2$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta3$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta4$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta7$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta9$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta5$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta8$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMeta$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldMeta$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdFieldMeta$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMeta$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMeta$Outbound;
}

export function templateGetTemplateByIdFieldMetaToJSON(
  templateGetTemplateByIdFieldMeta: TemplateGetTemplateByIdFieldMeta,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMeta$outboundSchema.parse(
      templateGetTemplateByIdFieldMeta,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMeta' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFields$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateGetTemplateByIdTemplatesResponseType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateGetTemplateByIdFieldMeta1$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta2$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta3$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta4$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta7$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta9$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta5$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta8$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type TemplateGetTemplateByIdFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateGetTemplateByIdFieldMeta1$Outbound
    | TemplateGetTemplateByIdFieldMeta2$Outbound
    | TemplateGetTemplateByIdFieldMeta3$Outbound
    | TemplateGetTemplateByIdFieldMeta4$Outbound
    | TemplateGetTemplateByIdFieldMeta7$Outbound
    | TemplateGetTemplateByIdFieldMeta9$Outbound
    | TemplateGetTemplateByIdFieldMeta5$Outbound
    | TemplateGetTemplateByIdFieldMeta8$Outbound
    | TemplateGetTemplateByIdFieldMeta6$Outbound
    | null;
};

/** @internal */
export const TemplateGetTemplateByIdFields$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFields$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFields
> = z.object({
  type: TemplateGetTemplateByIdTemplatesResponseType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateGetTemplateByIdFieldMeta1$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta2$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta3$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta4$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta7$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta9$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta5$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta8$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFields$ {
  /** @deprecated use `TemplateGetTemplateByIdFields$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFields$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFields$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdFields$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFields$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFields$Outbound;
}

export function templateGetTemplateByIdFieldsToJSON(
  templateGetTemplateByIdFields: TemplateGetTemplateByIdFields,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFields$outboundSchema.parse(
      templateGetTemplateByIdFields,
    ),
  );
}

export function templateGetTemplateByIdFieldsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFields' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdResponseBody$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateGetTemplateByIdType$inboundSchema,
  visibility: TemplateGetTemplateByIdVisibility$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdAuthOptions$inboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  templateDocumentData: z.lazy(() => TemplateDocumentData$inboundSchema),
  templateMeta: z.nullable(z.lazy(() => TemplateMeta$inboundSchema)),
  directLink: z.nullable(z.lazy(() => DirectLink$inboundSchema)),
  user: z.lazy(() => User$inboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateGetTemplateByIdRecipients$inboundSchema),
  ),
  fields: z.array(z.lazy(() => TemplateGetTemplateByIdFields$inboundSchema)),
});

/** @internal */
export type TemplateGetTemplateByIdResponseBody$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateGetTemplateByIdAuthOptions$Outbound | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  templateDocumentData: TemplateDocumentData$Outbound;
  templateMeta: TemplateMeta$Outbound | null;
  directLink: DirectLink$Outbound | null;
  user: User$Outbound;
  recipients: Array<TemplateGetTemplateByIdRecipients$Outbound>;
  fields: Array<TemplateGetTemplateByIdFields$Outbound>;
};

/** @internal */
export const TemplateGetTemplateByIdResponseBody$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdResponseBody
> = z.object({
  type: TemplateGetTemplateByIdType$outboundSchema,
  visibility: TemplateGetTemplateByIdVisibility$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdAuthOptions$outboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  templateDocumentData: z.lazy(() => TemplateDocumentData$outboundSchema),
  templateMeta: z.nullable(z.lazy(() => TemplateMeta$outboundSchema)),
  directLink: z.nullable(z.lazy(() => DirectLink$outboundSchema)),
  user: z.lazy(() => User$outboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateGetTemplateByIdRecipients$outboundSchema),
  ),
  fields: z.array(z.lazy(() => TemplateGetTemplateByIdFields$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdResponseBody$ {
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdResponseBody$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdResponseBody$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponseBody$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdResponseBody$Outbound;
}

export function templateGetTemplateByIdResponseBodyToJSON(
  templateGetTemplateByIdResponseBody: TemplateGetTemplateByIdResponseBody,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdResponseBody$outboundSchema.parse(
      templateGetTemplateByIdResponseBody,
    ),
  );
}

export function templateGetTemplateByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdResponseBody' from JSON`,
  );
}
