/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateGetTemplateByIdRequest = {
  templateId: number;
};

export const TemplateGetTemplateByIdType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateGetTemplateByIdType = ClosedEnum<
  typeof TemplateGetTemplateByIdType
>;

export const TemplateGetTemplateByIdVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateGetTemplateByIdVisibility = ClosedEnum<
  typeof TemplateGetTemplateByIdVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateGetTemplateByIdGlobalAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateGetTemplateByIdGlobalAccessAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateGetTemplateByIdGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateGetTemplateByIdGlobalActionAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdGlobalActionAuth
>;

export type TemplateGetTemplateByIdAuthOptions = {
  globalAccessAuth: Array<TemplateGetTemplateByIdGlobalAccessAuth>;
  globalActionAuth: Array<TemplateGetTemplateByIdGlobalActionAuth>;
};

export const TemplateGetTemplateByIdTemplateDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type TemplateGetTemplateByIdTemplateDocumentDataType = ClosedEnum<
  typeof TemplateGetTemplateByIdTemplateDocumentDataType
>;

export type TemplateGetTemplateByIdTemplateDocumentData = {
  type: TemplateGetTemplateByIdTemplateDocumentDataType;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

export const TemplateGetTemplateByIdSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateGetTemplateByIdSigningOrder = ClosedEnum<
  typeof TemplateGetTemplateByIdSigningOrder
>;

export const TemplateGetTemplateByIdDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateGetTemplateByIdDistributionMethod = ClosedEnum<
  typeof TemplateGetTemplateByIdDistributionMethod
>;

export type TemplateGetTemplateByIdEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type TemplateGetTemplateByIdTemplateMeta = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: TemplateGetTemplateByIdSigningOrder;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  distributionMethod: TemplateGetTemplateByIdDistributionMethod;
  redirectUrl: string | null;
  language: string;
  emailSettings: TemplateGetTemplateByIdEmailSettings | null;
  emailId: string | null;
  emailReplyTo: string | null;
  templateId: number | null;
};

export type TemplateGetTemplateByIdDirectLink = {
  id: string;
  envelopeId: string;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
  templateId: number;
};

export type TemplateGetTemplateByIdUser = {
  id: number;
  name: string | null;
  email: string;
};

export const TemplateGetTemplateByIdRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type TemplateGetTemplateByIdRole = ClosedEnum<
  typeof TemplateGetTemplateByIdRole
>;

export const TemplateGetTemplateByIdReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateGetTemplateByIdReadStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdReadStatus
>;

export const TemplateGetTemplateByIdSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateGetTemplateByIdSigningStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdSigningStatus
>;

export const TemplateGetTemplateByIdSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateGetTemplateByIdSendStatus = ClosedEnum<
  typeof TemplateGetTemplateByIdSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateGetTemplateByIdAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateGetTemplateByIdAccessAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateGetTemplateByIdActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateGetTemplateByIdActionAuth = ClosedEnum<
  typeof TemplateGetTemplateByIdActionAuth
>;

export type TemplateGetTemplateByIdRecipientAuthOptions = {
  accessAuth: Array<TemplateGetTemplateByIdAccessAuth>;
  actionAuth: Array<TemplateGetTemplateByIdActionAuth>;
};

export type TemplateGetTemplateByIdRecipient = {
  envelopeId: string;
  role: TemplateGetTemplateByIdRole;
  readStatus: TemplateGetTemplateByIdReadStatus;
  signingStatus: TemplateGetTemplateByIdSigningStatus;
  sendStatus: TemplateGetTemplateByIdSendStatus;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateGetTemplateByIdRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateGetTemplateByIdFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateGetTemplateByIdFieldType = ClosedEnum<
  typeof TemplateGetTemplateByIdFieldType
>;

export const TemplateGetTemplateByIdTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type TemplateGetTemplateByIdTypeDropdown = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeDropdown
>;

export type TemplateGetTemplateByIdValue3 = {
  value: string;
};

export type TemplateGetTemplateByIdFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeDropdown;
  values?: Array<TemplateGetTemplateByIdValue3> | undefined;
  defaultValue?: string | undefined;
};

export const TemplateGetTemplateByIdTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type TemplateGetTemplateByIdTypeCheckbox = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeCheckbox
>;

export type TemplateGetTemplateByIdValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const TemplateGetTemplateByIdDirection = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type TemplateGetTemplateByIdDirection = ClosedEnum<
  typeof TemplateGetTemplateByIdDirection
>;

export type TemplateGetTemplateByIdFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeCheckbox;
  values?: Array<TemplateGetTemplateByIdValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: TemplateGetTemplateByIdDirection | undefined;
};

export const TemplateGetTemplateByIdTypeRadio = {
  Radio: "radio",
} as const;
export type TemplateGetTemplateByIdTypeRadio = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeRadio
>;

export type TemplateGetTemplateByIdValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateGetTemplateByIdFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeRadio;
  values?: Array<TemplateGetTemplateByIdValue1> | undefined;
};

export const TemplateGetTemplateByIdTypeNumber = {
  Number: "number",
} as const;
export type TemplateGetTemplateByIdTypeNumber = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeNumber
>;

export const TemplateGetTemplateByIdTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign6 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign6
>;

export type TemplateGetTemplateByIdFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeNumber;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign6 | undefined;
};

export const TemplateGetTemplateByIdTypeText = {
  Text: "text",
} as const;
export type TemplateGetTemplateByIdTypeText = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeText
>;

export const TemplateGetTemplateByIdTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign5 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign5
>;

export type TemplateGetTemplateByIdFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign5 | undefined;
};

export const TemplateGetTemplateByIdTypeDate = {
  Date: "date",
} as const;
export type TemplateGetTemplateByIdTypeDate = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeDate
>;

export const TemplateGetTemplateByIdTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign4 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign4
>;

export type TemplateGetTemplateByIdFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeDate;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign4 | undefined;
};

export const TemplateGetTemplateByIdTypeEmail = {
  Email: "email",
} as const;
export type TemplateGetTemplateByIdTypeEmail = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeEmail
>;

export const TemplateGetTemplateByIdTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign3 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign3
>;

export type TemplateGetTemplateByIdFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeEmail;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign3 | undefined;
};

export const TemplateGetTemplateByIdTypeName = {
  Name: "name",
} as const;
export type TemplateGetTemplateByIdTypeName = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeName
>;

export const TemplateGetTemplateByIdTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign2 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign2
>;

export type TemplateGetTemplateByIdFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeName;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign2 | undefined;
};

export const TemplateGetTemplateByIdTypeInitials = {
  Initials: "initials",
} as const;
export type TemplateGetTemplateByIdTypeInitials = ClosedEnum<
  typeof TemplateGetTemplateByIdTypeInitials
>;

export const TemplateGetTemplateByIdTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateGetTemplateByIdTextAlign1 = ClosedEnum<
  typeof TemplateGetTemplateByIdTextAlign1
>;

export type TemplateGetTemplateByIdFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateGetTemplateByIdTypeInitials;
  fontSize?: number | undefined;
  textAlign?: TemplateGetTemplateByIdTextAlign1 | undefined;
};

export type TemplateGetTemplateByIdFieldMetaUnion =
  | TemplateGetTemplateByIdFieldMetaInitials
  | TemplateGetTemplateByIdFieldMetaName
  | TemplateGetTemplateByIdFieldMetaEmail
  | TemplateGetTemplateByIdFieldMetaDate
  | TemplateGetTemplateByIdFieldMetaText
  | TemplateGetTemplateByIdFieldMetaNumber
  | TemplateGetTemplateByIdFieldMetaRadio
  | TemplateGetTemplateByIdFieldMetaCheckbox
  | TemplateGetTemplateByIdFieldMetaDropdown;

export type TemplateGetTemplateByIdField = {
  envelopeId: string;
  envelopeItemId: string;
  type: TemplateGetTemplateByIdFieldType;
  id: number;
  secondaryId: string;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateGetTemplateByIdFieldMetaInitials
    | TemplateGetTemplateByIdFieldMetaName
    | TemplateGetTemplateByIdFieldMetaEmail
    | TemplateGetTemplateByIdFieldMetaDate
    | TemplateGetTemplateByIdFieldMetaText
    | TemplateGetTemplateByIdFieldMetaNumber
    | TemplateGetTemplateByIdFieldMetaRadio
    | TemplateGetTemplateByIdFieldMetaCheckbox
    | TemplateGetTemplateByIdFieldMetaDropdown
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateGetTemplateByIdFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type TemplateGetTemplateByIdFolderType = ClosedEnum<
  typeof TemplateGetTemplateByIdFolderType
>;

export const TemplateGetTemplateByIdFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateGetTemplateByIdFolderVisibility = ClosedEnum<
  typeof TemplateGetTemplateByIdFolderVisibility
>;

export type TemplateGetTemplateByIdFolder = {
  id: string;
  name: string;
  type: TemplateGetTemplateByIdFolderType;
  visibility: TemplateGetTemplateByIdFolderVisibility;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/**
 * Successful response
 */
export type TemplateGetTemplateByIdResponse = {
  type: TemplateGetTemplateByIdType;
  visibility: TemplateGetTemplateByIdVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateGetTemplateByIdAuthOptions | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  envelopeId: string;
  templateDocumentDataId?: string | undefined;
  templateDocumentData: TemplateGetTemplateByIdTemplateDocumentData;
  templateMeta: TemplateGetTemplateByIdTemplateMeta;
  directLink: TemplateGetTemplateByIdDirectLink | null;
  user: TemplateGetTemplateByIdUser;
  recipients: Array<TemplateGetTemplateByIdRecipient>;
  fields: Array<TemplateGetTemplateByIdField>;
  folder: TemplateGetTemplateByIdFolder | null;
};

/** @internal */
export const TemplateGetTemplateByIdRequest$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
});

/** @internal */
export type TemplateGetTemplateByIdRequest$Outbound = {
  templateId: number;
};

/** @internal */
export const TemplateGetTemplateByIdRequest$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdRequest$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdRequest
> = z.object({
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRequest$ {
  /** @deprecated use `TemplateGetTemplateByIdRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRequest$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdRequest$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRequest$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdRequest$Outbound;
}

export function templateGetTemplateByIdRequestToJSON(
  templateGetTemplateByIdRequest: TemplateGetTemplateByIdRequest,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdRequest$outboundSchema.parse(
      templateGetTemplateByIdRequest,
    ),
  );
}

export function templateGetTemplateByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdRequest' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdType
> = z.nativeEnum(TemplateGetTemplateByIdType);

/** @internal */
export const TemplateGetTemplateByIdType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdType
> = TemplateGetTemplateByIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdType$ {
  /** @deprecated use `TemplateGetTemplateByIdType$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdType$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdVisibility
> = z.nativeEnum(TemplateGetTemplateByIdVisibility);

/** @internal */
export const TemplateGetTemplateByIdVisibility$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdVisibility
> = TemplateGetTemplateByIdVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdVisibility$ {
  /** @deprecated use `TemplateGetTemplateByIdVisibility$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdVisibility$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdVisibility$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalAccessAuth> = z
    .nativeEnum(TemplateGetTemplateByIdGlobalAccessAuth);

/** @internal */
export const TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalAccessAuth> =
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdGlobalAccessAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalActionAuth> = z
    .nativeEnum(TemplateGetTemplateByIdGlobalActionAuth);

/** @internal */
export const TemplateGetTemplateByIdGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdGlobalActionAuth> =
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdGlobalActionAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdAuthOptions$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    TemplateGetTemplateByIdGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateGetTemplateByIdGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateGetTemplateByIdAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateGetTemplateByIdAuthOptions$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    TemplateGetTemplateByIdGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateGetTemplateByIdGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdAuthOptions$ {
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdAuthOptions$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdAuthOptions$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAuthOptions$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdAuthOptions$Outbound;
}

export function templateGetTemplateByIdAuthOptionsToJSON(
  templateGetTemplateByIdAuthOptions: TemplateGetTemplateByIdAuthOptions,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdAuthOptions$outboundSchema.parse(
      templateGetTemplateByIdAuthOptions,
    ),
  );
}

export function templateGetTemplateByIdAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplateDocumentDataType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplateDocumentDataType> = z
    .nativeEnum(TemplateGetTemplateByIdTemplateDocumentDataType);

/** @internal */
export const TemplateGetTemplateByIdTemplateDocumentDataType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTemplateDocumentDataType> =
    TemplateGetTemplateByIdTemplateDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplateDocumentDataType$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplateDocumentDataType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplateDocumentDataType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplateDocumentDataType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplateDocumentDataType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTemplateDocumentData$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplateDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TemplateGetTemplateByIdTemplateDocumentDataType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/** @internal */
export type TemplateGetTemplateByIdTemplateDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

/** @internal */
export const TemplateGetTemplateByIdTemplateDocumentData$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdTemplateDocumentData$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdTemplateDocumentData
  > = z.object({
    type: TemplateGetTemplateByIdTemplateDocumentDataType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplateDocumentData$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplateDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplateDocumentData$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplateDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplateDocumentData$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplateDocumentData$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdTemplateDocumentData$Outbound;
}

export function templateGetTemplateByIdTemplateDocumentDataToJSON(
  templateGetTemplateByIdTemplateDocumentData:
    TemplateGetTemplateByIdTemplateDocumentData,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdTemplateDocumentData$outboundSchema.parse(
      templateGetTemplateByIdTemplateDocumentData,
    ),
  );
}

export function templateGetTemplateByIdTemplateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdTemplateDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdTemplateDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdTemplateDocumentData' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSigningOrder
> = z.nativeEnum(TemplateGetTemplateByIdSigningOrder);

/** @internal */
export const TemplateGetTemplateByIdSigningOrder$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningOrder> =
    TemplateGetTemplateByIdSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSigningOrder$ {
  /** @deprecated use `TemplateGetTemplateByIdSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdSigningOrder$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdDistributionMethod> = z
    .nativeEnum(TemplateGetTemplateByIdDistributionMethod);

/** @internal */
export const TemplateGetTemplateByIdDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdDistributionMethod> =
    TemplateGetTemplateByIdDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdDistributionMethod$ {
  /** @deprecated use `TemplateGetTemplateByIdDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdEmailSettings$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type TemplateGetTemplateByIdEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateGetTemplateByIdEmailSettings$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdEmailSettings$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdEmailSettings$ {
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdEmailSettings$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdEmailSettings$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdEmailSettings$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdEmailSettings$Outbound;
}

export function templateGetTemplateByIdEmailSettingsToJSON(
  templateGetTemplateByIdEmailSettings: TemplateGetTemplateByIdEmailSettings,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdEmailSettings$outboundSchema.parse(
      templateGetTemplateByIdEmailSettings,
    ),
  );
}

export function templateGetTemplateByIdEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTemplateMeta$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdTemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  signingOrder: TemplateGetTemplateByIdSigningOrder$inboundSchema,
  typedSignatureEnabled: z.boolean(),
  uploadSignatureEnabled: z.boolean(),
  drawSignatureEnabled: z.boolean(),
  allowDictateNextSigner: z.boolean(),
  distributionMethod: TemplateGetTemplateByIdDistributionMethod$inboundSchema,
  redirectUrl: z.nullable(z.string()),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdEmailSettings$inboundSchema),
  ),
  emailId: z.nullable(z.string()),
  emailReplyTo: z.nullable(z.string()),
  templateId: z.nullable(z.number()),
});

/** @internal */
export type TemplateGetTemplateByIdTemplateMeta$Outbound = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: string;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  distributionMethod: string;
  redirectUrl: string | null;
  language: string;
  emailSettings: TemplateGetTemplateByIdEmailSettings$Outbound | null;
  emailId: string | null;
  emailReplyTo: string | null;
  templateId: number | null;
};

/** @internal */
export const TemplateGetTemplateByIdTemplateMeta$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdTemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdTemplateMeta
> = z.object({
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  signingOrder: TemplateGetTemplateByIdSigningOrder$outboundSchema,
  typedSignatureEnabled: z.boolean(),
  uploadSignatureEnabled: z.boolean(),
  drawSignatureEnabled: z.boolean(),
  allowDictateNextSigner: z.boolean(),
  distributionMethod: TemplateGetTemplateByIdDistributionMethod$outboundSchema,
  redirectUrl: z.nullable(z.string()),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdEmailSettings$outboundSchema),
  ),
  emailId: z.nullable(z.string()),
  emailReplyTo: z.nullable(z.string()),
  templateId: z.nullable(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTemplateMeta$ {
  /** @deprecated use `TemplateGetTemplateByIdTemplateMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplateMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdTemplateMeta$Outbound;
}

export function templateGetTemplateByIdTemplateMetaToJSON(
  templateGetTemplateByIdTemplateMeta: TemplateGetTemplateByIdTemplateMeta,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdTemplateMeta$outboundSchema.parse(
      templateGetTemplateByIdTemplateMeta,
    ),
  );
}

export function templateGetTemplateByIdTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdTemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdTemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdDirectLink$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdDirectLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  envelopeId: z.string(),
  token: z.string(),
  createdAt: z.string(),
  enabled: z.boolean(),
  directTemplateRecipientId: z.number(),
  templateId: z.number(),
});

/** @internal */
export type TemplateGetTemplateByIdDirectLink$Outbound = {
  id: string;
  envelopeId: string;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
  templateId: number;
};

/** @internal */
export const TemplateGetTemplateByIdDirectLink$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdDirectLink$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdDirectLink
> = z.object({
  id: z.string(),
  envelopeId: z.string(),
  token: z.string(),
  createdAt: z.string(),
  enabled: z.boolean(),
  directTemplateRecipientId: z.number(),
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdDirectLink$ {
  /** @deprecated use `TemplateGetTemplateByIdDirectLink$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdDirectLink$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdDirectLink$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdDirectLink$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdDirectLink$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdDirectLink$Outbound;
}

export function templateGetTemplateByIdDirectLinkToJSON(
  templateGetTemplateByIdDirectLink: TemplateGetTemplateByIdDirectLink,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdDirectLink$outboundSchema.parse(
      templateGetTemplateByIdDirectLink,
    ),
  );
}

export function templateGetTemplateByIdDirectLinkFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdDirectLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdDirectLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdDirectLink' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdUser$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdUser$Outbound = {
  id: number;
  name: string | null;
  email: string;
};

/** @internal */
export const TemplateGetTemplateByIdUser$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdUser$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdUser
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdUser$ {
  /** @deprecated use `TemplateGetTemplateByIdUser$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdUser$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdUser$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdUser$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdUser$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdUser$Outbound;
}

export function templateGetTemplateByIdUserToJSON(
  templateGetTemplateByIdUser: TemplateGetTemplateByIdUser,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdUser$outboundSchema.parse(
      templateGetTemplateByIdUser,
    ),
  );
}

export function templateGetTemplateByIdUserFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdUser' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdRole$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdRole
> = z.nativeEnum(TemplateGetTemplateByIdRole);

/** @internal */
export const TemplateGetTemplateByIdRole$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdRole
> = TemplateGetTemplateByIdRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRole$ {
  /** @deprecated use `TemplateGetTemplateByIdRole$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRole$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRole$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdRole$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdReadStatus
> = z.nativeEnum(TemplateGetTemplateByIdReadStatus);

/** @internal */
export const TemplateGetTemplateByIdReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdReadStatus
> = TemplateGetTemplateByIdReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdReadStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdReadStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdReadStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdReadStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdSigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningStatus> = z.nativeEnum(
    TemplateGetTemplateByIdSigningStatus,
  );

/** @internal */
export const TemplateGetTemplateByIdSigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdSigningStatus> =
    TemplateGetTemplateByIdSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSigningStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdSigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdSigningStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSendStatus
> = z.nativeEnum(TemplateGetTemplateByIdSendStatus);

/** @internal */
export const TemplateGetTemplateByIdSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdSendStatus
> = TemplateGetTemplateByIdSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdSendStatus$ {
  /** @deprecated use `TemplateGetTemplateByIdSendStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdSendStatus$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdSendStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdSendStatus$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdAccessAuth
> = z.nativeEnum(TemplateGetTemplateByIdAccessAuth);

/** @internal */
export const TemplateGetTemplateByIdAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdAccessAuth
> = TemplateGetTemplateByIdAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdAccessAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdAccessAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdAccessAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdActionAuth
> = z.nativeEnum(TemplateGetTemplateByIdActionAuth);

/** @internal */
export const TemplateGetTemplateByIdActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdActionAuth
> = TemplateGetTemplateByIdActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdActionAuth$ {
  /** @deprecated use `TemplateGetTemplateByIdActionAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdActionAuth$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdActionAuth$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdRecipientAuthOptions$inboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdRecipientAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.array(TemplateGetTemplateByIdAccessAuth$inboundSchema),
    actionAuth: z.array(TemplateGetTemplateByIdActionAuth$inboundSchema),
  });

/** @internal */
export type TemplateGetTemplateByIdRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const TemplateGetTemplateByIdRecipientAuthOptions$outboundSchema:
  z.ZodType<
    TemplateGetTemplateByIdRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateGetTemplateByIdRecipientAuthOptions
  > = z.object({
    accessAuth: z.array(TemplateGetTemplateByIdAccessAuth$outboundSchema),
    actionAuth: z.array(TemplateGetTemplateByIdActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRecipientAuthOptions$ {
  /** @deprecated use `TemplateGetTemplateByIdRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdRecipientAuthOptions$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdRecipientAuthOptions$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipientAuthOptions$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdRecipientAuthOptions$Outbound;
}

export function templateGetTemplateByIdRecipientAuthOptionsToJSON(
  templateGetTemplateByIdRecipientAuthOptions:
    TemplateGetTemplateByIdRecipientAuthOptions,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdRecipientAuthOptions$outboundSchema.parse(
      templateGetTemplateByIdRecipientAuthOptions,
    ),
  );
}

export function templateGetTemplateByIdRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdRecipientAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdRecipient$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  role: TemplateGetTemplateByIdRole$inboundSchema,
  readStatus: TemplateGetTemplateByIdReadStatus$inboundSchema,
  signingStatus: TemplateGetTemplateByIdSigningStatus$inboundSchema,
  sendStatus: TemplateGetTemplateByIdSendStatus$inboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdRecipientAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateGetTemplateByIdRecipient$Outbound = {
  envelopeId: string;
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateGetTemplateByIdRecipientAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdRecipient$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdRecipient$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdRecipient
> = z.object({
  envelopeId: z.string(),
  role: TemplateGetTemplateByIdRole$outboundSchema,
  readStatus: TemplateGetTemplateByIdReadStatus$outboundSchema,
  signingStatus: TemplateGetTemplateByIdSigningStatus$outboundSchema,
  sendStatus: TemplateGetTemplateByIdSendStatus$outboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdRecipientAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdRecipient$ {
  /** @deprecated use `TemplateGetTemplateByIdRecipient$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdRecipient$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipient$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdRecipient$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdRecipient$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdRecipient$Outbound;
}

export function templateGetTemplateByIdRecipientToJSON(
  templateGetTemplateByIdRecipient: TemplateGetTemplateByIdRecipient,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdRecipient$outboundSchema.parse(
      templateGetTemplateByIdRecipient,
    ),
  );
}

export function templateGetTemplateByIdRecipientFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdRecipient' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdFieldType
> = z.nativeEnum(TemplateGetTemplateByIdFieldType);

/** @internal */
export const TemplateGetTemplateByIdFieldType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdFieldType
> = TemplateGetTemplateByIdFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldType$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldType$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFieldType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldType$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdFieldType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeDropdown
> = z.nativeEnum(TemplateGetTemplateByIdTypeDropdown);

/** @internal */
export const TemplateGetTemplateByIdTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTypeDropdown> =
    TemplateGetTemplateByIdTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeDropdown$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTypeDropdown$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTypeDropdown$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdValue3$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdValue3$Outbound = {
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdValue3$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue3$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdValue3$ {
  /** @deprecated use `TemplateGetTemplateByIdValue3$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdValue3$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue3$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdValue3$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue3$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdValue3$Outbound;
}

export function templateGetTemplateByIdValue3ToJSON(
  templateGetTemplateByIdValue3: TemplateGetTemplateByIdValue3,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdValue3$outboundSchema.parse(
      templateGetTemplateByIdValue3,
    ),
  );
}

export function templateGetTemplateByIdValue3FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdValue3' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue3$inboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateGetTemplateByIdValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaDropdown$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue3$outboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaDropdown$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDropdown$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaDropdown$Outbound;
}

export function templateGetTemplateByIdFieldMetaDropdownToJSON(
  templateGetTemplateByIdFieldMetaDropdown:
    TemplateGetTemplateByIdFieldMetaDropdown,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaDropdown,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdFieldMetaDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeCheckbox
> = z.nativeEnum(TemplateGetTemplateByIdTypeCheckbox);

/** @internal */
export const TemplateGetTemplateByIdTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTypeCheckbox> =
    TemplateGetTemplateByIdTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeCheckbox$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTypeCheckbox$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTypeCheckbox$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdValue2$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdValue2$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue2$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdValue2$ {
  /** @deprecated use `TemplateGetTemplateByIdValue2$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdValue2$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue2$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdValue2$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue2$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdValue2$Outbound;
}

export function templateGetTemplateByIdValue2ToJSON(
  templateGetTemplateByIdValue2: TemplateGetTemplateByIdValue2,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdValue2$outboundSchema.parse(
      templateGetTemplateByIdValue2,
    ),
  );
}

export function templateGetTemplateByIdValue2FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdValue2' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdDirection$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdDirection
> = z.nativeEnum(TemplateGetTemplateByIdDirection);

/** @internal */
export const TemplateGetTemplateByIdDirection$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdDirection
> = TemplateGetTemplateByIdDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdDirection$ {
  /** @deprecated use `TemplateGetTemplateByIdDirection$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdDirection$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdDirection$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdDirection$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue2$inboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: TemplateGetTemplateByIdDirection$inboundSchema.default("vertical"),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateGetTemplateByIdValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaCheckbox$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue2$outboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: TemplateGetTemplateByIdDirection$outboundSchema.default(
    "vertical",
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaCheckbox$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaCheckbox$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaCheckbox$Outbound;
}

export function templateGetTemplateByIdFieldMetaCheckboxToJSON(
  templateGetTemplateByIdFieldMetaCheckbox:
    TemplateGetTemplateByIdFieldMetaCheckbox,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaCheckbox,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdFieldMetaCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeRadio
> = z.nativeEnum(TemplateGetTemplateByIdTypeRadio);

/** @internal */
export const TemplateGetTemplateByIdTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeRadio
> = TemplateGetTemplateByIdTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeRadio$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeRadio$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeRadio$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeRadio$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdTypeRadio$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdValue1$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateGetTemplateByIdValue1$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdValue1$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdValue1$ {
  /** @deprecated use `TemplateGetTemplateByIdValue1$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdValue1$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue1$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdValue1$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdValue1$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdValue1$Outbound;
}

export function templateGetTemplateByIdValue1ToJSON(
  templateGetTemplateByIdValue1: TemplateGetTemplateByIdValue1,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdValue1$outboundSchema.parse(
      templateGetTemplateByIdValue1,
    ),
  );
}

export function templateGetTemplateByIdValue1FromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdValue1' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaRadio$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue1$inboundSchema))
    .optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateGetTemplateByIdValue1$Outbound> | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaRadio$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaRadio$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => TemplateGetTemplateByIdValue1$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaRadio$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaRadio$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaRadio$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaRadio$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaRadio$Outbound;
}

export function templateGetTemplateByIdFieldMetaRadioToJSON(
  templateGetTemplateByIdFieldMetaRadio: TemplateGetTemplateByIdFieldMetaRadio,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaRadio$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaRadio,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeNumber
> = z.nativeEnum(TemplateGetTemplateByIdTypeNumber);

/** @internal */
export const TemplateGetTemplateByIdTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeNumber
> = TemplateGetTemplateByIdTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeNumber$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeNumber$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeNumber$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTypeNumber$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign6
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign6);

/** @internal */
export const TemplateGetTemplateByIdTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign6
> = TemplateGetTemplateByIdTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign6$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign6$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign6$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign6$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign6$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaNumber$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeNumber$inboundSchema,
  numberFormat: z.nullable(z.string()).optional(),
  value: z.string().optional(),
  minValue: z.nullable(z.number()).optional(),
  maxValue: z.nullable(z.number()).optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaNumber$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaNumber$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeNumber$outboundSchema,
  numberFormat: z.nullable(z.string()).optional(),
  value: z.string().optional(),
  minValue: z.nullable(z.number()).optional(),
  maxValue: z.nullable(z.number()).optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaNumber$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaNumber$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaNumber$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaNumber$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaNumber$Outbound;
}

export function templateGetTemplateByIdFieldMetaNumberToJSON(
  templateGetTemplateByIdFieldMetaNumber:
    TemplateGetTemplateByIdFieldMetaNumber,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaNumber$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaNumber,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeText$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeText
> = z.nativeEnum(TemplateGetTemplateByIdTypeText);

/** @internal */
export const TemplateGetTemplateByIdTypeText$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeText
> = TemplateGetTemplateByIdTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeText$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeText$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeText$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeText$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdTypeText$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign5
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign5);

/** @internal */
export const TemplateGetTemplateByIdTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign5
> = TemplateGetTemplateByIdTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign5$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign5$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign5$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign5$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign5$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaText$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaText$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaText$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaText$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaText$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaText$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaText$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaText$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaText$Outbound;
}

export function templateGetTemplateByIdFieldMetaTextToJSON(
  templateGetTemplateByIdFieldMetaText: TemplateGetTemplateByIdFieldMetaText,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaText$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaText,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaText' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeDate
> = z.nativeEnum(TemplateGetTemplateByIdTypeDate);

/** @internal */
export const TemplateGetTemplateByIdTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeDate
> = TemplateGetTemplateByIdTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeDate$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeDate$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeDate$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeDate$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdTypeDate$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign4
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign4);

/** @internal */
export const TemplateGetTemplateByIdTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign4
> = TemplateGetTemplateByIdTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign4$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign4$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign4$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign4$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign4$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaDate$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaDate$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaDate$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaDate$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaDate$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaDate$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaDate$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaDate$Outbound;
}

export function templateGetTemplateByIdFieldMetaDateToJSON(
  templateGetTemplateByIdFieldMetaDate: TemplateGetTemplateByIdFieldMetaDate,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaDate$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaDate,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeEmail
> = z.nativeEnum(TemplateGetTemplateByIdTypeEmail);

/** @internal */
export const TemplateGetTemplateByIdTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeEmail
> = TemplateGetTemplateByIdTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeEmail$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeEmail$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeEmail$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeEmail$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdTypeEmail$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign3
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign3);

/** @internal */
export const TemplateGetTemplateByIdTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign3
> = TemplateGetTemplateByIdTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign3$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign3$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign3$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign3$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaEmail$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaEmail$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaEmail$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaEmail$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaEmail$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaEmail$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaEmail$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaEmail$Outbound;
}

export function templateGetTemplateByIdFieldMetaEmailToJSON(
  templateGetTemplateByIdFieldMetaEmail: TemplateGetTemplateByIdFieldMetaEmail,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaEmail$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaEmail,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeName$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeName
> = z.nativeEnum(TemplateGetTemplateByIdTypeName);

/** @internal */
export const TemplateGetTemplateByIdTypeName$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeName
> = TemplateGetTemplateByIdTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeName$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeName$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTypeName$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeName$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdTypeName$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign2
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign2);

/** @internal */
export const TemplateGetTemplateByIdTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign2
> = TemplateGetTemplateByIdTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign2$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign2$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign2$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign2$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaName$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaName$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaName$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaName$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaName$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaName$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaName$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaName$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaName$Outbound;
}

export function templateGetTemplateByIdFieldMetaNameToJSON(
  templateGetTemplateByIdFieldMetaName: TemplateGetTemplateByIdFieldMetaName,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaName$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaName,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaName' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTypeInitials
> = z.nativeEnum(TemplateGetTemplateByIdTypeInitials);

/** @internal */
export const TemplateGetTemplateByIdTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdTypeInitials> =
    TemplateGetTemplateByIdTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTypeInitials$ {
  /** @deprecated use `TemplateGetTemplateByIdTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdTypeInitials$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTypeInitials$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign1
> = z.nativeEnum(TemplateGetTemplateByIdTextAlign1);

/** @internal */
export const TemplateGetTemplateByIdTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdTextAlign1
> = TemplateGetTemplateByIdTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdTextAlign1$ {
  /** @deprecated use `TemplateGetTemplateByIdTextAlign1$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdTextAlign1$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdTextAlign1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdTextAlign1$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaInitials$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type TemplateGetTemplateByIdFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdFieldMetaInitials$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaInitials$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateGetTemplateByIdTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateGetTemplateByIdTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaInitials$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaInitials$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaInitials$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaInitials$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaInitials$Outbound;
}

export function templateGetTemplateByIdFieldMetaInitialsToJSON(
  templateGetTemplateByIdFieldMetaInitials:
    TemplateGetTemplateByIdFieldMetaInitials,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaInitials$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaInitials,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateGetTemplateByIdFieldMetaInitials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaInitials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFieldMetaUnion$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TemplateGetTemplateByIdFieldMetaInitials$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaName$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaEmail$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaDate$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaText$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaNumber$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaRadio$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema),
]);

/** @internal */
export type TemplateGetTemplateByIdFieldMetaUnion$Outbound =
  | TemplateGetTemplateByIdFieldMetaInitials$Outbound
  | TemplateGetTemplateByIdFieldMetaName$Outbound
  | TemplateGetTemplateByIdFieldMetaEmail$Outbound
  | TemplateGetTemplateByIdFieldMetaDate$Outbound
  | TemplateGetTemplateByIdFieldMetaText$Outbound
  | TemplateGetTemplateByIdFieldMetaNumber$Outbound
  | TemplateGetTemplateByIdFieldMetaRadio$Outbound
  | TemplateGetTemplateByIdFieldMetaCheckbox$Outbound
  | TemplateGetTemplateByIdFieldMetaDropdown$Outbound;

/** @internal */
export const TemplateGetTemplateByIdFieldMetaUnion$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFieldMetaUnion
> = z.union([
  z.lazy(() => TemplateGetTemplateByIdFieldMetaInitials$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaName$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaEmail$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaDate$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaText$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaNumber$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaRadio$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema),
  z.lazy(() => TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFieldMetaUnion$ {
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFieldMetaUnion$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFieldMetaUnion$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFieldMetaUnion$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFieldMetaUnion$Outbound;
}

export function templateGetTemplateByIdFieldMetaUnionToJSON(
  templateGetTemplateByIdFieldMetaUnion: TemplateGetTemplateByIdFieldMetaUnion,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFieldMetaUnion$outboundSchema.parse(
      templateGetTemplateByIdFieldMetaUnion,
    ),
  );
}

export function templateGetTemplateByIdFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateGetTemplateByIdFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdField$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdField,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateGetTemplateByIdFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateGetTemplateByIdFieldMetaInitials$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaName$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaEmail$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaDate$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaText$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaNumber$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaRadio$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaCheckbox$inboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaDropdown$inboundSchema),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateGetTemplateByIdField$Outbound = {
  envelopeId: string;
  envelopeItemId: string;
  type: string;
  id: number;
  secondaryId: string;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateGetTemplateByIdFieldMetaInitials$Outbound
    | TemplateGetTemplateByIdFieldMetaName$Outbound
    | TemplateGetTemplateByIdFieldMetaEmail$Outbound
    | TemplateGetTemplateByIdFieldMetaDate$Outbound
    | TemplateGetTemplateByIdFieldMetaText$Outbound
    | TemplateGetTemplateByIdFieldMetaNumber$Outbound
    | TemplateGetTemplateByIdFieldMetaRadio$Outbound
    | TemplateGetTemplateByIdFieldMetaCheckbox$Outbound
    | TemplateGetTemplateByIdFieldMetaDropdown$Outbound
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateGetTemplateByIdField$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdField$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdField
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateGetTemplateByIdFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateGetTemplateByIdFieldMetaInitials$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaName$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaEmail$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaDate$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaText$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaNumber$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaRadio$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaCheckbox$outboundSchema),
      z.lazy(() => TemplateGetTemplateByIdFieldMetaDropdown$outboundSchema),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdField$ {
  /** @deprecated use `TemplateGetTemplateByIdField$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdField$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdField$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdField$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdField$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdField$Outbound;
}

export function templateGetTemplateByIdFieldToJSON(
  templateGetTemplateByIdField: TemplateGetTemplateByIdField,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdField$outboundSchema.parse(
      templateGetTemplateByIdField,
    ),
  );
}

export function templateGetTemplateByIdFieldFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdField' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdFolderType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdFolderType
> = z.nativeEnum(TemplateGetTemplateByIdFolderType);

/** @internal */
export const TemplateGetTemplateByIdFolderType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateGetTemplateByIdFolderType
> = TemplateGetTemplateByIdFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFolderType$ {
  /** @deprecated use `TemplateGetTemplateByIdFolderType$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFolderType$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFolderType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFolderType$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFolderVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFolderVisibility> = z
    .nativeEnum(TemplateGetTemplateByIdFolderVisibility);

/** @internal */
export const TemplateGetTemplateByIdFolderVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateGetTemplateByIdFolderVisibility> =
    TemplateGetTemplateByIdFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFolderVisibility$ {
  /** @deprecated use `TemplateGetTemplateByIdFolderVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateGetTemplateByIdFolderVisibility$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFolderVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateGetTemplateByIdFolderVisibility$outboundSchema;
}

/** @internal */
export const TemplateGetTemplateByIdFolder$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateGetTemplateByIdFolderType$inboundSchema,
  visibility: TemplateGetTemplateByIdFolderVisibility$inboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type TemplateGetTemplateByIdFolder$Outbound = {
  id: string;
  name: string;
  type: string;
  visibility: string;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TemplateGetTemplateByIdFolder$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdFolder$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdFolder
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateGetTemplateByIdFolderType$outboundSchema,
  visibility: TemplateGetTemplateByIdFolderVisibility$outboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdFolder$ {
  /** @deprecated use `TemplateGetTemplateByIdFolder$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdFolder$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFolder$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdFolder$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdFolder$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdFolder$Outbound;
}

export function templateGetTemplateByIdFolderToJSON(
  templateGetTemplateByIdFolder: TemplateGetTemplateByIdFolder,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdFolder$outboundSchema.parse(
      templateGetTemplateByIdFolder,
    ),
  );
}

export function templateGetTemplateByIdFolderFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdFolder' from JSON`,
  );
}

/** @internal */
export const TemplateGetTemplateByIdResponse$inboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateGetTemplateByIdType$inboundSchema,
  visibility: TemplateGetTemplateByIdVisibility$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdAuthOptions$inboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
  templateDocumentData: z.lazy(() =>
    TemplateGetTemplateByIdTemplateDocumentData$inboundSchema
  ),
  templateMeta: z.lazy(() => TemplateGetTemplateByIdTemplateMeta$inboundSchema),
  directLink: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdDirectLink$inboundSchema),
  ),
  user: z.lazy(() => TemplateGetTemplateByIdUser$inboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateGetTemplateByIdRecipient$inboundSchema),
  ),
  fields: z.array(z.lazy(() => TemplateGetTemplateByIdField$inboundSchema)),
  folder: z.nullable(z.lazy(() => TemplateGetTemplateByIdFolder$inboundSchema)),
});

/** @internal */
export type TemplateGetTemplateByIdResponse$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateGetTemplateByIdAuthOptions$Outbound | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  envelopeId: string;
  templateDocumentDataId: string;
  templateDocumentData: TemplateGetTemplateByIdTemplateDocumentData$Outbound;
  templateMeta: TemplateGetTemplateByIdTemplateMeta$Outbound;
  directLink: TemplateGetTemplateByIdDirectLink$Outbound | null;
  user: TemplateGetTemplateByIdUser$Outbound;
  recipients: Array<TemplateGetTemplateByIdRecipient$Outbound>;
  fields: Array<TemplateGetTemplateByIdField$Outbound>;
  folder: TemplateGetTemplateByIdFolder$Outbound | null;
};

/** @internal */
export const TemplateGetTemplateByIdResponse$outboundSchema: z.ZodType<
  TemplateGetTemplateByIdResponse$Outbound,
  z.ZodTypeDef,
  TemplateGetTemplateByIdResponse
> = z.object({
  type: TemplateGetTemplateByIdType$outboundSchema,
  visibility: TemplateGetTemplateByIdVisibility$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdAuthOptions$outboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
  templateDocumentData: z.lazy(() =>
    TemplateGetTemplateByIdTemplateDocumentData$outboundSchema
  ),
  templateMeta: z.lazy(() =>
    TemplateGetTemplateByIdTemplateMeta$outboundSchema
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdDirectLink$outboundSchema),
  ),
  user: z.lazy(() => TemplateGetTemplateByIdUser$outboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateGetTemplateByIdRecipient$outboundSchema),
  ),
  fields: z.array(z.lazy(() => TemplateGetTemplateByIdField$outboundSchema)),
  folder: z.nullable(
    z.lazy(() => TemplateGetTemplateByIdFolder$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateGetTemplateByIdResponse$ {
  /** @deprecated use `TemplateGetTemplateByIdResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateGetTemplateByIdResponse$inboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponse$outboundSchema` instead. */
  export const outboundSchema = TemplateGetTemplateByIdResponse$outboundSchema;
  /** @deprecated use `TemplateGetTemplateByIdResponse$Outbound` instead. */
  export type Outbound = TemplateGetTemplateByIdResponse$Outbound;
}

export function templateGetTemplateByIdResponseToJSON(
  templateGetTemplateByIdResponse: TemplateGetTemplateByIdResponse,
): string {
  return JSON.stringify(
    TemplateGetTemplateByIdResponse$outboundSchema.parse(
      templateGetTemplateByIdResponse,
    ),
  );
}

export function templateGetTemplateByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<TemplateGetTemplateByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateGetTemplateByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateGetTemplateByIdResponse' from JSON`,
  );
}
