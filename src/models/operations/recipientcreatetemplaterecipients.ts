/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RecipientCreateTemplateRecipientsRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type RecipientCreateTemplateRecipientsRole = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsRole
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const RecipientCreateTemplateRecipientsAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type RecipientCreateTemplateRecipientsAccessAuth = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const RecipientCreateTemplateRecipientsActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type RecipientCreateTemplateRecipientsActionAuth = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsActionAuth
>;

export type RecipientCreateTemplateRecipientsRecipients = {
  email: string;
  name: string;
  role: RecipientCreateTemplateRecipientsRole;
  signingOrder?: number | undefined;
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth?: RecipientCreateTemplateRecipientsAccessAuth | null | undefined;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth?: RecipientCreateTemplateRecipientsActionAuth | null | undefined;
};

export type RecipientCreateTemplateRecipientsRequestBody = {
  templateId: number;
  recipients: Array<RecipientCreateTemplateRecipientsRecipients>;
};

export const RecipientCreateTemplateRecipientsTemplatesRecipientsRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type RecipientCreateTemplateRecipientsTemplatesRecipientsRole =
  ClosedEnum<typeof RecipientCreateTemplateRecipientsTemplatesRecipientsRole>;

export const RecipientCreateTemplateRecipientsReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type RecipientCreateTemplateRecipientsReadStatus = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsReadStatus
>;

export const RecipientCreateTemplateRecipientsSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type RecipientCreateTemplateRecipientsSigningStatus = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsSigningStatus
>;

export const RecipientCreateTemplateRecipientsSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type RecipientCreateTemplateRecipientsSendStatus = ClosedEnum<
  typeof RecipientCreateTemplateRecipientsSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth =
  ClosedEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth
  >;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth =
  ClosedEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth
  >;

export type RecipientCreateTemplateRecipientsAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth:
    | RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth
    | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth:
    | RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth
    | null;
};

export type RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients = {
  role: RecipientCreateTemplateRecipientsTemplatesRecipientsRole;
  readStatus: RecipientCreateTemplateRecipientsReadStatus;
  signingStatus: RecipientCreateTemplateRecipientsSigningStatus;
  sendStatus: RecipientCreateTemplateRecipientsSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: RecipientCreateTemplateRecipientsAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

/**
 * Successful response
 */
export type RecipientCreateTemplateRecipientsResponseBody = {
  recipients: Array<
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients
  >;
};

/** @internal */
export const RecipientCreateTemplateRecipientsRole$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsRole> = z.nativeEnum(
    RecipientCreateTemplateRecipientsRole,
  );

/** @internal */
export const RecipientCreateTemplateRecipientsRole$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsRole> =
    RecipientCreateTemplateRecipientsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsRole$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsRole$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsRole$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsRole$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsRole$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsAccessAuth> = z
    .nativeEnum(RecipientCreateTemplateRecipientsAccessAuth);

/** @internal */
export const RecipientCreateTemplateRecipientsAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsAccessAuth> =
    RecipientCreateTemplateRecipientsAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsAccessAuth$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsAccessAuth$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsAccessAuth$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsActionAuth> = z
    .nativeEnum(RecipientCreateTemplateRecipientsActionAuth);

/** @internal */
export const RecipientCreateTemplateRecipientsActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsActionAuth> =
    RecipientCreateTemplateRecipientsActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsActionAuth$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsActionAuth$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsActionAuth$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsRecipients$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsRecipients,
    z.ZodTypeDef,
    unknown
  > = z.object({
    email: z.string(),
    name: z.string(),
    role: RecipientCreateTemplateRecipientsRole$inboundSchema,
    signingOrder: z.number().optional(),
    accessAuth: z.nullable(
      RecipientCreateTemplateRecipientsAccessAuth$inboundSchema,
    ).optional(),
    actionAuth: z.nullable(
      RecipientCreateTemplateRecipientsActionAuth$inboundSchema,
    ).optional(),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsRecipients$Outbound = {
  email: string;
  name: string;
  role: string;
  signingOrder?: number | undefined;
  accessAuth?: string | null | undefined;
  actionAuth?: string | null | undefined;
};

/** @internal */
export const RecipientCreateTemplateRecipientsRecipients$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsRecipients$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsRecipients
  > = z.object({
    email: z.string(),
    name: z.string(),
    role: RecipientCreateTemplateRecipientsRole$outboundSchema,
    signingOrder: z.number().optional(),
    accessAuth: z.nullable(
      RecipientCreateTemplateRecipientsAccessAuth$outboundSchema,
    ).optional(),
    actionAuth: z.nullable(
      RecipientCreateTemplateRecipientsActionAuth$outboundSchema,
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsRecipients$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsRecipients$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsRecipients$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsRecipients$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsRecipients$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsRecipients$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsRecipients$Outbound;
}

export function recipientCreateTemplateRecipientsRecipientsToJSON(
  recipientCreateTemplateRecipientsRecipients:
    RecipientCreateTemplateRecipientsRecipients,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsRecipients$outboundSchema.parse(
      recipientCreateTemplateRecipientsRecipients,
    ),
  );
}

export function recipientCreateTemplateRecipientsRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsRecipients,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsRecipients$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsRecipients' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsRequestBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    templateId: z.number(),
    recipients: z.array(
      z.lazy(() => RecipientCreateTemplateRecipientsRecipients$inboundSchema),
    ),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsRequestBody$Outbound = {
  templateId: number;
  recipients: Array<RecipientCreateTemplateRecipientsRecipients$Outbound>;
};

/** @internal */
export const RecipientCreateTemplateRecipientsRequestBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsRequestBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsRequestBody
  > = z.object({
    templateId: z.number(),
    recipients: z.array(
      z.lazy(() => RecipientCreateTemplateRecipientsRecipients$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsRequestBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsRequestBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsRequestBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsRequestBody$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsRequestBody$Outbound;
}

export function recipientCreateTemplateRecipientsRequestBodyToJSON(
  recipientCreateTemplateRecipientsRequestBody:
    RecipientCreateTemplateRecipientsRequestBody,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsRequestBody$outboundSchema.parse(
      recipientCreateTemplateRecipientsRequestBody,
    ),
  );
}

export function recipientCreateTemplateRecipientsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsRequestBody' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsRole
  > = z.nativeEnum(RecipientCreateTemplateRecipientsTemplatesRecipientsRole);

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsRole
  > = RecipientCreateTemplateRecipientsTemplatesRecipientsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsRole$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsRole$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsRole$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsRole$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsRole$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsReadStatus> = z
    .nativeEnum(RecipientCreateTemplateRecipientsReadStatus);

/** @internal */
export const RecipientCreateTemplateRecipientsReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsReadStatus> =
    RecipientCreateTemplateRecipientsReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsReadStatus$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsReadStatus$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsReadStatus$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsSigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsSigningStatus> = z
    .nativeEnum(RecipientCreateTemplateRecipientsSigningStatus);

/** @internal */
export const RecipientCreateTemplateRecipientsSigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsSigningStatus> =
    RecipientCreateTemplateRecipientsSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsSigningStatus$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsSigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsSigningStatus$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsSigningStatus$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsSendStatus$inboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsSendStatus> = z
    .nativeEnum(RecipientCreateTemplateRecipientsSendStatus);

/** @internal */
export const RecipientCreateTemplateRecipientsSendStatus$outboundSchema:
  z.ZodNativeEnum<typeof RecipientCreateTemplateRecipientsSendStatus> =
    RecipientCreateTemplateRecipientsSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsSendStatus$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsSendStatus$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsSendStatus$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsSendStatus$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsSendStatus$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$inboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth
  > = z.nativeEnum(
    RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth,
  );

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$outboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth
  > =
    RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$inboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth
  > = z.nativeEnum(
    RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth,
  );

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$outboundSchema:
  z.ZodNativeEnum<
    typeof RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth
  > =
    RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$outboundSchema;
}

/** @internal */
export const RecipientCreateTemplateRecipientsAuthOptions$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.nullable(
      RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$inboundSchema,
    ),
    actionAuth: z.nullable(
      RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const RecipientCreateTemplateRecipientsAuthOptions$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsAuthOptions$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsAuthOptions
  > = z.object({
    accessAuth: z.nullable(
      RecipientCreateTemplateRecipientsTemplatesRecipientsAccessAuth$outboundSchema,
    ),
    actionAuth: z.nullable(
      RecipientCreateTemplateRecipientsTemplatesRecipientsActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsAuthOptions$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsAuthOptions$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsAuthOptions$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsAuthOptions$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsAuthOptions$Outbound;
}

export function recipientCreateTemplateRecipientsAuthOptionsToJSON(
  recipientCreateTemplateRecipientsAuthOptions:
    RecipientCreateTemplateRecipientsAuthOptions,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsAuthOptions$outboundSchema.parse(
      recipientCreateTemplateRecipientsAuthOptions,
    ),
  );
}

export function recipientCreateTemplateRecipientsAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsAuthOptions' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      RecipientCreateTemplateRecipientsTemplatesRecipientsRole$inboundSchema,
    readStatus: RecipientCreateTemplateRecipientsReadStatus$inboundSchema,
    signingStatus: RecipientCreateTemplateRecipientsSigningStatus$inboundSchema,
    sendStatus: RecipientCreateTemplateRecipientsSendStatus$inboundSchema,
    id: z.number().int(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() => RecipientCreateTemplateRecipientsAuthOptions$inboundSchema),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$Outbound =
  {
    role: string;
    readStatus: string;
    signingStatus: string;
    sendStatus: string;
    id: number;
    documentId: number | null;
    templateId: number | null;
    email: string;
    name: string;
    token: string;
    documentDeletedAt: string | null;
    expired: string | null;
    signedAt: string | null;
    authOptions: RecipientCreateTemplateRecipientsAuthOptions$Outbound | null;
    signingOrder: number | null;
    rejectionReason: string | null;
  };

/** @internal */
export const RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients
  > = z.object({
    role:
      RecipientCreateTemplateRecipientsTemplatesRecipientsRole$outboundSchema,
    readStatus: RecipientCreateTemplateRecipientsReadStatus$outboundSchema,
    signingStatus:
      RecipientCreateTemplateRecipientsSigningStatus$outboundSchema,
    sendStatus: RecipientCreateTemplateRecipientsSendStatus$outboundSchema,
    id: z.number().int(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() => RecipientCreateTemplateRecipientsAuthOptions$outboundSchema),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$Outbound` instead. */
  export type Outbound =
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$Outbound;
}

export function recipientCreateTemplateRecipientsTemplatesRecipientsRecipientsToJSON(
  recipientCreateTemplateRecipientsTemplatesRecipientsRecipients:
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$outboundSchema
      .parse(recipientCreateTemplateRecipientsTemplatesRecipientsRecipients),
  );
}

export function recipientCreateTemplateRecipientsTemplatesRecipientsRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients' from JSON`,
  );
}

/** @internal */
export const RecipientCreateTemplateRecipientsResponseBody$inboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipients: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$inboundSchema
      ),
    ),
  });

/** @internal */
export type RecipientCreateTemplateRecipientsResponseBody$Outbound = {
  recipients: Array<
    RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$Outbound
  >;
};

/** @internal */
export const RecipientCreateTemplateRecipientsResponseBody$outboundSchema:
  z.ZodType<
    RecipientCreateTemplateRecipientsResponseBody$Outbound,
    z.ZodTypeDef,
    RecipientCreateTemplateRecipientsResponseBody
  > = z.object({
    recipients: z.array(
      z.lazy(() =>
        RecipientCreateTemplateRecipientsTemplatesRecipientsRecipients$outboundSchema
      ),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientCreateTemplateRecipientsResponseBody$ {
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RecipientCreateTemplateRecipientsResponseBody$inboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RecipientCreateTemplateRecipientsResponseBody$outboundSchema;
  /** @deprecated use `RecipientCreateTemplateRecipientsResponseBody$Outbound` instead. */
  export type Outbound = RecipientCreateTemplateRecipientsResponseBody$Outbound;
}

export function recipientCreateTemplateRecipientsResponseBodyToJSON(
  recipientCreateTemplateRecipientsResponseBody:
    RecipientCreateTemplateRecipientsResponseBody,
): string {
  return JSON.stringify(
    RecipientCreateTemplateRecipientsResponseBody$outboundSchema.parse(
      recipientCreateTemplateRecipientsResponseBody,
    ),
  );
}

export function recipientCreateTemplateRecipientsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RecipientCreateTemplateRecipientsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RecipientCreateTemplateRecipientsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RecipientCreateTemplateRecipientsResponseBody' from JSON`,
  );
}
