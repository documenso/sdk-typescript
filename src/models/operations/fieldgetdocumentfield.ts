/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldGetDocumentFieldRequest = {
  fieldId: number;
};

export const FieldGetDocumentFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldGetDocumentFieldType = ClosedEnum<
  typeof FieldGetDocumentFieldType
>;

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type =
  ClosedEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  >;

export type FieldGetDocumentFieldFieldMetaDocumentsFieldsValues = {
  value: string;
};

export type FieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type;
  values?:
    | Array<FieldGetDocumentFieldFieldMetaDocumentsFieldsValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type =
  ClosedEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  >;

export type FieldGetDocumentFieldFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type;
  values?: Array<FieldGetDocumentFieldFieldMetaValues> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Radio: "radio",
  } as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType;
  values?: Array<FieldMetaValues> | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  {
    Number: "number",
  } as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  >;

export type FieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type = {
  Text: "text",
} as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type =
  ClosedEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  >;

export type FieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType = {
  Date: "date",
} as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType =
  ClosedEnum<typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType>;

export type FieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldGetDocumentFieldFieldMetaDocumentsFieldsType = {
  Email: "email",
} as const;
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsType = ClosedEnum<
  typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsType
>;

export type FieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsType;
  fontSize?: number | undefined;
};

export const FieldGetDocumentFieldFieldMetaType = {
  Name: "name",
} as const;
export type FieldGetDocumentFieldFieldMetaType = ClosedEnum<
  typeof FieldGetDocumentFieldFieldMetaType
>;

export type FieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetDocumentFieldFieldMetaType;
  fontSize?: number | undefined;
};

export const FieldMetaType = {
  Initials: "initials",
} as const;
export type FieldMetaType = ClosedEnum<typeof FieldMetaType>;

export type FieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldGetDocumentFieldFieldMeta =
  | FieldMeta1
  | FieldMeta2
  | FieldMeta3
  | FieldMeta4
  | FieldMeta7
  | FieldMeta9
  | FieldMeta5
  | FieldMeta8
  | FieldMeta6;

/**
 * Successful response
 */
export type FieldGetDocumentFieldResponseBody = {
  type: FieldGetDocumentFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMeta1
    | FieldMeta2
    | FieldMeta3
    | FieldMeta4
    | FieldMeta7
    | FieldMeta9
    | FieldMeta5
    | FieldMeta8
    | FieldMeta6
    | null;
};

/** @internal */
export const FieldGetDocumentFieldRequest$inboundSchema: z.ZodType<
  FieldGetDocumentFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldId: z.number(),
});

/** @internal */
export type FieldGetDocumentFieldRequest$Outbound = {
  fieldId: number;
};

/** @internal */
export const FieldGetDocumentFieldRequest$outboundSchema: z.ZodType<
  FieldGetDocumentFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldRequest
> = z.object({
  fieldId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldRequest$ {
  /** @deprecated use `FieldGetDocumentFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldRequest$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldGetDocumentFieldRequest$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldRequest$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldRequest$Outbound;
}

export function fieldGetDocumentFieldRequestToJSON(
  fieldGetDocumentFieldRequest: FieldGetDocumentFieldRequest,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldRequest$outboundSchema.parse(
      fieldGetDocumentFieldRequest,
    ),
  );
}

export function fieldGetDocumentFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetDocumentFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetDocumentFieldType
> = z.nativeEnum(FieldGetDocumentFieldType);

/** @internal */
export const FieldGetDocumentFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetDocumentFieldType
> = FieldGetDocumentFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldType$ {
  /** @deprecated use `FieldGetDocumentFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldGetDocumentFieldType$outboundSchema;
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  > = z.nativeEnum(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type,
  );

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type
  > =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema:
  z.ZodType<
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$Outbound = {
  value: string;
};

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema:
  z.ZodType<
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$Outbound;
}

export function fieldGetDocumentFieldFieldMetaDocumentsFieldsValuesToJSON(
  fieldGetDocumentFieldFieldMetaDocumentsFieldsValues:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema.parse(
      fieldGetDocumentFieldFieldMetaDocumentsFieldsValues,
    ),
  );
}

export function fieldGetDocumentFieldFieldMetaDocumentsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldGetDocumentFieldFieldMetaDocumentsFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldGetDocumentFieldFieldMetaDocumentsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta9$inboundSchema: z.ZodType<
  FieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$Outbound>
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldMeta9$outboundSchema: z.ZodType<
  FieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldGetDocumentFieldFieldMetaDocumentsFieldsValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta9$ {
  /** @deprecated use `FieldMeta9$inboundSchema` instead. */
  export const inboundSchema = FieldMeta9$inboundSchema;
  /** @deprecated use `FieldMeta9$outboundSchema` instead. */
  export const outboundSchema = FieldMeta9$outboundSchema;
  /** @deprecated use `FieldMeta9$Outbound` instead. */
  export type Outbound = FieldMeta9$Outbound;
}

export function fieldMeta9ToJSON(fieldMeta9: FieldMeta9): string {
  return JSON.stringify(FieldMeta9$outboundSchema.parse(fieldMeta9));
}

export function fieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  > = z.nativeEnum(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type,
  );

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type
  > =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaValues$inboundSchema: z.ZodType<
  FieldGetDocumentFieldFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldGetDocumentFieldFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetDocumentFieldFieldMetaValues$outboundSchema: z.ZodType<
  FieldGetDocumentFieldFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaValues$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldFieldMetaValues$Outbound;
}

export function fieldGetDocumentFieldFieldMetaValuesToJSON(
  fieldGetDocumentFieldFieldMetaValues: FieldGetDocumentFieldFieldMetaValues,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldFieldMetaValues$outboundSchema.parse(
      fieldGetDocumentFieldFieldMetaValues,
    ),
  );
}

export function fieldGetDocumentFieldFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldFieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetDocumentFieldFieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta8$inboundSchema: z.ZodType<
  FieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
  values: z.array(
    z.lazy(() => FieldGetDocumentFieldFieldMetaValues$inboundSchema),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetDocumentFieldFieldMetaValues$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldMeta8$outboundSchema: z.ZodType<
  FieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
  values: z.array(
    z.lazy(() => FieldGetDocumentFieldFieldMetaValues$outboundSchema),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta8$ {
  /** @deprecated use `FieldMeta8$inboundSchema` instead. */
  export const inboundSchema = FieldMeta8$inboundSchema;
  /** @deprecated use `FieldMeta8$outboundSchema` instead. */
  export const outboundSchema = FieldMeta8$outboundSchema;
  /** @deprecated use `FieldMeta8$Outbound` instead. */
  export type Outbound = FieldMeta8$Outbound;
}

export function fieldMeta8ToJSON(fieldMeta8: FieldMeta8): string {
  return JSON.stringify(FieldMeta8$outboundSchema.parse(fieldMeta8));
}

export function fieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldMetaValues$inboundSchema: z.ZodType<
  FieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldMetaValues$outboundSchema: z.ZodType<
  FieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaValues$ {
  /** @deprecated use `FieldMetaValues$inboundSchema` instead. */
  export const inboundSchema = FieldMetaValues$inboundSchema;
  /** @deprecated use `FieldMetaValues$outboundSchema` instead. */
  export const outboundSchema = FieldMetaValues$outboundSchema;
  /** @deprecated use `FieldMetaValues$Outbound` instead. */
  export type Outbound = FieldMetaValues$Outbound;
}

export function fieldMetaValuesToJSON(
  fieldMetaValues: FieldMetaValues,
): string {
  return JSON.stringify(FieldMetaValues$outboundSchema.parse(fieldMetaValues));
}

export function fieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta7$inboundSchema: z.ZodType<
  FieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  values: z.array(z.lazy(() => FieldMetaValues$inboundSchema)).optional(),
});

/** @internal */
export type FieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldMeta7$outboundSchema: z.ZodType<
  FieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  values: z.array(z.lazy(() => FieldMetaValues$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta7$ {
  /** @deprecated use `FieldMeta7$inboundSchema` instead. */
  export const inboundSchema = FieldMeta7$inboundSchema;
  /** @deprecated use `FieldMeta7$outboundSchema` instead. */
  export const outboundSchema = FieldMeta7$outboundSchema;
  /** @deprecated use `FieldMeta7$Outbound` instead. */
  export type Outbound = FieldMeta7$Outbound;
}

export function fieldMeta7ToJSON(fieldMeta7: FieldMeta7): string {
  return JSON.stringify(FieldMeta7$outboundSchema.parse(fieldMeta7));
}

export function fieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldMeta6$inboundSchema: z.ZodType<
  FieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta6$outboundSchema: z.ZodType<
  FieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta6$ {
  /** @deprecated use `FieldMeta6$inboundSchema` instead. */
  export const inboundSchema = FieldMeta6$inboundSchema;
  /** @deprecated use `FieldMeta6$outboundSchema` instead. */
  export const outboundSchema = FieldMeta6$outboundSchema;
  /** @deprecated use `FieldMeta6$Outbound` instead. */
  export type Outbound = FieldMeta6$Outbound;
}

export function fieldMeta6ToJSON(fieldMeta6: FieldMeta6): string {
  return JSON.stringify(FieldMeta6$outboundSchema.parse(fieldMeta6));
}

export function fieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  > = z.nativeEnum(
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type,
  );

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type
  > =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldMeta5$inboundSchema: z.ZodType<
  FieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta5$outboundSchema: z.ZodType<
  FieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponse200Type$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta5$ {
  /** @deprecated use `FieldMeta5$inboundSchema` instead. */
  export const inboundSchema = FieldMeta5$inboundSchema;
  /** @deprecated use `FieldMeta5$outboundSchema` instead. */
  export const outboundSchema = FieldMeta5$outboundSchema;
  /** @deprecated use `FieldMeta5$Outbound` instead. */
  export type Outbound = FieldMeta5$Outbound;
}

export function fieldMeta5ToJSON(fieldMeta5: FieldMeta5): string {
  return JSON.stringify(FieldMeta5$outboundSchema.parse(fieldMeta5));
}

export function fieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType
  > = z.nativeEnum(FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType);

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType
  > = FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldMeta4$inboundSchema: z.ZodType<
  FieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta4$outboundSchema: z.ZodType<
  FieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetDocumentFieldFieldMetaDocumentsFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta4$ {
  /** @deprecated use `FieldMeta4$inboundSchema` instead. */
  export const inboundSchema = FieldMeta4$inboundSchema;
  /** @deprecated use `FieldMeta4$outboundSchema` instead. */
  export const outboundSchema = FieldMeta4$outboundSchema;
  /** @deprecated use `FieldMeta4$Outbound` instead. */
  export type Outbound = FieldMeta4$Outbound;
}

export function fieldMeta4ToJSON(fieldMeta4: FieldMeta4): string {
  return JSON.stringify(FieldMeta4$outboundSchema.parse(fieldMeta4));
}

export function fieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsType> = z
    .nativeEnum(FieldGetDocumentFieldFieldMetaDocumentsFieldsType);

/** @internal */
export const FieldGetDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldGetDocumentFieldFieldMetaDocumentsFieldsType> =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaDocumentsFieldsType$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema;
}

/** @internal */
export const FieldMeta3$inboundSchema: z.ZodType<
  FieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta3$outboundSchema: z.ZodType<
  FieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetDocumentFieldFieldMetaDocumentsFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta3$ {
  /** @deprecated use `FieldMeta3$inboundSchema` instead. */
  export const inboundSchema = FieldMeta3$inboundSchema;
  /** @deprecated use `FieldMeta3$outboundSchema` instead. */
  export const outboundSchema = FieldMeta3$outboundSchema;
  /** @deprecated use `FieldMeta3$Outbound` instead. */
  export type Outbound = FieldMeta3$Outbound;
}

export function fieldMeta3ToJSON(fieldMeta3: FieldMeta3): string {
  return JSON.stringify(FieldMeta3$outboundSchema.parse(fieldMeta3));
}

export function fieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetDocumentFieldFieldMetaType
> = z.nativeEnum(FieldGetDocumentFieldFieldMetaType);

/** @internal */
export const FieldGetDocumentFieldFieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetDocumentFieldFieldMetaType
> = FieldGetDocumentFieldFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMetaType$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMetaType$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldFieldMetaType$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldMeta2$inboundSchema: z.ZodType<
  FieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetDocumentFieldFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta2$outboundSchema: z.ZodType<
  FieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetDocumentFieldFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta2$ {
  /** @deprecated use `FieldMeta2$inboundSchema` instead. */
  export const inboundSchema = FieldMeta2$inboundSchema;
  /** @deprecated use `FieldMeta2$outboundSchema` instead. */
  export const outboundSchema = FieldMeta2$outboundSchema;
  /** @deprecated use `FieldMeta2$Outbound` instead. */
  export type Outbound = FieldMeta2$Outbound;
}

export function fieldMeta2ToJSON(fieldMeta2: FieldMeta2): string {
  return JSON.stringify(FieldMeta2$outboundSchema.parse(fieldMeta2));
}

export function fieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof FieldMetaType
> = z.nativeEnum(FieldMetaType);

/** @internal */
export const FieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof FieldMetaType
> = FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaType$ {
  /** @deprecated use `FieldMetaType$inboundSchema` instead. */
  export const inboundSchema = FieldMetaType$inboundSchema;
  /** @deprecated use `FieldMetaType$outboundSchema` instead. */
  export const outboundSchema = FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldMeta1$inboundSchema: z.ZodType<
  FieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta1$outboundSchema: z.ZodType<
  FieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta1$ {
  /** @deprecated use `FieldMeta1$inboundSchema` instead. */
  export const inboundSchema = FieldMeta1$inboundSchema;
  /** @deprecated use `FieldMeta1$outboundSchema` instead. */
  export const outboundSchema = FieldMeta1$outboundSchema;
  /** @deprecated use `FieldMeta1$Outbound` instead. */
  export type Outbound = FieldMeta1$Outbound;
}

export function fieldMeta1ToJSON(fieldMeta1: FieldMeta1): string {
  return JSON.stringify(FieldMeta1$outboundSchema.parse(fieldMeta1));
}

export function fieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldFieldMeta$inboundSchema: z.ZodType<
  FieldGetDocumentFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldMeta1$inboundSchema),
  z.lazy(() => FieldMeta2$inboundSchema),
  z.lazy(() => FieldMeta3$inboundSchema),
  z.lazy(() => FieldMeta4$inboundSchema),
  z.lazy(() => FieldMeta7$inboundSchema),
  z.lazy(() => FieldMeta9$inboundSchema),
  z.lazy(() => FieldMeta5$inboundSchema),
  z.lazy(() => FieldMeta8$inboundSchema),
  z.lazy(() => FieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldGetDocumentFieldFieldMeta$Outbound =
  | FieldMeta1$Outbound
  | FieldMeta2$Outbound
  | FieldMeta3$Outbound
  | FieldMeta4$Outbound
  | FieldMeta7$Outbound
  | FieldMeta9$Outbound
  | FieldMeta5$Outbound
  | FieldMeta8$Outbound
  | FieldMeta6$Outbound;

/** @internal */
export const FieldGetDocumentFieldFieldMeta$outboundSchema: z.ZodType<
  FieldGetDocumentFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldFieldMeta
> = z.union([
  z.lazy(() => FieldMeta1$outboundSchema),
  z.lazy(() => FieldMeta2$outboundSchema),
  z.lazy(() => FieldMeta3$outboundSchema),
  z.lazy(() => FieldMeta4$outboundSchema),
  z.lazy(() => FieldMeta7$outboundSchema),
  z.lazy(() => FieldMeta9$outboundSchema),
  z.lazy(() => FieldMeta5$outboundSchema),
  z.lazy(() => FieldMeta8$outboundSchema),
  z.lazy(() => FieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldFieldMeta$ {
  /** @deprecated use `FieldGetDocumentFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema = FieldGetDocumentFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldFieldMeta$Outbound;
}

export function fieldGetDocumentFieldFieldMetaToJSON(
  fieldGetDocumentFieldFieldMeta: FieldGetDocumentFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldFieldMeta$outboundSchema.parse(
      fieldGetDocumentFieldFieldMeta,
    ),
  );
}

export function fieldGetDocumentFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetDocumentFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldGetDocumentFieldResponseBody$inboundSchema: z.ZodType<
  FieldGetDocumentFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldGetDocumentFieldType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMeta1$inboundSchema),
      z.lazy(() => FieldMeta2$inboundSchema),
      z.lazy(() => FieldMeta3$inboundSchema),
      z.lazy(() => FieldMeta4$inboundSchema),
      z.lazy(() => FieldMeta7$inboundSchema),
      z.lazy(() => FieldMeta9$inboundSchema),
      z.lazy(() => FieldMeta5$inboundSchema),
      z.lazy(() => FieldMeta8$inboundSchema),
      z.lazy(() => FieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldGetDocumentFieldResponseBody$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMeta1$Outbound
    | FieldMeta2$Outbound
    | FieldMeta3$Outbound
    | FieldMeta4$Outbound
    | FieldMeta7$Outbound
    | FieldMeta9$Outbound
    | FieldMeta5$Outbound
    | FieldMeta8$Outbound
    | FieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldGetDocumentFieldResponseBody$outboundSchema: z.ZodType<
  FieldGetDocumentFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldGetDocumentFieldResponseBody
> = z.object({
  type: FieldGetDocumentFieldType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMeta1$outboundSchema),
      z.lazy(() => FieldMeta2$outboundSchema),
      z.lazy(() => FieldMeta3$outboundSchema),
      z.lazy(() => FieldMeta4$outboundSchema),
      z.lazy(() => FieldMeta7$outboundSchema),
      z.lazy(() => FieldMeta9$outboundSchema),
      z.lazy(() => FieldMeta5$outboundSchema),
      z.lazy(() => FieldMeta8$outboundSchema),
      z.lazy(() => FieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetDocumentFieldResponseBody$ {
  /** @deprecated use `FieldGetDocumentFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema = FieldGetDocumentFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldGetDocumentFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetDocumentFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldGetDocumentFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldGetDocumentFieldResponseBody$Outbound;
}

export function fieldGetDocumentFieldResponseBodyToJSON(
  fieldGetDocumentFieldResponseBody: FieldGetDocumentFieldResponseBody,
): string {
  return JSON.stringify(
    FieldGetDocumentFieldResponseBody$outboundSchema.parse(
      fieldGetDocumentFieldResponseBody,
    ),
  );
}

export function fieldGetDocumentFieldResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetDocumentFieldResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetDocumentFieldResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetDocumentFieldResponseBody' from JSON`,
  );
}
