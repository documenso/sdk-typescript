/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateDuplicateTemplateRequest = {
  templateId: number;
};

export const TemplateDuplicateTemplateType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateDuplicateTemplateType = ClosedEnum<
  typeof TemplateDuplicateTemplateType
>;

export const TemplateDuplicateTemplateVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateDuplicateTemplateVisibility = ClosedEnum<
  typeof TemplateDuplicateTemplateVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateDuplicateTemplateGlobalAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateDuplicateTemplateGlobalAccessAuth = ClosedEnum<
  typeof TemplateDuplicateTemplateGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateDuplicateTemplateGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateDuplicateTemplateGlobalActionAuth = ClosedEnum<
  typeof TemplateDuplicateTemplateGlobalActionAuth
>;

export type TemplateDuplicateTemplateAuthOptions = {
  globalAccessAuth: Array<TemplateDuplicateTemplateGlobalAccessAuth>;
  globalActionAuth: Array<TemplateDuplicateTemplateGlobalActionAuth>;
};

/**
 * Successful response
 */
export type TemplateDuplicateTemplateResponse = {
  type: TemplateDuplicateTemplateType;
  visibility: TemplateDuplicateTemplateVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateDuplicateTemplateAuthOptions | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  envelopeId: string;
  templateDocumentDataId?: string | undefined;
};

/** @internal */
export const TemplateDuplicateTemplateRequest$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
});

/** @internal */
export type TemplateDuplicateTemplateRequest$Outbound = {
  templateId: number;
};

/** @internal */
export const TemplateDuplicateTemplateRequest$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateRequest$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateRequest
> = z.object({
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateRequest$ {
  /** @deprecated use `TemplateDuplicateTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateDuplicateTemplateRequest$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateDuplicateTemplateRequest$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateRequest$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateRequest$Outbound;
}

export function templateDuplicateTemplateRequestToJSON(
  templateDuplicateTemplateRequest: TemplateDuplicateTemplateRequest,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateRequest$outboundSchema.parse(
      templateDuplicateTemplateRequest,
    ),
  );
}

export function templateDuplicateTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDuplicateTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateRequest' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateType
> = z.nativeEnum(TemplateDuplicateTemplateType);

/** @internal */
export const TemplateDuplicateTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateType
> = TemplateDuplicateTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateType$ {
  /** @deprecated use `TemplateDuplicateTemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateDuplicateTemplateType$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateDuplicateTemplateType$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateVisibility
> = z.nativeEnum(TemplateDuplicateTemplateVisibility);

/** @internal */
export const TemplateDuplicateTemplateVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateVisibility> =
    TemplateDuplicateTemplateVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateVisibility$ {
  /** @deprecated use `TemplateDuplicateTemplateVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateVisibility$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateVisibility$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalAccessAuth> = z
    .nativeEnum(TemplateDuplicateTemplateGlobalAccessAuth);

/** @internal */
export const TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalAccessAuth> =
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateGlobalAccessAuth$ {
  /** @deprecated use `TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalActionAuth> = z
    .nativeEnum(TemplateDuplicateTemplateGlobalActionAuth);

/** @internal */
export const TemplateDuplicateTemplateGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalActionAuth> =
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateGlobalActionAuth$ {
  /** @deprecated use `TemplateDuplicateTemplateGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateAuthOptions$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateDuplicateTemplateAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateDuplicateTemplateAuthOptions$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateDuplicateTemplateGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateAuthOptions$ {
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateAuthOptions$Outbound;
}

export function templateDuplicateTemplateAuthOptionsToJSON(
  templateDuplicateTemplateAuthOptions: TemplateDuplicateTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateAuthOptions$outboundSchema.parse(
      templateDuplicateTemplateAuthOptions,
    ),
  );
}

export function templateDuplicateTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateResponse$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateDuplicateTemplateType$inboundSchema,
  visibility: TemplateDuplicateTemplateVisibility$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateDuplicateTemplateAuthOptions$inboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
});

/** @internal */
export type TemplateDuplicateTemplateResponse$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateDuplicateTemplateAuthOptions$Outbound | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  envelopeId: string;
  templateDocumentDataId: string;
};

/** @internal */
export const TemplateDuplicateTemplateResponse$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponse$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateResponse
> = z.object({
  type: TemplateDuplicateTemplateType$outboundSchema,
  visibility: TemplateDuplicateTemplateVisibility$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateDuplicateTemplateAuthOptions$outboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateResponse$ {
  /** @deprecated use `TemplateDuplicateTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateDuplicateTemplateResponse$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateResponse$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponse$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateResponse$Outbound;
}

export function templateDuplicateTemplateResponseToJSON(
  templateDuplicateTemplateResponse: TemplateDuplicateTemplateResponse,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateResponse$outboundSchema.parse(
      templateDuplicateTemplateResponse,
    ),
  );
}

export function templateDuplicateTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDuplicateTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateResponse' from JSON`,
  );
}
