/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateDuplicateTemplateRequestBody = {
  templateId: number;
};

export const TemplateDuplicateTemplateType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateDuplicateTemplateType = ClosedEnum<
  typeof TemplateDuplicateTemplateType
>;

export const TemplateDuplicateTemplateVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateDuplicateTemplateVisibility = ClosedEnum<
  typeof TemplateDuplicateTemplateVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateDuplicateTemplateGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateDuplicateTemplateGlobalAccessAuth = ClosedEnum<
  typeof TemplateDuplicateTemplateGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateDuplicateTemplateGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateDuplicateTemplateGlobalActionAuth = ClosedEnum<
  typeof TemplateDuplicateTemplateGlobalActionAuth
>;

export type TemplateDuplicateTemplateAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: TemplateDuplicateTemplateGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: TemplateDuplicateTemplateGlobalActionAuth | null;
};

/**
 * Successful response
 */
export type TemplateDuplicateTemplateResponseBody = {
  type: TemplateDuplicateTemplateType;
  visibility: TemplateDuplicateTemplateVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateDuplicateTemplateAuthOptions | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
};

/** @internal */
export const TemplateDuplicateTemplateRequestBody$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
});

/** @internal */
export type TemplateDuplicateTemplateRequestBody$Outbound = {
  templateId: number;
};

/** @internal */
export const TemplateDuplicateTemplateRequestBody$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateRequestBody$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateRequestBody
> = z.object({
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateRequestBody$ {
  /** @deprecated use `TemplateDuplicateTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateRequestBody$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateRequestBody$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateRequestBody$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateRequestBody$Outbound;
}

export function templateDuplicateTemplateRequestBodyToJSON(
  templateDuplicateTemplateRequestBody: TemplateDuplicateTemplateRequestBody,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateRequestBody$outboundSchema.parse(
      templateDuplicateTemplateRequestBody,
    ),
  );
}

export function templateDuplicateTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateRequestBody' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateType
> = z.nativeEnum(TemplateDuplicateTemplateType);

/** @internal */
export const TemplateDuplicateTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateType
> = TemplateDuplicateTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateType$ {
  /** @deprecated use `TemplateDuplicateTemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateDuplicateTemplateType$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateDuplicateTemplateType$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateDuplicateTemplateVisibility
> = z.nativeEnum(TemplateDuplicateTemplateVisibility);

/** @internal */
export const TemplateDuplicateTemplateVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateVisibility> =
    TemplateDuplicateTemplateVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateVisibility$ {
  /** @deprecated use `TemplateDuplicateTemplateVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateVisibility$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateVisibility$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalAccessAuth> = z
    .nativeEnum(TemplateDuplicateTemplateGlobalAccessAuth);

/** @internal */
export const TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalAccessAuth> =
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateGlobalAccessAuth$ {
  /** @deprecated use `TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalActionAuth> = z
    .nativeEnum(TemplateDuplicateTemplateGlobalActionAuth);

/** @internal */
export const TemplateDuplicateTemplateGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateDuplicateTemplateGlobalActionAuth> =
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateGlobalActionAuth$ {
  /** @deprecated use `TemplateDuplicateTemplateGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateDuplicateTemplateAuthOptions$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateDuplicateTemplateGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateDuplicateTemplateGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateDuplicateTemplateAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const TemplateDuplicateTemplateAuthOptions$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateDuplicateTemplateGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateDuplicateTemplateGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateAuthOptions$ {
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateAuthOptions$Outbound;
}

export function templateDuplicateTemplateAuthOptionsToJSON(
  templateDuplicateTemplateAuthOptions: TemplateDuplicateTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateAuthOptions$outboundSchema.parse(
      templateDuplicateTemplateAuthOptions,
    ),
  );
}

export function templateDuplicateTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateDuplicateTemplateResponseBody$inboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateDuplicateTemplateType$inboundSchema,
  visibility: TemplateDuplicateTemplateVisibility$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateDuplicateTemplateAuthOptions$inboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
});

/** @internal */
export type TemplateDuplicateTemplateResponseBody$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateDuplicateTemplateAuthOptions$Outbound | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
};

/** @internal */
export const TemplateDuplicateTemplateResponseBody$outboundSchema: z.ZodType<
  TemplateDuplicateTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateDuplicateTemplateResponseBody
> = z.object({
  type: TemplateDuplicateTemplateType$outboundSchema,
  visibility: TemplateDuplicateTemplateVisibility$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateDuplicateTemplateAuthOptions$outboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDuplicateTemplateResponseBody$ {
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateDuplicateTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateDuplicateTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateDuplicateTemplateResponseBody$Outbound` instead. */
  export type Outbound = TemplateDuplicateTemplateResponseBody$Outbound;
}

export function templateDuplicateTemplateResponseBodyToJSON(
  templateDuplicateTemplateResponseBody: TemplateDuplicateTemplateResponseBody,
): string {
  return JSON.stringify(
    TemplateDuplicateTemplateResponseBody$outboundSchema.parse(
      templateDuplicateTemplateResponseBody,
    ),
  );
}

export function templateDuplicateTemplateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDuplicateTemplateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateDuplicateTemplateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDuplicateTemplateResponseBody' from JSON`,
  );
}
