/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldGetFieldRequest = {
  fieldId: number;
};

export const FieldGetFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldGetFieldType = ClosedEnum<typeof FieldGetFieldType>;

export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type =
  ClosedEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type
  >;

export type FieldGetFieldFieldMetaFieldsValues = {
  value: string;
};

export type FieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type;
  values?: Array<FieldGetFieldFieldMetaFieldsValues> | undefined;
  defaultValue?: string | undefined;
};

export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type =
  ClosedEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type
  >;

export type FieldGetFieldFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type;
  values?: Array<FieldGetFieldFieldMetaValues> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Radio: "radio",
  } as const;
export type FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType;
  values?: Array<FieldMetaValues> | undefined;
};

export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType = {
  Number: "number",
} as const;
export type FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType =
  ClosedEnum<typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType>;

export type FieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetFieldFieldMetaFieldsResponse200Type = {
  Text: "text",
} as const;
export type FieldGetFieldFieldMetaFieldsResponse200Type = ClosedEnum<
  typeof FieldGetFieldFieldMetaFieldsResponse200Type
>;

export type FieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponse200Type;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldGetFieldFieldMetaFieldsResponseType = {
  Date: "date",
} as const;
export type FieldGetFieldFieldMetaFieldsResponseType = ClosedEnum<
  typeof FieldGetFieldFieldMetaFieldsResponseType
>;

export type FieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldGetFieldFieldMetaFieldsType = {
  Email: "email",
} as const;
export type FieldGetFieldFieldMetaFieldsType = ClosedEnum<
  typeof FieldGetFieldFieldMetaFieldsType
>;

export type FieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaFieldsType;
  fontSize?: number | undefined;
};

export const FieldGetFieldFieldMetaType = {
  Name: "name",
} as const;
export type FieldGetFieldFieldMetaType = ClosedEnum<
  typeof FieldGetFieldFieldMetaType
>;

export type FieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldGetFieldFieldMetaType;
  fontSize?: number | undefined;
};

export const FieldMetaType = {
  Initials: "initials",
} as const;
export type FieldMetaType = ClosedEnum<typeof FieldMetaType>;

export type FieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldGetFieldFieldMeta =
  | FieldMeta1
  | FieldMeta2
  | FieldMeta3
  | FieldMeta4
  | FieldMeta7
  | FieldMeta9
  | FieldMeta5
  | FieldMeta8
  | FieldMeta6;

/**
 * Successful response
 */
export type FieldGetFieldResponseBody = {
  type: FieldGetFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMeta1
    | FieldMeta2
    | FieldMeta3
    | FieldMeta4
    | FieldMeta7
    | FieldMeta9
    | FieldMeta5
    | FieldMeta8
    | FieldMeta6
    | null;
};

/** @internal */
export const FieldGetFieldRequest$inboundSchema: z.ZodType<
  FieldGetFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldId: z.number(),
});

/** @internal */
export type FieldGetFieldRequest$Outbound = {
  fieldId: number;
};

/** @internal */
export const FieldGetFieldRequest$outboundSchema: z.ZodType<
  FieldGetFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldGetFieldRequest
> = z.object({
  fieldId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldRequest$ {
  /** @deprecated use `FieldGetFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldRequest$inboundSchema;
  /** @deprecated use `FieldGetFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldRequest$outboundSchema;
  /** @deprecated use `FieldGetFieldRequest$Outbound` instead. */
  export type Outbound = FieldGetFieldRequest$Outbound;
}

export function fieldGetFieldRequestToJSON(
  fieldGetFieldRequest: FieldGetFieldRequest,
): string {
  return JSON.stringify(
    FieldGetFieldRequest$outboundSchema.parse(fieldGetFieldRequest),
  );
}

export function fieldGetFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldType
> = z.nativeEnum(FieldGetFieldType);

/** @internal */
export const FieldGetFieldType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldType
> = FieldGetFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldType$ {
  /** @deprecated use `FieldGetFieldType$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldType$inboundSchema;
  /** @deprecated use `FieldGetFieldType$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldType$outboundSchema;
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type
  > = z.nativeEnum(
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type,
  );

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type
  > =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema;
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsValues$inboundSchema: z.ZodType<
  FieldGetFieldFieldMetaFieldsValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldGetFieldFieldMetaFieldsValues$Outbound = {
  value: string;
};

/** @internal */
export const FieldGetFieldFieldMetaFieldsValues$outboundSchema: z.ZodType<
  FieldGetFieldFieldMetaFieldsValues$Outbound,
  z.ZodTypeDef,
  FieldGetFieldFieldMetaFieldsValues
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsValues$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsValues$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldFieldMetaFieldsValues$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsValues$outboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsValues$Outbound` instead. */
  export type Outbound = FieldGetFieldFieldMetaFieldsValues$Outbound;
}

export function fieldGetFieldFieldMetaFieldsValuesToJSON(
  fieldGetFieldFieldMetaFieldsValues: FieldGetFieldFieldMetaFieldsValues,
): string {
  return JSON.stringify(
    FieldGetFieldFieldMetaFieldsValues$outboundSchema.parse(
      fieldGetFieldFieldMetaFieldsValues,
    ),
  );
}

export function fieldGetFieldFieldMetaFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetFieldFieldMetaFieldsValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldGetFieldFieldMetaFieldsValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetFieldFieldMetaFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta9$inboundSchema: z.ZodType<
  FieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$inboundSchema,
  values: z.array(
    z.lazy(() => FieldGetFieldFieldMetaFieldsValues$inboundSchema),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetFieldFieldMetaFieldsValues$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldMeta9$outboundSchema: z.ZodType<
  FieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody9Type$outboundSchema,
  values: z.array(
    z.lazy(() => FieldGetFieldFieldMetaFieldsValues$outboundSchema),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta9$ {
  /** @deprecated use `FieldMeta9$inboundSchema` instead. */
  export const inboundSchema = FieldMeta9$inboundSchema;
  /** @deprecated use `FieldMeta9$outboundSchema` instead. */
  export const outboundSchema = FieldMeta9$outboundSchema;
  /** @deprecated use `FieldMeta9$Outbound` instead. */
  export type Outbound = FieldMeta9$Outbound;
}

export function fieldMeta9ToJSON(fieldMeta9: FieldMeta9): string {
  return JSON.stringify(FieldMeta9$outboundSchema.parse(fieldMeta9));
}

export function fieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type
  > = z.nativeEnum(
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type,
  );

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type
  > =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema;
}

/** @internal */
export const FieldGetFieldFieldMetaValues$inboundSchema: z.ZodType<
  FieldGetFieldFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldGetFieldFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldGetFieldFieldMetaValues$outboundSchema: z.ZodType<
  FieldGetFieldFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldGetFieldFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaValues$ {
  /** @deprecated use `FieldGetFieldFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldGetFieldFieldMetaValues$Outbound;
}

export function fieldGetFieldFieldMetaValuesToJSON(
  fieldGetFieldFieldMetaValues: FieldGetFieldFieldMetaValues,
): string {
  return JSON.stringify(
    FieldGetFieldFieldMetaValues$outboundSchema.parse(
      fieldGetFieldFieldMetaValues,
    ),
  );
}

export function fieldGetFieldFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetFieldFieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetFieldFieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetFieldFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta8$inboundSchema: z.ZodType<
  FieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$inboundSchema,
  values: z.array(z.lazy(() => FieldGetFieldFieldMetaValues$inboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldGetFieldFieldMetaValues$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldMeta8$outboundSchema: z.ZodType<
  FieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBody8Type$outboundSchema,
  values: z.array(z.lazy(() => FieldGetFieldFieldMetaValues$outboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta8$ {
  /** @deprecated use `FieldMeta8$inboundSchema` instead. */
  export const inboundSchema = FieldMeta8$inboundSchema;
  /** @deprecated use `FieldMeta8$outboundSchema` instead. */
  export const outboundSchema = FieldMeta8$outboundSchema;
  /** @deprecated use `FieldMeta8$Outbound` instead. */
  export type Outbound = FieldMeta8$Outbound;
}

export function fieldMeta8ToJSON(fieldMeta8: FieldMeta8): string {
  return JSON.stringify(FieldMeta8$outboundSchema.parse(fieldMeta8));
}

export function fieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldMetaValues$inboundSchema: z.ZodType<
  FieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldMetaValues$outboundSchema: z.ZodType<
  FieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaValues$ {
  /** @deprecated use `FieldMetaValues$inboundSchema` instead. */
  export const inboundSchema = FieldMetaValues$inboundSchema;
  /** @deprecated use `FieldMetaValues$outboundSchema` instead. */
  export const outboundSchema = FieldMetaValues$outboundSchema;
  /** @deprecated use `FieldMetaValues$Outbound` instead. */
  export type Outbound = FieldMetaValues$Outbound;
}

export function fieldMetaValuesToJSON(
  fieldMetaValues: FieldMetaValues,
): string {
  return JSON.stringify(FieldMetaValues$outboundSchema.parse(fieldMetaValues));
}

export function fieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldMeta7$inboundSchema: z.ZodType<
  FieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  values: z.array(z.lazy(() => FieldMetaValues$inboundSchema)).optional(),
});

/** @internal */
export type FieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldMeta7$outboundSchema: z.ZodType<
  FieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  values: z.array(z.lazy(() => FieldMetaValues$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta7$ {
  /** @deprecated use `FieldMeta7$inboundSchema` instead. */
  export const inboundSchema = FieldMeta7$inboundSchema;
  /** @deprecated use `FieldMeta7$outboundSchema` instead. */
  export const outboundSchema = FieldMeta7$outboundSchema;
  /** @deprecated use `FieldMeta7$Outbound` instead. */
  export type Outbound = FieldMeta7$Outbound;
}

export function fieldMeta7ToJSON(fieldMeta7: FieldMeta7): string {
  return JSON.stringify(FieldMeta7$outboundSchema.parse(fieldMeta7));
}

export function fieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType);

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType
  > = FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldMeta6$inboundSchema: z.ZodType<
  FieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta6$outboundSchema: z.ZodType<
  FieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldGetFieldFieldMetaFieldsResponse200ApplicationJSONType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta6$ {
  /** @deprecated use `FieldMeta6$inboundSchema` instead. */
  export const inboundSchema = FieldMeta6$inboundSchema;
  /** @deprecated use `FieldMeta6$outboundSchema` instead. */
  export const outboundSchema = FieldMeta6$outboundSchema;
  /** @deprecated use `FieldMeta6$Outbound` instead. */
  export type Outbound = FieldMeta6$Outbound;
}

export function fieldMeta6ToJSON(fieldMeta6: FieldMeta6): string {
  return JSON.stringify(FieldMeta6$outboundSchema.parse(fieldMeta6));
}

export function fieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof FieldGetFieldFieldMetaFieldsResponse200Type> = z
    .nativeEnum(FieldGetFieldFieldMetaFieldsResponse200Type);

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof FieldGetFieldFieldMetaFieldsResponse200Type> =
    FieldGetFieldFieldMetaFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponse200Type$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldMeta5$inboundSchema: z.ZodType<
  FieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsResponse200Type$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta5$outboundSchema: z.ZodType<
  FieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsResponse200Type$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta5$ {
  /** @deprecated use `FieldMeta5$inboundSchema` instead. */
  export const inboundSchema = FieldMeta5$inboundSchema;
  /** @deprecated use `FieldMeta5$outboundSchema` instead. */
  export const outboundSchema = FieldMeta5$outboundSchema;
  /** @deprecated use `FieldMeta5$Outbound` instead. */
  export type Outbound = FieldMeta5$Outbound;
}

export function fieldMeta5ToJSON(fieldMeta5: FieldMeta5): string {
  return JSON.stringify(FieldMeta5$outboundSchema.parse(fieldMeta5));
}

export function fieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof FieldGetFieldFieldMetaFieldsResponseType> = z
    .nativeEnum(FieldGetFieldFieldMetaFieldsResponseType);

/** @internal */
export const FieldGetFieldFieldMetaFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof FieldGetFieldFieldMetaFieldsResponseType> =
    FieldGetFieldFieldMetaFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsResponseType$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldGetFieldFieldMetaFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldGetFieldFieldMetaFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldMeta4$inboundSchema: z.ZodType<
  FieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta4$outboundSchema: z.ZodType<
  FieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta4$ {
  /** @deprecated use `FieldMeta4$inboundSchema` instead. */
  export const inboundSchema = FieldMeta4$inboundSchema;
  /** @deprecated use `FieldMeta4$outboundSchema` instead. */
  export const outboundSchema = FieldMeta4$outboundSchema;
  /** @deprecated use `FieldMeta4$Outbound` instead. */
  export type Outbound = FieldMeta4$Outbound;
}

export function fieldMeta4ToJSON(fieldMeta4: FieldMeta4): string {
  return JSON.stringify(FieldMeta4$outboundSchema.parse(fieldMeta4));
}

export function fieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldFieldMetaFieldsType
> = z.nativeEnum(FieldGetFieldFieldMetaFieldsType);

/** @internal */
export const FieldGetFieldFieldMetaFieldsType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldFieldMetaFieldsType
> = FieldGetFieldFieldMetaFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaFieldsType$ {
  /** @deprecated use `FieldGetFieldFieldMetaFieldsType$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldFieldMetaFieldsType$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaFieldsType$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldFieldMetaFieldsType$outboundSchema;
}

/** @internal */
export const FieldMeta3$inboundSchema: z.ZodType<
  FieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta3$outboundSchema: z.ZodType<
  FieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta3$ {
  /** @deprecated use `FieldMeta3$inboundSchema` instead. */
  export const inboundSchema = FieldMeta3$inboundSchema;
  /** @deprecated use `FieldMeta3$outboundSchema` instead. */
  export const outboundSchema = FieldMeta3$outboundSchema;
  /** @deprecated use `FieldMeta3$Outbound` instead. */
  export type Outbound = FieldMeta3$Outbound;
}

export function fieldMeta3ToJSON(fieldMeta3: FieldMeta3): string {
  return JSON.stringify(FieldMeta3$outboundSchema.parse(fieldMeta3));
}

export function fieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldFieldMetaType
> = z.nativeEnum(FieldGetFieldFieldMetaType);

/** @internal */
export const FieldGetFieldFieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof FieldGetFieldFieldMetaType
> = FieldGetFieldFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMetaType$ {
  /** @deprecated use `FieldGetFieldFieldMetaType$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldFieldMetaType$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMetaType$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldMeta2$inboundSchema: z.ZodType<
  FieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta2$outboundSchema: z.ZodType<
  FieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldGetFieldFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta2$ {
  /** @deprecated use `FieldMeta2$inboundSchema` instead. */
  export const inboundSchema = FieldMeta2$inboundSchema;
  /** @deprecated use `FieldMeta2$outboundSchema` instead. */
  export const outboundSchema = FieldMeta2$outboundSchema;
  /** @deprecated use `FieldMeta2$Outbound` instead. */
  export type Outbound = FieldMeta2$Outbound;
}

export function fieldMeta2ToJSON(fieldMeta2: FieldMeta2): string {
  return JSON.stringify(FieldMeta2$outboundSchema.parse(fieldMeta2));
}

export function fieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof FieldMetaType
> = z.nativeEnum(FieldMetaType);

/** @internal */
export const FieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof FieldMetaType
> = FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaType$ {
  /** @deprecated use `FieldMetaType$inboundSchema` instead. */
  export const inboundSchema = FieldMetaType$inboundSchema;
  /** @deprecated use `FieldMetaType$outboundSchema` instead. */
  export const outboundSchema = FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldMeta1$inboundSchema: z.ZodType<
  FieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldMeta1$outboundSchema: z.ZodType<
  FieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMeta1$ {
  /** @deprecated use `FieldMeta1$inboundSchema` instead. */
  export const inboundSchema = FieldMeta1$inboundSchema;
  /** @deprecated use `FieldMeta1$outboundSchema` instead. */
  export const outboundSchema = FieldMeta1$outboundSchema;
  /** @deprecated use `FieldMeta1$Outbound` instead. */
  export type Outbound = FieldMeta1$Outbound;
}

export function fieldMeta1ToJSON(fieldMeta1: FieldMeta1): string {
  return JSON.stringify(FieldMeta1$outboundSchema.parse(fieldMeta1));
}

export function fieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldFieldMeta$inboundSchema: z.ZodType<
  FieldGetFieldFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldMeta1$inboundSchema),
  z.lazy(() => FieldMeta2$inboundSchema),
  z.lazy(() => FieldMeta3$inboundSchema),
  z.lazy(() => FieldMeta4$inboundSchema),
  z.lazy(() => FieldMeta7$inboundSchema),
  z.lazy(() => FieldMeta9$inboundSchema),
  z.lazy(() => FieldMeta5$inboundSchema),
  z.lazy(() => FieldMeta8$inboundSchema),
  z.lazy(() => FieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldGetFieldFieldMeta$Outbound =
  | FieldMeta1$Outbound
  | FieldMeta2$Outbound
  | FieldMeta3$Outbound
  | FieldMeta4$Outbound
  | FieldMeta7$Outbound
  | FieldMeta9$Outbound
  | FieldMeta5$Outbound
  | FieldMeta8$Outbound
  | FieldMeta6$Outbound;

/** @internal */
export const FieldGetFieldFieldMeta$outboundSchema: z.ZodType<
  FieldGetFieldFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldGetFieldFieldMeta
> = z.union([
  z.lazy(() => FieldMeta1$outboundSchema),
  z.lazy(() => FieldMeta2$outboundSchema),
  z.lazy(() => FieldMeta3$outboundSchema),
  z.lazy(() => FieldMeta4$outboundSchema),
  z.lazy(() => FieldMeta7$outboundSchema),
  z.lazy(() => FieldMeta9$outboundSchema),
  z.lazy(() => FieldMeta5$outboundSchema),
  z.lazy(() => FieldMeta8$outboundSchema),
  z.lazy(() => FieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldFieldMeta$ {
  /** @deprecated use `FieldGetFieldFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldFieldMeta$inboundSchema;
  /** @deprecated use `FieldGetFieldFieldMeta$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldFieldMeta$outboundSchema;
  /** @deprecated use `FieldGetFieldFieldMeta$Outbound` instead. */
  export type Outbound = FieldGetFieldFieldMeta$Outbound;
}

export function fieldGetFieldFieldMetaToJSON(
  fieldGetFieldFieldMeta: FieldGetFieldFieldMeta,
): string {
  return JSON.stringify(
    FieldGetFieldFieldMeta$outboundSchema.parse(fieldGetFieldFieldMeta),
  );
}

export function fieldGetFieldFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetFieldFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetFieldFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetFieldFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldGetFieldResponseBody$inboundSchema: z.ZodType<
  FieldGetFieldResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldGetFieldType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMeta1$inboundSchema),
      z.lazy(() => FieldMeta2$inboundSchema),
      z.lazy(() => FieldMeta3$inboundSchema),
      z.lazy(() => FieldMeta4$inboundSchema),
      z.lazy(() => FieldMeta7$inboundSchema),
      z.lazy(() => FieldMeta9$inboundSchema),
      z.lazy(() => FieldMeta5$inboundSchema),
      z.lazy(() => FieldMeta8$inboundSchema),
      z.lazy(() => FieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldGetFieldResponseBody$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMeta1$Outbound
    | FieldMeta2$Outbound
    | FieldMeta3$Outbound
    | FieldMeta4$Outbound
    | FieldMeta7$Outbound
    | FieldMeta9$Outbound
    | FieldMeta5$Outbound
    | FieldMeta8$Outbound
    | FieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldGetFieldResponseBody$outboundSchema: z.ZodType<
  FieldGetFieldResponseBody$Outbound,
  z.ZodTypeDef,
  FieldGetFieldResponseBody
> = z.object({
  type: FieldGetFieldType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMeta1$outboundSchema),
      z.lazy(() => FieldMeta2$outboundSchema),
      z.lazy(() => FieldMeta3$outboundSchema),
      z.lazy(() => FieldMeta4$outboundSchema),
      z.lazy(() => FieldMeta7$outboundSchema),
      z.lazy(() => FieldMeta9$outboundSchema),
      z.lazy(() => FieldMeta5$outboundSchema),
      z.lazy(() => FieldMeta8$outboundSchema),
      z.lazy(() => FieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldGetFieldResponseBody$ {
  /** @deprecated use `FieldGetFieldResponseBody$inboundSchema` instead. */
  export const inboundSchema = FieldGetFieldResponseBody$inboundSchema;
  /** @deprecated use `FieldGetFieldResponseBody$outboundSchema` instead. */
  export const outboundSchema = FieldGetFieldResponseBody$outboundSchema;
  /** @deprecated use `FieldGetFieldResponseBody$Outbound` instead. */
  export type Outbound = FieldGetFieldResponseBody$Outbound;
}

export function fieldGetFieldResponseBodyToJSON(
  fieldGetFieldResponseBody: FieldGetFieldResponseBody,
): string {
  return JSON.stringify(
    FieldGetFieldResponseBody$outboundSchema.parse(fieldGetFieldResponseBody),
  );
}

export function fieldGetFieldResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldGetFieldResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldGetFieldResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldGetFieldResponseBody' from JSON`,
  );
}
