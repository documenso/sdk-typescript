/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter documents by how it was created.
 */
export const QueryParamSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
/**
 * Filter documents by how it was created.
 */
export type QueryParamSource = ClosedEnum<typeof QueryParamSource>;

/**
 * Filter documents by the current status
 */
export const QueryParamStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
/**
 * Filter documents by the current status
 */
export type QueryParamStatus = ClosedEnum<typeof QueryParamStatus>;

export const OrderByColumn = {
  CreatedAt: "createdAt",
} as const;
export type OrderByColumn = ClosedEnum<typeof OrderByColumn>;

export const OrderByDirection = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type OrderByDirection = ClosedEnum<typeof OrderByDirection>;

export type DocumentFindRequest = {
  /**
   * The search query.
   */
  query?: string | undefined;
  /**
   * The pagination page number, starts at 1.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  perPage?: number | undefined;
  /**
   * Filter documents by the template ID used to create it.
   */
  templateId?: number | undefined;
  /**
   * Filter documents by how it was created.
   */
  source?: QueryParamSource | undefined;
  /**
   * Filter documents by the current status
   */
  status?: QueryParamStatus | undefined;
  /**
   * Filter documents by folder ID
   */
  folderId?: string | undefined;
  orderByColumn?: OrderByColumn | undefined;
  orderByDirection?: OrderByDirection | undefined;
};

export const DocumentFindVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentFindVisibility = ClosedEnum<typeof DocumentFindVisibility>;

export const DataStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DataStatus = ClosedEnum<typeof DataStatus>;

export const DataSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DataSource = ClosedEnum<typeof DataSource>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentFindGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentFindGlobalAccessAuth = ClosedEnum<
  typeof DocumentFindGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentFindGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentFindGlobalActionAuth = ClosedEnum<
  typeof DocumentFindGlobalActionAuth
>;

export type DocumentFindAuthOptions = {
  globalAccessAuth: Array<DocumentFindGlobalAccessAuth>;
  globalActionAuth: Array<DocumentFindGlobalActionAuth>;
};

export type DocumentFindFormValues = string | boolean | number;

export type DocumentFindUser = {
  id: number;
  name: string | null;
  email: string;
};

export const DocumentFindRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type DocumentFindRole = ClosedEnum<typeof DocumentFindRole>;

export const DocumentFindReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type DocumentFindReadStatus = ClosedEnum<typeof DocumentFindReadStatus>;

export const DocumentFindSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type DocumentFindSigningStatus = ClosedEnum<
  typeof DocumentFindSigningStatus
>;

export const DocumentFindSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type DocumentFindSendStatus = ClosedEnum<typeof DocumentFindSendStatus>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentFindAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentFindAccessAuth = ClosedEnum<typeof DocumentFindAccessAuth>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentFindActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentFindActionAuth = ClosedEnum<typeof DocumentFindActionAuth>;

export type DocumentFindRecipientAuthOptions = {
  accessAuth: Array<DocumentFindAccessAuth>;
  actionAuth: Array<DocumentFindActionAuth>;
};

export type DocumentFindRecipient = {
  role: DocumentFindRole;
  readStatus: DocumentFindReadStatus;
  signingStatus: DocumentFindSigningStatus;
  sendStatus: DocumentFindSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentFindRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export type DocumentFindTeam = {
  id: number;
  url: string;
};

export type DocumentFindData = {
  visibility: DocumentFindVisibility;
  status: DataStatus;
  source: DataSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentFindAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  user: DocumentFindUser;
  recipients: Array<DocumentFindRecipient>;
  team: DocumentFindTeam | null;
};

/**
 * Successful response
 */
export type DocumentFindResponse = {
  data: Array<DocumentFindData>;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The current page number, starts at 1.
   */
  currentPage: number;
  /**
   * The number of items per page.
   */
  perPage: number;
  /**
   * The total number of pages.
   */
  totalPages: number;
};

/** @internal */
export const QueryParamSource$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamSource
> = z.nativeEnum(QueryParamSource);

/** @internal */
export const QueryParamSource$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamSource
> = QueryParamSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSource$ {
  /** @deprecated use `QueryParamSource$inboundSchema` instead. */
  export const inboundSchema = QueryParamSource$inboundSchema;
  /** @deprecated use `QueryParamSource$outboundSchema` instead. */
  export const outboundSchema = QueryParamSource$outboundSchema;
}

/** @internal */
export const QueryParamStatus$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = z.nativeEnum(QueryParamStatus);

/** @internal */
export const QueryParamStatus$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamStatus
> = QueryParamStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatus$ {
  /** @deprecated use `QueryParamStatus$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatus$inboundSchema;
  /** @deprecated use `QueryParamStatus$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatus$outboundSchema;
}

/** @internal */
export const OrderByColumn$inboundSchema: z.ZodNativeEnum<
  typeof OrderByColumn
> = z.nativeEnum(OrderByColumn);

/** @internal */
export const OrderByColumn$outboundSchema: z.ZodNativeEnum<
  typeof OrderByColumn
> = OrderByColumn$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderByColumn$ {
  /** @deprecated use `OrderByColumn$inboundSchema` instead. */
  export const inboundSchema = OrderByColumn$inboundSchema;
  /** @deprecated use `OrderByColumn$outboundSchema` instead. */
  export const outboundSchema = OrderByColumn$outboundSchema;
}

/** @internal */
export const OrderByDirection$inboundSchema: z.ZodNativeEnum<
  typeof OrderByDirection
> = z.nativeEnum(OrderByDirection);

/** @internal */
export const OrderByDirection$outboundSchema: z.ZodNativeEnum<
  typeof OrderByDirection
> = OrderByDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderByDirection$ {
  /** @deprecated use `OrderByDirection$inboundSchema` instead. */
  export const inboundSchema = OrderByDirection$inboundSchema;
  /** @deprecated use `OrderByDirection$outboundSchema` instead. */
  export const outboundSchema = OrderByDirection$outboundSchema;
}

/** @internal */
export const DocumentFindRequest$inboundSchema: z.ZodType<
  DocumentFindRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  templateId: z.number().optional(),
  source: QueryParamSource$inboundSchema.optional(),
  status: QueryParamStatus$inboundSchema.optional(),
  folderId: z.string().optional(),
  orderByColumn: OrderByColumn$inboundSchema.optional(),
  orderByDirection: OrderByDirection$inboundSchema.default("desc"),
});

/** @internal */
export type DocumentFindRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  templateId?: number | undefined;
  source?: string | undefined;
  status?: string | undefined;
  folderId?: string | undefined;
  orderByColumn?: string | undefined;
  orderByDirection: string;
};

/** @internal */
export const DocumentFindRequest$outboundSchema: z.ZodType<
  DocumentFindRequest$Outbound,
  z.ZodTypeDef,
  DocumentFindRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  templateId: z.number().optional(),
  source: QueryParamSource$outboundSchema.optional(),
  status: QueryParamStatus$outboundSchema.optional(),
  folderId: z.string().optional(),
  orderByColumn: OrderByColumn$outboundSchema.optional(),
  orderByDirection: OrderByDirection$outboundSchema.default("desc"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindRequest$ {
  /** @deprecated use `DocumentFindRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentFindRequest$inboundSchema;
  /** @deprecated use `DocumentFindRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentFindRequest$outboundSchema;
  /** @deprecated use `DocumentFindRequest$Outbound` instead. */
  export type Outbound = DocumentFindRequest$Outbound;
}

export function documentFindRequestToJSON(
  documentFindRequest: DocumentFindRequest,
): string {
  return JSON.stringify(
    DocumentFindRequest$outboundSchema.parse(documentFindRequest),
  );
}

export function documentFindRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindRequest' from JSON`,
  );
}

/** @internal */
export const DocumentFindVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindVisibility
> = z.nativeEnum(DocumentFindVisibility);

/** @internal */
export const DocumentFindVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindVisibility
> = DocumentFindVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindVisibility$ {
  /** @deprecated use `DocumentFindVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentFindVisibility$inboundSchema;
  /** @deprecated use `DocumentFindVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentFindVisibility$outboundSchema;
}

/** @internal */
export const DataStatus$inboundSchema: z.ZodNativeEnum<typeof DataStatus> = z
  .nativeEnum(DataStatus);

/** @internal */
export const DataStatus$outboundSchema: z.ZodNativeEnum<typeof DataStatus> =
  DataStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataStatus$ {
  /** @deprecated use `DataStatus$inboundSchema` instead. */
  export const inboundSchema = DataStatus$inboundSchema;
  /** @deprecated use `DataStatus$outboundSchema` instead. */
  export const outboundSchema = DataStatus$outboundSchema;
}

/** @internal */
export const DataSource$inboundSchema: z.ZodNativeEnum<typeof DataSource> = z
  .nativeEnum(DataSource);

/** @internal */
export const DataSource$outboundSchema: z.ZodNativeEnum<typeof DataSource> =
  DataSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSource$ {
  /** @deprecated use `DataSource$inboundSchema` instead. */
  export const inboundSchema = DataSource$inboundSchema;
  /** @deprecated use `DataSource$outboundSchema` instead. */
  export const outboundSchema = DataSource$outboundSchema;
}

/** @internal */
export const DocumentFindGlobalAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindGlobalAccessAuth
> = z.nativeEnum(DocumentFindGlobalAccessAuth);

/** @internal */
export const DocumentFindGlobalAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindGlobalAccessAuth
> = DocumentFindGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindGlobalAccessAuth$ {
  /** @deprecated use `DocumentFindGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentFindGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentFindGlobalActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindGlobalActionAuth
> = z.nativeEnum(DocumentFindGlobalActionAuth);

/** @internal */
export const DocumentFindGlobalActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindGlobalActionAuth
> = DocumentFindGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindGlobalActionAuth$ {
  /** @deprecated use `DocumentFindGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentFindGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentFindAuthOptions$inboundSchema: z.ZodType<
  DocumentFindAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(DocumentFindGlobalAccessAuth$inboundSchema),
  globalActionAuth: z.array(DocumentFindGlobalActionAuth$inboundSchema),
});

/** @internal */
export type DocumentFindAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentFindAuthOptions$outboundSchema: z.ZodType<
  DocumentFindAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentFindAuthOptions
> = z.object({
  globalAccessAuth: z.array(DocumentFindGlobalAccessAuth$outboundSchema),
  globalActionAuth: z.array(DocumentFindGlobalActionAuth$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindAuthOptions$ {
  /** @deprecated use `DocumentFindAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentFindAuthOptions$inboundSchema;
  /** @deprecated use `DocumentFindAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentFindAuthOptions$outboundSchema;
  /** @deprecated use `DocumentFindAuthOptions$Outbound` instead. */
  export type Outbound = DocumentFindAuthOptions$Outbound;
}

export function documentFindAuthOptionsToJSON(
  documentFindAuthOptions: DocumentFindAuthOptions,
): string {
  return JSON.stringify(
    DocumentFindAuthOptions$outboundSchema.parse(documentFindAuthOptions),
  );
}

export function documentFindAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFindFormValues$inboundSchema: z.ZodType<
  DocumentFindFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentFindFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentFindFormValues$outboundSchema: z.ZodType<
  DocumentFindFormValues$Outbound,
  z.ZodTypeDef,
  DocumentFindFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindFormValues$ {
  /** @deprecated use `DocumentFindFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentFindFormValues$inboundSchema;
  /** @deprecated use `DocumentFindFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentFindFormValues$outboundSchema;
  /** @deprecated use `DocumentFindFormValues$Outbound` instead. */
  export type Outbound = DocumentFindFormValues$Outbound;
}

export function documentFindFormValuesToJSON(
  documentFindFormValues: DocumentFindFormValues,
): string {
  return JSON.stringify(
    DocumentFindFormValues$outboundSchema.parse(documentFindFormValues),
  );
}

export function documentFindFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentFindUser$inboundSchema: z.ZodType<
  DocumentFindUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/** @internal */
export type DocumentFindUser$Outbound = {
  id: number;
  name: string | null;
  email: string;
};

/** @internal */
export const DocumentFindUser$outboundSchema: z.ZodType<
  DocumentFindUser$Outbound,
  z.ZodTypeDef,
  DocumentFindUser
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindUser$ {
  /** @deprecated use `DocumentFindUser$inboundSchema` instead. */
  export const inboundSchema = DocumentFindUser$inboundSchema;
  /** @deprecated use `DocumentFindUser$outboundSchema` instead. */
  export const outboundSchema = DocumentFindUser$outboundSchema;
  /** @deprecated use `DocumentFindUser$Outbound` instead. */
  export type Outbound = DocumentFindUser$Outbound;
}

export function documentFindUserToJSON(
  documentFindUser: DocumentFindUser,
): string {
  return JSON.stringify(
    DocumentFindUser$outboundSchema.parse(documentFindUser),
  );
}

export function documentFindUserFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindUser' from JSON`,
  );
}

/** @internal */
export const DocumentFindRole$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindRole
> = z.nativeEnum(DocumentFindRole);

/** @internal */
export const DocumentFindRole$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindRole
> = DocumentFindRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindRole$ {
  /** @deprecated use `DocumentFindRole$inboundSchema` instead. */
  export const inboundSchema = DocumentFindRole$inboundSchema;
  /** @deprecated use `DocumentFindRole$outboundSchema` instead. */
  export const outboundSchema = DocumentFindRole$outboundSchema;
}

/** @internal */
export const DocumentFindReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindReadStatus
> = z.nativeEnum(DocumentFindReadStatus);

/** @internal */
export const DocumentFindReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindReadStatus
> = DocumentFindReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindReadStatus$ {
  /** @deprecated use `DocumentFindReadStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindReadStatus$inboundSchema;
  /** @deprecated use `DocumentFindReadStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindReadStatus$outboundSchema;
}

/** @internal */
export const DocumentFindSigningStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindSigningStatus
> = z.nativeEnum(DocumentFindSigningStatus);

/** @internal */
export const DocumentFindSigningStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindSigningStatus
> = DocumentFindSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindSigningStatus$ {
  /** @deprecated use `DocumentFindSigningStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindSigningStatus$inboundSchema;
  /** @deprecated use `DocumentFindSigningStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindSigningStatus$outboundSchema;
}

/** @internal */
export const DocumentFindSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindSendStatus
> = z.nativeEnum(DocumentFindSendStatus);

/** @internal */
export const DocumentFindSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindSendStatus
> = DocumentFindSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindSendStatus$ {
  /** @deprecated use `DocumentFindSendStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentFindSendStatus$inboundSchema;
  /** @deprecated use `DocumentFindSendStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentFindSendStatus$outboundSchema;
}

/** @internal */
export const DocumentFindAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindAccessAuth
> = z.nativeEnum(DocumentFindAccessAuth);

/** @internal */
export const DocumentFindAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindAccessAuth
> = DocumentFindAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindAccessAuth$ {
  /** @deprecated use `DocumentFindAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindAccessAuth$inboundSchema;
  /** @deprecated use `DocumentFindAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentFindActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFindActionAuth
> = z.nativeEnum(DocumentFindActionAuth);

/** @internal */
export const DocumentFindActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFindActionAuth
> = DocumentFindActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindActionAuth$ {
  /** @deprecated use `DocumentFindActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentFindActionAuth$inboundSchema;
  /** @deprecated use `DocumentFindActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentFindActionAuth$outboundSchema;
}

/** @internal */
export const DocumentFindRecipientAuthOptions$inboundSchema: z.ZodType<
  DocumentFindRecipientAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAuth: z.array(DocumentFindAccessAuth$inboundSchema),
  actionAuth: z.array(DocumentFindActionAuth$inboundSchema),
});

/** @internal */
export type DocumentFindRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const DocumentFindRecipientAuthOptions$outboundSchema: z.ZodType<
  DocumentFindRecipientAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentFindRecipientAuthOptions
> = z.object({
  accessAuth: z.array(DocumentFindAccessAuth$outboundSchema),
  actionAuth: z.array(DocumentFindActionAuth$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindRecipientAuthOptions$ {
  /** @deprecated use `DocumentFindRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentFindRecipientAuthOptions$inboundSchema;
  /** @deprecated use `DocumentFindRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentFindRecipientAuthOptions$outboundSchema;
  /** @deprecated use `DocumentFindRecipientAuthOptions$Outbound` instead. */
  export type Outbound = DocumentFindRecipientAuthOptions$Outbound;
}

export function documentFindRecipientAuthOptionsToJSON(
  documentFindRecipientAuthOptions: DocumentFindRecipientAuthOptions,
): string {
  return JSON.stringify(
    DocumentFindRecipientAuthOptions$outboundSchema.parse(
      documentFindRecipientAuthOptions,
    ),
  );
}

export function documentFindRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindRecipientAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindRecipientAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFindRecipient$inboundSchema: z.ZodType<
  DocumentFindRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DocumentFindRole$inboundSchema,
  readStatus: DocumentFindReadStatus$inboundSchema,
  signingStatus: DocumentFindSigningStatus$inboundSchema,
  sendStatus: DocumentFindSendStatus$inboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindRecipientAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type DocumentFindRecipient$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentFindRecipientAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const DocumentFindRecipient$outboundSchema: z.ZodType<
  DocumentFindRecipient$Outbound,
  z.ZodTypeDef,
  DocumentFindRecipient
> = z.object({
  role: DocumentFindRole$outboundSchema,
  readStatus: DocumentFindReadStatus$outboundSchema,
  signingStatus: DocumentFindSigningStatus$outboundSchema,
  sendStatus: DocumentFindSendStatus$outboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentFindRecipientAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindRecipient$ {
  /** @deprecated use `DocumentFindRecipient$inboundSchema` instead. */
  export const inboundSchema = DocumentFindRecipient$inboundSchema;
  /** @deprecated use `DocumentFindRecipient$outboundSchema` instead. */
  export const outboundSchema = DocumentFindRecipient$outboundSchema;
  /** @deprecated use `DocumentFindRecipient$Outbound` instead. */
  export type Outbound = DocumentFindRecipient$Outbound;
}

export function documentFindRecipientToJSON(
  documentFindRecipient: DocumentFindRecipient,
): string {
  return JSON.stringify(
    DocumentFindRecipient$outboundSchema.parse(documentFindRecipient),
  );
}

export function documentFindRecipientFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindRecipient' from JSON`,
  );
}

/** @internal */
export const DocumentFindTeam$inboundSchema: z.ZodType<
  DocumentFindTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  url: z.string(),
});

/** @internal */
export type DocumentFindTeam$Outbound = {
  id: number;
  url: string;
};

/** @internal */
export const DocumentFindTeam$outboundSchema: z.ZodType<
  DocumentFindTeam$Outbound,
  z.ZodTypeDef,
  DocumentFindTeam
> = z.object({
  id: z.number(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindTeam$ {
  /** @deprecated use `DocumentFindTeam$inboundSchema` instead. */
  export const inboundSchema = DocumentFindTeam$inboundSchema;
  /** @deprecated use `DocumentFindTeam$outboundSchema` instead. */
  export const outboundSchema = DocumentFindTeam$outboundSchema;
  /** @deprecated use `DocumentFindTeam$Outbound` instead. */
  export type Outbound = DocumentFindTeam$Outbound;
}

export function documentFindTeamToJSON(
  documentFindTeam: DocumentFindTeam,
): string {
  return JSON.stringify(
    DocumentFindTeam$outboundSchema.parse(documentFindTeam),
  );
}

export function documentFindTeamFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindTeam' from JSON`,
  );
}

/** @internal */
export const DocumentFindData$inboundSchema: z.ZodType<
  DocumentFindData,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentFindVisibility$inboundSchema,
  status: DataStatus$inboundSchema,
  source: DataSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(z.lazy(() => DocumentFindAuthOptions$inboundSchema)),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  user: z.lazy(() => DocumentFindUser$inboundSchema),
  recipients: z.array(z.lazy(() => DocumentFindRecipient$inboundSchema)),
  team: z.nullable(z.lazy(() => DocumentFindTeam$inboundSchema)),
});

/** @internal */
export type DocumentFindData$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentFindAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  user: DocumentFindUser$Outbound;
  recipients: Array<DocumentFindRecipient$Outbound>;
  team: DocumentFindTeam$Outbound | null;
};

/** @internal */
export const DocumentFindData$outboundSchema: z.ZodType<
  DocumentFindData$Outbound,
  z.ZodTypeDef,
  DocumentFindData
> = z.object({
  visibility: DocumentFindVisibility$outboundSchema,
  status: DataStatus$outboundSchema,
  source: DataSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(z.lazy(() => DocumentFindAuthOptions$outboundSchema)),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  user: z.lazy(() => DocumentFindUser$outboundSchema),
  recipients: z.array(z.lazy(() => DocumentFindRecipient$outboundSchema)),
  team: z.nullable(z.lazy(() => DocumentFindTeam$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindData$ {
  /** @deprecated use `DocumentFindData$inboundSchema` instead. */
  export const inboundSchema = DocumentFindData$inboundSchema;
  /** @deprecated use `DocumentFindData$outboundSchema` instead. */
  export const outboundSchema = DocumentFindData$outboundSchema;
  /** @deprecated use `DocumentFindData$Outbound` instead. */
  export type Outbound = DocumentFindData$Outbound;
}

export function documentFindDataToJSON(
  documentFindData: DocumentFindData,
): string {
  return JSON.stringify(
    DocumentFindData$outboundSchema.parse(documentFindData),
  );
}

export function documentFindDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindData' from JSON`,
  );
}

/** @internal */
export const DocumentFindResponse$inboundSchema: z.ZodType<
  DocumentFindResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => DocumentFindData$inboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/** @internal */
export type DocumentFindResponse$Outbound = {
  data: Array<DocumentFindData$Outbound>;
  count: number;
  currentPage: number;
  perPage: number;
  totalPages: number;
};

/** @internal */
export const DocumentFindResponse$outboundSchema: z.ZodType<
  DocumentFindResponse$Outbound,
  z.ZodTypeDef,
  DocumentFindResponse
> = z.object({
  data: z.array(z.lazy(() => DocumentFindData$outboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFindResponse$ {
  /** @deprecated use `DocumentFindResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentFindResponse$inboundSchema;
  /** @deprecated use `DocumentFindResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentFindResponse$outboundSchema;
  /** @deprecated use `DocumentFindResponse$Outbound` instead. */
  export type Outbound = DocumentFindResponse$Outbound;
}

export function documentFindResponseToJSON(
  documentFindResponse: DocumentFindResponse,
): string {
  return JSON.stringify(
    DocumentFindResponse$outboundSchema.parse(documentFindResponse),
  );
}

export function documentFindResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFindResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFindResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFindResponse' from JSON`,
  );
}
