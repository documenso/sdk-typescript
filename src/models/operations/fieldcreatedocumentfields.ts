/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateDocumentFieldsTypeDropdownRequest1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateDocumentFieldsTypeDropdownRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeDropdownRequest1
>;

export const FieldCreateDocumentFieldsTypeDropdownRequest2 = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateDocumentFieldsTypeDropdownRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeDropdownRequest2
>;

export type FieldCreateDocumentFieldsValueDropdown = {
  value: string;
};

export type FieldCreateDocumentFieldsFieldMetaDropdownRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeDropdownRequest2;
  values?: Array<FieldCreateDocumentFieldsValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldCreateDocumentFieldsFieldDropdown = {
  type: FieldCreateDocumentFieldsTypeDropdownRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaDropdownRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeCheckboxRequest1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldCreateDocumentFieldsTypeCheckboxRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeCheckboxRequest1
>;

export const FieldCreateDocumentFieldsTypeCheckboxRequest2 = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateDocumentFieldsTypeCheckboxRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeCheckboxRequest2
>;

export type FieldCreateDocumentFieldsValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export const FieldCreateDocumentFieldsDirectionRequest = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type FieldCreateDocumentFieldsDirectionRequest = ClosedEnum<
  typeof FieldCreateDocumentFieldsDirectionRequest
>;

export type FieldCreateDocumentFieldsFieldMetaCheckboxRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeCheckboxRequest2;
  values?: Array<FieldCreateDocumentFieldsValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: FieldCreateDocumentFieldsDirectionRequest | undefined;
};

export type FieldCreateDocumentFieldsFieldCheckbox = {
  type: FieldCreateDocumentFieldsTypeCheckboxRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaCheckboxRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeRadioRequest1 = {
  Radio: "RADIO",
} as const;
export type FieldCreateDocumentFieldsTypeRadioRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeRadioRequest1
>;

export const FieldCreateDocumentFieldsTypeRadioRequest2 = {
  Radio: "radio",
} as const;
export type FieldCreateDocumentFieldsTypeRadioRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeRadioRequest2
>;

export type FieldCreateDocumentFieldsValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldMetaRadioRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeRadioRequest2;
  values?: Array<FieldCreateDocumentFieldsValueRadio> | undefined;
};

export type FieldCreateDocumentFieldsFieldRadio = {
  type: FieldCreateDocumentFieldsTypeRadioRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaRadioRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeNumberRequest1 = {
  Number: "NUMBER",
} as const;
export type FieldCreateDocumentFieldsTypeNumberRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeNumberRequest1
>;

export const FieldCreateDocumentFieldsTypeNumberRequest2 = {
  Number: "number",
} as const;
export type FieldCreateDocumentFieldsTypeNumberRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeNumberRequest2
>;

export const FieldCreateDocumentFieldsTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignNumber = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignNumber
>;

export type FieldCreateDocumentFieldsFieldMetaNumberRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeNumberRequest2;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignNumber | undefined;
};

export type FieldCreateDocumentFieldsFieldNumber = {
  type: FieldCreateDocumentFieldsTypeNumberRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaNumberRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeTextRequest1 = {
  Text: "TEXT",
} as const;
export type FieldCreateDocumentFieldsTypeTextRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeTextRequest1
>;

export const FieldCreateDocumentFieldsTypeTextRequest2 = {
  Text: "text",
} as const;
export type FieldCreateDocumentFieldsTypeTextRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeTextRequest2
>;

export const FieldCreateDocumentFieldsTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignText = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignText
>;

export type FieldCreateDocumentFieldsFieldMetaTextRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeTextRequest2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignText | undefined;
};

export type FieldCreateDocumentFieldsFieldText = {
  type: FieldCreateDocumentFieldsTypeTextRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaTextRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeDateRequest1 = {
  Date: "DATE",
} as const;
export type FieldCreateDocumentFieldsTypeDateRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeDateRequest1
>;

export const FieldCreateDocumentFieldsTypeDateRequest2 = {
  Date: "date",
} as const;
export type FieldCreateDocumentFieldsTypeDateRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeDateRequest2
>;

export const FieldCreateDocumentFieldsTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignDate = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignDate
>;

export type FieldCreateDocumentFieldsFieldMetaDateRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeDateRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignDate | undefined;
};

export type FieldCreateDocumentFieldsFieldDate = {
  type: FieldCreateDocumentFieldsTypeDateRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaDateRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeEmailRequest1 = {
  Email: "EMAIL",
} as const;
export type FieldCreateDocumentFieldsTypeEmailRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeEmailRequest1
>;

export const FieldCreateDocumentFieldsTypeEmailRequest2 = {
  Email: "email",
} as const;
export type FieldCreateDocumentFieldsTypeEmailRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeEmailRequest2
>;

export const FieldCreateDocumentFieldsTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignEmail = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignEmail
>;

export type FieldCreateDocumentFieldsFieldMetaEmailRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeEmailRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignEmail | undefined;
};

export type FieldCreateDocumentFieldsFieldEmail = {
  type: FieldCreateDocumentFieldsTypeEmailRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaEmailRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeNameRequest1 = {
  Name: "NAME",
} as const;
export type FieldCreateDocumentFieldsTypeNameRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeNameRequest1
>;

export const FieldCreateDocumentFieldsTypeNameRequest2 = {
  Name: "name",
} as const;
export type FieldCreateDocumentFieldsTypeNameRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeNameRequest2
>;

export const FieldCreateDocumentFieldsTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignName = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignName
>;

export type FieldCreateDocumentFieldsFieldMetaNameRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeNameRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignName | undefined;
};

export type FieldCreateDocumentFieldsFieldName = {
  type: FieldCreateDocumentFieldsTypeNameRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaNameRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeInitialsRequest1 = {
  Initials: "INITIALS",
} as const;
export type FieldCreateDocumentFieldsTypeInitialsRequest1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeInitialsRequest1
>;

export const FieldCreateDocumentFieldsTypeInitialsRequest2 = {
  Initials: "initials",
} as const;
export type FieldCreateDocumentFieldsTypeInitialsRequest2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeInitialsRequest2
>;

export const FieldCreateDocumentFieldsTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignInitials = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignInitials
>;

export type FieldCreateDocumentFieldsFieldMetaInitialsRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsTypeInitialsRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignInitials | undefined;
};

export type FieldCreateDocumentFieldsFieldInitials = {
  type: FieldCreateDocumentFieldsTypeInitialsRequest1;
  fieldMeta?: FieldCreateDocumentFieldsFieldMetaInitialsRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateDocumentFieldsTypeFreeSignature = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeFreeSignature
>;

export type FieldCreateDocumentFieldsFieldFreeSignature = {
  type: FieldCreateDocumentFieldsTypeFreeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateDocumentFieldsTypeSignature = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeSignature
>;

export type FieldCreateDocumentFieldsFieldSignature = {
  type: FieldCreateDocumentFieldsTypeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateDocumentFieldsFieldUnion =
  | FieldCreateDocumentFieldsFieldSignature
  | FieldCreateDocumentFieldsFieldFreeSignature
  | FieldCreateDocumentFieldsFieldInitials
  | FieldCreateDocumentFieldsFieldName
  | FieldCreateDocumentFieldsFieldEmail
  | FieldCreateDocumentFieldsFieldDate
  | FieldCreateDocumentFieldsFieldText
  | FieldCreateDocumentFieldsFieldNumber
  | FieldCreateDocumentFieldsFieldRadio
  | FieldCreateDocumentFieldsFieldCheckbox
  | FieldCreateDocumentFieldsFieldDropdown;

export type FieldCreateDocumentFieldsRequest = {
  documentId: number;
  fields: Array<
    | FieldCreateDocumentFieldsFieldSignature
    | FieldCreateDocumentFieldsFieldFreeSignature
    | FieldCreateDocumentFieldsFieldInitials
    | FieldCreateDocumentFieldsFieldName
    | FieldCreateDocumentFieldsFieldEmail
    | FieldCreateDocumentFieldsFieldDate
    | FieldCreateDocumentFieldsFieldText
    | FieldCreateDocumentFieldsFieldNumber
    | FieldCreateDocumentFieldsFieldRadio
    | FieldCreateDocumentFieldsFieldCheckbox
    | FieldCreateDocumentFieldsFieldDropdown
  >;
};

export const FieldCreateDocumentFieldsTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateDocumentFieldsTypeResponse = ClosedEnum<
  typeof FieldCreateDocumentFieldsTypeResponse
>;

export const FieldCreateDocumentFieldsFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeDropdown
>;

export type FieldCreateDocumentFieldsValueResponse3 = {
  value: string;
};

export type FieldCreateDocumentFieldsFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeDropdown;
  values?: Array<FieldCreateDocumentFieldsValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeCheckbox
>;

export type FieldCreateDocumentFieldsValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const FieldCreateDocumentFieldsDirectionResponse = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type FieldCreateDocumentFieldsDirectionResponse = ClosedEnum<
  typeof FieldCreateDocumentFieldsDirectionResponse
>;

export type FieldCreateDocumentFieldsFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeCheckbox;
  values?: Array<FieldCreateDocumentFieldsValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: FieldCreateDocumentFieldsDirectionResponse | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeRadio = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeRadio
>;

export type FieldCreateDocumentFieldsValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeRadio;
  values?: Array<FieldCreateDocumentFieldsValueResponse1> | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeNumber = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeNumber
>;

export const FieldCreateDocumentFieldsTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse6 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse6
>;

export type FieldCreateDocumentFieldsFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeNumber;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse6 | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeText = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeText
>;

export const FieldCreateDocumentFieldsTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse5 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse5
>;

export type FieldCreateDocumentFieldsFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse5 | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeDate = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeDate
>;

export const FieldCreateDocumentFieldsTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse4 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse4
>;

export type FieldCreateDocumentFieldsFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse4 | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeEmail = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeEmail
>;

export const FieldCreateDocumentFieldsTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse3 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse3
>;

export type FieldCreateDocumentFieldsFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse3 | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeName = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeName
>;

export const FieldCreateDocumentFieldsTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse2 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse2
>;

export type FieldCreateDocumentFieldsFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse2 | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldCreateDocumentFieldsFieldMetaTypeInitials = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaTypeInitials
>;

export const FieldCreateDocumentFieldsTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateDocumentFieldsTextAlignResponse1 = ClosedEnum<
  typeof FieldCreateDocumentFieldsTextAlignResponse1
>;

export type FieldCreateDocumentFieldsFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldCreateDocumentFieldsTextAlignResponse1 | undefined;
};

export type FieldCreateDocumentFieldsFieldMetaUnion =
  | FieldCreateDocumentFieldsFieldMetaInitialsResponse
  | FieldCreateDocumentFieldsFieldMetaNameResponse
  | FieldCreateDocumentFieldsFieldMetaEmailResponse
  | FieldCreateDocumentFieldsFieldMetaDateResponse
  | FieldCreateDocumentFieldsFieldMetaTextResponse
  | FieldCreateDocumentFieldsFieldMetaNumberResponse
  | FieldCreateDocumentFieldsFieldMetaRadioResponse
  | FieldCreateDocumentFieldsFieldMetaCheckboxResponse
  | FieldCreateDocumentFieldsFieldMetaDropdownResponse;

export type FieldCreateDocumentFieldsFieldResponse = {
  envelopeId: string;
  envelopeItemId: string;
  type: FieldCreateDocumentFieldsTypeResponse;
  id: number;
  secondaryId: string;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldsFieldMetaInitialsResponse
    | FieldCreateDocumentFieldsFieldMetaNameResponse
    | FieldCreateDocumentFieldsFieldMetaEmailResponse
    | FieldCreateDocumentFieldsFieldMetaDateResponse
    | FieldCreateDocumentFieldsFieldMetaTextResponse
    | FieldCreateDocumentFieldsFieldMetaNumberResponse
    | FieldCreateDocumentFieldsFieldMetaRadioResponse
    | FieldCreateDocumentFieldsFieldMetaCheckboxResponse
    | FieldCreateDocumentFieldsFieldMetaDropdownResponse
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/**
 * Successful response
 */
export type FieldCreateDocumentFieldsResponse = {
  fields: Array<FieldCreateDocumentFieldsFieldResponse>;
};

/** @internal */
export const FieldCreateDocumentFieldsTypeDropdownRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDropdownRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeDropdownRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeDropdownRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDropdownRequest1> =
    FieldCreateDocumentFieldsTypeDropdownRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeDropdownRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeDropdownRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeDropdownRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeDropdownRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeDropdownRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeDropdownRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDropdownRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeDropdownRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeDropdownRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDropdownRequest2> =
    FieldCreateDocumentFieldsTypeDropdownRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeDropdownRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeDropdownRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeDropdownRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeDropdownRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeDropdownRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueDropdown$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueDropdown$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueDropdown$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueDropdown$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueDropdown$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueDropdown$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueDropdown$Outbound;
}

export function fieldCreateDocumentFieldsValueDropdownToJSON(
  fieldCreateDocumentFieldsValueDropdown:
    FieldCreateDocumentFieldsValueDropdown,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueDropdown$outboundSchema.parse(
      fieldCreateDocumentFieldsValueDropdown,
    ),
  );
}

export function fieldCreateDocumentFieldsValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDropdownRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDropdownRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeDropdownRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDropdownRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDropdownRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDropdownRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeDropdownRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDropdownRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDropdownRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaDropdownRequest:
    FieldCreateDocumentFieldsFieldMetaDropdownRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaDropdownRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDropdownRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDropdownRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDropdownRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDropdownRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldDropdown$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeDropdownRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaDropdownRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldDropdown$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldDropdown
> = z.object({
  type: FieldCreateDocumentFieldsTypeDropdownRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDropdownRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldDropdown$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldDropdown$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldDropdown$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldDropdown$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldDropdown$Outbound;
}

export function fieldCreateDocumentFieldsFieldDropdownToJSON(
  fieldCreateDocumentFieldsFieldDropdown:
    FieldCreateDocumentFieldsFieldDropdown,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldDropdown$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldDropdown,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeCheckboxRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeCheckboxRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeCheckboxRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeCheckboxRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeCheckboxRequest1> =
    FieldCreateDocumentFieldsTypeCheckboxRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeCheckboxRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeCheckboxRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeCheckboxRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeCheckboxRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeCheckboxRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeCheckboxRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeCheckboxRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeCheckboxRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeCheckboxRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeCheckboxRequest2> =
    FieldCreateDocumentFieldsTypeCheckboxRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeCheckboxRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeCheckboxRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeCheckboxRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeCheckboxRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeCheckboxRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueCheckbox$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueCheckbox$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueCheckbox$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueCheckbox$Outbound;
}

export function fieldCreateDocumentFieldsValueCheckboxToJSON(
  fieldCreateDocumentFieldsValueCheckbox:
    FieldCreateDocumentFieldsValueCheckbox,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueCheckbox$outboundSchema.parse(
      fieldCreateDocumentFieldsValueCheckbox,
    ),
  );
}

export function fieldCreateDocumentFieldsValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsDirectionRequest$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsDirectionRequest> = z
    .nativeEnum(FieldCreateDocumentFieldsDirectionRequest);

/** @internal */
export const FieldCreateDocumentFieldsDirectionRequest$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsDirectionRequest> =
    FieldCreateDocumentFieldsDirectionRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsDirectionRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsDirectionRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsDirectionRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsDirectionRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsDirectionRequest$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaCheckboxRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeCheckboxRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: FieldCreateDocumentFieldsDirectionRequest$inboundSchema.default(
      "vertical",
    ),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaCheckboxRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaCheckboxRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeCheckboxRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: FieldCreateDocumentFieldsDirectionRequest$outboundSchema.default(
      "vertical",
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaCheckboxRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaCheckboxRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaCheckboxRequest:
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaCheckboxRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaCheckboxRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaCheckboxRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaCheckboxRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaCheckboxRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldCheckbox$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeCheckboxRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaCheckboxRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldCheckbox$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldCheckbox
> = z.object({
  type: FieldCreateDocumentFieldsTypeCheckboxRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaCheckboxRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldCheckbox$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldCheckbox$Outbound;
}

export function fieldCreateDocumentFieldsFieldCheckboxToJSON(
  fieldCreateDocumentFieldsFieldCheckbox:
    FieldCreateDocumentFieldsFieldCheckbox,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldCheckbox$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldCheckbox,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeRadioRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeRadioRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeRadioRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeRadioRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeRadioRequest1> =
    FieldCreateDocumentFieldsTypeRadioRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeRadioRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeRadioRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeRadioRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeRadioRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeRadioRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeRadioRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeRadioRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeRadioRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeRadioRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeRadioRequest2> =
    FieldCreateDocumentFieldsTypeRadioRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeRadioRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeRadioRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeRadioRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeRadioRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeRadioRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueRadio$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueRadio$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueRadio$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueRadio$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueRadio$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueRadio$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueRadio$Outbound;
}

export function fieldCreateDocumentFieldsValueRadioToJSON(
  fieldCreateDocumentFieldsValueRadio: FieldCreateDocumentFieldsValueRadio,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueRadio$outboundSchema.parse(
      fieldCreateDocumentFieldsValueRadio,
    ),
  );
}

export function fieldCreateDocumentFieldsValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaRadioRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaRadioRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeRadioRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaRadioRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaRadioRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaRadioRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaRadioRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeRadioRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaRadioRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaRadioRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaRadioRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaRadioRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaRadioRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaRadioRequest:
    FieldCreateDocumentFieldsFieldMetaRadioRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaRadioRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaRadioRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaRadioRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaRadioRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaRadioRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaRadioRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldRadio$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeRadioRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaRadioRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaRadioRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldRadio$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldRadio
> = z.object({
  type: FieldCreateDocumentFieldsTypeRadioRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaRadioRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldRadio$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldRadio$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldRadio$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldRadio$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldRadio$Outbound;
}

export function fieldCreateDocumentFieldsFieldRadioToJSON(
  fieldCreateDocumentFieldsFieldRadio: FieldCreateDocumentFieldsFieldRadio,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldRadio$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldRadio,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeNumberRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNumberRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeNumberRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeNumberRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNumberRequest1> =
    FieldCreateDocumentFieldsTypeNumberRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeNumberRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeNumberRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeNumberRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeNumberRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeNumberRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeNumberRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNumberRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeNumberRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeNumberRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNumberRequest2> =
    FieldCreateDocumentFieldsTypeNumberRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeNumberRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeNumberRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeNumberRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeNumberRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeNumberRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignNumber> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignNumber);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignNumber> =
    FieldCreateDocumentFieldsTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignNumber$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNumberRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNumberRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeNumberRequest2$inboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignNumber$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaNumberRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNumberRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNumberRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaNumberRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeNumberRequest2$outboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaNumberRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaNumberRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaNumberRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaNumberRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaNumberRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaNumberRequest:
    FieldCreateDocumentFieldsFieldMetaNumberRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaNumberRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaNumberRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaNumberRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaNumberRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaNumberRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaNumberRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldNumber$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeNumberRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaNumberRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaNumberRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldNumber$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldNumber
> = z.object({
  type: FieldCreateDocumentFieldsTypeNumberRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaNumberRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldNumber$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldNumber$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldNumber$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldNumber$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldNumber$Outbound;
}

export function fieldCreateDocumentFieldsFieldNumberToJSON(
  fieldCreateDocumentFieldsFieldNumber: FieldCreateDocumentFieldsFieldNumber,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldNumber$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldNumber,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeTextRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeTextRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeTextRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeTextRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeTextRequest1> =
    FieldCreateDocumentFieldsTypeTextRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeTextRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeTextRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeTextRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeTextRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeTextRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeTextRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeTextRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeTextRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeTextRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeTextRequest2> =
    FieldCreateDocumentFieldsTypeTextRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeTextRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeTextRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeTextRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeTextRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeTextRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignText> = z.nativeEnum(
    FieldCreateDocumentFieldsTextAlignText,
  );

/** @internal */
export const FieldCreateDocumentFieldsTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignText> =
    FieldCreateDocumentFieldsTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignText$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignText$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignText$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTextRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaTextRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeTextRequest2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaTextRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTextRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaTextRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaTextRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeTextRequest2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTextRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTextRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTextRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextRequest$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMetaTextRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaTextRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaTextRequest:
    FieldCreateDocumentFieldsFieldMetaTextRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaTextRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaTextRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaTextRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaTextRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaTextRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldText$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeTextRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaTextRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldText$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaTextRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldText$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldText$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldText
> = z.object({
  type: FieldCreateDocumentFieldsTypeTextRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaTextRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldText$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsFieldText$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldText$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldText$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldText$Outbound;
}

export function fieldCreateDocumentFieldsFieldTextToJSON(
  fieldCreateDocumentFieldsFieldText: FieldCreateDocumentFieldsFieldText,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldText$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldText,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldText' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeDateRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDateRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeDateRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeDateRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDateRequest1> =
    FieldCreateDocumentFieldsTypeDateRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeDateRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeDateRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeDateRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeDateRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeDateRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeDateRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDateRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeDateRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeDateRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeDateRequest2> =
    FieldCreateDocumentFieldsTypeDateRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeDateRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeDateRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeDateRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeDateRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeDateRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignDate> = z.nativeEnum(
    FieldCreateDocumentFieldsTextAlignDate,
  );

/** @internal */
export const FieldCreateDocumentFieldsTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignDate> =
    FieldCreateDocumentFieldsTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignDate$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignDate$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDateRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeDateRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDateRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDateRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDateRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDateRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeDateRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDateRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDateRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDateRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateRequest$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMetaDateRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDateRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaDateRequest:
    FieldCreateDocumentFieldsFieldMetaDateRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDateRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaDateRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDateRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldDate$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeDateRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDateRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldDate$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaDateRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldDate$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldDate$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldDate
> = z.object({
  type: FieldCreateDocumentFieldsTypeDateRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDateRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldDate$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsFieldDate$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldDate$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldDate$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldDate$Outbound;
}

export function fieldCreateDocumentFieldsFieldDateToJSON(
  fieldCreateDocumentFieldsFieldDate: FieldCreateDocumentFieldsFieldDate,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldDate$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldDate,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeEmailRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeEmailRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeEmailRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeEmailRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeEmailRequest1> =
    FieldCreateDocumentFieldsTypeEmailRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeEmailRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeEmailRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeEmailRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeEmailRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeEmailRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeEmailRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeEmailRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeEmailRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeEmailRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeEmailRequest2> =
    FieldCreateDocumentFieldsTypeEmailRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeEmailRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeEmailRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeEmailRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeEmailRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeEmailRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignEmail> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignEmail);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignEmail> =
    FieldCreateDocumentFieldsTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignEmail$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaEmailRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaEmailRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeEmailRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaEmailRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaEmailRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaEmailRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaEmailRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeEmailRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignEmail$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaEmailRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaEmailRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaEmailRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaEmailRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaEmailRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaEmailRequest:
    FieldCreateDocumentFieldsFieldMetaEmailRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaEmailRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaEmailRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaEmailRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaEmailRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaEmailRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldEmail$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeEmailRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaEmailRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaEmailRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldEmail$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldEmail
> = z.object({
  type: FieldCreateDocumentFieldsTypeEmailRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaEmailRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldEmail$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldEmail$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldEmail$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldEmail$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldEmail$Outbound;
}

export function fieldCreateDocumentFieldsFieldEmailToJSON(
  fieldCreateDocumentFieldsFieldEmail: FieldCreateDocumentFieldsFieldEmail,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldEmail$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldEmail,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeNameRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNameRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeNameRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeNameRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNameRequest1> =
    FieldCreateDocumentFieldsTypeNameRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeNameRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeNameRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeNameRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeNameRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeNameRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeNameRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNameRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeNameRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeNameRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeNameRequest2> =
    FieldCreateDocumentFieldsTypeNameRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeNameRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeNameRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeNameRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeNameRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeNameRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignName> = z.nativeEnum(
    FieldCreateDocumentFieldsTextAlignName,
  );

/** @internal */
export const FieldCreateDocumentFieldsTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignName> =
    FieldCreateDocumentFieldsTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignName$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignName$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignName$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNameRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNameRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeNameRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaNameRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNameRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNameRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaNameRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeNameRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaNameRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaNameRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaNameRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameRequest$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMetaNameRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaNameRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaNameRequest:
    FieldCreateDocumentFieldsFieldMetaNameRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaNameRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaNameRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaNameRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaNameRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaNameRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldName$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeNameRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaNameRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldName$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaNameRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldName$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldName$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldName
> = z.object({
  type: FieldCreateDocumentFieldsTypeNameRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaNameRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldName$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsFieldName$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldName$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldName$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldName$Outbound;
}

export function fieldCreateDocumentFieldsFieldNameToJSON(
  fieldCreateDocumentFieldsFieldName: FieldCreateDocumentFieldsFieldName,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldName$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldName,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldName' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeInitialsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeInitialsRequest1> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeInitialsRequest1);

/** @internal */
export const FieldCreateDocumentFieldsTypeInitialsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeInitialsRequest1> =
    FieldCreateDocumentFieldsTypeInitialsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeInitialsRequest1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeInitialsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeInitialsRequest1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeInitialsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeInitialsRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTypeInitialsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeInitialsRequest2> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeInitialsRequest2);

/** @internal */
export const FieldCreateDocumentFieldsTypeInitialsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeInitialsRequest2> =
    FieldCreateDocumentFieldsTypeInitialsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeInitialsRequest2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeInitialsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeInitialsRequest2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeInitialsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeInitialsRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignInitials> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignInitials);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignInitials> =
    FieldCreateDocumentFieldsTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignInitials$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaInitialsRequest$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaInitialsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeInitialsRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaInitialsRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaInitialsRequest$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaInitialsRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsTypeInitialsRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaInitialsRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaInitialsRequestToJSON(
  fieldCreateDocumentFieldsFieldMetaInitialsRequest:
    FieldCreateDocumentFieldsFieldMetaInitialsRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaInitialsRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaInitialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaInitialsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaInitialsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaInitialsRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldInitials$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeInitialsRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldMetaInitialsRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldInitials$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldInitials
> = z.object({
  type: FieldCreateDocumentFieldsTypeInitialsRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaInitialsRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldInitials$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldInitials$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldInitials$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldInitials$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldInitials$Outbound;
}

export function fieldCreateDocumentFieldsFieldInitialsToJSON(
  fieldCreateDocumentFieldsFieldInitials:
    FieldCreateDocumentFieldsFieldInitials,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldInitials$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldInitials,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeFreeSignature> = z
    .nativeEnum(FieldCreateDocumentFieldsTypeFreeSignature);

/** @internal */
export const FieldCreateDocumentFieldsTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeFreeSignature> =
    FieldCreateDocumentFieldsTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeFreeSignature$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldFreeSignature,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldCreateDocumentFieldsTypeFreeSignature$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldFreeSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldFreeSignature
  > = z.object({
    type: FieldCreateDocumentFieldsTypeFreeSignature$outboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldFreeSignature$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldFreeSignature$Outbound;
}

export function fieldCreateDocumentFieldsFieldFreeSignatureToJSON(
  fieldCreateDocumentFieldsFieldFreeSignature:
    FieldCreateDocumentFieldsFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldFreeSignature,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeSignature> = z.nativeEnum(
    FieldCreateDocumentFieldsTypeSignature,
  );

/** @internal */
export const FieldCreateDocumentFieldsTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeSignature> =
    FieldCreateDocumentFieldsTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeSignature$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeSignature$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldSignature$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateDocumentFieldsTypeSignature$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldSignature$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldSignature
> = z.object({
  type: FieldCreateDocumentFieldsTypeSignature$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldSignature$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldSignature$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldSignature$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldSignature$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldSignature$Outbound;
}

export function fieldCreateDocumentFieldsFieldSignatureToJSON(
  fieldCreateDocumentFieldsFieldSignature:
    FieldCreateDocumentFieldsFieldSignature,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldSignature$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldSignature,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldUnion$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldsFieldSignature$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldInitials$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldName$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldEmail$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldDate$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldText$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldNumber$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldRadio$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldCheckbox$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldCreateDocumentFieldsFieldUnion$Outbound =
  | FieldCreateDocumentFieldsFieldSignature$Outbound
  | FieldCreateDocumentFieldsFieldFreeSignature$Outbound
  | FieldCreateDocumentFieldsFieldInitials$Outbound
  | FieldCreateDocumentFieldsFieldName$Outbound
  | FieldCreateDocumentFieldsFieldEmail$Outbound
  | FieldCreateDocumentFieldsFieldDate$Outbound
  | FieldCreateDocumentFieldsFieldText$Outbound
  | FieldCreateDocumentFieldsFieldNumber$Outbound
  | FieldCreateDocumentFieldsFieldRadio$Outbound
  | FieldCreateDocumentFieldsFieldCheckbox$Outbound
  | FieldCreateDocumentFieldsFieldDropdown$Outbound;

/** @internal */
export const FieldCreateDocumentFieldsFieldUnion$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldUnion
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldsFieldSignature$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldInitials$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldName$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldEmail$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldDate$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldText$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldNumber$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldRadio$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldCheckbox$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldUnion$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldUnion$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldUnion$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldUnion$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldUnion$Outbound;
}

export function fieldCreateDocumentFieldsFieldUnionToJSON(
  fieldCreateDocumentFieldsFieldUnion: FieldCreateDocumentFieldsFieldUnion,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldUnion$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldUnion,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsRequest$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateDocumentFieldsFieldSignature$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldFreeSignature$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldInitials$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldName$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldEmail$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldDate$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldText$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldNumber$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldRadio$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldCheckbox$inboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldDropdown$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateDocumentFieldsRequest$Outbound = {
  documentId: number;
  fields: Array<
    | FieldCreateDocumentFieldsFieldSignature$Outbound
    | FieldCreateDocumentFieldsFieldFreeSignature$Outbound
    | FieldCreateDocumentFieldsFieldInitials$Outbound
    | FieldCreateDocumentFieldsFieldName$Outbound
    | FieldCreateDocumentFieldsFieldEmail$Outbound
    | FieldCreateDocumentFieldsFieldDate$Outbound
    | FieldCreateDocumentFieldsFieldText$Outbound
    | FieldCreateDocumentFieldsFieldNumber$Outbound
    | FieldCreateDocumentFieldsFieldRadio$Outbound
    | FieldCreateDocumentFieldsFieldCheckbox$Outbound
    | FieldCreateDocumentFieldsFieldDropdown$Outbound
  >;
};

/** @internal */
export const FieldCreateDocumentFieldsRequest$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsRequest$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsRequest
> = z.object({
  documentId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateDocumentFieldsFieldSignature$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldFreeSignature$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldInitials$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldName$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldEmail$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldDate$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldText$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldNumber$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldRadio$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldCheckbox$outboundSchema),
      z.lazy(() => FieldCreateDocumentFieldsFieldDropdown$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsRequest$ {
  /** @deprecated use `FieldCreateDocumentFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsRequest$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = FieldCreateDocumentFieldsRequest$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsRequest$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsRequest$Outbound;
}

export function fieldCreateDocumentFieldsRequestToJSON(
  fieldCreateDocumentFieldsRequest: FieldCreateDocumentFieldsRequest,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsRequest$outboundSchema.parse(
      fieldCreateDocumentFieldsRequest,
    ),
  );
}

export function fieldCreateDocumentFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateDocumentFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeResponse> = z.nativeEnum(
    FieldCreateDocumentFieldsTypeResponse,
  );

/** @internal */
export const FieldCreateDocumentFieldsTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTypeResponse> =
    FieldCreateDocumentFieldsTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTypeResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTypeResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTypeResponse$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeDropdown> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeDropdown);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeDropdown> =
    FieldCreateDocumentFieldsFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueResponse3$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueResponse3$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueResponse3$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueResponse3$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueResponse3$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse3$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueResponse3$Outbound;
}

export function fieldCreateDocumentFieldsValueResponse3ToJSON(
  fieldCreateDocumentFieldsValueResponse3:
    FieldCreateDocumentFieldsValueResponse3,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueResponse3$outboundSchema.parse(
      fieldCreateDocumentFieldsValueResponse3,
    ),
  );
}

export function fieldCreateDocumentFieldsValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsValueResponse3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueResponse3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDropdownResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaDropdownResponse:
    FieldCreateDocumentFieldsFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaDropdownResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeCheckbox);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeCheckbox> =
    FieldCreateDocumentFieldsFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueResponse2$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueResponse2$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueResponse2$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueResponse2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueResponse2$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse2$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueResponse2$Outbound;
}

export function fieldCreateDocumentFieldsValueResponse2ToJSON(
  fieldCreateDocumentFieldsValueResponse2:
    FieldCreateDocumentFieldsValueResponse2,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueResponse2$outboundSchema.parse(
      fieldCreateDocumentFieldsValueResponse2,
    ),
  );
}

export function fieldCreateDocumentFieldsValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsValueResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsDirectionResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsDirectionResponse> = z
    .nativeEnum(FieldCreateDocumentFieldsDirectionResponse);

/** @internal */
export const FieldCreateDocumentFieldsDirectionResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsDirectionResponse> =
    FieldCreateDocumentFieldsDirectionResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsDirectionResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsDirectionResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsDirectionResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsDirectionResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsDirectionResponse$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: FieldCreateDocumentFieldsDirectionResponse$inboundSchema.default(
      "vertical",
    ),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: FieldCreateDocumentFieldsDirectionResponse$outboundSchema
      .default("vertical"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaCheckboxResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaCheckboxResponse:
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeRadio> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeRadio);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeRadio> =
    FieldCreateDocumentFieldsFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeRadio$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsValueResponse1$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsValueResponse1$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsValueResponse1$ {
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsValueResponse1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsValueResponse1$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsValueResponse1$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsValueResponse1$Outbound;
}

export function fieldCreateDocumentFieldsValueResponse1ToJSON(
  fieldCreateDocumentFieldsValueResponse1:
    FieldCreateDocumentFieldsValueResponse1,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsValueResponse1$outboundSchema.parse(
      fieldCreateDocumentFieldsValueResponse1,
    ),
  );
}

export function fieldCreateDocumentFieldsValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsValueResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsValueResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaRadioResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaRadioResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaRadioResponse:
    FieldCreateDocumentFieldsFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaRadioResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeNumber> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeNumber);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeNumber> =
    FieldCreateDocumentFieldsFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeNumber$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse6> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse6);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse6> =
    FieldCreateDocumentFieldsTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse6$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaNumberResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaNumberResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaNumberResponse:
    FieldCreateDocumentFieldsFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaNumberResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeText> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeText);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeText> =
    FieldCreateDocumentFieldsFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeText$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse5> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse5);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse5> =
    FieldCreateDocumentFieldsTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse5$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTextResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaTextResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaTextResponse:
    FieldCreateDocumentFieldsFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaTextResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeDate> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeDate);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeDate> =
    FieldCreateDocumentFieldsFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeDate$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse4> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse4);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse4> =
    FieldCreateDocumentFieldsTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse4$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDateResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDateResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaDateResponse:
    FieldCreateDocumentFieldsFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaDateResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeEmail> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeEmail);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeEmail> =
    FieldCreateDocumentFieldsFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeEmail$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse3> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse3);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse3> =
    FieldCreateDocumentFieldsTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse3$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaEmailResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaEmailResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaEmailResponse:
    FieldCreateDocumentFieldsFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaEmailResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeName> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeName);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeName> =
    FieldCreateDocumentFieldsFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeName$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse2> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse2);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse2> =
    FieldCreateDocumentFieldsTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse2$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaNameResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaNameResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaNameResponse:
    FieldCreateDocumentFieldsFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaNameResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeInitials> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldMetaTypeInitials);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaTypeInitials> =
    FieldCreateDocumentFieldsFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaTypeInitials$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse1> = z
    .nativeEnum(FieldCreateDocumentFieldsTextAlignResponse1);

/** @internal */
export const FieldCreateDocumentFieldsTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsTextAlignResponse1> =
    FieldCreateDocumentFieldsTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsTextAlignResponse1$ {
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateDocumentFieldsFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateDocumentFieldsTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaInitialsResponseToJSON(
  fieldCreateDocumentFieldsFieldMetaInitialsResponse:
    FieldCreateDocumentFieldsFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaInitialsResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaUnion$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema
  ),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema),
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema
  ),
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema
  ),
]);

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaUnion$Outbound =
  | FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound
  | FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound;

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaUnion$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMetaUnion
> = z.union([
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaUnion$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMetaUnion$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaUnionToJSON(
  fieldCreateDocumentFieldsFieldMetaUnion:
    FieldCreateDocumentFieldsFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaUnion$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaUnion,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldResponse$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: FieldCreateDocumentFieldsTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaNameResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaDateResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaTextResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaNumberResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaDropdownResponse$inboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldResponse$Outbound = {
  envelopeId: string;
  envelopeItemId: string;
  type: string;
  id: number;
  secondaryId: string;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldsFieldMetaInitialsResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaNameResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaEmailResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaDateResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaTextResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaNumberResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaRadioResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaCheckboxResponse$Outbound
    | FieldCreateDocumentFieldsFieldMetaDropdownResponse$Outbound
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldResponse$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldResponse
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: FieldCreateDocumentFieldsTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaNumberResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldMetaDropdownResponse$outboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldResponse$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldResponse$Outbound;
}

export function fieldCreateDocumentFieldsFieldResponseToJSON(
  fieldCreateDocumentFieldsFieldResponse:
    FieldCreateDocumentFieldsFieldResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsResponse$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateDocumentFieldsFieldResponse$inboundSchema),
  ),
});

/** @internal */
export type FieldCreateDocumentFieldsResponse$Outbound = {
  fields: Array<FieldCreateDocumentFieldsFieldResponse$Outbound>;
};

/** @internal */
export const FieldCreateDocumentFieldsResponse$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsResponse
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateDocumentFieldsFieldResponse$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsResponse$ {
  /** @deprecated use `FieldCreateDocumentFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsResponse$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsResponse$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsResponse$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsResponse$Outbound;
}

export function fieldCreateDocumentFieldsResponseToJSON(
  fieldCreateDocumentFieldsResponse: FieldCreateDocumentFieldsResponse,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsResponse$outboundSchema.parse(
      fieldCreateDocumentFieldsResponse,
    ),
  );
}

export function fieldCreateDocumentFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateDocumentFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsResponse' from JSON`,
  );
}
