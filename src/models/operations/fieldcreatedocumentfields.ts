/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type =
  {
    Dropdown: "DROPDOWN",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues = {
  value: string;
};

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType;
    values?:
      | Array<FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues>
      | undefined;
    defaultValue?: string | undefined;
  };

export type Fields11 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type =
  {
    Checkbox: "CHECKBOX",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType;
    values?:
      | Array<FieldCreateDocumentFieldsFieldsDocumentsFieldsValues>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

export type Fields10 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type =
  {
    Radio: "RADIO",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType;
    values?: Array<FieldCreateDocumentFieldsFieldsValues> | undefined;
  };

export type Fields9 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type =
  {
    Number: "NUMBER",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType =
  {
    Number: "number",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

export type Fields8 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type =
  {
    Text: "TEXT",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType =
  {
    Text: "text",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

export type Fields7 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type =
  {
    Date: "DATE",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType =
  {
    Date: "date",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType;
    fontSize?: number | undefined;
  };

export type Fields6 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type =
  {
    Email: "EMAIL",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType =
  {
    Email: "email",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType;
  fontSize?: number | undefined;
};

export type Fields5 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type =
  {
    Name: "NAME",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type
  >;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType =
  {
    Name: "name",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType
  >;

export type FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType;
  fontSize?: number | undefined;
};

export type Fields4 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType = {
  Initials: "INITIALS",
} as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType =
  ClosedEnum<typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType>;

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType =
  {
    Initials: "initials",
  } as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType
  >;

export type FieldCreateDocumentFieldsFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType;
  fontSize?: number | undefined;
};

export type Fields3 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType;
  fieldMeta?: FieldCreateDocumentFieldsFieldsFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsDocumentsFieldsType = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsType
>;

export type Fields2 = {
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateDocumentFieldsFieldsType = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateDocumentFieldsFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldsType
>;

export type Fields1 = {
  type: FieldCreateDocumentFieldsFieldsType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateDocumentFieldsFields =
  | Fields1
  | Fields2
  | Fields3
  | Fields4
  | Fields5
  | Fields6
  | Fields7
  | Fields8
  | Fields9
  | Fields10
  | Fields11;

export type FieldCreateDocumentFieldsRequestBody = {
  documentId: number;
  fields: Array<
    | Fields1
    | Fields2
    | Fields3
    | Fields4
    | Fields5
    | Fields6
    | Fields7
    | Fields8
    | Fields9
    | Fields10
    | Fields11
  >;
};

export const FieldCreateDocumentFieldsType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateDocumentFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldsType
>;

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type
  >;

export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues = {
  value: string;
};

export type FieldCreateDocumentFieldsFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type;
  values?:
    | Array<FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type
  >;

export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type;
  values?:
    | Array<FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType
  >;

export type FieldCreateDocumentFieldsFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateDocumentFieldsFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType;
  values?: Array<FieldCreateDocumentFieldsFieldMetaValues> | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldCreateDocumentFieldsFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  >;

export type FieldCreateDocumentFieldsFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type =
  {
    Date: "date",
  } as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type
  >;

export type FieldCreateDocumentFieldsFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType = {
  Email: "email",
} as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType =
  ClosedEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType
  >;

export type FieldCreateDocumentFieldsFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType = {
  Name: "name",
} as const;
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType
>;

export type FieldCreateDocumentFieldsFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType;
  fontSize?: number | undefined;
};

export const FieldCreateDocumentFieldsFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldCreateDocumentFieldsFieldMetaType = ClosedEnum<
  typeof FieldCreateDocumentFieldsFieldMetaType
>;

export type FieldCreateDocumentFieldsFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateDocumentFieldsFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateDocumentFieldsFieldMeta =
  | FieldCreateDocumentFieldsFieldMeta1
  | FieldCreateDocumentFieldsFieldMeta2
  | FieldCreateDocumentFieldsFieldMeta3
  | FieldCreateDocumentFieldsFieldMeta4
  | FieldCreateDocumentFieldsFieldMeta7
  | FieldCreateDocumentFieldsFieldMeta9
  | FieldCreateDocumentFieldsFieldMeta5
  | FieldCreateDocumentFieldsFieldMeta8
  | FieldCreateDocumentFieldsFieldMeta6;

export type FieldCreateDocumentFieldsDocumentsFieldsFields = {
  type: FieldCreateDocumentFieldsType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldsFieldMeta1
    | FieldCreateDocumentFieldsFieldMeta2
    | FieldCreateDocumentFieldsFieldMeta3
    | FieldCreateDocumentFieldsFieldMeta4
    | FieldCreateDocumentFieldsFieldMeta7
    | FieldCreateDocumentFieldsFieldMeta9
    | FieldCreateDocumentFieldsFieldMeta5
    | FieldCreateDocumentFieldsFieldMeta8
    | FieldCreateDocumentFieldsFieldMeta6
    | null;
};

/**
 * Successful response
 */
export type FieldCreateDocumentFieldsResponseBody = {
  fields: Array<FieldCreateDocumentFieldsDocumentsFieldsFields>;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValuesToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$outboundSchema
      .parse(fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<
        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$Outbound
      >
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields11$inboundSchema: z.ZodType<
  Fields11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type Fields11$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields11$outboundSchema: z.ZodType<
  Fields11$Outbound,
  z.ZodTypeDef,
  Fields11
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody11FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields11$ {
  /** @deprecated use `Fields11$inboundSchema` instead. */
  export const inboundSchema = Fields11$inboundSchema;
  /** @deprecated use `Fields11$outboundSchema` instead. */
  export const outboundSchema = Fields11$outboundSchema;
  /** @deprecated use `Fields11$Outbound` instead. */
  export type Outbound = Fields11$Outbound;
}

export function fields11ToJSON(fields11: Fields11): string {
  return JSON.stringify(Fields11$outboundSchema.parse(fields11));
}

export function fields11FromJSON(
  jsonString: string,
): SafeParseResult<Fields11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields11' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsValuesToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsValues:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldsDocumentsFieldsValues,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$inboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$Outbound>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateDocumentFieldsFieldsDocumentsFieldsValues$outboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields10$inboundSchema: z.ZodType<
  Fields10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type Fields10$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields10$outboundSchema: z.ZodType<
  Fields10$Outbound,
  z.ZodTypeDef,
  Fields10
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody10FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields10$ {
  /** @deprecated use `Fields10$inboundSchema` instead. */
  export const inboundSchema = Fields10$inboundSchema;
  /** @deprecated use `Fields10$outboundSchema` instead. */
  export const outboundSchema = Fields10$outboundSchema;
  /** @deprecated use `Fields10$Outbound` instead. */
  export type Outbound = Fields10$Outbound;
}

export function fields10ToJSON(fields10: Fields10): string {
  return JSON.stringify(Fields10$outboundSchema.parse(fields10));
}

export function fields10FromJSON(
  jsonString: string,
): SafeParseResult<Fields10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields10' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsValues$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldsValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldsValues$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldsValues$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldsValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsValues$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldsValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldsValuesToJSON(
  fieldCreateDocumentFieldsFieldsValues: FieldCreateDocumentFieldsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsValues$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldsValues,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldsValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsFieldsValues$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldCreateDocumentFieldsFieldsValues$Outbound> | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateDocumentFieldsFieldsValues$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields9$inboundSchema: z.ZodType<Fields9, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields9$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields9$outboundSchema: z.ZodType<
  Fields9$Outbound,
  z.ZodTypeDef,
  Fields9
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody9FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields9$ {
  /** @deprecated use `Fields9$inboundSchema` instead. */
  export const inboundSchema = Fields9$inboundSchema;
  /** @deprecated use `Fields9$outboundSchema` instead. */
  export const outboundSchema = Fields9$outboundSchema;
  /** @deprecated use `Fields9$Outbound` instead. */
  export type Outbound = Fields9$Outbound;
}

export function fields9ToJSON(fields9: Fields9): string {
  return JSON.stringify(Fields9$outboundSchema.parse(fields9));
}

export function fields9FromJSON(
  jsonString: string,
): SafeParseResult<Fields9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields9' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields8$inboundSchema: z.ZodType<Fields8, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields8$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields8$outboundSchema: z.ZodType<
  Fields8$Outbound,
  z.ZodTypeDef,
  Fields8
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody8FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields8$ {
  /** @deprecated use `Fields8$inboundSchema` instead. */
  export const inboundSchema = Fields8$inboundSchema;
  /** @deprecated use `Fields8$outboundSchema` instead. */
  export const outboundSchema = Fields8$outboundSchema;
  /** @deprecated use `Fields8$Outbound` instead. */
  export type Outbound = Fields8$Outbound;
}

export function fields8ToJSON(fields8: Fields8): string {
  return JSON.stringify(Fields8$outboundSchema.parse(fields8));
}

export function fields8FromJSON(
  jsonString: string,
): SafeParseResult<Fields8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields8' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields7$inboundSchema: z.ZodType<Fields7, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields7$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields7$outboundSchema: z.ZodType<
  Fields7$Outbound,
  z.ZodTypeDef,
  Fields7
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody7FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields7$ {
  /** @deprecated use `Fields7$inboundSchema` instead. */
  export const inboundSchema = Fields7$inboundSchema;
  /** @deprecated use `Fields7$outboundSchema` instead. */
  export const outboundSchema = Fields7$outboundSchema;
  /** @deprecated use `Fields7$Outbound` instead. */
  export type Outbound = Fields7$Outbound;
}

export function fields7ToJSON(fields7: Fields7): string {
  return JSON.stringify(Fields7$outboundSchema.parse(fields7));
}

export function fields7FromJSON(
  jsonString: string,
): SafeParseResult<Fields7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields7' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema
      .parse(
        fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta,
      ),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields6$inboundSchema: z.ZodType<Fields6, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields6$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields6$outboundSchema: z.ZodType<
  Fields6$Outbound,
  z.ZodTypeDef,
  Fields6
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody6Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields6$ {
  /** @deprecated use `Fields6$inboundSchema` instead. */
  export const inboundSchema = Fields6$inboundSchema;
  /** @deprecated use `Fields6$outboundSchema` instead. */
  export const outboundSchema = Fields6$outboundSchema;
  /** @deprecated use `Fields6$Outbound` instead. */
  export type Outbound = Fields6$Outbound;
}

export function fields6ToJSON(fields6: Fields6): string {
  return JSON.stringify(Fields6$outboundSchema.parse(fields6));
}

export function fields6FromJSON(
  jsonString: string,
): SafeParseResult<Fields6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields6' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$outboundSchema
      .parse(fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields5$inboundSchema: z.ZodType<Fields5, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields5$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields5$outboundSchema: z.ZodType<
  Fields5$Outbound,
  z.ZodTypeDef,
  Fields5
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody5Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields5$ {
  /** @deprecated use `Fields5$inboundSchema` instead. */
  export const inboundSchema = Fields5$inboundSchema;
  /** @deprecated use `Fields5$outboundSchema` instead. */
  export const outboundSchema = Fields5$outboundSchema;
  /** @deprecated use `Fields5$Outbound` instead. */
  export type Outbound = Fields5$Outbound;
}

export function fields5ToJSON(fields5: Fields5): string {
  return JSON.stringify(Fields5$outboundSchema.parse(fields5));
}

export function fields5FromJSON(
  jsonString: string,
): SafeParseResult<Fields5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields5' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$outboundSchema
      .parse(fieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta),
  );
}

export function fieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields4$inboundSchema: z.ZodType<Fields4, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields4$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields4$outboundSchema: z.ZodType<
  Fields4$Outbound,
  z.ZodTypeDef,
  Fields4
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBody4Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsDocumentsFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields4$ {
  /** @deprecated use `Fields4$inboundSchema` instead. */
  export const inboundSchema = Fields4$inboundSchema;
  /** @deprecated use `Fields4$outboundSchema` instead. */
  export const outboundSchema = Fields4$outboundSchema;
  /** @deprecated use `Fields4$Outbound` instead. */
  export type Outbound = Fields4$Outbound;
}

export function fields4ToJSON(fields4: Fields4): string {
  return JSON.stringify(Fields4$outboundSchema.parse(fields4));
}

export function fields4FromJSON(
  jsonString: string,
): SafeParseResult<Fields4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields4' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType
  > = z.nativeEnum(FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType);

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType
  > = FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType
  > =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldsFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestRequestBodyType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldsFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldsFieldMetaToJSON(
  fieldCreateDocumentFieldsFieldsFieldMeta:
    FieldCreateDocumentFieldsFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldsFieldMeta$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldsFieldMeta,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldsFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const Fields3$inboundSchema: z.ZodType<Fields3, z.ZodTypeDef, unknown> =
  z.object({
    type:
      FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$inboundSchema,
    fieldMeta: z.lazy(() =>
      FieldCreateDocumentFieldsFieldsFieldMeta$inboundSchema
    ).optional(),
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields3$Outbound = {
  type: string;
  fieldMeta?: FieldCreateDocumentFieldsFieldsFieldMeta$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields3$outboundSchema: z.ZodType<
  Fields3$Outbound,
  z.ZodTypeDef,
  Fields3
> = z.object({
  type:
    FieldCreateDocumentFieldsFieldsDocumentsFieldsRequestType$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateDocumentFieldsFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields3$ {
  /** @deprecated use `Fields3$inboundSchema` instead. */
  export const inboundSchema = Fields3$inboundSchema;
  /** @deprecated use `Fields3$outboundSchema` instead. */
  export const outboundSchema = Fields3$outboundSchema;
  /** @deprecated use `Fields3$Outbound` instead. */
  export type Outbound = Fields3$Outbound;
}

export function fields3ToJSON(fields3: Fields3): string {
  return JSON.stringify(Fields3$outboundSchema.parse(fields3));
}

export function fields3FromJSON(
  jsonString: string,
): SafeParseResult<Fields3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields3' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsType> = z
    .nativeEnum(FieldCreateDocumentFieldsFieldsDocumentsFieldsType);

/** @internal */
export const FieldCreateDocumentFieldsFieldsDocumentsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldsDocumentsFieldsType> =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsDocumentsFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsDocumentsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsDocumentsFieldsType$outboundSchema;
}

/** @internal */
export const Fields2$inboundSchema: z.ZodType<Fields2, z.ZodTypeDef, unknown> =
  z.object({
    type: FieldCreateDocumentFieldsFieldsDocumentsFieldsType$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields2$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields2$outboundSchema: z.ZodType<
  Fields2$Outbound,
  z.ZodTypeDef,
  Fields2
> = z.object({
  type: FieldCreateDocumentFieldsFieldsDocumentsFieldsType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields2$ {
  /** @deprecated use `Fields2$inboundSchema` instead. */
  export const inboundSchema = Fields2$inboundSchema;
  /** @deprecated use `Fields2$outboundSchema` instead. */
  export const outboundSchema = Fields2$outboundSchema;
  /** @deprecated use `Fields2$Outbound` instead. */
  export type Outbound = Fields2$Outbound;
}

export function fields2ToJSON(fields2: Fields2): string {
  return JSON.stringify(Fields2$outboundSchema.parse(fields2));
}

export function fields2FromJSON(
  jsonString: string,
): SafeParseResult<Fields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields2' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldsFieldsType
> = z.nativeEnum(FieldCreateDocumentFieldsFieldsType);

/** @internal */
export const FieldCreateDocumentFieldsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldsType> =
    FieldCreateDocumentFieldsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldsType$outboundSchema;
}

/** @internal */
export const Fields1$inboundSchema: z.ZodType<Fields1, z.ZodTypeDef, unknown> =
  z.object({
    type: FieldCreateDocumentFieldsFieldsType$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type Fields1$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const Fields1$outboundSchema: z.ZodType<
  Fields1$Outbound,
  z.ZodTypeDef,
  Fields1
> = z.object({
  type: FieldCreateDocumentFieldsFieldsType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fields1$ {
  /** @deprecated use `Fields1$inboundSchema` instead. */
  export const inboundSchema = Fields1$inboundSchema;
  /** @deprecated use `Fields1$outboundSchema` instead. */
  export const outboundSchema = Fields1$outboundSchema;
  /** @deprecated use `Fields1$Outbound` instead. */
  export type Outbound = Fields1$Outbound;
}

export function fields1ToJSON(fields1: Fields1): string {
  return JSON.stringify(Fields1$outboundSchema.parse(fields1));
}

export function fields1FromJSON(
  jsonString: string,
): SafeParseResult<Fields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fields1' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFields$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Fields1$inboundSchema),
  z.lazy(() => Fields2$inboundSchema),
  z.lazy(() => Fields3$inboundSchema),
  z.lazy(() => Fields4$inboundSchema),
  z.lazy(() => Fields5$inboundSchema),
  z.lazy(() => Fields6$inboundSchema),
  z.lazy(() => Fields7$inboundSchema),
  z.lazy(() => Fields8$inboundSchema),
  z.lazy(() => Fields9$inboundSchema),
  z.lazy(() => Fields10$inboundSchema),
  z.lazy(() => Fields11$inboundSchema),
]);

/** @internal */
export type FieldCreateDocumentFieldsFields$Outbound =
  | Fields1$Outbound
  | Fields2$Outbound
  | Fields3$Outbound
  | Fields4$Outbound
  | Fields5$Outbound
  | Fields6$Outbound
  | Fields7$Outbound
  | Fields8$Outbound
  | Fields9$Outbound
  | Fields10$Outbound
  | Fields11$Outbound;

/** @internal */
export const FieldCreateDocumentFieldsFields$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFields$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFields
> = z.union([
  z.lazy(() => Fields1$outboundSchema),
  z.lazy(() => Fields2$outboundSchema),
  z.lazy(() => Fields3$outboundSchema),
  z.lazy(() => Fields4$outboundSchema),
  z.lazy(() => Fields5$outboundSchema),
  z.lazy(() => Fields6$outboundSchema),
  z.lazy(() => Fields7$outboundSchema),
  z.lazy(() => Fields8$outboundSchema),
  z.lazy(() => Fields9$outboundSchema),
  z.lazy(() => Fields10$outboundSchema),
  z.lazy(() => Fields11$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFields$ {
  /** @deprecated use `FieldCreateDocumentFieldsFields$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsFields$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFields$outboundSchema` instead. */
  export const outboundSchema = FieldCreateDocumentFieldsFields$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFields$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFields$Outbound;
}

export function fieldCreateDocumentFieldsFieldsToJSON(
  fieldCreateDocumentFieldsFields: FieldCreateDocumentFieldsFields,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFields$outboundSchema.parse(
      fieldCreateDocumentFieldsFields,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateDocumentFieldsFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsRequestBody$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => Fields1$inboundSchema),
      z.lazy(() => Fields2$inboundSchema),
      z.lazy(() => Fields3$inboundSchema),
      z.lazy(() => Fields4$inboundSchema),
      z.lazy(() => Fields5$inboundSchema),
      z.lazy(() => Fields6$inboundSchema),
      z.lazy(() => Fields7$inboundSchema),
      z.lazy(() => Fields8$inboundSchema),
      z.lazy(() => Fields9$inboundSchema),
      z.lazy(() => Fields10$inboundSchema),
      z.lazy(() => Fields11$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateDocumentFieldsRequestBody$Outbound = {
  documentId: number;
  fields: Array<
    | Fields1$Outbound
    | Fields2$Outbound
    | Fields3$Outbound
    | Fields4$Outbound
    | Fields5$Outbound
    | Fields6$Outbound
    | Fields7$Outbound
    | Fields8$Outbound
    | Fields9$Outbound
    | Fields10$Outbound
    | Fields11$Outbound
  >;
};

/** @internal */
export const FieldCreateDocumentFieldsRequestBody$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsRequestBody$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsRequestBody
> = z.object({
  documentId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => Fields1$outboundSchema),
      z.lazy(() => Fields2$outboundSchema),
      z.lazy(() => Fields3$outboundSchema),
      z.lazy(() => Fields4$outboundSchema),
      z.lazy(() => Fields5$outboundSchema),
      z.lazy(() => Fields6$outboundSchema),
      z.lazy(() => Fields7$outboundSchema),
      z.lazy(() => Fields8$outboundSchema),
      z.lazy(() => Fields9$outboundSchema),
      z.lazy(() => Fields10$outboundSchema),
      z.lazy(() => Fields11$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsRequestBody$ {
  /** @deprecated use `FieldCreateDocumentFieldsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsRequestBody$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsRequestBody$Outbound;
}

export function fieldCreateDocumentFieldsRequestBodyToJSON(
  fieldCreateDocumentFieldsRequestBody: FieldCreateDocumentFieldsRequestBody,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsRequestBody$outboundSchema.parse(
      fieldCreateDocumentFieldsRequestBody,
    ),
  );
}

export function fieldCreateDocumentFieldsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldsType
> = z.nativeEnum(FieldCreateDocumentFieldsType);

/** @internal */
export const FieldCreateDocumentFieldsType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateDocumentFieldsType
> = FieldCreateDocumentFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldsType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsType$outboundSchema` instead. */
  export const outboundSchema = FieldCreateDocumentFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValuesToJSON(
  fieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$outboundSchema
      .parse(fieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta9$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta9$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta9$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta9$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta9$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta9$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta9$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta9$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta9ToJSON(
  fieldCreateDocumentFieldsFieldMeta9: FieldCreateDocumentFieldsFieldMeta9,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta9$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta9,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaDocumentsFieldsValuesToJSON(
  fieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$outboundSchema
      .parse(fieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues),
  );
}

export function fieldCreateDocumentFieldsFieldMetaDocumentsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta8$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta8$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateDocumentFieldsFieldMetaDocumentsFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta8$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta8$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta8$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta8$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta8$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta8$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta8ToJSON(
  fieldCreateDocumentFieldsFieldMeta8: FieldCreateDocumentFieldsFieldMeta8,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta8$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta8,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaValues$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaValues$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaValues$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMetaValues$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaValuesToJSON(
  fieldCreateDocumentFieldsFieldMetaValues:
    FieldCreateDocumentFieldsFieldMetaValues,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMetaValues$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMetaValues,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta7$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateDocumentFieldsFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateDocumentFieldsFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta7$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateDocumentFieldsFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta7$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta7$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta7$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta7$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta7$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta7$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta7ToJSON(
  fieldCreateDocumentFieldsFieldMeta7: FieldCreateDocumentFieldsFieldMeta7,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta7$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta7,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta6$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta6$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta6$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta6$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta6$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta6$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta6$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta6ToJSON(
  fieldCreateDocumentFieldsFieldMeta6: FieldCreateDocumentFieldsFieldMeta6,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta6$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta6,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta5$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta5$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta5$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta5$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta5$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta5$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta5$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta5ToJSON(
  fieldCreateDocumentFieldsFieldMeta5: FieldCreateDocumentFieldsFieldMeta5,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta5$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta5,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta4$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta4$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta4$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta4$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta4$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta4$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta4$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta4ToJSON(
  fieldCreateDocumentFieldsFieldMeta4: FieldCreateDocumentFieldsFieldMeta4,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta4$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta4,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType
  > = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType
  > =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta3$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta3$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta3$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta3$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta3$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta3$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta3$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta3ToJSON(
  fieldCreateDocumentFieldsFieldMeta3: FieldCreateDocumentFieldsFieldMeta3,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta3$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta3,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType
  > = z.nativeEnum(FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType);

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType
  > = FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta2$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta2$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldsFieldMetaDocumentsFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta2$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta2$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta2$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta2$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta2$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta2ToJSON(
  fieldCreateDocumentFieldsFieldMeta2: FieldCreateDocumentFieldsFieldMeta2,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta2$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta2,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaType> = z.nativeEnum(
    FieldCreateDocumentFieldsFieldMetaType,
  );

/** @internal */
export const FieldCreateDocumentFieldsFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateDocumentFieldsFieldMetaType> =
    FieldCreateDocumentFieldsFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMetaType$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta1$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldsFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta1$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateDocumentFieldsFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta1$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsFieldMeta1$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta1$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta1$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta1$Outbound;
}

export function fieldCreateDocumentFieldsFieldMeta1ToJSON(
  fieldCreateDocumentFieldsFieldMeta1: FieldCreateDocumentFieldsFieldMeta1,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta1$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta1,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta1$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta2$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta3$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta4$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta7$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta9$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta5$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta8$inboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldCreateDocumentFieldsFieldMeta$Outbound =
  | FieldCreateDocumentFieldsFieldMeta1$Outbound
  | FieldCreateDocumentFieldsFieldMeta2$Outbound
  | FieldCreateDocumentFieldsFieldMeta3$Outbound
  | FieldCreateDocumentFieldsFieldMeta4$Outbound
  | FieldCreateDocumentFieldsFieldMeta7$Outbound
  | FieldCreateDocumentFieldsFieldMeta9$Outbound
  | FieldCreateDocumentFieldsFieldMeta5$Outbound
  | FieldCreateDocumentFieldsFieldMeta8$Outbound
  | FieldCreateDocumentFieldsFieldMeta6$Outbound;

/** @internal */
export const FieldCreateDocumentFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsFieldMeta
> = z.union([
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta1$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta2$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta3$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta4$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta7$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta9$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta5$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta8$outboundSchema),
  z.lazy(() => FieldCreateDocumentFieldsFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldCreateDocumentFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsFieldMeta$Outbound;
}

export function fieldCreateDocumentFieldsFieldMetaToJSON(
  fieldCreateDocumentFieldsFieldMeta: FieldCreateDocumentFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsFieldMeta$outboundSchema.parse(
      fieldCreateDocumentFieldsFieldMeta,
    ),
  );
}

export function fieldCreateDocumentFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsDocumentsFieldsFields$inboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsDocumentsFieldsFields,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldCreateDocumentFieldsType$inboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta1$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta2$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta3$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta4$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta7$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta9$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta5$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta8$inboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta6$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type FieldCreateDocumentFieldsDocumentsFieldsFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateDocumentFieldsFieldMeta1$Outbound
    | FieldCreateDocumentFieldsFieldMeta2$Outbound
    | FieldCreateDocumentFieldsFieldMeta3$Outbound
    | FieldCreateDocumentFieldsFieldMeta4$Outbound
    | FieldCreateDocumentFieldsFieldMeta7$Outbound
    | FieldCreateDocumentFieldsFieldMeta9$Outbound
    | FieldCreateDocumentFieldsFieldMeta5$Outbound
    | FieldCreateDocumentFieldsFieldMeta8$Outbound
    | FieldCreateDocumentFieldsFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldCreateDocumentFieldsDocumentsFieldsFields$outboundSchema:
  z.ZodType<
    FieldCreateDocumentFieldsDocumentsFieldsFields$Outbound,
    z.ZodTypeDef,
    FieldCreateDocumentFieldsDocumentsFieldsFields
  > = z.object({
    type: FieldCreateDocumentFieldsType$outboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta1$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta2$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta3$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta4$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta7$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta9$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta5$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta8$outboundSchema),
        z.lazy(() => FieldCreateDocumentFieldsFieldMeta6$outboundSchema),
      ]),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsDocumentsFieldsFields$ {
  /** @deprecated use `FieldCreateDocumentFieldsDocumentsFieldsFields$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsDocumentsFieldsFields$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsDocumentsFieldsFields$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsDocumentsFieldsFields$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsDocumentsFieldsFields$Outbound` instead. */
  export type Outbound =
    FieldCreateDocumentFieldsDocumentsFieldsFields$Outbound;
}

export function fieldCreateDocumentFieldsDocumentsFieldsFieldsToJSON(
  fieldCreateDocumentFieldsDocumentsFieldsFields:
    FieldCreateDocumentFieldsDocumentsFieldsFields,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsDocumentsFieldsFields$outboundSchema.parse(
      fieldCreateDocumentFieldsDocumentsFieldsFields,
    ),
  );
}

export function fieldCreateDocumentFieldsDocumentsFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateDocumentFieldsDocumentsFieldsFields,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsDocumentsFieldsFields$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateDocumentFieldsDocumentsFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldCreateDocumentFieldsResponseBody$inboundSchema: z.ZodType<
  FieldCreateDocumentFieldsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateDocumentFieldsDocumentsFieldsFields$inboundSchema),
  ),
});

/** @internal */
export type FieldCreateDocumentFieldsResponseBody$Outbound = {
  fields: Array<FieldCreateDocumentFieldsDocumentsFieldsFields$Outbound>;
};

/** @internal */
export const FieldCreateDocumentFieldsResponseBody$outboundSchema: z.ZodType<
  FieldCreateDocumentFieldsResponseBody$Outbound,
  z.ZodTypeDef,
  FieldCreateDocumentFieldsResponseBody
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateDocumentFieldsDocumentsFieldsFields$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateDocumentFieldsResponseBody$ {
  /** @deprecated use `FieldCreateDocumentFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateDocumentFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateDocumentFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateDocumentFieldsResponseBody$Outbound` instead. */
  export type Outbound = FieldCreateDocumentFieldsResponseBody$Outbound;
}

export function fieldCreateDocumentFieldsResponseBodyToJSON(
  fieldCreateDocumentFieldsResponseBody: FieldCreateDocumentFieldsResponseBody,
): string {
  return JSON.stringify(
    FieldCreateDocumentFieldsResponseBody$outboundSchema.parse(
      fieldCreateDocumentFieldsResponseBody,
    ),
  );
}

export function fieldCreateDocumentFieldsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateDocumentFieldsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateDocumentFieldsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateDocumentFieldsResponseBody' from JSON`,
  );
}
