/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type =
  {
    Dropdown: "DROPDOWN",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues = {
  value: string;
};

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType;
    values?:
      | Array<FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues>
      | undefined;
    defaultValue?: string | undefined;
  };

export type FieldCreateTemplateFieldsFields11 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type =
  {
    Checkbox: "CHECKBOX",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType;
    values?:
      | Array<FieldCreateTemplateFieldsFieldsTemplatesFieldsValues>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

export type FieldCreateTemplateFieldsFields10 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type =
  {
    Radio: "RADIO",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType;
    values?: Array<FieldCreateTemplateFieldsFieldsValues> | undefined;
  };

export type FieldCreateTemplateFieldsFields9 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type =
  {
    Number: "NUMBER",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType =
  {
    Number: "number",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldsFields8 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type =
  {
    Text: "TEXT",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType =
  {
    Text: "text",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldsFields7 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type =
  {
    Date: "DATE",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType =
  {
    Date: "date",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType;
    fontSize?: number | undefined;
  };

export type FieldCreateTemplateFieldsFields6 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type =
  {
    Email: "EMAIL",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType =
  {
    Email: "email",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldsFields5 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type =
  {
    Name: "NAME",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  >;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType =
  {
    Name: "name",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  >;

export type FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldsFields4 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta
    | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType = {
  Initials: "INITIALS",
} as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType =
  ClosedEnum<typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType>;

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType =
  {
    Initials: "initials",
  } as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  >;

export type FieldCreateTemplateFieldsFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldsFields3 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType;
  fieldMeta?: FieldCreateTemplateFieldsFieldsFieldMeta | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsTemplatesFieldsType = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsType
>;

export type FieldCreateTemplateFieldsFields2 = {
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsFieldsType = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateTemplateFieldsFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldsType
>;

export type FieldCreateTemplateFieldsFields1 = {
  type: FieldCreateTemplateFieldsFieldsType;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateTemplateFieldsFields =
  | FieldCreateTemplateFieldsFields1
  | FieldCreateTemplateFieldsFields2
  | FieldCreateTemplateFieldsFields3
  | FieldCreateTemplateFieldsFields4
  | FieldCreateTemplateFieldsFields5
  | FieldCreateTemplateFieldsFields6
  | FieldCreateTemplateFieldsFields7
  | FieldCreateTemplateFieldsFields8
  | FieldCreateTemplateFieldsFields9
  | FieldCreateTemplateFieldsFields10
  | FieldCreateTemplateFieldsFields11;

export type FieldCreateTemplateFieldsRequestBody = {
  templateId: number;
  fields: Array<
    | FieldCreateTemplateFieldsFields1
    | FieldCreateTemplateFieldsFields2
    | FieldCreateTemplateFieldsFields3
    | FieldCreateTemplateFieldsFields4
    | FieldCreateTemplateFieldsFields5
    | FieldCreateTemplateFieldsFields6
    | FieldCreateTemplateFieldsFields7
    | FieldCreateTemplateFieldsFields8
    | FieldCreateTemplateFieldsFields9
    | FieldCreateTemplateFieldsFields10
    | FieldCreateTemplateFieldsFields11
  >;
};

export const FieldCreateTemplateFieldsType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldsType
>;

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  >;

export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues = {
  value: string;
};

export type FieldCreateTemplateFieldsFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type;
  values?:
    | Array<FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  >;

export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type;
  values?:
    | Array<FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  {
    Radio: "radio",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  >;

export type FieldCreateTemplateFieldsFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType;
  values?: Array<FieldCreateTemplateFieldsFieldMetaValues> | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldCreateTemplateFieldsFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  >;

export type FieldCreateTemplateFieldsFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type =
  {
    Date: "date",
  } as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  >;

export type FieldCreateTemplateFieldsFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType =
  ClosedEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  >;

export type FieldCreateTemplateFieldsFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType
>;

export type FieldCreateTemplateFieldsFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType;
  fontSize?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldsFieldMetaType = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaType
>;

export type FieldCreateTemplateFieldsFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldCreateTemplateFieldsFieldMeta =
  | FieldCreateTemplateFieldsFieldMeta1
  | FieldCreateTemplateFieldsFieldMeta2
  | FieldCreateTemplateFieldsFieldMeta3
  | FieldCreateTemplateFieldsFieldMeta4
  | FieldCreateTemplateFieldsFieldMeta7
  | FieldCreateTemplateFieldsFieldMeta9
  | FieldCreateTemplateFieldsFieldMeta5
  | FieldCreateTemplateFieldsFieldMeta8
  | FieldCreateTemplateFieldsFieldMeta6;

export type FieldCreateTemplateFieldsTemplatesFieldsFields = {
  type: FieldCreateTemplateFieldsType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldsFieldMeta1
    | FieldCreateTemplateFieldsFieldMeta2
    | FieldCreateTemplateFieldsFieldMeta3
    | FieldCreateTemplateFieldsFieldMeta4
    | FieldCreateTemplateFieldsFieldMeta7
    | FieldCreateTemplateFieldsFieldMeta9
    | FieldCreateTemplateFieldsFieldMeta5
    | FieldCreateTemplateFieldsFieldMeta8
    | FieldCreateTemplateFieldsFieldMeta6
    | null;
};

/**
 * Successful response
 */
export type FieldCreateTemplateFieldsResponseBody = {
  fields: Array<FieldCreateTemplateFieldsTemplatesFieldsFields>;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValuesToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema
      .parse(fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound
      >
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields11$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields11$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields11$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields11$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields11
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields11$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields11$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields11$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields11$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFields11$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields11$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields11$Outbound;
}

export function fieldCreateTemplateFieldsFields11ToJSON(
  fieldCreateTemplateFieldsFields11: FieldCreateTemplateFieldsFields11,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields11$outboundSchema.parse(
      fieldCreateTemplateFieldsFields11,
    ),
  );
}

export function fieldCreateTemplateFieldsFields11FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields11' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsValuesToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsValues:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldsTemplatesFieldsValues,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$Outbound>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields10$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields10$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields10$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields10$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields10
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields10$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields10$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields10$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields10$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFields10$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields10$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields10$Outbound;
}

export function fieldCreateTemplateFieldsFields10ToJSON(
  fieldCreateTemplateFieldsFields10: FieldCreateTemplateFieldsFields10,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields10$outboundSchema.parse(
      fieldCreateTemplateFieldsFields10,
    ),
  );
}

export function fieldCreateTemplateFieldsFields10FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields10' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsValues$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldsValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldsValues$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldsValues$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldsValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsValues$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldsValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldsValuesToJSON(
  fieldCreateTemplateFieldsFieldsValues: FieldCreateTemplateFieldsFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsValues$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldsValues,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldsValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsFieldsValues$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldCreateTemplateFieldsFieldsValues$Outbound> | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsFieldsValues$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields9$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields9$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields9$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields9$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields9
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields9$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields9$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields9$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields9$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields9$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields9$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields9$Outbound;
}

export function fieldCreateTemplateFieldsFields9ToJSON(
  fieldCreateTemplateFieldsFields9: FieldCreateTemplateFieldsFields9,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields9$outboundSchema.parse(
      fieldCreateTemplateFieldsFields9,
    ),
  );
}

export function fieldCreateTemplateFieldsFields9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields9' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields8$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields8$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields8$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields8$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields8
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields8$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields8$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields8$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields8$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields8$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields8$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields8$Outbound;
}

export function fieldCreateTemplateFieldsFields8ToJSON(
  fieldCreateTemplateFieldsFields8: FieldCreateTemplateFieldsFields8,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields8$outboundSchema.parse(
      fieldCreateTemplateFieldsFields8,
    ),
  );
}

export function fieldCreateTemplateFieldsFields8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields8' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields7$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields7$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields7$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields7$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields7
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields7$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields7$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields7$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields7$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields7$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields7$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields7$Outbound;
}

export function fieldCreateTemplateFieldsFields7ToJSON(
  fieldCreateTemplateFieldsFields7: FieldCreateTemplateFieldsFields7,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields7$outboundSchema.parse(
      fieldCreateTemplateFieldsFields7,
    ),
  );
}

export function fieldCreateTemplateFieldsFields7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields7' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
      .parse(
        fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
      ),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields6$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields6$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields6$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields6$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields6
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields6$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields6$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields6$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields6$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields6$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields6$Outbound;
}

export function fieldCreateTemplateFieldsFields6ToJSON(
  fieldCreateTemplateFieldsFields6: FieldCreateTemplateFieldsFields6,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields6$outboundSchema.parse(
      fieldCreateTemplateFieldsFields6,
    ),
  );
}

export function fieldCreateTemplateFieldsFields6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields6' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema
      .parse(fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields5$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields5$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields5$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields5$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields5
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields5$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields5$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields5$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields5$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields5$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields5$Outbound;
}

export function fieldCreateTemplateFieldsFields5ToJSON(
  fieldCreateTemplateFieldsFields5: FieldCreateTemplateFieldsFields5,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields5$outboundSchema.parse(
      fieldCreateTemplateFieldsFields5,
    ),
  );
}

export function fieldCreateTemplateFieldsFields5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields5' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema
      .parse(fieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta),
  );
}

export function fieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields4$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields4$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields4$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields4$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields4
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields4$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields4$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields4$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields4$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields4$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields4$Outbound;
}

export function fieldCreateTemplateFieldsFields4ToJSON(
  fieldCreateTemplateFieldsFields4: FieldCreateTemplateFieldsFields4,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields4$outboundSchema.parse(
      fieldCreateTemplateFieldsFields4,
    ),
  );
}

export function fieldCreateTemplateFieldsFields4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields4' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType
  > = z.nativeEnum(FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType);

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType
  > = FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  > =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldsFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldsFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldsFieldMetaToJSON(
  fieldCreateTemplateFieldsFieldsFieldMeta:
    FieldCreateTemplateFieldsFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldsFieldMeta$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldsFieldMeta,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldsFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsFieldMeta$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields3$Outbound = {
  type: string;
  fieldMeta?: FieldCreateTemplateFieldsFieldsFieldMeta$Outbound | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields3
> = z.object({
  type:
    FieldCreateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldsFieldMeta$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields3$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields3$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields3$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields3$Outbound;
}

export function fieldCreateTemplateFieldsFields3ToJSON(
  fieldCreateTemplateFieldsFields3: FieldCreateTemplateFieldsFields3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields3$outboundSchema.parse(
      fieldCreateTemplateFieldsFields3,
    ),
  );
}

export function fieldCreateTemplateFieldsFields3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsType> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldsTemplatesFieldsType);

/** @internal */
export const FieldCreateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldsTemplatesFieldsType> =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsTemplatesFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFields2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields2$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields2
> = z.object({
  type: FieldCreateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields2$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields2$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields2$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields2$Outbound;
}

export function fieldCreateTemplateFieldsFields2ToJSON(
  fieldCreateTemplateFieldsFields2: FieldCreateTemplateFieldsFields2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields2$outboundSchema.parse(
      fieldCreateTemplateFieldsFields2,
    ),
  );
}

export function fieldCreateTemplateFieldsFields2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldsFieldsType
> = z.nativeEnum(FieldCreateTemplateFieldsFieldsType);

/** @internal */
export const FieldCreateTemplateFieldsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldsType> =
    FieldCreateTemplateFieldsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFields1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsFieldsType$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFields1$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFields1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields1
> = z.object({
  type: FieldCreateTemplateFieldsFieldsType$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields1$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields1$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields1$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields1$Outbound;
}

export function fieldCreateTemplateFieldsFields1ToJSON(
  fieldCreateTemplateFieldsFields1: FieldCreateTemplateFieldsFields1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields1$outboundSchema.parse(
      fieldCreateTemplateFieldsFields1,
    ),
  );
}

export function fieldCreateTemplateFieldsFields1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFields$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFields1$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields2$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields3$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields4$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields5$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields6$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields7$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields8$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields9$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields10$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields11$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldsFields$Outbound =
  | FieldCreateTemplateFieldsFields1$Outbound
  | FieldCreateTemplateFieldsFields2$Outbound
  | FieldCreateTemplateFieldsFields3$Outbound
  | FieldCreateTemplateFieldsFields4$Outbound
  | FieldCreateTemplateFieldsFields5$Outbound
  | FieldCreateTemplateFieldsFields6$Outbound
  | FieldCreateTemplateFieldsFields7$Outbound
  | FieldCreateTemplateFieldsFields8$Outbound
  | FieldCreateTemplateFieldsFields9$Outbound
  | FieldCreateTemplateFieldsFields10$Outbound
  | FieldCreateTemplateFieldsFields11$Outbound;

/** @internal */
export const FieldCreateTemplateFieldsFields$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFields$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFields
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFields1$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields2$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields3$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields4$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields5$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields6$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields7$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields8$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields9$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields10$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFields11$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFields$ {
  /** @deprecated use `FieldCreateTemplateFieldsFields$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFields$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsFields$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFields$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFields$Outbound;
}

export function fieldCreateTemplateFieldsFieldsToJSON(
  fieldCreateTemplateFieldsFields: FieldCreateTemplateFieldsFields,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFields$outboundSchema.parse(
      fieldCreateTemplateFieldsFields,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsRequestBody$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldsFields1$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields2$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields3$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields4$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields5$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields6$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields7$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields8$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields9$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields10$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields11$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldsRequestBody$Outbound = {
  templateId: number;
  fields: Array<
    | FieldCreateTemplateFieldsFields1$Outbound
    | FieldCreateTemplateFieldsFields2$Outbound
    | FieldCreateTemplateFieldsFields3$Outbound
    | FieldCreateTemplateFieldsFields4$Outbound
    | FieldCreateTemplateFieldsFields5$Outbound
    | FieldCreateTemplateFieldsFields6$Outbound
    | FieldCreateTemplateFieldsFields7$Outbound
    | FieldCreateTemplateFieldsFields8$Outbound
    | FieldCreateTemplateFieldsFields9$Outbound
    | FieldCreateTemplateFieldsFields10$Outbound
    | FieldCreateTemplateFieldsFields11$Outbound
  >;
};

/** @internal */
export const FieldCreateTemplateFieldsRequestBody$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsRequestBody$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsRequestBody
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldsFields1$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields2$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields3$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields4$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields5$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields6$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields7$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields8$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields9$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields10$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFields11$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsRequestBody$ {
  /** @deprecated use `FieldCreateTemplateFieldsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsRequestBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsRequestBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsRequestBody$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsRequestBody$Outbound;
}

export function fieldCreateTemplateFieldsRequestBodyToJSON(
  fieldCreateTemplateFieldsRequestBody: FieldCreateTemplateFieldsRequestBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsRequestBody$outboundSchema.parse(
      fieldCreateTemplateFieldsRequestBody,
    ),
  );
}

export function fieldCreateTemplateFieldsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldsType
> = z.nativeEnum(FieldCreateTemplateFieldsType);

/** @internal */
export const FieldCreateTemplateFieldsType$outboundSchema: z.ZodNativeEnum<
  typeof FieldCreateTemplateFieldsType
> = FieldCreateTemplateFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldsType$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsType$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesToJSON(
  fieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema
      .parse(fieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues),
  );
}

export function fieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta9$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta9$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta9$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta9$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta9$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta9$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta9$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta9$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta9ToJSON(
  fieldCreateTemplateFieldsFieldMeta9: FieldCreateTemplateFieldsFieldMeta9,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta9$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta9,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaTemplatesFieldsValuesToJSON(
  fieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema
      .parse(fieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues),
  );
}

export function fieldCreateTemplateFieldsFieldMetaTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta8$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta8$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldCreateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta8$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta8$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta8$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta8$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta8$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta8$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta8ToJSON(
  fieldCreateTemplateFieldsFieldMeta8: FieldCreateTemplateFieldsFieldMeta8,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta8$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta8,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaValues$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaValues$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaValues$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMetaValues$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaValuesToJSON(
  fieldCreateTemplateFieldsFieldMetaValues:
    FieldCreateTemplateFieldsFieldMetaValues,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaValues$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaValues,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta7$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateTemplateFieldsFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta7$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema,
  values: z.array(
    z.lazy(() => FieldCreateTemplateFieldsFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta7$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta7$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta7$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta7$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta7$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta7$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta7ToJSON(
  fieldCreateTemplateFieldsFieldMeta7: FieldCreateTemplateFieldsFieldMeta7,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta7$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta7,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta6$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta6$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta6$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta6$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta6$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta6$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta6ToJSON(
  fieldCreateTemplateFieldsFieldMeta6: FieldCreateTemplateFieldsFieldMeta6,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta6$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta6,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta5$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta5$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta5$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta5$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta5$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta5$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta5ToJSON(
  fieldCreateTemplateFieldsFieldMeta5: FieldCreateTemplateFieldsFieldMeta5,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta5$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta5,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta4$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta4$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta4$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta4$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta4$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta4$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta4ToJSON(
  fieldCreateTemplateFieldsFieldMeta4: FieldCreateTemplateFieldsFieldMeta4,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta4$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta4,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  > = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  > =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta3$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta3$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta3ToJSON(
  fieldCreateTemplateFieldsFieldMeta3: FieldCreateTemplateFieldsFieldMeta3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta3$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta3,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType
  > = z.nativeEnum(FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType
  > = FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta2$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta2$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta2ToJSON(
  fieldCreateTemplateFieldsFieldMeta2: FieldCreateTemplateFieldsFieldMeta2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta2$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta2,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaType> = z.nativeEnum(
    FieldCreateTemplateFieldsFieldMetaType,
  );

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaType> =
    FieldCreateTemplateFieldsFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaType$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaType$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldsFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldCreateTemplateFieldsFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta1$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMeta1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta1$Outbound;
}

export function fieldCreateTemplateFieldsFieldMeta1ToJSON(
  fieldCreateTemplateFieldsFieldMeta1: FieldCreateTemplateFieldsFieldMeta1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta1$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta1,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta1$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta2$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta3$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta4$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta7$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta9$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta5$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta8$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldsFieldMeta$Outbound =
  | FieldCreateTemplateFieldsFieldMeta1$Outbound
  | FieldCreateTemplateFieldsFieldMeta2$Outbound
  | FieldCreateTemplateFieldsFieldMeta3$Outbound
  | FieldCreateTemplateFieldsFieldMeta4$Outbound
  | FieldCreateTemplateFieldsFieldMeta7$Outbound
  | FieldCreateTemplateFieldsFieldMeta9$Outbound
  | FieldCreateTemplateFieldsFieldMeta5$Outbound
  | FieldCreateTemplateFieldsFieldMeta8$Outbound
  | FieldCreateTemplateFieldsFieldMeta6$Outbound;

/** @internal */
export const FieldCreateTemplateFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMeta
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta1$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta2$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta3$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta4$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta7$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta9$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta5$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta8$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMeta$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMeta$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaToJSON(
  fieldCreateTemplateFieldsFieldMeta: FieldCreateTemplateFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMeta$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMeta,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsFields$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsFields,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldCreateTemplateFieldsType$inboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta1$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta2$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta3$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta4$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta7$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta9$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta5$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta8$inboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta6$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type FieldCreateTemplateFieldsTemplatesFieldsFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldsFieldMeta1$Outbound
    | FieldCreateTemplateFieldsFieldMeta2$Outbound
    | FieldCreateTemplateFieldsFieldMeta3$Outbound
    | FieldCreateTemplateFieldsFieldMeta4$Outbound
    | FieldCreateTemplateFieldsFieldMeta7$Outbound
    | FieldCreateTemplateFieldsFieldMeta9$Outbound
    | FieldCreateTemplateFieldsFieldMeta5$Outbound
    | FieldCreateTemplateFieldsFieldMeta8$Outbound
    | FieldCreateTemplateFieldsFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldsTemplatesFieldsFields$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsTemplatesFieldsFields$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsTemplatesFieldsFields
  > = z.object({
    type: FieldCreateTemplateFieldsType$outboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta1$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta2$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta3$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta4$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta7$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta9$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta5$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta8$outboundSchema),
        z.lazy(() => FieldCreateTemplateFieldsFieldMeta6$outboundSchema),
      ]),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTemplatesFieldsFields$ {
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsFields$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsFields$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsFields$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTemplatesFieldsFields$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTemplatesFieldsFields$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsTemplatesFieldsFields$Outbound;
}

export function fieldCreateTemplateFieldsTemplatesFieldsFieldsToJSON(
  fieldCreateTemplateFieldsTemplatesFieldsFields:
    FieldCreateTemplateFieldsTemplatesFieldsFields,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsTemplatesFieldsFields$outboundSchema.parse(
      fieldCreateTemplateFieldsTemplatesFieldsFields,
    ),
  );
}

export function fieldCreateTemplateFieldsTemplatesFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsTemplatesFieldsFields,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsTemplatesFieldsFields$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsTemplatesFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsResponseBody$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateTemplateFieldsTemplatesFieldsFields$inboundSchema),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldsResponseBody$Outbound = {
  fields: Array<FieldCreateTemplateFieldsTemplatesFieldsFields$Outbound>;
};

/** @internal */
export const FieldCreateTemplateFieldsResponseBody$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponseBody$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsResponseBody
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateTemplateFieldsTemplatesFieldsFields$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsResponseBody$ {
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponseBody$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsResponseBody$Outbound;
}

export function fieldCreateTemplateFieldsResponseBodyToJSON(
  fieldCreateTemplateFieldsResponseBody: FieldCreateTemplateFieldsResponseBody,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsResponseBody$outboundSchema.parse(
      fieldCreateTemplateFieldsResponseBody,
    ),
  );
}

export function fieldCreateTemplateFieldsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsResponseBody' from JSON`,
  );
}
