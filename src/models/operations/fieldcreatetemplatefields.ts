/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldCreateTemplateFieldsTypeDropdownRequest1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldsTypeDropdownRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeDropdownRequest1
>;

export const FieldCreateTemplateFieldsTypeDropdownRequest2 = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldsTypeDropdownRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeDropdownRequest2
>;

export type FieldCreateTemplateFieldsValueDropdown = {
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaDropdownRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeDropdownRequest2;
  values?: Array<FieldCreateTemplateFieldsValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldCreateTemplateFieldsFieldDropdown = {
  type: FieldCreateTemplateFieldsTypeDropdownRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaDropdownRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeCheckboxRequest1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldCreateTemplateFieldsTypeCheckboxRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeCheckboxRequest1
>;

export const FieldCreateTemplateFieldsTypeCheckboxRequest2 = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldsTypeCheckboxRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeCheckboxRequest2
>;

export type FieldCreateTemplateFieldsValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaCheckboxRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeCheckboxRequest2;
  values?: Array<FieldCreateTemplateFieldsValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldCreateTemplateFieldsFieldCheckbox = {
  type: FieldCreateTemplateFieldsTypeCheckboxRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaCheckboxRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeRadioRequest1 = {
  Radio: "RADIO",
} as const;
export type FieldCreateTemplateFieldsTypeRadioRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeRadioRequest1
>;

export const FieldCreateTemplateFieldsTypeRadioRequest2 = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldsTypeRadioRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeRadioRequest2
>;

export type FieldCreateTemplateFieldsValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaRadioRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeRadioRequest2;
  values?: Array<FieldCreateTemplateFieldsValueRadio> | undefined;
};

export type FieldCreateTemplateFieldsFieldRadio = {
  type: FieldCreateTemplateFieldsTypeRadioRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaRadioRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeNumberRequest1 = {
  Number: "NUMBER",
} as const;
export type FieldCreateTemplateFieldsTypeNumberRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeNumberRequest1
>;

export const FieldCreateTemplateFieldsTypeNumberRequest2 = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldsTypeNumberRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeNumberRequest2
>;

export const FieldCreateTemplateFieldsTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignNumber
>;

export type FieldCreateTemplateFieldsFieldMetaNumberRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeNumberRequest2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignNumber | undefined;
};

export type FieldCreateTemplateFieldsFieldNumber = {
  type: FieldCreateTemplateFieldsTypeNumberRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaNumberRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeTextRequest1 = {
  Text: "TEXT",
} as const;
export type FieldCreateTemplateFieldsTypeTextRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeTextRequest1
>;

export const FieldCreateTemplateFieldsTypeTextRequest2 = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldsTypeTextRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeTextRequest2
>;

export const FieldCreateTemplateFieldsTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignText = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignText
>;

export type FieldCreateTemplateFieldsFieldMetaTextRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeTextRequest2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignText | undefined;
};

export type FieldCreateTemplateFieldsFieldText = {
  type: FieldCreateTemplateFieldsTypeTextRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaTextRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeDateRequest1 = {
  Date: "DATE",
} as const;
export type FieldCreateTemplateFieldsTypeDateRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeDateRequest1
>;

export const FieldCreateTemplateFieldsTypeDateRequest2 = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldsTypeDateRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeDateRequest2
>;

export const FieldCreateTemplateFieldsTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignDate = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignDate
>;

export type FieldCreateTemplateFieldsFieldMetaDateRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeDateRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignDate | undefined;
};

export type FieldCreateTemplateFieldsFieldDate = {
  type: FieldCreateTemplateFieldsTypeDateRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaDateRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeEmailRequest1 = {
  Email: "EMAIL",
} as const;
export type FieldCreateTemplateFieldsTypeEmailRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeEmailRequest1
>;

export const FieldCreateTemplateFieldsTypeEmailRequest2 = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldsTypeEmailRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeEmailRequest2
>;

export const FieldCreateTemplateFieldsTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignEmail
>;

export type FieldCreateTemplateFieldsFieldMetaEmailRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeEmailRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignEmail | undefined;
};

export type FieldCreateTemplateFieldsFieldEmail = {
  type: FieldCreateTemplateFieldsTypeEmailRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaEmailRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeNameRequest1 = {
  Name: "NAME",
} as const;
export type FieldCreateTemplateFieldsTypeNameRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeNameRequest1
>;

export const FieldCreateTemplateFieldsTypeNameRequest2 = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldsTypeNameRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeNameRequest2
>;

export const FieldCreateTemplateFieldsTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignName = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignName
>;

export type FieldCreateTemplateFieldsFieldMetaNameRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeNameRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignName | undefined;
};

export type FieldCreateTemplateFieldsFieldName = {
  type: FieldCreateTemplateFieldsTypeNameRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaNameRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeInitialsRequest1 = {
  Initials: "INITIALS",
} as const;
export type FieldCreateTemplateFieldsTypeInitialsRequest1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeInitialsRequest1
>;

export const FieldCreateTemplateFieldsTypeInitialsRequest2 = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldsTypeInitialsRequest2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeInitialsRequest2
>;

export const FieldCreateTemplateFieldsTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignInitials
>;

export type FieldCreateTemplateFieldsFieldMetaInitialsRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsTypeInitialsRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignInitials | undefined;
};

export type FieldCreateTemplateFieldsFieldInitials = {
  type: FieldCreateTemplateFieldsTypeInitialsRequest1;
  fieldMeta?: FieldCreateTemplateFieldsFieldMetaInitialsRequest | undefined;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldCreateTemplateFieldsTypeFreeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeFreeSignature
>;

export type FieldCreateTemplateFieldsFieldFreeSignature = {
  type: FieldCreateTemplateFieldsTypeFreeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const FieldCreateTemplateFieldsTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldCreateTemplateFieldsTypeSignature = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeSignature
>;

export type FieldCreateTemplateFieldsFieldSignature = {
  type: FieldCreateTemplateFieldsTypeSignature;
  /**
   * The ID of the recipient to create the field for.
   */
  recipientId: number;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldCreateTemplateFieldsFieldUnion =
  | FieldCreateTemplateFieldsFieldSignature
  | FieldCreateTemplateFieldsFieldFreeSignature
  | FieldCreateTemplateFieldsFieldInitials
  | FieldCreateTemplateFieldsFieldName
  | FieldCreateTemplateFieldsFieldEmail
  | FieldCreateTemplateFieldsFieldDate
  | FieldCreateTemplateFieldsFieldText
  | FieldCreateTemplateFieldsFieldNumber
  | FieldCreateTemplateFieldsFieldRadio
  | FieldCreateTemplateFieldsFieldCheckbox
  | FieldCreateTemplateFieldsFieldDropdown;

export type FieldCreateTemplateFieldsRequest = {
  templateId: number;
  fields: Array<
    | FieldCreateTemplateFieldsFieldSignature
    | FieldCreateTemplateFieldsFieldFreeSignature
    | FieldCreateTemplateFieldsFieldInitials
    | FieldCreateTemplateFieldsFieldName
    | FieldCreateTemplateFieldsFieldEmail
    | FieldCreateTemplateFieldsFieldDate
    | FieldCreateTemplateFieldsFieldText
    | FieldCreateTemplateFieldsFieldNumber
    | FieldCreateTemplateFieldsFieldRadio
    | FieldCreateTemplateFieldsFieldCheckbox
    | FieldCreateTemplateFieldsFieldDropdown
  >;
};

export const FieldCreateTemplateFieldsTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldCreateTemplateFieldsTypeResponse = ClosedEnum<
  typeof FieldCreateTemplateFieldsTypeResponse
>;

export const FieldCreateTemplateFieldsFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeDropdown
>;

export type FieldCreateTemplateFieldsValueResponse3 = {
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeDropdown;
  values?: Array<FieldCreateTemplateFieldsValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeCheckbox
>;

export type FieldCreateTemplateFieldsValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeCheckbox;
  values?: Array<FieldCreateTemplateFieldsValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeRadio = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeRadio
>;

export type FieldCreateTemplateFieldsValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldCreateTemplateFieldsFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeRadio;
  values?: Array<FieldCreateTemplateFieldsValueResponse1> | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeNumber = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeNumber
>;

export const FieldCreateTemplateFieldsTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse6 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse6
>;

export type FieldCreateTemplateFieldsFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse6 | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeText = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeText
>;

export const FieldCreateTemplateFieldsTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse5 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse5
>;

export type FieldCreateTemplateFieldsFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse5 | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeDate = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeDate
>;

export const FieldCreateTemplateFieldsTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse4 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse4
>;

export type FieldCreateTemplateFieldsFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse4 | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeEmail = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeEmail
>;

export const FieldCreateTemplateFieldsTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse3 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse3
>;

export type FieldCreateTemplateFieldsFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse3 | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeName = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeName
>;

export const FieldCreateTemplateFieldsTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse2 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse2
>;

export type FieldCreateTemplateFieldsFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse2 | undefined;
};

export const FieldCreateTemplateFieldsFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldCreateTemplateFieldsFieldMetaTypeInitials = ClosedEnum<
  typeof FieldCreateTemplateFieldsFieldMetaTypeInitials
>;

export const FieldCreateTemplateFieldsTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldCreateTemplateFieldsTextAlignResponse1 = ClosedEnum<
  typeof FieldCreateTemplateFieldsTextAlignResponse1
>;

export type FieldCreateTemplateFieldsFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldCreateTemplateFieldsFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldCreateTemplateFieldsTextAlignResponse1 | undefined;
};

export type FieldCreateTemplateFieldsFieldMetaUnion =
  | FieldCreateTemplateFieldsFieldMetaRadioResponse
  | FieldCreateTemplateFieldsFieldMetaInitialsResponse
  | FieldCreateTemplateFieldsFieldMetaNameResponse
  | FieldCreateTemplateFieldsFieldMetaEmailResponse
  | FieldCreateTemplateFieldsFieldMetaDateResponse
  | FieldCreateTemplateFieldsFieldMetaDropdownResponse
  | FieldCreateTemplateFieldsFieldMetaCheckboxResponse
  | FieldCreateTemplateFieldsFieldMetaTextResponse
  | FieldCreateTemplateFieldsFieldMetaNumberResponse;

export type FieldCreateTemplateFieldsFieldResponse = {
  type: FieldCreateTemplateFieldsTypeResponse;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldsFieldMetaRadioResponse
    | FieldCreateTemplateFieldsFieldMetaInitialsResponse
    | FieldCreateTemplateFieldsFieldMetaNameResponse
    | FieldCreateTemplateFieldsFieldMetaEmailResponse
    | FieldCreateTemplateFieldsFieldMetaDateResponse
    | FieldCreateTemplateFieldsFieldMetaDropdownResponse
    | FieldCreateTemplateFieldsFieldMetaCheckboxResponse
    | FieldCreateTemplateFieldsFieldMetaTextResponse
    | FieldCreateTemplateFieldsFieldMetaNumberResponse
    | null;
};

/**
 * Successful response
 */
export type FieldCreateTemplateFieldsResponse = {
  fields: Array<FieldCreateTemplateFieldsFieldResponse>;
};

/** @internal */
export const FieldCreateTemplateFieldsTypeDropdownRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDropdownRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeDropdownRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeDropdownRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDropdownRequest1> =
    FieldCreateTemplateFieldsTypeDropdownRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeDropdownRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeDropdownRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeDropdownRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeDropdownRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeDropdownRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeDropdownRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDropdownRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeDropdownRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeDropdownRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDropdownRequest2> =
    FieldCreateTemplateFieldsTypeDropdownRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeDropdownRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeDropdownRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeDropdownRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeDropdownRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeDropdownRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueDropdown$Outbound;
}

export function fieldCreateTemplateFieldsValueDropdownToJSON(
  fieldCreateTemplateFieldsValueDropdown:
    FieldCreateTemplateFieldsValueDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldsValueDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldsValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDropdownRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDropdownRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeDropdownRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaDropdownRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDropdownRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaDropdownRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeDropdownRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaDropdownRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaDropdownRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaDropdownRequest:
    FieldCreateTemplateFieldsFieldMetaDropdownRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaDropdownRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaDropdownRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaDropdownRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaDropdownRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaDropdownRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldDropdown$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeDropdownRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaDropdownRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldDropdown$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldDropdown
> = z.object({
  type: FieldCreateTemplateFieldsTypeDropdownRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDropdownRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldDropdown$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldDropdown$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldDropdown$Outbound;
}

export function fieldCreateTemplateFieldsFieldDropdownToJSON(
  fieldCreateTemplateFieldsFieldDropdown:
    FieldCreateTemplateFieldsFieldDropdown,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldDropdown$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldDropdown,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeCheckboxRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeCheckboxRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeCheckboxRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeCheckboxRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeCheckboxRequest1> =
    FieldCreateTemplateFieldsTypeCheckboxRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeCheckboxRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeCheckboxRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeCheckboxRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeCheckboxRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeCheckboxRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeCheckboxRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeCheckboxRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeCheckboxRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeCheckboxRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeCheckboxRequest2> =
    FieldCreateTemplateFieldsTypeCheckboxRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeCheckboxRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeCheckboxRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeCheckboxRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeCheckboxRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeCheckboxRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueCheckbox$Outbound;
}

export function fieldCreateTemplateFieldsValueCheckboxToJSON(
  fieldCreateTemplateFieldsValueCheckbox:
    FieldCreateTemplateFieldsValueCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldsValueCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldsValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaCheckboxRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeCheckboxRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaCheckboxRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaCheckboxRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeCheckboxRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaCheckboxRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaCheckboxRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaCheckboxRequest:
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaCheckboxRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaCheckboxRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaCheckboxRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaCheckboxRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaCheckboxRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldCheckbox$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeCheckboxRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaCheckboxRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldCheckbox$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldCheckbox
> = z.object({
  type: FieldCreateTemplateFieldsTypeCheckboxRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaCheckboxRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldCheckbox$Outbound;
}

export function fieldCreateTemplateFieldsFieldCheckboxToJSON(
  fieldCreateTemplateFieldsFieldCheckbox:
    FieldCreateTemplateFieldsFieldCheckbox,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldCheckbox$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldCheckbox,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeRadioRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeRadioRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeRadioRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeRadioRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeRadioRequest1> =
    FieldCreateTemplateFieldsTypeRadioRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeRadioRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeRadioRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeRadioRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeRadioRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeRadioRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeRadioRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeRadioRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeRadioRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeRadioRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeRadioRequest2> =
    FieldCreateTemplateFieldsTypeRadioRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeRadioRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeRadioRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeRadioRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeRadioRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeRadioRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueRadio$Outbound;
}

export function fieldCreateTemplateFieldsValueRadioToJSON(
  fieldCreateTemplateFieldsValueRadio: FieldCreateTemplateFieldsValueRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueRadio$outboundSchema.parse(
      fieldCreateTemplateFieldsValueRadio,
    ),
  );
}

export function fieldCreateTemplateFieldsValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaRadioRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaRadioRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeRadioRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaRadioRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaRadioRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaRadioRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaRadioRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeRadioRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaRadioRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaRadioRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaRadioRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaRadioRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaRadioRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaRadioRequest:
    FieldCreateTemplateFieldsFieldMetaRadioRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaRadioRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaRadioRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaRadioRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaRadioRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaRadioRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaRadioRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldRadio$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeRadioRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaRadioRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaRadioRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldRadio$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldRadio
> = z.object({
  type: FieldCreateTemplateFieldsTypeRadioRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaRadioRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldRadio$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldRadio$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldRadio$Outbound;
}

export function fieldCreateTemplateFieldsFieldRadioToJSON(
  fieldCreateTemplateFieldsFieldRadio: FieldCreateTemplateFieldsFieldRadio,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldRadio$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldRadio,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeNumberRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNumberRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeNumberRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeNumberRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNumberRequest1> =
    FieldCreateTemplateFieldsTypeNumberRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeNumberRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeNumberRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeNumberRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeNumberRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeNumberRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeNumberRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNumberRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeNumberRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeNumberRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNumberRequest2> =
    FieldCreateTemplateFieldsTypeNumberRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeNumberRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeNumberRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeNumberRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeNumberRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeNumberRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignNumber> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignNumber);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignNumber> =
    FieldCreateTemplateFieldsTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNumberRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNumberRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeNumberRequest2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignNumber$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaNumberRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNumberRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNumberRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaNumberRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeNumberRequest2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaNumberRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaNumberRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaNumberRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaNumberRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaNumberRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaNumberRequest:
    FieldCreateTemplateFieldsFieldMetaNumberRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaNumberRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaNumberRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaNumberRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaNumberRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaNumberRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaNumberRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldNumber$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeNumberRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaNumberRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaNumberRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldNumber$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldNumber
> = z.object({
  type: FieldCreateTemplateFieldsTypeNumberRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaNumberRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldNumber$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldNumber$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldNumber$Outbound;
}

export function fieldCreateTemplateFieldsFieldNumberToJSON(
  fieldCreateTemplateFieldsFieldNumber: FieldCreateTemplateFieldsFieldNumber,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldNumber$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldNumber,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeTextRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeTextRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeTextRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeTextRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeTextRequest1> =
    FieldCreateTemplateFieldsTypeTextRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeTextRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeTextRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeTextRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeTextRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeTextRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeTextRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeTextRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeTextRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeTextRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeTextRequest2> =
    FieldCreateTemplateFieldsTypeTextRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeTextRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeTextRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeTextRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeTextRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeTextRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignText> = z.nativeEnum(
    FieldCreateTemplateFieldsTextAlignText,
  );

/** @internal */
export const FieldCreateTemplateFieldsTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignText> =
    FieldCreateTemplateFieldsTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignText$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTextRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTextRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeTextRequest2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaTextRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTextRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTextRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaTextRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeTextRequest2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTextRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTextRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTextRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMetaTextRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaTextRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaTextRequest:
    FieldCreateTemplateFieldsFieldMetaTextRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaTextRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaTextRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaTextRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaTextRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaTextRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldText$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeTextRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaTextRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldText$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaTextRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldText$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldText$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldText
> = z.object({
  type: FieldCreateTemplateFieldsTypeTextRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaTextRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldText$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFieldText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldText$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldText$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldText$Outbound;
}

export function fieldCreateTemplateFieldsFieldTextToJSON(
  fieldCreateTemplateFieldsFieldText: FieldCreateTemplateFieldsFieldText,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldText$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldText,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldText' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeDateRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDateRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeDateRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeDateRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDateRequest1> =
    FieldCreateTemplateFieldsTypeDateRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeDateRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeDateRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeDateRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeDateRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeDateRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeDateRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDateRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeDateRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeDateRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeDateRequest2> =
    FieldCreateTemplateFieldsTypeDateRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeDateRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeDateRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeDateRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeDateRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeDateRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignDate> = z.nativeEnum(
    FieldCreateTemplateFieldsTextAlignDate,
  );

/** @internal */
export const FieldCreateTemplateFieldsTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignDate> =
    FieldCreateTemplateFieldsTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignDate$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDateRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeDateRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaDateRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDateRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDateRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaDateRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeDateRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaDateRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaDateRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaDateRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMetaDateRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaDateRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaDateRequest:
    FieldCreateTemplateFieldsFieldMetaDateRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaDateRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaDateRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaDateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaDateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaDateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaDateRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldDate$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeDateRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDateRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldDate$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaDateRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldDate$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldDate$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldDate
> = z.object({
  type: FieldCreateTemplateFieldsTypeDateRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDateRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldDate$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFieldDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldDate$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldDate$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldDate$Outbound;
}

export function fieldCreateTemplateFieldsFieldDateToJSON(
  fieldCreateTemplateFieldsFieldDate: FieldCreateTemplateFieldsFieldDate,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldDate$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldDate,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeEmailRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeEmailRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeEmailRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeEmailRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeEmailRequest1> =
    FieldCreateTemplateFieldsTypeEmailRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeEmailRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeEmailRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeEmailRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeEmailRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeEmailRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeEmailRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeEmailRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeEmailRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeEmailRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeEmailRequest2> =
    FieldCreateTemplateFieldsTypeEmailRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeEmailRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeEmailRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeEmailRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeEmailRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeEmailRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignEmail> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignEmail);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignEmail> =
    FieldCreateTemplateFieldsTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaEmailRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaEmailRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeEmailRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaEmailRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaEmailRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaEmailRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaEmailRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeEmailRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignEmail$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaEmailRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaEmailRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaEmailRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaEmailRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaEmailRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaEmailRequest:
    FieldCreateTemplateFieldsFieldMetaEmailRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaEmailRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaEmailRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaEmailRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaEmailRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaEmailRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldEmail$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeEmailRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaEmailRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaEmailRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldEmail$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldEmail
> = z.object({
  type: FieldCreateTemplateFieldsTypeEmailRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaEmailRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldEmail$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldEmail$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldEmail$Outbound;
}

export function fieldCreateTemplateFieldsFieldEmailToJSON(
  fieldCreateTemplateFieldsFieldEmail: FieldCreateTemplateFieldsFieldEmail,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldEmail$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldEmail,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeNameRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNameRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeNameRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeNameRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNameRequest1> =
    FieldCreateTemplateFieldsTypeNameRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeNameRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeNameRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeNameRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeNameRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeNameRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeNameRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNameRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeNameRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeNameRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeNameRequest2> =
    FieldCreateTemplateFieldsTypeNameRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeNameRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeNameRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeNameRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeNameRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeNameRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignName> = z.nativeEnum(
    FieldCreateTemplateFieldsTextAlignName,
  );

/** @internal */
export const FieldCreateTemplateFieldsTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignName> =
    FieldCreateTemplateFieldsTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignName$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNameRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNameRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeNameRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaNameRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNameRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNameRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaNameRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeNameRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaNameRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaNameRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaNameRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMetaNameRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaNameRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaNameRequest:
    FieldCreateTemplateFieldsFieldMetaNameRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaNameRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaNameRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaNameRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaNameRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaNameRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldName$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeNameRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaNameRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldName$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaNameRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldName$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldName$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldName
> = z.object({
  type: FieldCreateTemplateFieldsTypeNameRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaNameRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldName$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsFieldName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldName$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldName$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldName$Outbound;
}

export function fieldCreateTemplateFieldsFieldNameToJSON(
  fieldCreateTemplateFieldsFieldName: FieldCreateTemplateFieldsFieldName,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldName$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldName,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldName' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeInitialsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeInitialsRequest1> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeInitialsRequest1);

/** @internal */
export const FieldCreateTemplateFieldsTypeInitialsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeInitialsRequest1> =
    FieldCreateTemplateFieldsTypeInitialsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeInitialsRequest1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeInitialsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeInitialsRequest1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeInitialsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeInitialsRequest1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTypeInitialsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeInitialsRequest2> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeInitialsRequest2);

/** @internal */
export const FieldCreateTemplateFieldsTypeInitialsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeInitialsRequest2> =
    FieldCreateTemplateFieldsTypeInitialsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeInitialsRequest2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeInitialsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeInitialsRequest2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeInitialsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeInitialsRequest2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignInitials> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignInitials);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignInitials> =
    FieldCreateTemplateFieldsTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaInitialsRequest$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaInitialsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeInitialsRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaInitialsRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaInitialsRequest$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaInitialsRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsTypeInitialsRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaInitialsRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsRequest$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaInitialsRequestToJSON(
  fieldCreateTemplateFieldsFieldMetaInitialsRequest:
    FieldCreateTemplateFieldsFieldMetaInitialsRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaInitialsRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaInitialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaInitialsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaInitialsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaInitialsRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldInitials$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeInitialsRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$inboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldCreateTemplateFieldsFieldMetaInitialsRequest$Outbound
    | undefined;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldInitials$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldInitials
> = z.object({
  type: FieldCreateTemplateFieldsTypeInitialsRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaInitialsRequest$outboundSchema
  ).optional(),
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldInitials$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldInitials$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldInitials$Outbound;
}

export function fieldCreateTemplateFieldsFieldInitialsToJSON(
  fieldCreateTemplateFieldsFieldInitials:
    FieldCreateTemplateFieldsFieldInitials,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldInitials$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldInitials,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeFreeSignature> = z
    .nativeEnum(FieldCreateTemplateFieldsTypeFreeSignature);

/** @internal */
export const FieldCreateTemplateFieldsTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeFreeSignature> =
    FieldCreateTemplateFieldsTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldFreeSignature,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldCreateTemplateFieldsTypeFreeSignature$inboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldFreeSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldFreeSignature
  > = z.object({
    type: FieldCreateTemplateFieldsTypeFreeSignature$outboundSchema,
    recipientId: z.number(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldFreeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldFreeSignature$Outbound;
}

export function fieldCreateTemplateFieldsFieldFreeSignatureToJSON(
  fieldCreateTemplateFieldsFieldFreeSignature:
    FieldCreateTemplateFieldsFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldFreeSignature,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeSignature> = z.nativeEnum(
    FieldCreateTemplateFieldsTypeSignature,
  );

/** @internal */
export const FieldCreateTemplateFieldsTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeSignature> =
    FieldCreateTemplateFieldsTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeSignature$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldSignature$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeSignature$inboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldSignature$Outbound = {
  type: string;
  recipientId: number;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldSignature$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldSignature
> = z.object({
  type: FieldCreateTemplateFieldsTypeSignature$outboundSchema,
  recipientId: z.number(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldSignature$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldSignature$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldSignature$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldSignature$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldSignature$Outbound;
}

export function fieldCreateTemplateFieldsFieldSignatureToJSON(
  fieldCreateTemplateFieldsFieldSignature:
    FieldCreateTemplateFieldsFieldSignature,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldSignature$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldSignature,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldInitials$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldName$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldEmail$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldDate$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldText$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldNumber$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldRadio$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldCheckbox$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldsFieldUnion$Outbound =
  | FieldCreateTemplateFieldsFieldSignature$Outbound
  | FieldCreateTemplateFieldsFieldFreeSignature$Outbound
  | FieldCreateTemplateFieldsFieldInitials$Outbound
  | FieldCreateTemplateFieldsFieldName$Outbound
  | FieldCreateTemplateFieldsFieldEmail$Outbound
  | FieldCreateTemplateFieldsFieldDate$Outbound
  | FieldCreateTemplateFieldsFieldText$Outbound
  | FieldCreateTemplateFieldsFieldNumber$Outbound
  | FieldCreateTemplateFieldsFieldRadio$Outbound
  | FieldCreateTemplateFieldsFieldCheckbox$Outbound
  | FieldCreateTemplateFieldsFieldDropdown$Outbound;

/** @internal */
export const FieldCreateTemplateFieldsFieldUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldInitials$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldName$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldEmail$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldDate$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldText$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldNumber$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldRadio$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldCheckbox$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldUnion$Outbound;
}

export function fieldCreateTemplateFieldsFieldUnionToJSON(
  fieldCreateTemplateFieldsFieldUnion: FieldCreateTemplateFieldsFieldUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldUnion$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldUnion,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsRequest$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldsFieldSignature$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldFreeSignature$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldInitials$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldName$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldEmail$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldDate$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldText$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldNumber$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldRadio$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldCheckbox$inboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldDropdown$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldsRequest$Outbound = {
  templateId: number;
  fields: Array<
    | FieldCreateTemplateFieldsFieldSignature$Outbound
    | FieldCreateTemplateFieldsFieldFreeSignature$Outbound
    | FieldCreateTemplateFieldsFieldInitials$Outbound
    | FieldCreateTemplateFieldsFieldName$Outbound
    | FieldCreateTemplateFieldsFieldEmail$Outbound
    | FieldCreateTemplateFieldsFieldDate$Outbound
    | FieldCreateTemplateFieldsFieldText$Outbound
    | FieldCreateTemplateFieldsFieldNumber$Outbound
    | FieldCreateTemplateFieldsFieldRadio$Outbound
    | FieldCreateTemplateFieldsFieldCheckbox$Outbound
    | FieldCreateTemplateFieldsFieldDropdown$Outbound
  >;
};

/** @internal */
export const FieldCreateTemplateFieldsRequest$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsRequest$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsRequest
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldCreateTemplateFieldsFieldSignature$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldFreeSignature$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldInitials$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldName$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldEmail$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldDate$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldText$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldNumber$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldRadio$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldCheckbox$outboundSchema),
      z.lazy(() => FieldCreateTemplateFieldsFieldDropdown$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsRequest$ {
  /** @deprecated use `FieldCreateTemplateFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsRequest$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = FieldCreateTemplateFieldsRequest$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsRequest$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsRequest$Outbound;
}

export function fieldCreateTemplateFieldsRequestToJSON(
  fieldCreateTemplateFieldsRequest: FieldCreateTemplateFieldsRequest,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsRequest$outboundSchema.parse(
      fieldCreateTemplateFieldsRequest,
    ),
  );
}

export function fieldCreateTemplateFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsRequest' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeResponse> = z.nativeEnum(
    FieldCreateTemplateFieldsTypeResponse,
  );

/** @internal */
export const FieldCreateTemplateFieldsTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTypeResponse> =
    FieldCreateTemplateFieldsTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTypeResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTypeResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTypeResponse$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeDropdown> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeDropdown);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeDropdown> =
    FieldCreateTemplateFieldsFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueResponse3$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueResponse3$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueResponse3$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse3$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueResponse3$Outbound;
}

export function fieldCreateTemplateFieldsValueResponse3ToJSON(
  fieldCreateTemplateFieldsValueResponse3:
    FieldCreateTemplateFieldsValueResponse3,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueResponse3$outboundSchema.parse(
      fieldCreateTemplateFieldsValueResponse3,
    ),
  );
}

export function fieldCreateTemplateFieldsValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsValueResponse3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueResponse3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaDropdownResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaDropdownResponse:
    FieldCreateTemplateFieldsFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaDropdownResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeCheckbox);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeCheckbox> =
    FieldCreateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueResponse2$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueResponse2$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueResponse2$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse2$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueResponse2$Outbound;
}

export function fieldCreateTemplateFieldsValueResponse2ToJSON(
  fieldCreateTemplateFieldsValueResponse2:
    FieldCreateTemplateFieldsValueResponse2,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueResponse2$outboundSchema.parse(
      fieldCreateTemplateFieldsValueResponse2,
    ),
  );
}

export function fieldCreateTemplateFieldsValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsValueResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaCheckboxResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaCheckboxResponse:
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeRadio> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeRadio);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeRadio> =
    FieldCreateTemplateFieldsFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeRadio$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsValueResponse1$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldCreateTemplateFieldsValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldCreateTemplateFieldsValueResponse1$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsValueResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsValueResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsValueResponse1$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsValueResponse1$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsValueResponse1$Outbound;
}

export function fieldCreateTemplateFieldsValueResponse1ToJSON(
  fieldCreateTemplateFieldsValueResponse1:
    FieldCreateTemplateFieldsValueResponse1,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsValueResponse1$outboundSchema.parse(
      fieldCreateTemplateFieldsValueResponse1,
    ),
  );
}

export function fieldCreateTemplateFieldsValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsValueResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsValueResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldCreateTemplateFieldsValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldCreateTemplateFieldsValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaRadioResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaRadioResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaRadioResponse:
    FieldCreateTemplateFieldsFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaRadioResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeNumber> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeNumber);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeNumber> =
    FieldCreateTemplateFieldsFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeNumber$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse6> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse6);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse6> =
    FieldCreateTemplateFieldsTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse6$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaNumberResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaNumberResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaNumberResponse:
    FieldCreateTemplateFieldsFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaNumberResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeText> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeText);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeText> =
    FieldCreateTemplateFieldsFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeText$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse5> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse5);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse5> =
    FieldCreateTemplateFieldsTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse5$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTextResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaTextResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaTextResponse:
    FieldCreateTemplateFieldsFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaTextResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeDate> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeDate);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeDate> =
    FieldCreateTemplateFieldsFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeDate$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse4> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse4);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse4> =
    FieldCreateTemplateFieldsTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse4$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaDateResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaDateResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaDateResponse:
    FieldCreateTemplateFieldsFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaDateResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeEmail> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeEmail);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeEmail> =
    FieldCreateTemplateFieldsFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeEmail$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse3> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse3);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse3> =
    FieldCreateTemplateFieldsTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse3$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaEmailResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaEmailResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaEmailResponse:
    FieldCreateTemplateFieldsFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaEmailResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeName> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeName);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeName> =
    FieldCreateTemplateFieldsFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeName$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse2> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse2);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse2> =
    FieldCreateTemplateFieldsTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse2$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaNameResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaNameResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaNameResponse:
    FieldCreateTemplateFieldsFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaNameResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeInitials> = z
    .nativeEnum(FieldCreateTemplateFieldsFieldMetaTypeInitials);

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsFieldMetaTypeInitials> =
    FieldCreateTemplateFieldsFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaTypeInitials$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse1> = z
    .nativeEnum(FieldCreateTemplateFieldsTextAlignResponse1);

/** @internal */
export const FieldCreateTemplateFieldsTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldCreateTemplateFieldsTextAlignResponse1> =
    FieldCreateTemplateFieldsTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsTextAlignResponse1$ {
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldCreateTemplateFieldsFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldCreateTemplateFieldsFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldCreateTemplateFieldsTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaInitialsResponseToJSON(
  fieldCreateTemplateFieldsFieldMetaInitialsResponse:
    FieldCreateTemplateFieldsFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaInitialsResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaUnion$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema
  ),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema),
]);

/** @internal */
export type FieldCreateTemplateFieldsFieldMetaUnion$Outbound =
  | FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound
  | FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound;

/** @internal */
export const FieldCreateTemplateFieldsFieldMetaUnion$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldMetaUnion
> = z.union([
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldMetaUnion$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldMetaUnion$Outbound;
}

export function fieldCreateTemplateFieldsFieldMetaUnionToJSON(
  fieldCreateTemplateFieldsFieldMetaUnion:
    FieldCreateTemplateFieldsFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldMetaUnion$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldMetaUnion,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldCreateTemplateFieldsFieldMetaUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldMetaUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldCreateTemplateFieldsFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsFieldResponse$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldCreateTemplateFieldsTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaNameResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaDateResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaDropdownResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaTextResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaNumberResponse$inboundSchema
      ),
    ]),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldsFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldCreateTemplateFieldsFieldMetaRadioResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaInitialsResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaNameResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaEmailResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaDateResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaDropdownResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaCheckboxResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaTextResponse$Outbound
    | FieldCreateTemplateFieldsFieldMetaNumberResponse$Outbound
    | null;
};

/** @internal */
export const FieldCreateTemplateFieldsFieldResponse$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsFieldResponse
> = z.object({
  type: FieldCreateTemplateFieldsTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaDropdownResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldCreateTemplateFieldsFieldMetaNumberResponse$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsFieldResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsFieldResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldCreateTemplateFieldsFieldResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsFieldResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsFieldResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsFieldResponse$Outbound;
}

export function fieldCreateTemplateFieldsFieldResponseToJSON(
  fieldCreateTemplateFieldsFieldResponse:
    FieldCreateTemplateFieldsFieldResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsFieldResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsFieldResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldCreateTemplateFieldsFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsFieldResponse' from JSON`,
  );
}

/** @internal */
export const FieldCreateTemplateFieldsResponse$inboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateTemplateFieldsFieldResponse$inboundSchema),
  ),
});

/** @internal */
export type FieldCreateTemplateFieldsResponse$Outbound = {
  fields: Array<FieldCreateTemplateFieldsFieldResponse$Outbound>;
};

/** @internal */
export const FieldCreateTemplateFieldsResponse$outboundSchema: z.ZodType<
  FieldCreateTemplateFieldsResponse$Outbound,
  z.ZodTypeDef,
  FieldCreateTemplateFieldsResponse
> = z.object({
  fields: z.array(
    z.lazy(() => FieldCreateTemplateFieldsFieldResponse$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldCreateTemplateFieldsResponse$ {
  /** @deprecated use `FieldCreateTemplateFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = FieldCreateTemplateFieldsResponse$inboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldCreateTemplateFieldsResponse$outboundSchema;
  /** @deprecated use `FieldCreateTemplateFieldsResponse$Outbound` instead. */
  export type Outbound = FieldCreateTemplateFieldsResponse$Outbound;
}

export function fieldCreateTemplateFieldsResponseToJSON(
  fieldCreateTemplateFieldsResponse: FieldCreateTemplateFieldsResponse,
): string {
  return JSON.stringify(
    FieldCreateTemplateFieldsResponse$outboundSchema.parse(
      fieldCreateTemplateFieldsResponse,
    ),
  );
}

export function fieldCreateTemplateFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldCreateTemplateFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldCreateTemplateFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldCreateTemplateFieldsResponse' from JSON`,
  );
}
