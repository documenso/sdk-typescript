/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldUpdateTemplateFieldTypeDropdownRequest1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldUpdateTemplateFieldTypeDropdownRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeDropdownRequest1
>;

export const FieldUpdateTemplateFieldTypeDropdownRequest2 = {
  Dropdown: "dropdown",
} as const;
export type FieldUpdateTemplateFieldTypeDropdownRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeDropdownRequest2
>;

export type FieldUpdateTemplateFieldValueDropdown = {
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaDropdownRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeDropdownRequest2;
  values?: Array<FieldUpdateTemplateFieldValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldUpdateTemplateFieldFieldDropdown = {
  type: FieldUpdateTemplateFieldTypeDropdownRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaDropdownRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeCheckboxRequest1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldUpdateTemplateFieldTypeCheckboxRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeCheckboxRequest1
>;

export const FieldUpdateTemplateFieldTypeCheckboxRequest2 = {
  Checkbox: "checkbox",
} as const;
export type FieldUpdateTemplateFieldTypeCheckboxRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeCheckboxRequest2
>;

export type FieldUpdateTemplateFieldValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaCheckboxRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeCheckboxRequest2;
  values?: Array<FieldUpdateTemplateFieldValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldUpdateTemplateFieldFieldCheckbox = {
  type: FieldUpdateTemplateFieldTypeCheckboxRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaCheckboxRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeRadioRequest1 = {
  Radio: "RADIO",
} as const;
export type FieldUpdateTemplateFieldTypeRadioRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeRadioRequest1
>;

export const FieldUpdateTemplateFieldTypeRadioRequest2 = {
  Radio: "radio",
} as const;
export type FieldUpdateTemplateFieldTypeRadioRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeRadioRequest2
>;

export type FieldUpdateTemplateFieldValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaRadioRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeRadioRequest2;
  values?: Array<FieldUpdateTemplateFieldValueRadio> | undefined;
};

export type FieldUpdateTemplateFieldFieldRadio = {
  type: FieldUpdateTemplateFieldTypeRadioRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaRadioRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeNumberRequest1 = {
  Number: "NUMBER",
} as const;
export type FieldUpdateTemplateFieldTypeNumberRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeNumberRequest1
>;

export const FieldUpdateTemplateFieldTypeNumberRequest2 = {
  Number: "number",
} as const;
export type FieldUpdateTemplateFieldTypeNumberRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeNumberRequest2
>;

export const FieldUpdateTemplateFieldTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignNumber = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignNumber
>;

export type FieldUpdateTemplateFieldFieldMetaNumberRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeNumberRequest2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignNumber | undefined;
};

export type FieldUpdateTemplateFieldFieldNumber = {
  type: FieldUpdateTemplateFieldTypeNumberRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaNumberRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeTextRequest1 = {
  Text: "TEXT",
} as const;
export type FieldUpdateTemplateFieldTypeTextRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeTextRequest1
>;

export const FieldUpdateTemplateFieldTypeTextRequest2 = {
  Text: "text",
} as const;
export type FieldUpdateTemplateFieldTypeTextRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeTextRequest2
>;

export const FieldUpdateTemplateFieldTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignText = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignText
>;

export type FieldUpdateTemplateFieldFieldMetaTextRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeTextRequest2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignText | undefined;
};

export type FieldUpdateTemplateFieldFieldText = {
  type: FieldUpdateTemplateFieldTypeTextRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaTextRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeDateRequest1 = {
  Date: "DATE",
} as const;
export type FieldUpdateTemplateFieldTypeDateRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeDateRequest1
>;

export const FieldUpdateTemplateFieldTypeDateRequest2 = {
  Date: "date",
} as const;
export type FieldUpdateTemplateFieldTypeDateRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeDateRequest2
>;

export const FieldUpdateTemplateFieldTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignDate = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignDate
>;

export type FieldUpdateTemplateFieldFieldMetaDateRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeDateRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignDate | undefined;
};

export type FieldUpdateTemplateFieldFieldDate = {
  type: FieldUpdateTemplateFieldTypeDateRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaDateRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeEmailRequest1 = {
  Email: "EMAIL",
} as const;
export type FieldUpdateTemplateFieldTypeEmailRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeEmailRequest1
>;

export const FieldUpdateTemplateFieldTypeEmailRequest2 = {
  Email: "email",
} as const;
export type FieldUpdateTemplateFieldTypeEmailRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeEmailRequest2
>;

export const FieldUpdateTemplateFieldTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignEmail = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignEmail
>;

export type FieldUpdateTemplateFieldFieldMetaEmailRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeEmailRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignEmail | undefined;
};

export type FieldUpdateTemplateFieldFieldEmail = {
  type: FieldUpdateTemplateFieldTypeEmailRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaEmailRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeNameRequest1 = {
  Name: "NAME",
} as const;
export type FieldUpdateTemplateFieldTypeNameRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeNameRequest1
>;

export const FieldUpdateTemplateFieldTypeNameRequest2 = {
  Name: "name",
} as const;
export type FieldUpdateTemplateFieldTypeNameRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeNameRequest2
>;

export const FieldUpdateTemplateFieldTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignName = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignName
>;

export type FieldUpdateTemplateFieldFieldMetaNameRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeNameRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignName | undefined;
};

export type FieldUpdateTemplateFieldFieldName = {
  type: FieldUpdateTemplateFieldTypeNameRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaNameRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeInitialsRequest1 = {
  Initials: "INITIALS",
} as const;
export type FieldUpdateTemplateFieldTypeInitialsRequest1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeInitialsRequest1
>;

export const FieldUpdateTemplateFieldTypeInitialsRequest2 = {
  Initials: "initials",
} as const;
export type FieldUpdateTemplateFieldTypeInitialsRequest2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeInitialsRequest2
>;

export const FieldUpdateTemplateFieldTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignInitials = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignInitials
>;

export type FieldUpdateTemplateFieldFieldMetaInitialsRequest = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldTypeInitialsRequest2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignInitials | undefined;
};

export type FieldUpdateTemplateFieldFieldInitials = {
  type: FieldUpdateTemplateFieldTypeInitialsRequest1;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaInitialsRequest | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldTypeFreeSignature = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeFreeSignature
>;

export type FieldUpdateTemplateFieldFieldFreeSignature = {
  type: FieldUpdateTemplateFieldTypeFreeSignature;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldTypeSignature = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeSignature
>;

export type FieldUpdateTemplateFieldFieldSignature = {
  type: FieldUpdateTemplateFieldTypeSignature;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export type FieldUpdateTemplateFieldFieldUnion =
  | FieldUpdateTemplateFieldFieldSignature
  | FieldUpdateTemplateFieldFieldFreeSignature
  | FieldUpdateTemplateFieldFieldInitials
  | FieldUpdateTemplateFieldFieldName
  | FieldUpdateTemplateFieldFieldEmail
  | FieldUpdateTemplateFieldFieldDate
  | FieldUpdateTemplateFieldFieldText
  | FieldUpdateTemplateFieldFieldNumber
  | FieldUpdateTemplateFieldFieldRadio
  | FieldUpdateTemplateFieldFieldCheckbox
  | FieldUpdateTemplateFieldFieldDropdown;

export type FieldUpdateTemplateFieldRequest = {
  templateId: number;
  field:
    | FieldUpdateTemplateFieldFieldSignature
    | FieldUpdateTemplateFieldFieldFreeSignature
    | FieldUpdateTemplateFieldFieldInitials
    | FieldUpdateTemplateFieldFieldName
    | FieldUpdateTemplateFieldFieldEmail
    | FieldUpdateTemplateFieldFieldDate
    | FieldUpdateTemplateFieldFieldText
    | FieldUpdateTemplateFieldFieldNumber
    | FieldUpdateTemplateFieldFieldRadio
    | FieldUpdateTemplateFieldFieldCheckbox
    | FieldUpdateTemplateFieldFieldDropdown;
};

export const FieldUpdateTemplateFieldTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldUpdateTemplateFieldTypeResponse = ClosedEnum<
  typeof FieldUpdateTemplateFieldTypeResponse
>;

export const FieldUpdateTemplateFieldFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeDropdown
>;

export type FieldUpdateTemplateFieldValueResponse3 = {
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeDropdown;
  values?: Array<FieldUpdateTemplateFieldValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeCheckbox
>;

export type FieldUpdateTemplateFieldValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeCheckbox;
  values?: Array<FieldUpdateTemplateFieldValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeRadio = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeRadio
>;

export type FieldUpdateTemplateFieldValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeRadio;
  values?: Array<FieldUpdateTemplateFieldValueResponse1> | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeNumber = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeNumber
>;

export const FieldUpdateTemplateFieldTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse6 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse6
>;

export type FieldUpdateTemplateFieldFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse6 | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeText = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeText
>;

export const FieldUpdateTemplateFieldTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse5 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse5
>;

export type FieldUpdateTemplateFieldFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse5 | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeDate = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeDate
>;

export const FieldUpdateTemplateFieldTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse4 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse4
>;

export type FieldUpdateTemplateFieldFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse4 | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeEmail = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeEmail
>;

export const FieldUpdateTemplateFieldTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse3 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse3
>;

export type FieldUpdateTemplateFieldFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse3 | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeName = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeName
>;

export const FieldUpdateTemplateFieldTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse2
>;

export type FieldUpdateTemplateFieldFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse2 | undefined;
};

export const FieldUpdateTemplateFieldFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldUpdateTemplateFieldFieldMetaTypeInitials = ClosedEnum<
  typeof FieldUpdateTemplateFieldFieldMetaTypeInitials
>;

export const FieldUpdateTemplateFieldTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldTextAlignResponse1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldTextAlignResponse1
>;

export type FieldUpdateTemplateFieldFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldTextAlignResponse1 | undefined;
};

export type FieldUpdateTemplateFieldFieldMetaUnion =
  | FieldUpdateTemplateFieldFieldMetaRadioResponse
  | FieldUpdateTemplateFieldFieldMetaInitialsResponse
  | FieldUpdateTemplateFieldFieldMetaNameResponse
  | FieldUpdateTemplateFieldFieldMetaEmailResponse
  | FieldUpdateTemplateFieldFieldMetaDateResponse
  | FieldUpdateTemplateFieldFieldMetaDropdownResponse
  | FieldUpdateTemplateFieldFieldMetaCheckboxResponse
  | FieldUpdateTemplateFieldFieldMetaTextResponse
  | FieldUpdateTemplateFieldFieldMetaNumberResponse;

/**
 * Successful response
 */
export type FieldUpdateTemplateFieldResponse = {
  type: FieldUpdateTemplateFieldTypeResponse;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldFieldMetaRadioResponse
    | FieldUpdateTemplateFieldFieldMetaInitialsResponse
    | FieldUpdateTemplateFieldFieldMetaNameResponse
    | FieldUpdateTemplateFieldFieldMetaEmailResponse
    | FieldUpdateTemplateFieldFieldMetaDateResponse
    | FieldUpdateTemplateFieldFieldMetaDropdownResponse
    | FieldUpdateTemplateFieldFieldMetaCheckboxResponse
    | FieldUpdateTemplateFieldFieldMetaTextResponse
    | FieldUpdateTemplateFieldFieldMetaNumberResponse
    | null;
};

/** @internal */
export const FieldUpdateTemplateFieldTypeDropdownRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDropdownRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeDropdownRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeDropdownRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDropdownRequest1> =
    FieldUpdateTemplateFieldTypeDropdownRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeDropdownRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeDropdownRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeDropdownRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeDropdownRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeDropdownRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeDropdownRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDropdownRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeDropdownRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeDropdownRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDropdownRequest2> =
    FieldUpdateTemplateFieldTypeDropdownRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeDropdownRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeDropdownRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeDropdownRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeDropdownRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeDropdownRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueDropdown$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueDropdown$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldValueDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueDropdown$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueDropdown$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueDropdown$Outbound;
}

export function fieldUpdateTemplateFieldValueDropdownToJSON(
  fieldUpdateTemplateFieldValueDropdown: FieldUpdateTemplateFieldValueDropdown,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueDropdown$outboundSchema.parse(
      fieldUpdateTemplateFieldValueDropdown,
    ),
  );
}

export function fieldUpdateTemplateFieldValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDropdownRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDropdownRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeDropdownRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaDropdownRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDropdownRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaDropdownRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeDropdownRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaDropdownRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownRequest$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaDropdownRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaDropdownRequest:
    FieldUpdateTemplateFieldFieldMetaDropdownRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaDropdownRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaDropdownRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaDropdownRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaDropdownRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaDropdownRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldDropdown$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeDropdownRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaDropdownRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldDropdown$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldDropdown
> = z.object({
  type: FieldUpdateTemplateFieldTypeDropdownRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaDropdownRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldDropdown$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldDropdown$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldDropdown$Outbound;
}

export function fieldUpdateTemplateFieldFieldDropdownToJSON(
  fieldUpdateTemplateFieldFieldDropdown: FieldUpdateTemplateFieldFieldDropdown,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldDropdown$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldDropdown,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeCheckboxRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeCheckboxRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeCheckboxRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeCheckboxRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeCheckboxRequest1> =
    FieldUpdateTemplateFieldTypeCheckboxRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeCheckboxRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeCheckboxRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeCheckboxRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeCheckboxRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeCheckboxRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeCheckboxRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeCheckboxRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeCheckboxRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeCheckboxRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeCheckboxRequest2> =
    FieldUpdateTemplateFieldTypeCheckboxRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeCheckboxRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeCheckboxRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeCheckboxRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeCheckboxRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeCheckboxRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueCheckbox$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueCheckbox$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldValueCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueCheckbox$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueCheckbox$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueCheckbox$Outbound;
}

export function fieldUpdateTemplateFieldValueCheckboxToJSON(
  fieldUpdateTemplateFieldValueCheckbox: FieldUpdateTemplateFieldValueCheckbox,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueCheckbox$outboundSchema.parse(
      fieldUpdateTemplateFieldValueCheckbox,
    ),
  );
}

export function fieldUpdateTemplateFieldValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaCheckboxRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeCheckboxRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaCheckboxRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaCheckboxRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeCheckboxRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaCheckboxRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxRequest$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaCheckboxRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaCheckboxRequest:
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaCheckboxRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaCheckboxRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaCheckboxRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaCheckboxRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaCheckboxRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldCheckbox$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeCheckboxRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaCheckboxRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldCheckbox$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldCheckbox
> = z.object({
  type: FieldUpdateTemplateFieldTypeCheckboxRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaCheckboxRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldCheckbox$Outbound;
}

export function fieldUpdateTemplateFieldFieldCheckboxToJSON(
  fieldUpdateTemplateFieldFieldCheckbox: FieldUpdateTemplateFieldFieldCheckbox,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldCheckbox$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldCheckbox,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeRadioRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeRadioRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeRadioRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeRadioRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeRadioRequest1> =
    FieldUpdateTemplateFieldTypeRadioRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeRadioRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeRadioRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeRadioRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeRadioRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeRadioRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeRadioRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeRadioRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeRadioRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeRadioRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeRadioRequest2> =
    FieldUpdateTemplateFieldTypeRadioRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeRadioRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeRadioRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeRadioRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeRadioRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeRadioRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueRadio$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueRadio$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueRadio$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueRadio$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldValueRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueRadio$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueRadio$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueRadio$Outbound;
}

export function fieldUpdateTemplateFieldValueRadioToJSON(
  fieldUpdateTemplateFieldValueRadio: FieldUpdateTemplateFieldValueRadio,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueRadio$outboundSchema.parse(
      fieldUpdateTemplateFieldValueRadio,
    ),
  );
}

export function fieldUpdateTemplateFieldValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaRadioRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaRadioRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeRadioRequest2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaRadioRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaRadioRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaRadioRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaRadioRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeRadioRequest2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaRadioRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaRadioRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaRadioRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaRadioRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaRadioRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaRadioRequest:
    FieldUpdateTemplateFieldFieldMetaRadioRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaRadioRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaRadioRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaRadioRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaRadioRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaRadioRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaRadioRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldRadio$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeRadioRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaRadioRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaRadioRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldRadio$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldRadio
> = z.object({
  type: FieldUpdateTemplateFieldTypeRadioRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaRadioRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldRadio$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldRadio$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldRadio$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldRadio$Outbound;
}

export function fieldUpdateTemplateFieldFieldRadioToJSON(
  fieldUpdateTemplateFieldFieldRadio: FieldUpdateTemplateFieldFieldRadio,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldRadio$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldRadio,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeNumberRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNumberRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeNumberRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeNumberRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNumberRequest1> =
    FieldUpdateTemplateFieldTypeNumberRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeNumberRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeNumberRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeNumberRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeNumberRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeNumberRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeNumberRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNumberRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeNumberRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeNumberRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNumberRequest2> =
    FieldUpdateTemplateFieldTypeNumberRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeNumberRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeNumberRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeNumberRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeNumberRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeNumberRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignNumber> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignNumber);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignNumber> =
    FieldUpdateTemplateFieldTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNumberRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNumberRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeNumberRequest2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignNumber$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaNumberRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNumberRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNumberRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaNumberRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeNumberRequest2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaNumberRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaNumberRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaNumberRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberRequest$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaNumberRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaNumberRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaNumberRequest:
    FieldUpdateTemplateFieldFieldMetaNumberRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaNumberRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaNumberRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaNumberRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaNumberRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaNumberRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaNumberRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldNumber$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeNumberRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaNumberRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaNumberRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldNumber$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldNumber
> = z.object({
  type: FieldUpdateTemplateFieldTypeNumberRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaNumberRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldNumber$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldNumber$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldNumber$Outbound;
}

export function fieldUpdateTemplateFieldFieldNumberToJSON(
  fieldUpdateTemplateFieldFieldNumber: FieldUpdateTemplateFieldFieldNumber,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldNumber$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldNumber,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeTextRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeTextRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeTextRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeTextRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeTextRequest1> =
    FieldUpdateTemplateFieldTypeTextRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeTextRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeTextRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeTextRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeTextRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeTextRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeTextRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeTextRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeTextRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeTextRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeTextRequest2> =
    FieldUpdateTemplateFieldTypeTextRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeTextRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeTextRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeTextRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeTextRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeTextRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignText> = z.nativeEnum(
    FieldUpdateTemplateFieldTextAlignText,
  );

/** @internal */
export const FieldUpdateTemplateFieldTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignText> =
    FieldUpdateTemplateFieldTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignText$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignText$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTextRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaTextRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeTextRequest2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaTextRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTextRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaTextRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaTextRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeTextRequest2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTextRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTextRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTextRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaTextRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaTextRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaTextRequest:
    FieldUpdateTemplateFieldFieldMetaTextRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaTextRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaTextRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaTextRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaTextRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaTextRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaTextRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldText$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeTextRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaTextRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldText$Outbound = {
  type: string;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaTextRequest$Outbound | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldText$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldText$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldText
> = z.object({
  type: FieldUpdateTemplateFieldTypeTextRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaTextRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldText$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldText$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldText$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldText$Outbound;
}

export function fieldUpdateTemplateFieldFieldTextToJSON(
  fieldUpdateTemplateFieldFieldText: FieldUpdateTemplateFieldFieldText,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldText$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldText,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldText' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeDateRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDateRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeDateRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeDateRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDateRequest1> =
    FieldUpdateTemplateFieldTypeDateRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeDateRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeDateRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeDateRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeDateRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeDateRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeDateRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDateRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeDateRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeDateRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeDateRequest2> =
    FieldUpdateTemplateFieldTypeDateRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeDateRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeDateRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeDateRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeDateRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeDateRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignDate> = z.nativeEnum(
    FieldUpdateTemplateFieldTextAlignDate,
  );

/** @internal */
export const FieldUpdateTemplateFieldTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignDate> =
    FieldUpdateTemplateFieldTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDateRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeDateRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaDateRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDateRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDateRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaDateRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeDateRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaDateRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaDateRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaDateRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaDateRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaDateRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaDateRequest:
    FieldUpdateTemplateFieldFieldMetaDateRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaDateRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaDateRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaDateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaDateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaDateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaDateRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldDate$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeDateRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaDateRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldDate$Outbound = {
  type: string;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaDateRequest$Outbound | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldDate$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldDate$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldDate
> = z.object({
  type: FieldUpdateTemplateFieldTypeDateRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaDateRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldDate$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldDate$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldDate$Outbound;
}

export function fieldUpdateTemplateFieldFieldDateToJSON(
  fieldUpdateTemplateFieldFieldDate: FieldUpdateTemplateFieldFieldDate,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldDate$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldDate,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeEmailRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeEmailRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeEmailRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeEmailRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeEmailRequest1> =
    FieldUpdateTemplateFieldTypeEmailRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeEmailRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeEmailRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeEmailRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeEmailRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeEmailRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeEmailRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeEmailRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeEmailRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeEmailRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeEmailRequest2> =
    FieldUpdateTemplateFieldTypeEmailRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeEmailRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeEmailRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeEmailRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeEmailRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeEmailRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignEmail> = z.nativeEnum(
    FieldUpdateTemplateFieldTextAlignEmail,
  );

/** @internal */
export const FieldUpdateTemplateFieldTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignEmail> =
    FieldUpdateTemplateFieldTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaEmailRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaEmailRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeEmailRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaEmailRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaEmailRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaEmailRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaEmailRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeEmailRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignEmail$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaEmailRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaEmailRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaEmailRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaEmailRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaEmailRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaEmailRequest:
    FieldUpdateTemplateFieldFieldMetaEmailRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaEmailRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaEmailRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaEmailRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaEmailRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaEmailRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaEmailRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldEmail$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeEmailRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaEmailRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaEmailRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldEmail$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldEmail
> = z.object({
  type: FieldUpdateTemplateFieldTypeEmailRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaEmailRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldEmail$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldEmail$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldEmail$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldEmail$Outbound;
}

export function fieldUpdateTemplateFieldFieldEmailToJSON(
  fieldUpdateTemplateFieldFieldEmail: FieldUpdateTemplateFieldFieldEmail,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldEmail$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldEmail,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeNameRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNameRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeNameRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeNameRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNameRequest1> =
    FieldUpdateTemplateFieldTypeNameRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeNameRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeNameRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeNameRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeNameRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeNameRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeNameRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNameRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeNameRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeNameRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeNameRequest2> =
    FieldUpdateTemplateFieldTypeNameRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeNameRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeNameRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeNameRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeNameRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeNameRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignName> = z.nativeEnum(
    FieldUpdateTemplateFieldTextAlignName,
  );

/** @internal */
export const FieldUpdateTemplateFieldTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignName> =
    FieldUpdateTemplateFieldTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignName$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignName$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNameRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNameRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeNameRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaNameRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNameRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNameRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaNameRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeNameRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaNameRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaNameRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaNameRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaNameRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaNameRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaNameRequest:
    FieldUpdateTemplateFieldFieldMetaNameRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaNameRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaNameRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaNameRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaNameRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaNameRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldName$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeNameRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaNameRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldName$Outbound = {
  type: string;
  fieldMeta?: FieldUpdateTemplateFieldFieldMetaNameRequest$Outbound | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldName$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldName$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldName
> = z.object({
  type: FieldUpdateTemplateFieldTypeNameRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaNameRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldName$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldName$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldName$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldName$Outbound;
}

export function fieldUpdateTemplateFieldFieldNameToJSON(
  fieldUpdateTemplateFieldFieldName: FieldUpdateTemplateFieldFieldName,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldName$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldName,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldName' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeInitialsRequest1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeInitialsRequest1> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeInitialsRequest1);

/** @internal */
export const FieldUpdateTemplateFieldTypeInitialsRequest1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeInitialsRequest1> =
    FieldUpdateTemplateFieldTypeInitialsRequest1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeInitialsRequest1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeInitialsRequest1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeInitialsRequest1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeInitialsRequest1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeInitialsRequest1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTypeInitialsRequest2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeInitialsRequest2> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeInitialsRequest2);

/** @internal */
export const FieldUpdateTemplateFieldTypeInitialsRequest2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeInitialsRequest2> =
    FieldUpdateTemplateFieldTypeInitialsRequest2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeInitialsRequest2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeInitialsRequest2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeInitialsRequest2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeInitialsRequest2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeInitialsRequest2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignInitials> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignInitials);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignInitials> =
    FieldUpdateTemplateFieldTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaInitialsRequest$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaInitialsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeInitialsRequest2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaInitialsRequest$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaInitialsRequest$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaInitialsRequest
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldTypeInitialsRequest2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaInitialsRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsRequest$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsRequest$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsRequest$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaInitialsRequestToJSON(
  fieldUpdateTemplateFieldFieldMetaInitialsRequest:
    FieldUpdateTemplateFieldFieldMetaInitialsRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaInitialsRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaInitialsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaInitialsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaInitialsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaInitialsRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldInitials$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeInitialsRequest1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldFieldMetaInitialsRequest$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldInitials$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldInitials
> = z.object({
  type: FieldUpdateTemplateFieldTypeInitialsRequest1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaInitialsRequest$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldInitials$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldInitials$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldInitials$Outbound;
}

export function fieldUpdateTemplateFieldFieldInitialsToJSON(
  fieldUpdateTemplateFieldFieldInitials: FieldUpdateTemplateFieldFieldInitials,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldInitials$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldInitials,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeFreeSignature> = z
    .nativeEnum(FieldUpdateTemplateFieldTypeFreeSignature);

/** @internal */
export const FieldUpdateTemplateFieldTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeFreeSignature> =
    FieldUpdateTemplateFieldTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeFreeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema:
  z.ZodType<FieldUpdateTemplateFieldFieldFreeSignature, z.ZodTypeDef, unknown> =
    z.object({
      type: FieldUpdateTemplateFieldTypeFreeSignature$inboundSchema,
      id: z.number(),
      pageNumber: z.number().optional(),
      pageX: z.number().optional(),
      pageY: z.number().optional(),
      width: z.number().optional(),
      height: z.number().optional(),
    });

/** @internal */
export type FieldUpdateTemplateFieldFieldFreeSignature$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldFreeSignature
  > = z.object({
    type: FieldUpdateTemplateFieldTypeFreeSignature$outboundSchema,
    id: z.number(),
    pageNumber: z.number().optional(),
    pageX: z.number().optional(),
    pageY: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldFreeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldFreeSignature$Outbound;
}

export function fieldUpdateTemplateFieldFieldFreeSignatureToJSON(
  fieldUpdateTemplateFieldFieldFreeSignature:
    FieldUpdateTemplateFieldFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldFreeSignature,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeSignature> = z.nativeEnum(
    FieldUpdateTemplateFieldTypeSignature,
  );

/** @internal */
export const FieldUpdateTemplateFieldTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeSignature> =
    FieldUpdateTemplateFieldTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeSignature$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldSignature$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeSignature$inboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldFieldSignature$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldSignature$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldSignature
> = z.object({
  type: FieldUpdateTemplateFieldTypeSignature$outboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldSignature$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldSignature$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldSignature$Outbound;
}

export function fieldUpdateTemplateFieldFieldSignatureToJSON(
  fieldUpdateTemplateFieldFieldSignature:
    FieldUpdateTemplateFieldFieldSignature,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldSignature$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldSignature,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldUnion$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldFieldSignature$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldInitials$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldName$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldEmail$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldDate$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldText$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldNumber$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldRadio$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldCheckbox$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldFieldUnion$Outbound =
  | FieldUpdateTemplateFieldFieldSignature$Outbound
  | FieldUpdateTemplateFieldFieldFreeSignature$Outbound
  | FieldUpdateTemplateFieldFieldInitials$Outbound
  | FieldUpdateTemplateFieldFieldName$Outbound
  | FieldUpdateTemplateFieldFieldEmail$Outbound
  | FieldUpdateTemplateFieldFieldDate$Outbound
  | FieldUpdateTemplateFieldFieldText$Outbound
  | FieldUpdateTemplateFieldFieldNumber$Outbound
  | FieldUpdateTemplateFieldFieldRadio$Outbound
  | FieldUpdateTemplateFieldFieldCheckbox$Outbound
  | FieldUpdateTemplateFieldFieldDropdown$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldFieldUnion$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldUnion
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldFieldSignature$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldInitials$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldName$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldEmail$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldDate$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldText$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldNumber$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldRadio$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldCheckbox$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldUnion$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldUnion$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldFieldUnion$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldUnion$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldUnion$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldUnion$Outbound;
}

export function fieldUpdateTemplateFieldFieldUnionToJSON(
  fieldUpdateTemplateFieldFieldUnion: FieldUpdateTemplateFieldFieldUnion,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldUnion$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldUnion,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldUpdateTemplateFieldFieldSignature$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldFreeSignature$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldInitials$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldName$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldEmail$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldDate$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldText$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldNumber$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldRadio$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldCheckbox$inboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldDropdown$inboundSchema),
  ]),
});

/** @internal */
export type FieldUpdateTemplateFieldRequest$Outbound = {
  templateId: number;
  field:
    | FieldUpdateTemplateFieldFieldSignature$Outbound
    | FieldUpdateTemplateFieldFieldFreeSignature$Outbound
    | FieldUpdateTemplateFieldFieldInitials$Outbound
    | FieldUpdateTemplateFieldFieldName$Outbound
    | FieldUpdateTemplateFieldFieldEmail$Outbound
    | FieldUpdateTemplateFieldFieldDate$Outbound
    | FieldUpdateTemplateFieldFieldText$Outbound
    | FieldUpdateTemplateFieldFieldNumber$Outbound
    | FieldUpdateTemplateFieldFieldRadio$Outbound
    | FieldUpdateTemplateFieldFieldCheckbox$Outbound
    | FieldUpdateTemplateFieldFieldDropdown$Outbound;
};

/** @internal */
export const FieldUpdateTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldRequest
> = z.object({
  templateId: z.number(),
  field: z.union([
    z.lazy(() => FieldUpdateTemplateFieldFieldSignature$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldFreeSignature$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldInitials$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldName$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldEmail$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldDate$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldText$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldNumber$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldRadio$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldCheckbox$outboundSchema),
    z.lazy(() => FieldUpdateTemplateFieldFieldDropdown$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldRequest$Outbound;
}

export function fieldUpdateTemplateFieldRequestToJSON(
  fieldUpdateTemplateFieldRequest: FieldUpdateTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeResponse> = z.nativeEnum(
    FieldUpdateTemplateFieldTypeResponse,
  );

/** @internal */
export const FieldUpdateTemplateFieldTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTypeResponse> =
    FieldUpdateTemplateFieldTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTypeResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTypeResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTypeResponse$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeDropdown> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeDropdown);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeDropdown> =
    FieldUpdateTemplateFieldFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueResponse3$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueResponse3$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueResponse3$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldValueResponse3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueResponse3$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse3$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueResponse3$Outbound;
}

export function fieldUpdateTemplateFieldValueResponse3ToJSON(
  fieldUpdateTemplateFieldValueResponse3:
    FieldUpdateTemplateFieldValueResponse3,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueResponse3$outboundSchema.parse(
      fieldUpdateTemplateFieldValueResponse3,
    ),
  );
}

export function fieldUpdateTemplateFieldValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaDropdownResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaDropdownResponse:
    FieldUpdateTemplateFieldFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaDropdownResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeCheckbox);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeCheckbox> =
    FieldUpdateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueResponse2$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueResponse2$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueResponse2$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldValueResponse2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueResponse2$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse2$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueResponse2$Outbound;
}

export function fieldUpdateTemplateFieldValueResponse2ToJSON(
  fieldUpdateTemplateFieldValueResponse2:
    FieldUpdateTemplateFieldValueResponse2,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueResponse2$outboundSchema.parse(
      fieldUpdateTemplateFieldValueResponse2,
    ),
  );
}

export function fieldUpdateTemplateFieldValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaCheckboxResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaCheckboxResponse:
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeRadio> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeRadio);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeRadio> =
    FieldUpdateTemplateFieldFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldValueResponse1$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldValueResponse1$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldValueResponse1$ {
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldValueResponse1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldValueResponse1$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldValueResponse1$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldValueResponse1$Outbound;
}

export function fieldUpdateTemplateFieldValueResponse1ToJSON(
  fieldUpdateTemplateFieldValueResponse1:
    FieldUpdateTemplateFieldValueResponse1,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldValueResponse1$outboundSchema.parse(
      fieldUpdateTemplateFieldValueResponse1,
    ),
  );
}

export function fieldUpdateTemplateFieldValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldValueResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldValueResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaRadioResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaRadioResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaRadioResponse:
    FieldUpdateTemplateFieldFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaRadioResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeNumber> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeNumber);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeNumber> =
    FieldUpdateTemplateFieldFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse6> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse6);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse6> =
    FieldUpdateTemplateFieldTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse6$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaNumberResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaNumberResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaNumberResponse:
    FieldUpdateTemplateFieldFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaNumberResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeText> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeText);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeText> =
    FieldUpdateTemplateFieldFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeText$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse5> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse5);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse5> =
    FieldUpdateTemplateFieldTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse5$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTextResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaTextResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaTextResponse:
    FieldUpdateTemplateFieldFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaTextResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeDate> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeDate);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeDate> =
    FieldUpdateTemplateFieldFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse4> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse4);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse4> =
    FieldUpdateTemplateFieldTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse4$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaDateResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaDateResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaDateResponse:
    FieldUpdateTemplateFieldFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaDateResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeEmail> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeEmail);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeEmail> =
    FieldUpdateTemplateFieldFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse3> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse3);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse3> =
    FieldUpdateTemplateFieldTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse3$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaEmailResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaEmailResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaEmailResponse:
    FieldUpdateTemplateFieldFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaEmailResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeName> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeName);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeName> =
    FieldUpdateTemplateFieldFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeName$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse2> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse2);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse2> =
    FieldUpdateTemplateFieldTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse2$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaNameResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaNameResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaNameResponse:
    FieldUpdateTemplateFieldFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaNameResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeInitials> = z
    .nativeEnum(FieldUpdateTemplateFieldFieldMetaTypeInitials);

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldFieldMetaTypeInitials> =
    FieldUpdateTemplateFieldFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaTypeInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse1> = z
    .nativeEnum(FieldUpdateTemplateFieldTextAlignResponse1);

/** @internal */
export const FieldUpdateTemplateFieldTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldTextAlignResponse1> =
    FieldUpdateTemplateFieldTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldTextAlignResponse1$ {
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaInitialsResponseToJSON(
  fieldUpdateTemplateFieldFieldMetaInitialsResponse:
    FieldUpdateTemplateFieldFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaInitialsResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaUnion$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldFieldMetaUnion$Outbound =
  | FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound
  | FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldFieldMetaUnion$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldFieldMetaUnion
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldFieldMetaUnion$ {
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldFieldMetaUnion$Outbound;
}

export function fieldUpdateTemplateFieldFieldMetaUnionToJSON(
  fieldUpdateTemplateFieldFieldMetaUnion:
    FieldUpdateTemplateFieldFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldFieldMetaUnion$outboundSchema.parse(
      fieldUpdateTemplateFieldFieldMetaUnion,
    ),
  );
}

export function fieldUpdateTemplateFieldFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldResponse$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() => FieldUpdateTemplateFieldFieldMetaNameResponse$inboundSchema),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() => FieldUpdateTemplateFieldFieldMetaDateResponse$inboundSchema),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaDropdownResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() => FieldUpdateTemplateFieldFieldMetaTextResponse$inboundSchema),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaNumberResponse$inboundSchema
      ),
    ]),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldFieldMetaRadioResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaInitialsResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaNameResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaEmailResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaDateResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaDropdownResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaCheckboxResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaTextResponse$Outbound
    | FieldUpdateTemplateFieldFieldMetaNumberResponse$Outbound
    | null;
};

/** @internal */
export const FieldUpdateTemplateFieldResponse$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldResponse
> = z.object({
  type: FieldUpdateTemplateFieldTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaDropdownResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldFieldMetaNumberResponse$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldResponse$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldResponse$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldResponse$Outbound;
}

export function fieldUpdateTemplateFieldResponseToJSON(
  fieldUpdateTemplateFieldResponse: FieldUpdateTemplateFieldResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldResponse' from JSON`,
  );
}
