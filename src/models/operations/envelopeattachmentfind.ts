/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EnvelopeAttachmentFindRequest = {
  envelopeId: string;
  token?: string | undefined;
};

export const EnvelopeAttachmentFindType = {
  Link: "link",
} as const;
export type EnvelopeAttachmentFindType = ClosedEnum<
  typeof EnvelopeAttachmentFindType
>;

export type EnvelopeAttachmentFindData = {
  id: string;
  type: EnvelopeAttachmentFindType;
  label: string;
  data: string;
};

/**
 * Successful response
 */
export type EnvelopeAttachmentFindResponse = {
  data: Array<EnvelopeAttachmentFindData>;
};

/** @internal */
export const EnvelopeAttachmentFindRequest$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  token: z.string().optional(),
});

/** @internal */
export type EnvelopeAttachmentFindRequest$Outbound = {
  envelopeId: string;
  token?: string | undefined;
};

/** @internal */
export const EnvelopeAttachmentFindRequest$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindRequest$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindRequest
> = z.object({
  envelopeId: z.string(),
  token: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindRequest$ {
  /** @deprecated use `EnvelopeAttachmentFindRequest$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentFindRequest$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindRequest$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentFindRequest$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindRequest$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindRequest$Outbound;
}

export function envelopeAttachmentFindRequestToJSON(
  envelopeAttachmentFindRequest: EnvelopeAttachmentFindRequest,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindRequest$outboundSchema.parse(
      envelopeAttachmentFindRequest,
    ),
  );
}

export function envelopeAttachmentFindRequestFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentFindRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentFindRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentFindRequest' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentFindType$inboundSchema: z.ZodNativeEnum<
  typeof EnvelopeAttachmentFindType
> = z.nativeEnum(EnvelopeAttachmentFindType);

/** @internal */
export const EnvelopeAttachmentFindType$outboundSchema: z.ZodNativeEnum<
  typeof EnvelopeAttachmentFindType
> = EnvelopeAttachmentFindType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindType$ {
  /** @deprecated use `EnvelopeAttachmentFindType$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentFindType$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindType$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentFindType$outboundSchema;
}

/** @internal */
export const EnvelopeAttachmentFindData$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: EnvelopeAttachmentFindType$inboundSchema,
  label: z.string(),
  data: z.string(),
});

/** @internal */
export type EnvelopeAttachmentFindData$Outbound = {
  id: string;
  type: string;
  label: string;
  data: string;
};

/** @internal */
export const EnvelopeAttachmentFindData$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindData$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindData
> = z.object({
  id: z.string(),
  type: EnvelopeAttachmentFindType$outboundSchema,
  label: z.string(),
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindData$ {
  /** @deprecated use `EnvelopeAttachmentFindData$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentFindData$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindData$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentFindData$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindData$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindData$Outbound;
}

export function envelopeAttachmentFindDataToJSON(
  envelopeAttachmentFindData: EnvelopeAttachmentFindData,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindData$outboundSchema.parse(envelopeAttachmentFindData),
  );
}

export function envelopeAttachmentFindDataFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentFindData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentFindData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentFindData' from JSON`,
  );
}

/** @internal */
export const EnvelopeAttachmentFindResponse$inboundSchema: z.ZodType<
  EnvelopeAttachmentFindResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => EnvelopeAttachmentFindData$inboundSchema)),
});

/** @internal */
export type EnvelopeAttachmentFindResponse$Outbound = {
  data: Array<EnvelopeAttachmentFindData$Outbound>;
};

/** @internal */
export const EnvelopeAttachmentFindResponse$outboundSchema: z.ZodType<
  EnvelopeAttachmentFindResponse$Outbound,
  z.ZodTypeDef,
  EnvelopeAttachmentFindResponse
> = z.object({
  data: z.array(z.lazy(() => EnvelopeAttachmentFindData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvelopeAttachmentFindResponse$ {
  /** @deprecated use `EnvelopeAttachmentFindResponse$inboundSchema` instead. */
  export const inboundSchema = EnvelopeAttachmentFindResponse$inboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindResponse$outboundSchema` instead. */
  export const outboundSchema = EnvelopeAttachmentFindResponse$outboundSchema;
  /** @deprecated use `EnvelopeAttachmentFindResponse$Outbound` instead. */
  export type Outbound = EnvelopeAttachmentFindResponse$Outbound;
}

export function envelopeAttachmentFindResponseToJSON(
  envelopeAttachmentFindResponse: EnvelopeAttachmentFindResponse,
): string {
  return JSON.stringify(
    EnvelopeAttachmentFindResponse$outboundSchema.parse(
      envelopeAttachmentFindResponse,
    ),
  );
}

export function envelopeAttachmentFindResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnvelopeAttachmentFindResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvelopeAttachmentFindResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvelopeAttachmentFindResponse' from JSON`,
  );
}
