/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the document.
 */
export const DocumentUpdateDocumentVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the document.
 */
export type DocumentUpdateDocumentVisibilityRequest = ClosedEnum<
  typeof DocumentUpdateDocumentVisibilityRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentUpdateDocumentGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentUpdateDocumentGlobalAccessAuthRequest = ClosedEnum<
  typeof DocumentUpdateDocumentGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentUpdateDocumentGlobalActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentUpdateDocumentGlobalActionAuthRequest = ClosedEnum<
  typeof DocumentUpdateDocumentGlobalActionAuthRequest
>;

export type DocumentUpdateDocumentData = {
  /**
   * The title of the document.
   */
  title?: string | undefined;
  /**
   * The external ID of the document.
   */
  externalId?: string | null | undefined;
  /**
   * The visibility of the document.
   */
  visibility?: DocumentUpdateDocumentVisibilityRequest | undefined;
  globalAccessAuth?:
    | Array<DocumentUpdateDocumentGlobalAccessAuthRequest>
    | undefined;
  globalActionAuth?:
    | Array<DocumentUpdateDocumentGlobalActionAuthRequest>
    | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentUpdateDocumentDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentUpdateDocumentDateFormat = ClosedEnum<
  typeof DocumentUpdateDocumentDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentUpdateDocumentDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentUpdateDocumentDistributionMethod = ClosedEnum<
  typeof DocumentUpdateDocumentDistributionMethod
>;

export const DocumentUpdateDocumentSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentUpdateDocumentSigningOrder = ClosedEnum<
  typeof DocumentUpdateDocumentSigningOrder
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentUpdateDocumentLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentUpdateDocumentLanguage = ClosedEnum<
  typeof DocumentUpdateDocumentLanguage
>;

export type DocumentUpdateDocumentEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentUpdateDocumentMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentUpdateDocumentDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: DocumentUpdateDocumentDistributionMethod | undefined;
  signingOrder?: DocumentUpdateDocumentSigningOrder | undefined;
  allowDictateNextSigner?: boolean | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentUpdateDocumentLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  emailSettings?: DocumentUpdateDocumentEmailSettings | undefined;
};

export type DocumentUpdateDocumentRequest = {
  documentId: number;
  data?: DocumentUpdateDocumentData | undefined;
  meta?: DocumentUpdateDocumentMeta | undefined;
};

export const DocumentUpdateDocumentVisibilityResponse = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentUpdateDocumentVisibilityResponse = ClosedEnum<
  typeof DocumentUpdateDocumentVisibilityResponse
>;

export const DocumentUpdateDocumentStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentUpdateDocumentStatus = ClosedEnum<
  typeof DocumentUpdateDocumentStatus
>;

export const DocumentUpdateDocumentSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentUpdateDocumentSource = ClosedEnum<
  typeof DocumentUpdateDocumentSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentUpdateDocumentGlobalAccessAuthResponse = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentUpdateDocumentGlobalAccessAuthResponse = ClosedEnum<
  typeof DocumentUpdateDocumentGlobalAccessAuthResponse
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentUpdateDocumentGlobalActionAuthResponse = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentUpdateDocumentGlobalActionAuthResponse = ClosedEnum<
  typeof DocumentUpdateDocumentGlobalActionAuthResponse
>;

export type DocumentUpdateDocumentAuthOptions = {
  globalAccessAuth: Array<DocumentUpdateDocumentGlobalAccessAuthResponse>;
  globalActionAuth: Array<DocumentUpdateDocumentGlobalActionAuthResponse>;
};

export type DocumentUpdateDocumentFormValues = string | boolean | number;

/**
 * Successful response
 */
export type DocumentUpdateDocumentResponse = {
  visibility: DocumentUpdateDocumentVisibilityResponse;
  status: DocumentUpdateDocumentStatus;
  source: DocumentUpdateDocumentSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentUpdateDocumentAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentUpdateDocumentVisibilityRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentVisibilityRequest> = z
    .nativeEnum(DocumentUpdateDocumentVisibilityRequest);

/** @internal */
export const DocumentUpdateDocumentVisibilityRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentVisibilityRequest> =
    DocumentUpdateDocumentVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentVisibilityRequest$ {
  /** @deprecated use `DocumentUpdateDocumentVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentVisibilityRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentVisibilityRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalAccessAuthRequest> = z
    .nativeEnum(DocumentUpdateDocumentGlobalAccessAuthRequest);

/** @internal */
export const DocumentUpdateDocumentGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalAccessAuthRequest> =
    DocumentUpdateDocumentGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentGlobalAccessAuthRequest$ {
  /** @deprecated use `DocumentUpdateDocumentGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentGlobalActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalActionAuthRequest> = z
    .nativeEnum(DocumentUpdateDocumentGlobalActionAuthRequest);

/** @internal */
export const DocumentUpdateDocumentGlobalActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalActionAuthRequest> =
    DocumentUpdateDocumentGlobalActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentGlobalActionAuthRequest$ {
  /** @deprecated use `DocumentUpdateDocumentGlobalActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentGlobalActionAuthRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentGlobalActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentGlobalActionAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentData$inboundSchema: z.ZodType<
  DocumentUpdateDocumentData,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: DocumentUpdateDocumentVisibilityRequest$inboundSchema.optional(),
  globalAccessAuth: z.array(
    DocumentUpdateDocumentGlobalAccessAuthRequest$inboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    DocumentUpdateDocumentGlobalActionAuthRequest$inboundSchema,
  ).optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/** @internal */
export type DocumentUpdateDocumentData$Outbound = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: Array<string> | undefined;
  globalActionAuth?: Array<string> | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/** @internal */
export const DocumentUpdateDocumentData$outboundSchema: z.ZodType<
  DocumentUpdateDocumentData$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentData
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: DocumentUpdateDocumentVisibilityRequest$outboundSchema.optional(),
  globalAccessAuth: z.array(
    DocumentUpdateDocumentGlobalAccessAuthRequest$outboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    DocumentUpdateDocumentGlobalActionAuthRequest$outboundSchema,
  ).optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentData$ {
  /** @deprecated use `DocumentUpdateDocumentData$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentData$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentData$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentData$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentData$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentData$Outbound;
}

export function documentUpdateDocumentDataToJSON(
  documentUpdateDocumentData: DocumentUpdateDocumentData,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentData$outboundSchema.parse(documentUpdateDocumentData),
  );
}

export function documentUpdateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentData' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentDateFormat
> = z.nativeEnum(DocumentUpdateDocumentDateFormat);

/** @internal */
export const DocumentUpdateDocumentDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentDateFormat
> = DocumentUpdateDocumentDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentDateFormat$ {
  /** @deprecated use `DocumentUpdateDocumentDateFormat$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentDateFormat$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentDateFormat$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentDateFormat$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentDistributionMethod> = z
    .nativeEnum(DocumentUpdateDocumentDistributionMethod);

/** @internal */
export const DocumentUpdateDocumentDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentDistributionMethod> =
    DocumentUpdateDocumentDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentDistributionMethod$ {
  /** @deprecated use `DocumentUpdateDocumentDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentSigningOrder
> = z.nativeEnum(DocumentUpdateDocumentSigningOrder);

/** @internal */
export const DocumentUpdateDocumentSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentSigningOrder
> = DocumentUpdateDocumentSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentSigningOrder$ {
  /** @deprecated use `DocumentUpdateDocumentSigningOrder$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentSigningOrder$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentLanguage$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentLanguage
> = z.nativeEnum(DocumentUpdateDocumentLanguage);

/** @internal */
export const DocumentUpdateDocumentLanguage$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentLanguage
> = DocumentUpdateDocumentLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentLanguage$ {
  /** @deprecated use `DocumentUpdateDocumentLanguage$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentLanguage$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentLanguage$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentLanguage$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentEmailSettings$inboundSchema: z.ZodType<
  DocumentUpdateDocumentEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentUpdateDocumentEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentUpdateDocumentEmailSettings$outboundSchema: z.ZodType<
  DocumentUpdateDocumentEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentEmailSettings$ {
  /** @deprecated use `DocumentUpdateDocumentEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentEmailSettings$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentEmailSettings$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentEmailSettings$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentEmailSettings$Outbound;
}

export function documentUpdateDocumentEmailSettingsToJSON(
  documentUpdateDocumentEmailSettings: DocumentUpdateDocumentEmailSettings,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentEmailSettings$outboundSchema.parse(
      documentUpdateDocumentEmailSettings,
    ),
  );
}

export function documentUpdateDocumentEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentUpdateDocumentEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentMeta$inboundSchema: z.ZodType<
  DocumentUpdateDocumentMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentUpdateDocumentDateFormat$inboundSchema.optional(),
  distributionMethod: DocumentUpdateDocumentDistributionMethod$inboundSchema
    .optional(),
  signingOrder: DocumentUpdateDocumentSigningOrder$inboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
  redirectUrl: z.string().optional(),
  language: DocumentUpdateDocumentLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() => DocumentUpdateDocumentEmailSettings$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentUpdateDocumentMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  signingOrder?: string | undefined;
  allowDictateNextSigner?: boolean | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  emailSettings?: DocumentUpdateDocumentEmailSettings$Outbound | undefined;
};

/** @internal */
export const DocumentUpdateDocumentMeta$outboundSchema: z.ZodType<
  DocumentUpdateDocumentMeta$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentUpdateDocumentDateFormat$outboundSchema.optional(),
  distributionMethod: DocumentUpdateDocumentDistributionMethod$outboundSchema
    .optional(),
  signingOrder: DocumentUpdateDocumentSigningOrder$outboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
  redirectUrl: z.string().optional(),
  language: DocumentUpdateDocumentLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() =>
    DocumentUpdateDocumentEmailSettings$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentMeta$ {
  /** @deprecated use `DocumentUpdateDocumentMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentMeta$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentMeta$Outbound;
}

export function documentUpdateDocumentMetaToJSON(
  documentUpdateDocumentMeta: DocumentUpdateDocumentMeta,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentMeta$outboundSchema.parse(documentUpdateDocumentMeta),
  );
}

export function documentUpdateDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentRequest$inboundSchema: z.ZodType<
  DocumentUpdateDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  data: z.lazy(() => DocumentUpdateDocumentData$inboundSchema).optional(),
  meta: z.lazy(() => DocumentUpdateDocumentMeta$inboundSchema).optional(),
});

/** @internal */
export type DocumentUpdateDocumentRequest$Outbound = {
  documentId: number;
  data?: DocumentUpdateDocumentData$Outbound | undefined;
  meta?: DocumentUpdateDocumentMeta$Outbound | undefined;
};

/** @internal */
export const DocumentUpdateDocumentRequest$outboundSchema: z.ZodType<
  DocumentUpdateDocumentRequest$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentRequest
> = z.object({
  documentId: z.number(),
  data: z.lazy(() => DocumentUpdateDocumentData$outboundSchema).optional(),
  meta: z.lazy(() => DocumentUpdateDocumentMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentRequest$ {
  /** @deprecated use `DocumentUpdateDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentRequest$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentRequest$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentRequest$Outbound;
}

export function documentUpdateDocumentRequestToJSON(
  documentUpdateDocumentRequest: DocumentUpdateDocumentRequest,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentRequest$outboundSchema.parse(
      documentUpdateDocumentRequest,
    ),
  );
}

export function documentUpdateDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentRequest' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentVisibilityResponse$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentVisibilityResponse> = z
    .nativeEnum(DocumentUpdateDocumentVisibilityResponse);

/** @internal */
export const DocumentUpdateDocumentVisibilityResponse$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentVisibilityResponse> =
    DocumentUpdateDocumentVisibilityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentVisibilityResponse$ {
  /** @deprecated use `DocumentUpdateDocumentVisibilityResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentVisibilityResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentVisibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentVisibilityResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentStatus
> = z.nativeEnum(DocumentUpdateDocumentStatus);

/** @internal */
export const DocumentUpdateDocumentStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentStatus
> = DocumentUpdateDocumentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentStatus$ {
  /** @deprecated use `DocumentUpdateDocumentStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentStatus$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentStatus$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentSource
> = z.nativeEnum(DocumentUpdateDocumentSource);

/** @internal */
export const DocumentUpdateDocumentSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDocumentSource
> = DocumentUpdateDocumentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentSource$ {
  /** @deprecated use `DocumentUpdateDocumentSource$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentSource$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentSource$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentSource$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentGlobalAccessAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalAccessAuthResponse> = z
    .nativeEnum(DocumentUpdateDocumentGlobalAccessAuthResponse);

/** @internal */
export const DocumentUpdateDocumentGlobalAccessAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalAccessAuthResponse> =
    DocumentUpdateDocumentGlobalAccessAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentGlobalAccessAuthResponse$ {
  /** @deprecated use `DocumentUpdateDocumentGlobalAccessAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentGlobalAccessAuthResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentGlobalAccessAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentGlobalAccessAuthResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentGlobalActionAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalActionAuthResponse> = z
    .nativeEnum(DocumentUpdateDocumentGlobalActionAuthResponse);

/** @internal */
export const DocumentUpdateDocumentGlobalActionAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateDocumentGlobalActionAuthResponse> =
    DocumentUpdateDocumentGlobalActionAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentGlobalActionAuthResponse$ {
  /** @deprecated use `DocumentUpdateDocumentGlobalActionAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateDocumentGlobalActionAuthResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentGlobalActionAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentGlobalActionAuthResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateDocumentAuthOptions$inboundSchema: z.ZodType<
  DocumentUpdateDocumentAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    DocumentUpdateDocumentGlobalAccessAuthResponse$inboundSchema,
  ),
  globalActionAuth: z.array(
    DocumentUpdateDocumentGlobalActionAuthResponse$inboundSchema,
  ),
});

/** @internal */
export type DocumentUpdateDocumentAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentUpdateDocumentAuthOptions$outboundSchema: z.ZodType<
  DocumentUpdateDocumentAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    DocumentUpdateDocumentGlobalAccessAuthResponse$outboundSchema,
  ),
  globalActionAuth: z.array(
    DocumentUpdateDocumentGlobalActionAuthResponse$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentAuthOptions$ {
  /** @deprecated use `DocumentUpdateDocumentAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentAuthOptions$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateDocumentAuthOptions$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentAuthOptions$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentAuthOptions$Outbound;
}

export function documentUpdateDocumentAuthOptionsToJSON(
  documentUpdateDocumentAuthOptions: DocumentUpdateDocumentAuthOptions,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentAuthOptions$outboundSchema.parse(
      documentUpdateDocumentAuthOptions,
    ),
  );
}

export function documentUpdateDocumentAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentFormValues$inboundSchema: z.ZodType<
  DocumentUpdateDocumentFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentUpdateDocumentFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const DocumentUpdateDocumentFormValues$outboundSchema: z.ZodType<
  DocumentUpdateDocumentFormValues$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentFormValues$ {
  /** @deprecated use `DocumentUpdateDocumentFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentFormValues$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentFormValues$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentFormValues$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentFormValues$Outbound;
}

export function documentUpdateDocumentFormValuesToJSON(
  documentUpdateDocumentFormValues: DocumentUpdateDocumentFormValues,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentFormValues$outboundSchema.parse(
      documentUpdateDocumentFormValues,
    ),
  );
}

export function documentUpdateDocumentFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDocumentResponse$inboundSchema: z.ZodType<
  DocumentUpdateDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentUpdateDocumentVisibilityResponse$inboundSchema,
  status: DocumentUpdateDocumentStatus$inboundSchema,
  source: DocumentUpdateDocumentSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentUpdateDocumentAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/** @internal */
export type DocumentUpdateDocumentResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentUpdateDocumentAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentUpdateDocumentResponse$outboundSchema: z.ZodType<
  DocumentUpdateDocumentResponse$Outbound,
  z.ZodTypeDef,
  DocumentUpdateDocumentResponse
> = z.object({
  visibility: DocumentUpdateDocumentVisibilityResponse$outboundSchema,
  status: DocumentUpdateDocumentStatus$outboundSchema,
  source: DocumentUpdateDocumentSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentUpdateDocumentAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDocumentResponse$ {
  /** @deprecated use `DocumentUpdateDocumentResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDocumentResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateDocumentResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDocumentResponse$outboundSchema;
  /** @deprecated use `DocumentUpdateDocumentResponse$Outbound` instead. */
  export type Outbound = DocumentUpdateDocumentResponse$Outbound;
}

export function documentUpdateDocumentResponseToJSON(
  documentUpdateDocumentResponse: DocumentUpdateDocumentResponse,
): string {
  return JSON.stringify(
    DocumentUpdateDocumentResponse$outboundSchema.parse(
      documentUpdateDocumentResponse,
    ),
  );
}

export function documentUpdateDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateDocumentResponse' from JSON`,
  );
}
