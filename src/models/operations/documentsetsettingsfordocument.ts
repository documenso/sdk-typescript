/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the document.
 */
export const DocumentSetSettingsForDocumentVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the document.
 */
export type DocumentSetSettingsForDocumentVisibility = ClosedEnum<
  typeof DocumentSetSettingsForDocumentVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentSetSettingsForDocumentGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentSetSettingsForDocumentGlobalAccessAuth = ClosedEnum<
  typeof DocumentSetSettingsForDocumentGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentSetSettingsForDocumentGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentSetSettingsForDocumentGlobalActionAuth = ClosedEnum<
  typeof DocumentSetSettingsForDocumentGlobalActionAuth
>;

export type Data = {
  /**
   * The title of the document.
   */
  title?: string | undefined;
  /**
   * The external ID of the document.
   */
  externalId?: string | null | undefined;
  /**
   * The visibility of the document.
   */
  visibility?: DocumentSetSettingsForDocumentVisibility | undefined;
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth?:
    | DocumentSetSettingsForDocumentGlobalAccessAuth
    | null
    | undefined;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth?:
    | DocumentSetSettingsForDocumentGlobalActionAuth
    | null
    | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentSetSettingsForDocumentDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentSetSettingsForDocumentDateFormat = ClosedEnum<
  typeof DocumentSetSettingsForDocumentDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentSetSettingsForDocumentDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentSetSettingsForDocumentDistributionMethod = ClosedEnum<
  typeof DocumentSetSettingsForDocumentDistributionMethod
>;

export const DocumentSetSettingsForDocumentSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentSetSettingsForDocumentSigningOrder = ClosedEnum<
  typeof DocumentSetSettingsForDocumentSigningOrder
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentSetSettingsForDocumentLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentSetSettingsForDocumentLanguage = ClosedEnum<
  typeof DocumentSetSettingsForDocumentLanguage
>;

export type DocumentSetSettingsForDocumentEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentSetSettingsForDocumentMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentSetSettingsForDocumentDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?:
    | DocumentSetSettingsForDocumentDistributionMethod
    | undefined;
  signingOrder?: DocumentSetSettingsForDocumentSigningOrder | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentSetSettingsForDocumentLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  emailSettings?: DocumentSetSettingsForDocumentEmailSettings | undefined;
};

export type DocumentSetSettingsForDocumentRequestBody = {
  documentId: number;
  data?: Data | undefined;
  meta?: DocumentSetSettingsForDocumentMeta | undefined;
};

export const DocumentSetSettingsForDocumentDocumentsVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentSetSettingsForDocumentDocumentsVisibility = ClosedEnum<
  typeof DocumentSetSettingsForDocumentDocumentsVisibility
>;

export const DocumentSetSettingsForDocumentStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
} as const;
export type DocumentSetSettingsForDocumentStatus = ClosedEnum<
  typeof DocumentSetSettingsForDocumentStatus
>;

export const DocumentSetSettingsForDocumentSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentSetSettingsForDocumentSource = ClosedEnum<
  typeof DocumentSetSettingsForDocumentSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth =
  ClosedEnum<typeof DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentSetSettingsForDocumentDocumentsGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentSetSettingsForDocumentDocumentsGlobalActionAuth =
  ClosedEnum<typeof DocumentSetSettingsForDocumentDocumentsGlobalActionAuth>;

export type DocumentSetSettingsForDocumentAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth:
    | DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth
    | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth:
    | DocumentSetSettingsForDocumentDocumentsGlobalActionAuth
    | null;
};

export type DocumentSetSettingsForDocumentFormValues =
  | string
  | boolean
  | number;

/**
 * Successful response
 */
export type DocumentSetSettingsForDocumentResponseBody = {
  visibility: DocumentSetSettingsForDocumentDocumentsVisibility;
  status: DocumentSetSettingsForDocumentStatus;
  source: DocumentSetSettingsForDocumentSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentSetSettingsForDocumentAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
};

/** @internal */
export const DocumentSetSettingsForDocumentVisibility$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentVisibility> = z
    .nativeEnum(DocumentSetSettingsForDocumentVisibility);

/** @internal */
export const DocumentSetSettingsForDocumentVisibility$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentVisibility> =
    DocumentSetSettingsForDocumentVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentVisibility$ {
  /** @deprecated use `DocumentSetSettingsForDocumentVisibility$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentVisibility$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentVisibility$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentVisibility$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentGlobalAccessAuth> = z
    .nativeEnum(DocumentSetSettingsForDocumentGlobalAccessAuth);

/** @internal */
export const DocumentSetSettingsForDocumentGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentGlobalAccessAuth> =
    DocumentSetSettingsForDocumentGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentGlobalAccessAuth$ {
  /** @deprecated use `DocumentSetSettingsForDocumentGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentGlobalActionAuth> = z
    .nativeEnum(DocumentSetSettingsForDocumentGlobalActionAuth);

/** @internal */
export const DocumentSetSettingsForDocumentGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentGlobalActionAuth> =
    DocumentSetSettingsForDocumentGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentGlobalActionAuth$ {
  /** @deprecated use `DocumentSetSettingsForDocumentGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentGlobalActionAuth$outboundSchema;
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    title: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    visibility: DocumentSetSettingsForDocumentVisibility$inboundSchema
      .optional(),
    globalAccessAuth: z.nullable(
      DocumentSetSettingsForDocumentGlobalAccessAuth$inboundSchema,
    ).optional(),
    globalActionAuth: z.nullable(
      DocumentSetSettingsForDocumentGlobalActionAuth$inboundSchema,
    ).optional(),
  });

/** @internal */
export type Data$Outbound = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: string | null | undefined;
  globalActionAuth?: string | null | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    title: z.string().optional(),
    externalId: z.nullable(z.string()).optional(),
    visibility: DocumentSetSettingsForDocumentVisibility$outboundSchema
      .optional(),
    globalAccessAuth: z.nullable(
      DocumentSetSettingsForDocumentGlobalAccessAuth$outboundSchema,
    ).optional(),
    globalActionAuth: z.nullable(
      DocumentSetSettingsForDocumentGlobalActionAuth$outboundSchema,
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentDateFormat$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDateFormat> = z
    .nativeEnum(DocumentSetSettingsForDocumentDateFormat);

/** @internal */
export const DocumentSetSettingsForDocumentDateFormat$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDateFormat> =
    DocumentSetSettingsForDocumentDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentDateFormat$ {
  /** @deprecated use `DocumentSetSettingsForDocumentDateFormat$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentDateFormat$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentDateFormat$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentDateFormat$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDistributionMethod> = z
    .nativeEnum(DocumentSetSettingsForDocumentDistributionMethod);

/** @internal */
export const DocumentSetSettingsForDocumentDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDistributionMethod> =
    DocumentSetSettingsForDocumentDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentDistributionMethod$ {
  /** @deprecated use `DocumentSetSettingsForDocumentDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentSigningOrder$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentSigningOrder> = z
    .nativeEnum(DocumentSetSettingsForDocumentSigningOrder);

/** @internal */
export const DocumentSetSettingsForDocumentSigningOrder$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentSigningOrder> =
    DocumentSetSettingsForDocumentSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentSigningOrder$ {
  /** @deprecated use `DocumentSetSettingsForDocumentSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentSigningOrder$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentLanguage$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentLanguage> = z.nativeEnum(
    DocumentSetSettingsForDocumentLanguage,
  );

/** @internal */
export const DocumentSetSettingsForDocumentLanguage$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentLanguage> =
    DocumentSetSettingsForDocumentLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentLanguage$ {
  /** @deprecated use `DocumentSetSettingsForDocumentLanguage$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentLanguage$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentLanguage$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentLanguage$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentEmailSettings$inboundSchema:
  z.ZodType<
    DocumentSetSettingsForDocumentEmailSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type DocumentSetSettingsForDocumentEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentSetSettingsForDocumentEmailSettings$outboundSchema:
  z.ZodType<
    DocumentSetSettingsForDocumentEmailSettings$Outbound,
    z.ZodTypeDef,
    DocumentSetSettingsForDocumentEmailSettings
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentEmailSettings$ {
  /** @deprecated use `DocumentSetSettingsForDocumentEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentEmailSettings$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentEmailSettings$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentEmailSettings$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentEmailSettings$Outbound;
}

export function documentSetSettingsForDocumentEmailSettingsToJSON(
  documentSetSettingsForDocumentEmailSettings:
    DocumentSetSettingsForDocumentEmailSettings,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentEmailSettings$outboundSchema.parse(
      documentSetSettingsForDocumentEmailSettings,
    ),
  );
}

export function documentSetSettingsForDocumentEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentSetSettingsForDocumentEmailSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentEmailSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentSetSettingsForDocumentEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentMeta$inboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentSetSettingsForDocumentDateFormat$inboundSchema.optional(),
  distributionMethod:
    DocumentSetSettingsForDocumentDistributionMethod$inboundSchema.optional(),
  signingOrder: DocumentSetSettingsForDocumentSigningOrder$inboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentSetSettingsForDocumentLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() =>
    DocumentSetSettingsForDocumentEmailSettings$inboundSchema
  ).optional(),
});

/** @internal */
export type DocumentSetSettingsForDocumentMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  signingOrder?: string | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  emailSettings?:
    | DocumentSetSettingsForDocumentEmailSettings$Outbound
    | undefined;
};

/** @internal */
export const DocumentSetSettingsForDocumentMeta$outboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentMeta$Outbound,
  z.ZodTypeDef,
  DocumentSetSettingsForDocumentMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentSetSettingsForDocumentDateFormat$outboundSchema
    .optional(),
  distributionMethod:
    DocumentSetSettingsForDocumentDistributionMethod$outboundSchema.optional(),
  signingOrder: DocumentSetSettingsForDocumentSigningOrder$outboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentSetSettingsForDocumentLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() =>
    DocumentSetSettingsForDocumentEmailSettings$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentMeta$ {
  /** @deprecated use `DocumentSetSettingsForDocumentMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentSetSettingsForDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentMeta$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentMeta$Outbound;
}

export function documentSetSettingsForDocumentMetaToJSON(
  documentSetSettingsForDocumentMeta: DocumentSetSettingsForDocumentMeta,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentMeta$outboundSchema.parse(
      documentSetSettingsForDocumentMeta,
    ),
  );
}

export function documentSetSettingsForDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSetSettingsForDocumentMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSetSettingsForDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentRequestBody$inboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  data: z.lazy(() => Data$inboundSchema).optional(),
  meta: z.lazy(() => DocumentSetSettingsForDocumentMeta$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentSetSettingsForDocumentRequestBody$Outbound = {
  documentId: number;
  data?: Data$Outbound | undefined;
  meta?: DocumentSetSettingsForDocumentMeta$Outbound | undefined;
};

/** @internal */
export const DocumentSetSettingsForDocumentRequestBody$outboundSchema:
  z.ZodType<
    DocumentSetSettingsForDocumentRequestBody$Outbound,
    z.ZodTypeDef,
    DocumentSetSettingsForDocumentRequestBody
  > = z.object({
    documentId: z.number(),
    data: z.lazy(() => Data$outboundSchema).optional(),
    meta: z.lazy(() => DocumentSetSettingsForDocumentMeta$outboundSchema)
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentRequestBody$ {
  /** @deprecated use `DocumentSetSettingsForDocumentRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentRequestBody$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentRequestBody$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentRequestBody$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentRequestBody$Outbound;
}

export function documentSetSettingsForDocumentRequestBodyToJSON(
  documentSetSettingsForDocumentRequestBody:
    DocumentSetSettingsForDocumentRequestBody,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentRequestBody$outboundSchema.parse(
      documentSetSettingsForDocumentRequestBody,
    ),
  );
}

export function documentSetSettingsForDocumentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentSetSettingsForDocumentRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentSetSettingsForDocumentRequestBody' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsVisibility$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDocumentsVisibility> = z
    .nativeEnum(DocumentSetSettingsForDocumentDocumentsVisibility);

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsVisibility$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentDocumentsVisibility> =
    DocumentSetSettingsForDocumentDocumentsVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentDocumentsVisibility$ {
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsVisibility$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentDocumentsVisibility$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsVisibility$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentDocumentsVisibility$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentStatus> = z.nativeEnum(
    DocumentSetSettingsForDocumentStatus,
  );

/** @internal */
export const DocumentSetSettingsForDocumentStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentStatus> =
    DocumentSetSettingsForDocumentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentStatus$ {
  /** @deprecated use `DocumentSetSettingsForDocumentStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentStatus$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentStatus$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentSource$inboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentSource> = z.nativeEnum(
    DocumentSetSettingsForDocumentSource,
  );

/** @internal */
export const DocumentSetSettingsForDocumentSource$outboundSchema:
  z.ZodNativeEnum<typeof DocumentSetSettingsForDocumentSource> =
    DocumentSetSettingsForDocumentSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentSource$ {
  /** @deprecated use `DocumentSetSettingsForDocumentSource$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentSource$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentSource$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentSource$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth
  > = z.nativeEnum(DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth);

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth
  > = DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$ {
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentSetSettingsForDocumentDocumentsGlobalActionAuth
  > = z.nativeEnum(DocumentSetSettingsForDocumentDocumentsGlobalActionAuth);

/** @internal */
export const DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentSetSettingsForDocumentDocumentsGlobalActionAuth
  > = DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$ {
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentSetSettingsForDocumentAuthOptions$inboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type DocumentSetSettingsForDocumentAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const DocumentSetSettingsForDocumentAuthOptions$outboundSchema:
  z.ZodType<
    DocumentSetSettingsForDocumentAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentSetSettingsForDocumentAuthOptions
  > = z.object({
    globalAccessAuth: z.nullable(
      DocumentSetSettingsForDocumentDocumentsGlobalAccessAuth$outboundSchema,
    ),
    globalActionAuth: z.nullable(
      DocumentSetSettingsForDocumentDocumentsGlobalActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentAuthOptions$ {
  /** @deprecated use `DocumentSetSettingsForDocumentAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentAuthOptions$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentAuthOptions$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentAuthOptions$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentAuthOptions$Outbound;
}

export function documentSetSettingsForDocumentAuthOptionsToJSON(
  documentSetSettingsForDocumentAuthOptions:
    DocumentSetSettingsForDocumentAuthOptions,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentAuthOptions$outboundSchema.parse(
      documentSetSettingsForDocumentAuthOptions,
    ),
  );
}

export function documentSetSettingsForDocumentAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentSetSettingsForDocumentAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentSetSettingsForDocumentAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentFormValues$inboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentSetSettingsForDocumentFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const DocumentSetSettingsForDocumentFormValues$outboundSchema: z.ZodType<
  DocumentSetSettingsForDocumentFormValues$Outbound,
  z.ZodTypeDef,
  DocumentSetSettingsForDocumentFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentFormValues$ {
  /** @deprecated use `DocumentSetSettingsForDocumentFormValues$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentFormValues$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentFormValues$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentFormValues$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentFormValues$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentFormValues$Outbound;
}

export function documentSetSettingsForDocumentFormValuesToJSON(
  documentSetSettingsForDocumentFormValues:
    DocumentSetSettingsForDocumentFormValues,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentFormValues$outboundSchema.parse(
      documentSetSettingsForDocumentFormValues,
    ),
  );
}

export function documentSetSettingsForDocumentFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentSetSettingsForDocumentFormValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentFormValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentSetSettingsForDocumentFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentSetSettingsForDocumentResponseBody$inboundSchema:
  z.ZodType<DocumentSetSettingsForDocumentResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      visibility:
        DocumentSetSettingsForDocumentDocumentsVisibility$inboundSchema,
      status: DocumentSetSettingsForDocumentStatus$inboundSchema,
      source: DocumentSetSettingsForDocumentSource$inboundSchema,
      id: z.number().int(),
      externalId: z.nullable(z.string()),
      userId: z.number(),
      authOptions: z.nullable(
        z.lazy(() => DocumentSetSettingsForDocumentAuthOptions$inboundSchema),
      ),
      formValues: z.nullable(
        z.record(z.union([z.string(), z.boolean(), z.number()])),
      ),
      title: z.string(),
      documentDataId: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      completedAt: z.nullable(z.string()),
      deletedAt: z.nullable(z.string()),
      teamId: z.nullable(z.number().int()),
      templateId: z.nullable(z.number().int()),
    });

/** @internal */
export type DocumentSetSettingsForDocumentResponseBody$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentSetSettingsForDocumentAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
};

/** @internal */
export const DocumentSetSettingsForDocumentResponseBody$outboundSchema:
  z.ZodType<
    DocumentSetSettingsForDocumentResponseBody$Outbound,
    z.ZodTypeDef,
    DocumentSetSettingsForDocumentResponseBody
  > = z.object({
    visibility:
      DocumentSetSettingsForDocumentDocumentsVisibility$outboundSchema,
    status: DocumentSetSettingsForDocumentStatus$outboundSchema,
    source: DocumentSetSettingsForDocumentSource$outboundSchema,
    id: z.number().int(),
    externalId: z.nullable(z.string()),
    userId: z.number(),
    authOptions: z.nullable(
      z.lazy(() => DocumentSetSettingsForDocumentAuthOptions$outboundSchema),
    ),
    formValues: z.nullable(
      z.record(z.union([z.string(), z.boolean(), z.number()])),
    ),
    title: z.string(),
    documentDataId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    completedAt: z.nullable(z.string()),
    deletedAt: z.nullable(z.string()),
    teamId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSetSettingsForDocumentResponseBody$ {
  /** @deprecated use `DocumentSetSettingsForDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DocumentSetSettingsForDocumentResponseBody$inboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentSetSettingsForDocumentResponseBody$outboundSchema;
  /** @deprecated use `DocumentSetSettingsForDocumentResponseBody$Outbound` instead. */
  export type Outbound = DocumentSetSettingsForDocumentResponseBody$Outbound;
}

export function documentSetSettingsForDocumentResponseBodyToJSON(
  documentSetSettingsForDocumentResponseBody:
    DocumentSetSettingsForDocumentResponseBody,
): string {
  return JSON.stringify(
    DocumentSetSettingsForDocumentResponseBody$outboundSchema.parse(
      documentSetSettingsForDocumentResponseBody,
    ),
  );
}

export function documentSetSettingsForDocumentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentSetSettingsForDocumentResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentSetSettingsForDocumentResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentSetSettingsForDocumentResponseBody' from JSON`,
  );
}
