/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The version of the document to download. "signed" returns the completed document with signatures, "original" returns the original uploaded document.
 */
export const Version = {
  Original: "original",
  Signed: "signed",
} as const;
/**
 * The version of the document to download. "signed" returns the completed document with signatures, "original" returns the original uploaded document.
 */
export type Version = ClosedEnum<typeof Version>;

export type DocumentDownloadRequest = {
  /**
   * The ID of the document to download.
   */
  documentId: number;
  /**
   * The version of the document to download. "signed" returns the completed document with signatures, "original" returns the original uploaded document.
   */
  version?: Version | undefined;
};

/**
 * Successful response
 */
export type DocumentDownloadResponse = {
  /**
   * Pre-signed URL for downloading the PDF file
   */
  downloadUrl: string;
  /**
   * The filename of the PDF file
   */
  filename: string;
  /**
   * MIME type of the file
   */
  contentType: string;
};

/** @internal */
export const Version$inboundSchema: z.ZodNativeEnum<typeof Version> = z
  .nativeEnum(Version);

/** @internal */
export const Version$outboundSchema: z.ZodNativeEnum<typeof Version> =
  Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Version$ {
  /** @deprecated use `Version$inboundSchema` instead. */
  export const inboundSchema = Version$inboundSchema;
  /** @deprecated use `Version$outboundSchema` instead. */
  export const outboundSchema = Version$outboundSchema;
}

/** @internal */
export const DocumentDownloadRequest$inboundSchema: z.ZodType<
  DocumentDownloadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  version: Version$inboundSchema.default("signed"),
});

/** @internal */
export type DocumentDownloadRequest$Outbound = {
  documentId: number;
  version: string;
};

/** @internal */
export const DocumentDownloadRequest$outboundSchema: z.ZodType<
  DocumentDownloadRequest$Outbound,
  z.ZodTypeDef,
  DocumentDownloadRequest
> = z.object({
  documentId: z.number(),
  version: Version$outboundSchema.default("signed"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadRequest$ {
  /** @deprecated use `DocumentDownloadRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadRequest$inboundSchema;
  /** @deprecated use `DocumentDownloadRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadRequest$outboundSchema;
  /** @deprecated use `DocumentDownloadRequest$Outbound` instead. */
  export type Outbound = DocumentDownloadRequest$Outbound;
}

export function documentDownloadRequestToJSON(
  documentDownloadRequest: DocumentDownloadRequest,
): string {
  return JSON.stringify(
    DocumentDownloadRequest$outboundSchema.parse(documentDownloadRequest),
  );
}

export function documentDownloadRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDownloadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDownloadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDownloadRequest' from JSON`,
  );
}

/** @internal */
export const DocumentDownloadResponse$inboundSchema: z.ZodType<
  DocumentDownloadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  downloadUrl: z.string(),
  filename: z.string(),
  contentType: z.string(),
});

/** @internal */
export type DocumentDownloadResponse$Outbound = {
  downloadUrl: string;
  filename: string;
  contentType: string;
};

/** @internal */
export const DocumentDownloadResponse$outboundSchema: z.ZodType<
  DocumentDownloadResponse$Outbound,
  z.ZodTypeDef,
  DocumentDownloadResponse
> = z.object({
  downloadUrl: z.string(),
  filename: z.string(),
  contentType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDownloadResponse$ {
  /** @deprecated use `DocumentDownloadResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentDownloadResponse$inboundSchema;
  /** @deprecated use `DocumentDownloadResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentDownloadResponse$outboundSchema;
  /** @deprecated use `DocumentDownloadResponse$Outbound` instead. */
  export type Outbound = DocumentDownloadResponse$Outbound;
}

export function documentDownloadResponseToJSON(
  documentDownloadResponse: DocumentDownloadResponse,
): string {
  return JSON.stringify(
    DocumentDownloadResponse$outboundSchema.parse(documentDownloadResponse),
  );
}

export function documentDownloadResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDownloadResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDownloadResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDownloadResponse' from JSON`,
  );
}
