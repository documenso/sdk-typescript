/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentGetRequest = {
  documentId: number;
};

export const DocumentGetVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentGetVisibility = ClosedEnum<typeof DocumentGetVisibility>;

export const DocumentGetStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentGetStatus = ClosedEnum<typeof DocumentGetStatus>;

export const DocumentGetSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentGetSource = ClosedEnum<typeof DocumentGetSource>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentGetGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentGetGlobalAccessAuth = ClosedEnum<
  typeof DocumentGetGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentGetGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentGetGlobalActionAuth = ClosedEnum<
  typeof DocumentGetGlobalActionAuth
>;

export type DocumentGetAuthOptions = {
  globalAccessAuth: Array<DocumentGetGlobalAccessAuth>;
  globalActionAuth: Array<DocumentGetGlobalActionAuth>;
};

export type DocumentGetFormValues = string | boolean | number;

export const DocumentGetDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type DocumentGetDocumentDataType = ClosedEnum<
  typeof DocumentGetDocumentDataType
>;

export type DocumentGetDocumentData = {
  type: DocumentGetDocumentDataType;
  id: string;
  data: string;
  initialData: string;
};

export const DocumentGetSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentGetSigningOrder = ClosedEnum<
  typeof DocumentGetSigningOrder
>;

export const DocumentGetDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type DocumentGetDistributionMethod = ClosedEnum<
  typeof DocumentGetDistributionMethod
>;

export type DocumentGetEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentGetDocumentMeta = {
  signingOrder: DocumentGetSigningOrder;
  distributionMethod: DocumentGetDistributionMethod;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentGetEmailSettings | null;
  emailId: string | null;
  emailReplyTo: string | null;
};

export const DocumentGetFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type DocumentGetFolderType = ClosedEnum<typeof DocumentGetFolderType>;

export const DocumentGetFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentGetFolderVisibility = ClosedEnum<
  typeof DocumentGetFolderVisibility
>;

export type DocumentGetFolder = {
  id: string;
  name: string;
  type: DocumentGetFolderType;
  visibility: DocumentGetFolderVisibility;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const DocumentGetRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type DocumentGetRole = ClosedEnum<typeof DocumentGetRole>;

export const DocumentGetReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type DocumentGetReadStatus = ClosedEnum<typeof DocumentGetReadStatus>;

export const DocumentGetSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type DocumentGetSigningStatus = ClosedEnum<
  typeof DocumentGetSigningStatus
>;

export const DocumentGetSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type DocumentGetSendStatus = ClosedEnum<typeof DocumentGetSendStatus>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentGetAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentGetAccessAuth = ClosedEnum<typeof DocumentGetAccessAuth>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentGetActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentGetActionAuth = ClosedEnum<typeof DocumentGetActionAuth>;

export type DocumentGetRecipientAuthOptions = {
  accessAuth: Array<DocumentGetAccessAuth>;
  actionAuth: Array<DocumentGetActionAuth>;
};

export type DocumentGetRecipient = {
  role: DocumentGetRole;
  readStatus: DocumentGetReadStatus;
  signingStatus: DocumentGetSigningStatus;
  sendStatus: DocumentGetSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentGetRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const DocumentGetFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type DocumentGetFieldType = ClosedEnum<typeof DocumentGetFieldType>;

export const DocumentGetTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type DocumentGetTypeDropdown = ClosedEnum<
  typeof DocumentGetTypeDropdown
>;

export type DocumentGetValue3 = {
  value: string;
};

export type DocumentGetFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeDropdown;
  values?: Array<DocumentGetValue3> | undefined;
  defaultValue?: string | undefined;
};

export const DocumentGetTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type DocumentGetTypeCheckbox = ClosedEnum<
  typeof DocumentGetTypeCheckbox
>;

export type DocumentGetValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const DocumentGetDirection = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type DocumentGetDirection = ClosedEnum<typeof DocumentGetDirection>;

export type DocumentGetFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeCheckbox;
  values?: Array<DocumentGetValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: DocumentGetDirection | undefined;
};

export const DocumentGetTypeRadio = {
  Radio: "radio",
} as const;
export type DocumentGetTypeRadio = ClosedEnum<typeof DocumentGetTypeRadio>;

export type DocumentGetValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type DocumentGetFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeRadio;
  values?: Array<DocumentGetValue1> | undefined;
};

export const DocumentGetTypeNumber = {
  Number: "number",
} as const;
export type DocumentGetTypeNumber = ClosedEnum<typeof DocumentGetTypeNumber>;

export const DocumentGetTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign6 = ClosedEnum<typeof DocumentGetTextAlign6>;

export type DocumentGetFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign6 | undefined;
};

export const DocumentGetTypeText = {
  Text: "text",
} as const;
export type DocumentGetTypeText = ClosedEnum<typeof DocumentGetTypeText>;

export const DocumentGetTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign5 = ClosedEnum<typeof DocumentGetTextAlign5>;

export type DocumentGetFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign5 | undefined;
};

export const DocumentGetTypeDate = {
  Date: "date",
} as const;
export type DocumentGetTypeDate = ClosedEnum<typeof DocumentGetTypeDate>;

export const DocumentGetTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign4 = ClosedEnum<typeof DocumentGetTextAlign4>;

export type DocumentGetFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeDate;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign4 | undefined;
};

export const DocumentGetTypeEmail = {
  Email: "email",
} as const;
export type DocumentGetTypeEmail = ClosedEnum<typeof DocumentGetTypeEmail>;

export const DocumentGetTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign3 = ClosedEnum<typeof DocumentGetTextAlign3>;

export type DocumentGetFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeEmail;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign3 | undefined;
};

export const DocumentGetTypeName = {
  Name: "name",
} as const;
export type DocumentGetTypeName = ClosedEnum<typeof DocumentGetTypeName>;

export const DocumentGetTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign2 = ClosedEnum<typeof DocumentGetTextAlign2>;

export type DocumentGetFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeName;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign2 | undefined;
};

export const DocumentGetTypeInitials = {
  Initials: "initials",
} as const;
export type DocumentGetTypeInitials = ClosedEnum<
  typeof DocumentGetTypeInitials
>;

export const DocumentGetTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentGetTextAlign1 = ClosedEnum<typeof DocumentGetTextAlign1>;

export type DocumentGetFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentGetTypeInitials;
  fontSize?: number | undefined;
  textAlign?: DocumentGetTextAlign1 | undefined;
};

export type DocumentGetFieldMetaUnion =
  | DocumentGetFieldMetaInitials
  | DocumentGetFieldMetaName
  | DocumentGetFieldMetaEmail
  | DocumentGetFieldMetaDate
  | DocumentGetFieldMetaText
  | DocumentGetFieldMetaNumber
  | DocumentGetFieldMetaRadio
  | DocumentGetFieldMetaCheckbox
  | DocumentGetFieldMetaDropdown;

export type DocumentGetField = {
  type: DocumentGetFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | DocumentGetFieldMetaInitials
    | DocumentGetFieldMetaName
    | DocumentGetFieldMetaEmail
    | DocumentGetFieldMetaDate
    | DocumentGetFieldMetaText
    | DocumentGetFieldMetaNumber
    | DocumentGetFieldMetaRadio
    | DocumentGetFieldMetaCheckbox
    | DocumentGetFieldMetaDropdown
    | null;
};

/**
 * Successful response
 */
export type DocumentGetResponse = {
  visibility: DocumentGetVisibility;
  status: DocumentGetStatus;
  source: DocumentGetSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentGetAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  documentData: DocumentGetDocumentData;
  documentMeta: DocumentGetDocumentMeta | null;
  folder: DocumentGetFolder | null;
  recipients: Array<DocumentGetRecipient>;
  fields: Array<DocumentGetField>;
};

/** @internal */
export const DocumentGetRequest$inboundSchema: z.ZodType<
  DocumentGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
});

/** @internal */
export type DocumentGetRequest$Outbound = {
  documentId: number;
};

/** @internal */
export const DocumentGetRequest$outboundSchema: z.ZodType<
  DocumentGetRequest$Outbound,
  z.ZodTypeDef,
  DocumentGetRequest
> = z.object({
  documentId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetRequest$ {
  /** @deprecated use `DocumentGetRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentGetRequest$inboundSchema;
  /** @deprecated use `DocumentGetRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentGetRequest$outboundSchema;
  /** @deprecated use `DocumentGetRequest$Outbound` instead. */
  export type Outbound = DocumentGetRequest$Outbound;
}

export function documentGetRequestToJSON(
  documentGetRequest: DocumentGetRequest,
): string {
  return JSON.stringify(
    DocumentGetRequest$outboundSchema.parse(documentGetRequest),
  );
}

export function documentGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetRequest' from JSON`,
  );
}

/** @internal */
export const DocumentGetVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetVisibility
> = z.nativeEnum(DocumentGetVisibility);

/** @internal */
export const DocumentGetVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetVisibility
> = DocumentGetVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetVisibility$ {
  /** @deprecated use `DocumentGetVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentGetVisibility$inboundSchema;
  /** @deprecated use `DocumentGetVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentGetVisibility$outboundSchema;
}

/** @internal */
export const DocumentGetStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetStatus
> = z.nativeEnum(DocumentGetStatus);

/** @internal */
export const DocumentGetStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetStatus
> = DocumentGetStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetStatus$ {
  /** @deprecated use `DocumentGetStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentGetStatus$inboundSchema;
  /** @deprecated use `DocumentGetStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentGetStatus$outboundSchema;
}

/** @internal */
export const DocumentGetSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSource
> = z.nativeEnum(DocumentGetSource);

/** @internal */
export const DocumentGetSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSource
> = DocumentGetSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetSource$ {
  /** @deprecated use `DocumentGetSource$inboundSchema` instead. */
  export const inboundSchema = DocumentGetSource$inboundSchema;
  /** @deprecated use `DocumentGetSource$outboundSchema` instead. */
  export const outboundSchema = DocumentGetSource$outboundSchema;
}

/** @internal */
export const DocumentGetGlobalAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetGlobalAccessAuth
> = z.nativeEnum(DocumentGetGlobalAccessAuth);

/** @internal */
export const DocumentGetGlobalAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetGlobalAccessAuth
> = DocumentGetGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetGlobalAccessAuth$ {
  /** @deprecated use `DocumentGetGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGetGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentGetGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGetGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentGetGlobalActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetGlobalActionAuth
> = z.nativeEnum(DocumentGetGlobalActionAuth);

/** @internal */
export const DocumentGetGlobalActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetGlobalActionAuth
> = DocumentGetGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetGlobalActionAuth$ {
  /** @deprecated use `DocumentGetGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGetGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentGetGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGetGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentGetAuthOptions$inboundSchema: z.ZodType<
  DocumentGetAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(DocumentGetGlobalAccessAuth$inboundSchema),
  globalActionAuth: z.array(DocumentGetGlobalActionAuth$inboundSchema),
});

/** @internal */
export type DocumentGetAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentGetAuthOptions$outboundSchema: z.ZodType<
  DocumentGetAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentGetAuthOptions
> = z.object({
  globalAccessAuth: z.array(DocumentGetGlobalAccessAuth$outboundSchema),
  globalActionAuth: z.array(DocumentGetGlobalActionAuth$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetAuthOptions$ {
  /** @deprecated use `DocumentGetAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentGetAuthOptions$inboundSchema;
  /** @deprecated use `DocumentGetAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentGetAuthOptions$outboundSchema;
  /** @deprecated use `DocumentGetAuthOptions$Outbound` instead. */
  export type Outbound = DocumentGetAuthOptions$Outbound;
}

export function documentGetAuthOptionsToJSON(
  documentGetAuthOptions: DocumentGetAuthOptions,
): string {
  return JSON.stringify(
    DocumentGetAuthOptions$outboundSchema.parse(documentGetAuthOptions),
  );
}

export function documentGetAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentGetFormValues$inboundSchema: z.ZodType<
  DocumentGetFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentGetFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentGetFormValues$outboundSchema: z.ZodType<
  DocumentGetFormValues$Outbound,
  z.ZodTypeDef,
  DocumentGetFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFormValues$ {
  /** @deprecated use `DocumentGetFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFormValues$inboundSchema;
  /** @deprecated use `DocumentGetFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFormValues$outboundSchema;
  /** @deprecated use `DocumentGetFormValues$Outbound` instead. */
  export type Outbound = DocumentGetFormValues$Outbound;
}

export function documentGetFormValuesToJSON(
  documentGetFormValues: DocumentGetFormValues,
): string {
  return JSON.stringify(
    DocumentGetFormValues$outboundSchema.parse(documentGetFormValues),
  );
}

export function documentGetFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentDataType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDocumentDataType
> = z.nativeEnum(DocumentGetDocumentDataType);

/** @internal */
export const DocumentGetDocumentDataType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDocumentDataType
> = DocumentGetDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentDataType$ {
  /** @deprecated use `DocumentGetDocumentDataType$inboundSchema` instead. */
  export const inboundSchema = DocumentGetDocumentDataType$inboundSchema;
  /** @deprecated use `DocumentGetDocumentDataType$outboundSchema` instead. */
  export const outboundSchema = DocumentGetDocumentDataType$outboundSchema;
}

/** @internal */
export const DocumentGetDocumentData$inboundSchema: z.ZodType<
  DocumentGetDocumentData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentGetDocumentDataType$inboundSchema,
  id: z.string(),
  data: z.string(),
  initialData: z.string(),
});

/** @internal */
export type DocumentGetDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
};

/** @internal */
export const DocumentGetDocumentData$outboundSchema: z.ZodType<
  DocumentGetDocumentData$Outbound,
  z.ZodTypeDef,
  DocumentGetDocumentData
> = z.object({
  type: DocumentGetDocumentDataType$outboundSchema,
  id: z.string(),
  data: z.string(),
  initialData: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentData$ {
  /** @deprecated use `DocumentGetDocumentData$inboundSchema` instead. */
  export const inboundSchema = DocumentGetDocumentData$inboundSchema;
  /** @deprecated use `DocumentGetDocumentData$outboundSchema` instead. */
  export const outboundSchema = DocumentGetDocumentData$outboundSchema;
  /** @deprecated use `DocumentGetDocumentData$Outbound` instead. */
  export type Outbound = DocumentGetDocumentData$Outbound;
}

export function documentGetDocumentDataToJSON(
  documentGetDocumentData: DocumentGetDocumentData,
): string {
  return JSON.stringify(
    DocumentGetDocumentData$outboundSchema.parse(documentGetDocumentData),
  );
}

export function documentGetDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetDocumentData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetDocumentData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetDocumentData' from JSON`,
  );
}

/** @internal */
export const DocumentGetSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSigningOrder
> = z.nativeEnum(DocumentGetSigningOrder);

/** @internal */
export const DocumentGetSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSigningOrder
> = DocumentGetSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetSigningOrder$ {
  /** @deprecated use `DocumentGetSigningOrder$inboundSchema` instead. */
  export const inboundSchema = DocumentGetSigningOrder$inboundSchema;
  /** @deprecated use `DocumentGetSigningOrder$outboundSchema` instead. */
  export const outboundSchema = DocumentGetSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentGetDistributionMethod$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDistributionMethod
> = z.nativeEnum(DocumentGetDistributionMethod);

/** @internal */
export const DocumentGetDistributionMethod$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDistributionMethod
> = DocumentGetDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDistributionMethod$ {
  /** @deprecated use `DocumentGetDistributionMethod$inboundSchema` instead. */
  export const inboundSchema = DocumentGetDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentGetDistributionMethod$outboundSchema` instead. */
  export const outboundSchema = DocumentGetDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentGetEmailSettings$inboundSchema: z.ZodType<
  DocumentGetEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentGetEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentGetEmailSettings$outboundSchema: z.ZodType<
  DocumentGetEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentGetEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetEmailSettings$ {
  /** @deprecated use `DocumentGetEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentGetEmailSettings$inboundSchema;
  /** @deprecated use `DocumentGetEmailSettings$outboundSchema` instead. */
  export const outboundSchema = DocumentGetEmailSettings$outboundSchema;
  /** @deprecated use `DocumentGetEmailSettings$Outbound` instead. */
  export type Outbound = DocumentGetEmailSettings$Outbound;
}

export function documentGetEmailSettingsToJSON(
  documentGetEmailSettings: DocumentGetEmailSettings,
): string {
  return JSON.stringify(
    DocumentGetEmailSettings$outboundSchema.parse(documentGetEmailSettings),
  );
}

export function documentGetEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentGetDocumentMeta$inboundSchema: z.ZodType<
  DocumentGetDocumentMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  signingOrder: DocumentGetSigningOrder$inboundSchema,
  distributionMethod: DocumentGetDistributionMethod$inboundSchema,
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  password: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  documentId: z.number(),
  redirectUrl: z.nullable(z.string()),
  typedSignatureEnabled: z.boolean(),
  uploadSignatureEnabled: z.boolean(),
  drawSignatureEnabled: z.boolean(),
  allowDictateNextSigner: z.boolean(),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => DocumentGetEmailSettings$inboundSchema),
  ),
  emailId: z.nullable(z.string()),
  emailReplyTo: z.nullable(z.string()),
});

/** @internal */
export type DocumentGetDocumentMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentGetEmailSettings$Outbound | null;
  emailId: string | null;
  emailReplyTo: string | null;
};

/** @internal */
export const DocumentGetDocumentMeta$outboundSchema: z.ZodType<
  DocumentGetDocumentMeta$Outbound,
  z.ZodTypeDef,
  DocumentGetDocumentMeta
> = z.object({
  signingOrder: DocumentGetSigningOrder$outboundSchema,
  distributionMethod: DocumentGetDistributionMethod$outboundSchema,
  id: z.string(),
  subject: z.nullable(z.string()),
  message: z.nullable(z.string()),
  timezone: z.nullable(z.string()),
  password: z.nullable(z.string()),
  dateFormat: z.nullable(z.string()),
  documentId: z.number(),
  redirectUrl: z.nullable(z.string()),
  typedSignatureEnabled: z.boolean(),
  uploadSignatureEnabled: z.boolean(),
  drawSignatureEnabled: z.boolean(),
  allowDictateNextSigner: z.boolean(),
  language: z.string(),
  emailSettings: z.nullable(
    z.lazy(() => DocumentGetEmailSettings$outboundSchema),
  ),
  emailId: z.nullable(z.string()),
  emailReplyTo: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDocumentMeta$ {
  /** @deprecated use `DocumentGetDocumentMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentGetDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentGetDocumentMeta$outboundSchema` instead. */
  export const outboundSchema = DocumentGetDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentGetDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentGetDocumentMeta$Outbound;
}

export function documentGetDocumentMetaToJSON(
  documentGetDocumentMeta: DocumentGetDocumentMeta,
): string {
  return JSON.stringify(
    DocumentGetDocumentMeta$outboundSchema.parse(documentGetDocumentMeta),
  );
}

export function documentGetDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetDocumentMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetDocumentMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentGetFolderType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFolderType
> = z.nativeEnum(DocumentGetFolderType);

/** @internal */
export const DocumentGetFolderType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFolderType
> = DocumentGetFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFolderType$ {
  /** @deprecated use `DocumentGetFolderType$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFolderType$inboundSchema;
  /** @deprecated use `DocumentGetFolderType$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFolderType$outboundSchema;
}

/** @internal */
export const DocumentGetFolderVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFolderVisibility
> = z.nativeEnum(DocumentGetFolderVisibility);

/** @internal */
export const DocumentGetFolderVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFolderVisibility
> = DocumentGetFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFolderVisibility$ {
  /** @deprecated use `DocumentGetFolderVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFolderVisibility$inboundSchema;
  /** @deprecated use `DocumentGetFolderVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFolderVisibility$outboundSchema;
}

/** @internal */
export const DocumentGetFolder$inboundSchema: z.ZodType<
  DocumentGetFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: DocumentGetFolderType$inboundSchema,
  visibility: DocumentGetFolderVisibility$inboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type DocumentGetFolder$Outbound = {
  id: string;
  name: string;
  type: string;
  visibility: string;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const DocumentGetFolder$outboundSchema: z.ZodType<
  DocumentGetFolder$Outbound,
  z.ZodTypeDef,
  DocumentGetFolder
> = z.object({
  id: z.string(),
  name: z.string(),
  type: DocumentGetFolderType$outboundSchema,
  visibility: DocumentGetFolderVisibility$outboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFolder$ {
  /** @deprecated use `DocumentGetFolder$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFolder$inboundSchema;
  /** @deprecated use `DocumentGetFolder$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFolder$outboundSchema;
  /** @deprecated use `DocumentGetFolder$Outbound` instead. */
  export type Outbound = DocumentGetFolder$Outbound;
}

export function documentGetFolderToJSON(
  documentGetFolder: DocumentGetFolder,
): string {
  return JSON.stringify(
    DocumentGetFolder$outboundSchema.parse(documentGetFolder),
  );
}

export function documentGetFolderFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFolder' from JSON`,
  );
}

/** @internal */
export const DocumentGetRole$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetRole
> = z.nativeEnum(DocumentGetRole);

/** @internal */
export const DocumentGetRole$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetRole
> = DocumentGetRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetRole$ {
  /** @deprecated use `DocumentGetRole$inboundSchema` instead. */
  export const inboundSchema = DocumentGetRole$inboundSchema;
  /** @deprecated use `DocumentGetRole$outboundSchema` instead. */
  export const outboundSchema = DocumentGetRole$outboundSchema;
}

/** @internal */
export const DocumentGetReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetReadStatus
> = z.nativeEnum(DocumentGetReadStatus);

/** @internal */
export const DocumentGetReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetReadStatus
> = DocumentGetReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetReadStatus$ {
  /** @deprecated use `DocumentGetReadStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentGetReadStatus$inboundSchema;
  /** @deprecated use `DocumentGetReadStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentGetReadStatus$outboundSchema;
}

/** @internal */
export const DocumentGetSigningStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSigningStatus
> = z.nativeEnum(DocumentGetSigningStatus);

/** @internal */
export const DocumentGetSigningStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSigningStatus
> = DocumentGetSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetSigningStatus$ {
  /** @deprecated use `DocumentGetSigningStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentGetSigningStatus$inboundSchema;
  /** @deprecated use `DocumentGetSigningStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentGetSigningStatus$outboundSchema;
}

/** @internal */
export const DocumentGetSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSendStatus
> = z.nativeEnum(DocumentGetSendStatus);

/** @internal */
export const DocumentGetSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetSendStatus
> = DocumentGetSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetSendStatus$ {
  /** @deprecated use `DocumentGetSendStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentGetSendStatus$inboundSchema;
  /** @deprecated use `DocumentGetSendStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentGetSendStatus$outboundSchema;
}

/** @internal */
export const DocumentGetAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetAccessAuth
> = z.nativeEnum(DocumentGetAccessAuth);

/** @internal */
export const DocumentGetAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetAccessAuth
> = DocumentGetAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetAccessAuth$ {
  /** @deprecated use `DocumentGetAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGetAccessAuth$inboundSchema;
  /** @deprecated use `DocumentGetAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGetAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentGetActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetActionAuth
> = z.nativeEnum(DocumentGetActionAuth);

/** @internal */
export const DocumentGetActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetActionAuth
> = DocumentGetActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetActionAuth$ {
  /** @deprecated use `DocumentGetActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGetActionAuth$inboundSchema;
  /** @deprecated use `DocumentGetActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGetActionAuth$outboundSchema;
}

/** @internal */
export const DocumentGetRecipientAuthOptions$inboundSchema: z.ZodType<
  DocumentGetRecipientAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAuth: z.array(DocumentGetAccessAuth$inboundSchema),
  actionAuth: z.array(DocumentGetActionAuth$inboundSchema),
});

/** @internal */
export type DocumentGetRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const DocumentGetRecipientAuthOptions$outboundSchema: z.ZodType<
  DocumentGetRecipientAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentGetRecipientAuthOptions
> = z.object({
  accessAuth: z.array(DocumentGetAccessAuth$outboundSchema),
  actionAuth: z.array(DocumentGetActionAuth$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetRecipientAuthOptions$ {
  /** @deprecated use `DocumentGetRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentGetRecipientAuthOptions$inboundSchema;
  /** @deprecated use `DocumentGetRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentGetRecipientAuthOptions$outboundSchema;
  /** @deprecated use `DocumentGetRecipientAuthOptions$Outbound` instead. */
  export type Outbound = DocumentGetRecipientAuthOptions$Outbound;
}

export function documentGetRecipientAuthOptionsToJSON(
  documentGetRecipientAuthOptions: DocumentGetRecipientAuthOptions,
): string {
  return JSON.stringify(
    DocumentGetRecipientAuthOptions$outboundSchema.parse(
      documentGetRecipientAuthOptions,
    ),
  );
}

export function documentGetRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetRecipientAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetRecipientAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentGetRecipient$inboundSchema: z.ZodType<
  DocumentGetRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DocumentGetRole$inboundSchema,
  readStatus: DocumentGetReadStatus$inboundSchema,
  signingStatus: DocumentGetSigningStatus$inboundSchema,
  sendStatus: DocumentGetSendStatus$inboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentGetRecipientAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type DocumentGetRecipient$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentGetRecipientAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const DocumentGetRecipient$outboundSchema: z.ZodType<
  DocumentGetRecipient$Outbound,
  z.ZodTypeDef,
  DocumentGetRecipient
> = z.object({
  role: DocumentGetRole$outboundSchema,
  readStatus: DocumentGetReadStatus$outboundSchema,
  signingStatus: DocumentGetSigningStatus$outboundSchema,
  sendStatus: DocumentGetSendStatus$outboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => DocumentGetRecipientAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetRecipient$ {
  /** @deprecated use `DocumentGetRecipient$inboundSchema` instead. */
  export const inboundSchema = DocumentGetRecipient$inboundSchema;
  /** @deprecated use `DocumentGetRecipient$outboundSchema` instead. */
  export const outboundSchema = DocumentGetRecipient$outboundSchema;
  /** @deprecated use `DocumentGetRecipient$Outbound` instead. */
  export type Outbound = DocumentGetRecipient$Outbound;
}

export function documentGetRecipientToJSON(
  documentGetRecipient: DocumentGetRecipient,
): string {
  return JSON.stringify(
    DocumentGetRecipient$outboundSchema.parse(documentGetRecipient),
  );
}

export function documentGetRecipientFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetRecipient' from JSON`,
  );
}

/** @internal */
export const DocumentGetFieldType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFieldType
> = z.nativeEnum(DocumentGetFieldType);

/** @internal */
export const DocumentGetFieldType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetFieldType
> = DocumentGetFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldType$ {
  /** @deprecated use `DocumentGetFieldType$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldType$inboundSchema;
  /** @deprecated use `DocumentGetFieldType$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldType$outboundSchema;
}

/** @internal */
export const DocumentGetTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeDropdown
> = z.nativeEnum(DocumentGetTypeDropdown);

/** @internal */
export const DocumentGetTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeDropdown
> = DocumentGetTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeDropdown$ {
  /** @deprecated use `DocumentGetTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeDropdown$inboundSchema;
  /** @deprecated use `DocumentGetTypeDropdown$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeDropdown$outboundSchema;
}

/** @internal */
export const DocumentGetValue3$inboundSchema: z.ZodType<
  DocumentGetValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type DocumentGetValue3$Outbound = {
  value: string;
};

/** @internal */
export const DocumentGetValue3$outboundSchema: z.ZodType<
  DocumentGetValue3$Outbound,
  z.ZodTypeDef,
  DocumentGetValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetValue3$ {
  /** @deprecated use `DocumentGetValue3$inboundSchema` instead. */
  export const inboundSchema = DocumentGetValue3$inboundSchema;
  /** @deprecated use `DocumentGetValue3$outboundSchema` instead. */
  export const outboundSchema = DocumentGetValue3$outboundSchema;
  /** @deprecated use `DocumentGetValue3$Outbound` instead. */
  export type Outbound = DocumentGetValue3$Outbound;
}

export function documentGetValue3ToJSON(
  documentGetValue3: DocumentGetValue3,
): string {
  return JSON.stringify(
    DocumentGetValue3$outboundSchema.parse(documentGetValue3),
  );
}

export function documentGetValue3FromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetValue3' from JSON`,
  );
}

/** @internal */
export const DocumentGetFieldMetaDropdown$inboundSchema: z.ZodType<
  DocumentGetFieldMetaDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue3$inboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type DocumentGetFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentGetValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaDropdown$outboundSchema: z.ZodType<
  DocumentGetFieldMetaDropdown$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue3$outboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaDropdown$ {
  /** @deprecated use `DocumentGetFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaDropdown$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaDropdown$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaDropdown$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaDropdown$Outbound;
}

export function documentGetFieldMetaDropdownToJSON(
  documentGetFieldMetaDropdown: DocumentGetFieldMetaDropdown,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaDropdown$outboundSchema.parse(
      documentGetFieldMetaDropdown,
    ),
  );
}

export function documentGetFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeCheckbox
> = z.nativeEnum(DocumentGetTypeCheckbox);

/** @internal */
export const DocumentGetTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeCheckbox
> = DocumentGetTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeCheckbox$ {
  /** @deprecated use `DocumentGetTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeCheckbox$inboundSchema;
  /** @deprecated use `DocumentGetTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeCheckbox$outboundSchema;
}

/** @internal */
export const DocumentGetValue2$inboundSchema: z.ZodType<
  DocumentGetValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentGetValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentGetValue2$outboundSchema: z.ZodType<
  DocumentGetValue2$Outbound,
  z.ZodTypeDef,
  DocumentGetValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetValue2$ {
  /** @deprecated use `DocumentGetValue2$inboundSchema` instead. */
  export const inboundSchema = DocumentGetValue2$inboundSchema;
  /** @deprecated use `DocumentGetValue2$outboundSchema` instead. */
  export const outboundSchema = DocumentGetValue2$outboundSchema;
  /** @deprecated use `DocumentGetValue2$Outbound` instead. */
  export type Outbound = DocumentGetValue2$Outbound;
}

export function documentGetValue2ToJSON(
  documentGetValue2: DocumentGetValue2,
): string {
  return JSON.stringify(
    DocumentGetValue2$outboundSchema.parse(documentGetValue2),
  );
}

export function documentGetValue2FromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetValue2' from JSON`,
  );
}

/** @internal */
export const DocumentGetDirection$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDirection
> = z.nativeEnum(DocumentGetDirection);

/** @internal */
export const DocumentGetDirection$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetDirection
> = DocumentGetDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetDirection$ {
  /** @deprecated use `DocumentGetDirection$inboundSchema` instead. */
  export const inboundSchema = DocumentGetDirection$inboundSchema;
  /** @deprecated use `DocumentGetDirection$outboundSchema` instead. */
  export const outboundSchema = DocumentGetDirection$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaCheckbox$inboundSchema: z.ZodType<
  DocumentGetFieldMetaCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue2$inboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: DocumentGetDirection$inboundSchema.default("vertical"),
});

/** @internal */
export type DocumentGetFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentGetValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const DocumentGetFieldMetaCheckbox$outboundSchema: z.ZodType<
  DocumentGetFieldMetaCheckbox$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue2$outboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: DocumentGetDirection$outboundSchema.default("vertical"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaCheckbox$ {
  /** @deprecated use `DocumentGetFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaCheckbox$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaCheckbox$Outbound;
}

export function documentGetFieldMetaCheckboxToJSON(
  documentGetFieldMetaCheckbox: DocumentGetFieldMetaCheckbox,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaCheckbox$outboundSchema.parse(
      documentGetFieldMetaCheckbox,
    ),
  );
}

export function documentGetFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeRadio
> = z.nativeEnum(DocumentGetTypeRadio);

/** @internal */
export const DocumentGetTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeRadio
> = DocumentGetTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeRadio$ {
  /** @deprecated use `DocumentGetTypeRadio$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeRadio$inboundSchema;
  /** @deprecated use `DocumentGetTypeRadio$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeRadio$outboundSchema;
}

/** @internal */
export const DocumentGetValue1$inboundSchema: z.ZodType<
  DocumentGetValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentGetValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentGetValue1$outboundSchema: z.ZodType<
  DocumentGetValue1$Outbound,
  z.ZodTypeDef,
  DocumentGetValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetValue1$ {
  /** @deprecated use `DocumentGetValue1$inboundSchema` instead. */
  export const inboundSchema = DocumentGetValue1$inboundSchema;
  /** @deprecated use `DocumentGetValue1$outboundSchema` instead. */
  export const outboundSchema = DocumentGetValue1$outboundSchema;
  /** @deprecated use `DocumentGetValue1$Outbound` instead. */
  export type Outbound = DocumentGetValue1$Outbound;
}

export function documentGetValue1ToJSON(
  documentGetValue1: DocumentGetValue1,
): string {
  return JSON.stringify(
    DocumentGetValue1$outboundSchema.parse(documentGetValue1),
  );
}

export function documentGetValue1FromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetValue1' from JSON`,
  );
}

/** @internal */
export const DocumentGetFieldMetaRadio$inboundSchema: z.ZodType<
  DocumentGetFieldMetaRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue1$inboundSchema)).optional(),
});

/** @internal */
export type DocumentGetFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentGetValue1$Outbound> | undefined;
};

/** @internal */
export const DocumentGetFieldMetaRadio$outboundSchema: z.ZodType<
  DocumentGetFieldMetaRadio$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => DocumentGetValue1$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaRadio$ {
  /** @deprecated use `DocumentGetFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaRadio$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaRadio$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaRadio$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaRadio$Outbound;
}

export function documentGetFieldMetaRadioToJSON(
  documentGetFieldMetaRadio: DocumentGetFieldMetaRadio,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaRadio$outboundSchema.parse(documentGetFieldMetaRadio),
  );
}

export function documentGetFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeNumber
> = z.nativeEnum(DocumentGetTypeNumber);

/** @internal */
export const DocumentGetTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeNumber
> = DocumentGetTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeNumber$ {
  /** @deprecated use `DocumentGetTypeNumber$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeNumber$inboundSchema;
  /** @deprecated use `DocumentGetTypeNumber$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeNumber$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign6
> = z.nativeEnum(DocumentGetTextAlign6);

/** @internal */
export const DocumentGetTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign6
> = DocumentGetTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign6$ {
  /** @deprecated use `DocumentGetTextAlign6$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign6$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign6$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign6$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaNumber$inboundSchema: z.ZodType<
  DocumentGetFieldMetaNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeNumber$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaNumber$outboundSchema: z.ZodType<
  DocumentGetFieldMetaNumber$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeNumber$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaNumber$ {
  /** @deprecated use `DocumentGetFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaNumber$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaNumber$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaNumber$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaNumber$Outbound;
}

export function documentGetFieldMetaNumberToJSON(
  documentGetFieldMetaNumber: DocumentGetFieldMetaNumber,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaNumber$outboundSchema.parse(documentGetFieldMetaNumber),
  );
}

export function documentGetFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeText$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeText
> = z.nativeEnum(DocumentGetTypeText);

/** @internal */
export const DocumentGetTypeText$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeText
> = DocumentGetTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeText$ {
  /** @deprecated use `DocumentGetTypeText$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeText$inboundSchema;
  /** @deprecated use `DocumentGetTypeText$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeText$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign5
> = z.nativeEnum(DocumentGetTextAlign5);

/** @internal */
export const DocumentGetTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign5
> = DocumentGetTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign5$ {
  /** @deprecated use `DocumentGetTextAlign5$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign5$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign5$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign5$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaText$inboundSchema: z.ZodType<
  DocumentGetFieldMetaText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaText$outboundSchema: z.ZodType<
  DocumentGetFieldMetaText$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaText$ {
  /** @deprecated use `DocumentGetFieldMetaText$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaText$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaText$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaText$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaText$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaText$Outbound;
}

export function documentGetFieldMetaTextToJSON(
  documentGetFieldMetaText: DocumentGetFieldMetaText,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaText$outboundSchema.parse(documentGetFieldMetaText),
  );
}

export function documentGetFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaText' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeDate
> = z.nativeEnum(DocumentGetTypeDate);

/** @internal */
export const DocumentGetTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeDate
> = DocumentGetTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeDate$ {
  /** @deprecated use `DocumentGetTypeDate$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeDate$inboundSchema;
  /** @deprecated use `DocumentGetTypeDate$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeDate$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign4
> = z.nativeEnum(DocumentGetTextAlign4);

/** @internal */
export const DocumentGetTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign4
> = DocumentGetTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign4$ {
  /** @deprecated use `DocumentGetTextAlign4$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign4$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign4$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign4$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaDate$inboundSchema: z.ZodType<
  DocumentGetFieldMetaDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaDate$outboundSchema: z.ZodType<
  DocumentGetFieldMetaDate$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaDate$ {
  /** @deprecated use `DocumentGetFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaDate$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaDate$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaDate$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaDate$Outbound;
}

export function documentGetFieldMetaDateToJSON(
  documentGetFieldMetaDate: DocumentGetFieldMetaDate,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaDate$outboundSchema.parse(documentGetFieldMetaDate),
  );
}

export function documentGetFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeEmail
> = z.nativeEnum(DocumentGetTypeEmail);

/** @internal */
export const DocumentGetTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeEmail
> = DocumentGetTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeEmail$ {
  /** @deprecated use `DocumentGetTypeEmail$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeEmail$inboundSchema;
  /** @deprecated use `DocumentGetTypeEmail$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeEmail$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign3
> = z.nativeEnum(DocumentGetTextAlign3);

/** @internal */
export const DocumentGetTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign3
> = DocumentGetTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign3$ {
  /** @deprecated use `DocumentGetTextAlign3$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign3$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign3$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign3$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaEmail$inboundSchema: z.ZodType<
  DocumentGetFieldMetaEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaEmail$outboundSchema: z.ZodType<
  DocumentGetFieldMetaEmail$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaEmail$ {
  /** @deprecated use `DocumentGetFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaEmail$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaEmail$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaEmail$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaEmail$Outbound;
}

export function documentGetFieldMetaEmailToJSON(
  documentGetFieldMetaEmail: DocumentGetFieldMetaEmail,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaEmail$outboundSchema.parse(documentGetFieldMetaEmail),
  );
}

export function documentGetFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeName$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeName
> = z.nativeEnum(DocumentGetTypeName);

/** @internal */
export const DocumentGetTypeName$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeName
> = DocumentGetTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeName$ {
  /** @deprecated use `DocumentGetTypeName$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeName$inboundSchema;
  /** @deprecated use `DocumentGetTypeName$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeName$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign2
> = z.nativeEnum(DocumentGetTextAlign2);

/** @internal */
export const DocumentGetTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign2
> = DocumentGetTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign2$ {
  /** @deprecated use `DocumentGetTextAlign2$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign2$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign2$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign2$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaName$inboundSchema: z.ZodType<
  DocumentGetFieldMetaName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaName$outboundSchema: z.ZodType<
  DocumentGetFieldMetaName$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaName$ {
  /** @deprecated use `DocumentGetFieldMetaName$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaName$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaName$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaName$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaName$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaName$Outbound;
}

export function documentGetFieldMetaNameToJSON(
  documentGetFieldMetaName: DocumentGetFieldMetaName,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaName$outboundSchema.parse(documentGetFieldMetaName),
  );
}

export function documentGetFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaName' from JSON`,
  );
}

/** @internal */
export const DocumentGetTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeInitials
> = z.nativeEnum(DocumentGetTypeInitials);

/** @internal */
export const DocumentGetTypeInitials$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTypeInitials
> = DocumentGetTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTypeInitials$ {
  /** @deprecated use `DocumentGetTypeInitials$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTypeInitials$inboundSchema;
  /** @deprecated use `DocumentGetTypeInitials$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTypeInitials$outboundSchema;
}

/** @internal */
export const DocumentGetTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign1
> = z.nativeEnum(DocumentGetTextAlign1);

/** @internal */
export const DocumentGetTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGetTextAlign1
> = DocumentGetTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetTextAlign1$ {
  /** @deprecated use `DocumentGetTextAlign1$inboundSchema` instead. */
  export const inboundSchema = DocumentGetTextAlign1$inboundSchema;
  /** @deprecated use `DocumentGetTextAlign1$outboundSchema` instead. */
  export const outboundSchema = DocumentGetTextAlign1$outboundSchema;
}

/** @internal */
export const DocumentGetFieldMetaInitials$inboundSchema: z.ZodType<
  DocumentGetFieldMetaInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type DocumentGetFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentGetFieldMetaInitials$outboundSchema: z.ZodType<
  DocumentGetFieldMetaInitials$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentGetTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentGetTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaInitials$ {
  /** @deprecated use `DocumentGetFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaInitials$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaInitials$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaInitials$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaInitials$Outbound;
}

export function documentGetFieldMetaInitialsToJSON(
  documentGetFieldMetaInitials: DocumentGetFieldMetaInitials,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaInitials$outboundSchema.parse(
      documentGetFieldMetaInitials,
    ),
  );
}

export function documentGetFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const DocumentGetFieldMetaUnion$inboundSchema: z.ZodType<
  DocumentGetFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DocumentGetFieldMetaInitials$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaName$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaEmail$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaDate$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaText$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaNumber$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaRadio$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaCheckbox$inboundSchema),
  z.lazy(() => DocumentGetFieldMetaDropdown$inboundSchema),
]);

/** @internal */
export type DocumentGetFieldMetaUnion$Outbound =
  | DocumentGetFieldMetaInitials$Outbound
  | DocumentGetFieldMetaName$Outbound
  | DocumentGetFieldMetaEmail$Outbound
  | DocumentGetFieldMetaDate$Outbound
  | DocumentGetFieldMetaText$Outbound
  | DocumentGetFieldMetaNumber$Outbound
  | DocumentGetFieldMetaRadio$Outbound
  | DocumentGetFieldMetaCheckbox$Outbound
  | DocumentGetFieldMetaDropdown$Outbound;

/** @internal */
export const DocumentGetFieldMetaUnion$outboundSchema: z.ZodType<
  DocumentGetFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  DocumentGetFieldMetaUnion
> = z.union([
  z.lazy(() => DocumentGetFieldMetaInitials$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaName$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaEmail$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaDate$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaText$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaNumber$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaRadio$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaCheckbox$outboundSchema),
  z.lazy(() => DocumentGetFieldMetaDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetFieldMetaUnion$ {
  /** @deprecated use `DocumentGetFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema = DocumentGetFieldMetaUnion$inboundSchema;
  /** @deprecated use `DocumentGetFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema = DocumentGetFieldMetaUnion$outboundSchema;
  /** @deprecated use `DocumentGetFieldMetaUnion$Outbound` instead. */
  export type Outbound = DocumentGetFieldMetaUnion$Outbound;
}

export function documentGetFieldMetaUnionToJSON(
  documentGetFieldMetaUnion: DocumentGetFieldMetaUnion,
): string {
  return JSON.stringify(
    DocumentGetFieldMetaUnion$outboundSchema.parse(documentGetFieldMetaUnion),
  );
}

export function documentGetFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const DocumentGetField$inboundSchema: z.ZodType<
  DocumentGetField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentGetFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => DocumentGetFieldMetaInitials$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaName$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaEmail$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaDate$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaText$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaNumber$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaRadio$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaCheckbox$inboundSchema),
      z.lazy(() => DocumentGetFieldMetaDropdown$inboundSchema),
    ]),
  ),
});

/** @internal */
export type DocumentGetField$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | DocumentGetFieldMetaInitials$Outbound
    | DocumentGetFieldMetaName$Outbound
    | DocumentGetFieldMetaEmail$Outbound
    | DocumentGetFieldMetaDate$Outbound
    | DocumentGetFieldMetaText$Outbound
    | DocumentGetFieldMetaNumber$Outbound
    | DocumentGetFieldMetaRadio$Outbound
    | DocumentGetFieldMetaCheckbox$Outbound
    | DocumentGetFieldMetaDropdown$Outbound
    | null;
};

/** @internal */
export const DocumentGetField$outboundSchema: z.ZodType<
  DocumentGetField$Outbound,
  z.ZodTypeDef,
  DocumentGetField
> = z.object({
  type: DocumentGetFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => DocumentGetFieldMetaInitials$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaName$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaEmail$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaDate$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaText$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaNumber$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaRadio$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaCheckbox$outboundSchema),
      z.lazy(() => DocumentGetFieldMetaDropdown$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetField$ {
  /** @deprecated use `DocumentGetField$inboundSchema` instead. */
  export const inboundSchema = DocumentGetField$inboundSchema;
  /** @deprecated use `DocumentGetField$outboundSchema` instead. */
  export const outboundSchema = DocumentGetField$outboundSchema;
  /** @deprecated use `DocumentGetField$Outbound` instead. */
  export type Outbound = DocumentGetField$Outbound;
}

export function documentGetFieldToJSON(
  documentGetField: DocumentGetField,
): string {
  return JSON.stringify(
    DocumentGetField$outboundSchema.parse(documentGetField),
  );
}

export function documentGetFieldFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetField' from JSON`,
  );
}

/** @internal */
export const DocumentGetResponse$inboundSchema: z.ZodType<
  DocumentGetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentGetVisibility$inboundSchema,
  status: DocumentGetStatus$inboundSchema,
  source: DocumentGetSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(z.lazy(() => DocumentGetAuthOptions$inboundSchema)),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  documentData: z.lazy(() => DocumentGetDocumentData$inboundSchema),
  documentMeta: z.nullable(z.lazy(() => DocumentGetDocumentMeta$inboundSchema)),
  folder: z.nullable(z.lazy(() => DocumentGetFolder$inboundSchema)),
  recipients: z.array(z.lazy(() => DocumentGetRecipient$inboundSchema)),
  fields: z.array(z.lazy(() => DocumentGetField$inboundSchema)),
});

/** @internal */
export type DocumentGetResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentGetAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  documentData: DocumentGetDocumentData$Outbound;
  documentMeta: DocumentGetDocumentMeta$Outbound | null;
  folder: DocumentGetFolder$Outbound | null;
  recipients: Array<DocumentGetRecipient$Outbound>;
  fields: Array<DocumentGetField$Outbound>;
};

/** @internal */
export const DocumentGetResponse$outboundSchema: z.ZodType<
  DocumentGetResponse$Outbound,
  z.ZodTypeDef,
  DocumentGetResponse
> = z.object({
  visibility: DocumentGetVisibility$outboundSchema,
  status: DocumentGetStatus$outboundSchema,
  source: DocumentGetSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(z.lazy(() => DocumentGetAuthOptions$outboundSchema)),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  documentData: z.lazy(() => DocumentGetDocumentData$outboundSchema),
  documentMeta: z.nullable(
    z.lazy(() => DocumentGetDocumentMeta$outboundSchema),
  ),
  folder: z.nullable(z.lazy(() => DocumentGetFolder$outboundSchema)),
  recipients: z.array(z.lazy(() => DocumentGetRecipient$outboundSchema)),
  fields: z.array(z.lazy(() => DocumentGetField$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGetResponse$ {
  /** @deprecated use `DocumentGetResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentGetResponse$inboundSchema;
  /** @deprecated use `DocumentGetResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentGetResponse$outboundSchema;
  /** @deprecated use `DocumentGetResponse$Outbound` instead. */
  export type Outbound = DocumentGetResponse$Outbound;
}

export function documentGetResponseToJSON(
  documentGetResponse: DocumentGetResponse,
): string {
  return JSON.stringify(
    DocumentGetResponse$outboundSchema.parse(documentGetResponse),
  );
}

export function documentGetResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentGetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentGetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentGetResponse' from JSON`,
  );
}
