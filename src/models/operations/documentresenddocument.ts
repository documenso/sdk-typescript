/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentResendDocumentRequestBody = {
  documentId: number;
  /**
   * The IDs of the recipients to redistribute the document to.
   */
  recipients: Array<number>;
};

/**
 * Successful response
 */
export type DocumentResendDocumentResponseBody = {
  success: boolean;
};

/** @internal */
export const DocumentResendDocumentRequestBody$inboundSchema: z.ZodType<
  DocumentResendDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  recipients: z.array(z.number()),
});

/** @internal */
export type DocumentResendDocumentRequestBody$Outbound = {
  documentId: number;
  recipients: Array<number>;
};

/** @internal */
export const DocumentResendDocumentRequestBody$outboundSchema: z.ZodType<
  DocumentResendDocumentRequestBody$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentRequestBody
> = z.object({
  documentId: z.number(),
  recipients: z.array(z.number()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentRequestBody$ {
  /** @deprecated use `DocumentResendDocumentRequestBody$inboundSchema` instead. */
  export const inboundSchema = DocumentResendDocumentRequestBody$inboundSchema;
  /** @deprecated use `DocumentResendDocumentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentRequestBody$outboundSchema;
  /** @deprecated use `DocumentResendDocumentRequestBody$Outbound` instead. */
  export type Outbound = DocumentResendDocumentRequestBody$Outbound;
}

export function documentResendDocumentRequestBodyToJSON(
  documentResendDocumentRequestBody: DocumentResendDocumentRequestBody,
): string {
  return JSON.stringify(
    DocumentResendDocumentRequestBody$outboundSchema.parse(
      documentResendDocumentRequestBody,
    ),
  );
}

export function documentResendDocumentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DocumentResendDocumentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentResendDocumentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentResendDocumentRequestBody' from JSON`,
  );
}

/** @internal */
export const DocumentResendDocumentResponseBody$inboundSchema: z.ZodType<
  DocumentResendDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type DocumentResendDocumentResponseBody$Outbound = {
  success: boolean;
};

/** @internal */
export const DocumentResendDocumentResponseBody$outboundSchema: z.ZodType<
  DocumentResendDocumentResponseBody$Outbound,
  z.ZodTypeDef,
  DocumentResendDocumentResponseBody
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentResendDocumentResponseBody$ {
  /** @deprecated use `DocumentResendDocumentResponseBody$inboundSchema` instead. */
  export const inboundSchema = DocumentResendDocumentResponseBody$inboundSchema;
  /** @deprecated use `DocumentResendDocumentResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DocumentResendDocumentResponseBody$outboundSchema;
  /** @deprecated use `DocumentResendDocumentResponseBody$Outbound` instead. */
  export type Outbound = DocumentResendDocumentResponseBody$Outbound;
}

export function documentResendDocumentResponseBodyToJSON(
  documentResendDocumentResponseBody: DocumentResendDocumentResponseBody,
): string {
  return JSON.stringify(
    DocumentResendDocumentResponseBody$outboundSchema.parse(
      documentResendDocumentResponseBody,
    ),
  );
}

export function documentResendDocumentResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DocumentResendDocumentResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentResendDocumentResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentResendDocumentResponseBody' from JSON`,
  );
}
