/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TemplateUpdateTemplateVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateUpdateTemplateVisibilityRequest = ClosedEnum<
  typeof TemplateUpdateTemplateVisibilityRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateUpdateTemplateGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateUpdateTemplateGlobalAccessAuthRequest = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateUpdateTemplateGlobalActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateUpdateTemplateGlobalActionAuthRequest = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalActionAuthRequest
>;

export const TemplateUpdateTemplateDataType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateUpdateTemplateDataType = ClosedEnum<
  typeof TemplateUpdateTemplateDataType
>;

export type TemplateUpdateTemplateData = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: TemplateUpdateTemplateVisibilityRequest | undefined;
  globalAccessAuth?:
    | Array<TemplateUpdateTemplateGlobalAccessAuthRequest>
    | undefined;
  globalActionAuth?:
    | Array<TemplateUpdateTemplateGlobalActionAuthRequest>
    | undefined;
  /**
   * The title of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicTitle?: string | undefined;
  /**
   * The description of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicDescription?: string | undefined;
  type?: TemplateUpdateTemplateDataType | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const TemplateUpdateTemplateDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type TemplateUpdateTemplateDateFormat = ClosedEnum<
  typeof TemplateUpdateTemplateDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const TemplateUpdateTemplateDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type TemplateUpdateTemplateDistributionMethod = ClosedEnum<
  typeof TemplateUpdateTemplateDistributionMethod
>;

export type TemplateUpdateTemplateEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

/**
 * The language to use for email communications with recipients.
 */
export const TemplateUpdateTemplateLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type TemplateUpdateTemplateLanguage = ClosedEnum<
  typeof TemplateUpdateTemplateLanguage
>;

export const TemplateUpdateTemplateSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateUpdateTemplateSigningOrder = ClosedEnum<
  typeof TemplateUpdateTemplateSigningOrder
>;

export type TemplateUpdateTemplateMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: TemplateUpdateTemplateDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: TemplateUpdateTemplateDistributionMethod | undefined;
  emailSettings?: TemplateUpdateTemplateEmailSettings | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: TemplateUpdateTemplateLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  signingOrder?: TemplateUpdateTemplateSigningOrder | undefined;
  allowDictateNextSigner?: boolean | undefined;
};

export type TemplateUpdateTemplateRequest = {
  templateId: number;
  data?: TemplateUpdateTemplateData | undefined;
  meta?: TemplateUpdateTemplateMeta | undefined;
};

export const TemplateUpdateTemplateTypeResponse = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateUpdateTemplateTypeResponse = ClosedEnum<
  typeof TemplateUpdateTemplateTypeResponse
>;

export const TemplateUpdateTemplateVisibilityResponse = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateUpdateTemplateVisibilityResponse = ClosedEnum<
  typeof TemplateUpdateTemplateVisibilityResponse
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateUpdateTemplateGlobalAccessAuthResponse = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateUpdateTemplateGlobalAccessAuthResponse = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalAccessAuthResponse
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateUpdateTemplateGlobalActionAuthResponse = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateUpdateTemplateGlobalActionAuthResponse = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalActionAuthResponse
>;

export type TemplateUpdateTemplateAuthOptions = {
  globalAccessAuth: Array<TemplateUpdateTemplateGlobalAccessAuthResponse>;
  globalActionAuth: Array<TemplateUpdateTemplateGlobalActionAuthResponse>;
};

/**
 * Successful response
 */
export type TemplateUpdateTemplateResponse = {
  type: TemplateUpdateTemplateTypeResponse;
  visibility: TemplateUpdateTemplateVisibilityResponse;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateUpdateTemplateAuthOptions | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const TemplateUpdateTemplateVisibilityRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateVisibilityRequest> = z
    .nativeEnum(TemplateUpdateTemplateVisibilityRequest);

/** @internal */
export const TemplateUpdateTemplateVisibilityRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateVisibilityRequest> =
    TemplateUpdateTemplateVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateVisibilityRequest$ {
  /** @deprecated use `TemplateUpdateTemplateVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateVisibilityRequest$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateVisibilityRequest$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuthRequest> = z
    .nativeEnum(TemplateUpdateTemplateGlobalAccessAuthRequest);

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuthRequest> =
    TemplateUpdateTemplateGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalAccessAuthRequest$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuthRequest> = z
    .nativeEnum(TemplateUpdateTemplateGlobalActionAuthRequest);

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuthRequest> =
    TemplateUpdateTemplateGlobalActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalActionAuthRequest$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalActionAuthRequest$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalActionAuthRequest$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateDataType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDataType
> = z.nativeEnum(TemplateUpdateTemplateDataType);

/** @internal */
export const TemplateUpdateTemplateDataType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDataType
> = TemplateUpdateTemplateDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateDataType$ {
  /** @deprecated use `TemplateUpdateTemplateDataType$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateDataType$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateDataType$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateDataType$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateData$inboundSchema: z.ZodType<
  TemplateUpdateTemplateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateUpdateTemplateVisibilityRequest$inboundSchema.optional(),
  globalAccessAuth: z.array(
    TemplateUpdateTemplateGlobalAccessAuthRequest$inboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    TemplateUpdateTemplateGlobalActionAuthRequest$inboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateUpdateTemplateDataType$inboundSchema.optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/** @internal */
export type TemplateUpdateTemplateData$Outbound = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: Array<string> | undefined;
  globalActionAuth?: Array<string> | undefined;
  publicTitle?: string | undefined;
  publicDescription?: string | undefined;
  type?: string | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/** @internal */
export const TemplateUpdateTemplateData$outboundSchema: z.ZodType<
  TemplateUpdateTemplateData$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateData
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateUpdateTemplateVisibilityRequest$outboundSchema.optional(),
  globalAccessAuth: z.array(
    TemplateUpdateTemplateGlobalAccessAuthRequest$outboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    TemplateUpdateTemplateGlobalActionAuthRequest$outboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateUpdateTemplateDataType$outboundSchema.optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateData$ {
  /** @deprecated use `TemplateUpdateTemplateData$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateData$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateData$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateData$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateData$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateData$Outbound;
}

export function templateUpdateTemplateDataToJSON(
  templateUpdateTemplateData: TemplateUpdateTemplateData,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateData$outboundSchema.parse(templateUpdateTemplateData),
  );
}

export function templateUpdateTemplateDataFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateData' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDateFormat
> = z.nativeEnum(TemplateUpdateTemplateDateFormat);

/** @internal */
export const TemplateUpdateTemplateDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDateFormat
> = TemplateUpdateTemplateDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateDateFormat$ {
  /** @deprecated use `TemplateUpdateTemplateDateFormat$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateDateFormat$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateDateFormat$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateDateFormat$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateDistributionMethod> = z
    .nativeEnum(TemplateUpdateTemplateDistributionMethod);

/** @internal */
export const TemplateUpdateTemplateDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateDistributionMethod> =
    TemplateUpdateTemplateDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateDistributionMethod$ {
  /** @deprecated use `TemplateUpdateTemplateDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateEmailSettings$inboundSchema: z.ZodType<
  TemplateUpdateTemplateEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type TemplateUpdateTemplateEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateUpdateTemplateEmailSettings$outboundSchema: z.ZodType<
  TemplateUpdateTemplateEmailSettings$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateEmailSettings$ {
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateEmailSettings$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateEmailSettings$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateEmailSettings$Outbound;
}

export function templateUpdateTemplateEmailSettingsToJSON(
  templateUpdateTemplateEmailSettings: TemplateUpdateTemplateEmailSettings,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateEmailSettings$outboundSchema.parse(
      templateUpdateTemplateEmailSettings,
    ),
  );
}

export function templateUpdateTemplateEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateLanguage$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateLanguage
> = z.nativeEnum(TemplateUpdateTemplateLanguage);

/** @internal */
export const TemplateUpdateTemplateLanguage$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateLanguage
> = TemplateUpdateTemplateLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateLanguage$ {
  /** @deprecated use `TemplateUpdateTemplateLanguage$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateLanguage$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateLanguage$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateLanguage$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateSigningOrder
> = z.nativeEnum(TemplateUpdateTemplateSigningOrder);

/** @internal */
export const TemplateUpdateTemplateSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateSigningOrder
> = TemplateUpdateTemplateSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateSigningOrder$ {
  /** @deprecated use `TemplateUpdateTemplateSigningOrder$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateSigningOrder$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateMeta$inboundSchema: z.ZodType<
  TemplateUpdateTemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateUpdateTemplateDateFormat$inboundSchema.optional(),
  distributionMethod: TemplateUpdateTemplateDistributionMethod$inboundSchema
    .optional(),
  emailSettings: z.lazy(() => TemplateUpdateTemplateEmailSettings$inboundSchema)
    .optional(),
  redirectUrl: z.string().optional(),
  language: TemplateUpdateTemplateLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  signingOrder: TemplateUpdateTemplateSigningOrder$inboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
});

/** @internal */
export type TemplateUpdateTemplateMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  emailSettings?: TemplateUpdateTemplateEmailSettings$Outbound | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  signingOrder?: string | undefined;
  allowDictateNextSigner?: boolean | undefined;
};

/** @internal */
export const TemplateUpdateTemplateMeta$outboundSchema: z.ZodType<
  TemplateUpdateTemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateUpdateTemplateDateFormat$outboundSchema.optional(),
  distributionMethod: TemplateUpdateTemplateDistributionMethod$outboundSchema
    .optional(),
  emailSettings: z.lazy(() =>
    TemplateUpdateTemplateEmailSettings$outboundSchema
  ).optional(),
  redirectUrl: z.string().optional(),
  language: TemplateUpdateTemplateLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  signingOrder: TemplateUpdateTemplateSigningOrder$outboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateMeta$ {
  /** @deprecated use `TemplateUpdateTemplateMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateMeta$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateMeta$Outbound;
}

export function templateUpdateTemplateMetaToJSON(
  templateUpdateTemplateMeta: TemplateUpdateTemplateMeta,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateMeta$outboundSchema.parse(templateUpdateTemplateMeta),
  );
}

export function templateUpdateTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateRequest$inboundSchema: z.ZodType<
  TemplateUpdateTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  data: z.lazy(() => TemplateUpdateTemplateData$inboundSchema).optional(),
  meta: z.lazy(() => TemplateUpdateTemplateMeta$inboundSchema).optional(),
});

/** @internal */
export type TemplateUpdateTemplateRequest$Outbound = {
  templateId: number;
  data?: TemplateUpdateTemplateData$Outbound | undefined;
  meta?: TemplateUpdateTemplateMeta$Outbound | undefined;
};

/** @internal */
export const TemplateUpdateTemplateRequest$outboundSchema: z.ZodType<
  TemplateUpdateTemplateRequest$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateRequest
> = z.object({
  templateId: z.number(),
  data: z.lazy(() => TemplateUpdateTemplateData$outboundSchema).optional(),
  meta: z.lazy(() => TemplateUpdateTemplateMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateRequest$ {
  /** @deprecated use `TemplateUpdateTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateRequest$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateRequest$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateRequest$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateRequest$Outbound;
}

export function templateUpdateTemplateRequestToJSON(
  templateUpdateTemplateRequest: TemplateUpdateTemplateRequest,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateRequest$outboundSchema.parse(
      templateUpdateTemplateRequest,
    ),
  );
}

export function templateUpdateTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateRequest' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateTypeResponse
> = z.nativeEnum(TemplateUpdateTemplateTypeResponse);

/** @internal */
export const TemplateUpdateTemplateTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateTypeResponse
> = TemplateUpdateTemplateTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTypeResponse$ {
  /** @deprecated use `TemplateUpdateTemplateTypeResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateTypeResponse$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTypeResponse$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateVisibilityResponse$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateVisibilityResponse> = z
    .nativeEnum(TemplateUpdateTemplateVisibilityResponse);

/** @internal */
export const TemplateUpdateTemplateVisibilityResponse$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateVisibilityResponse> =
    TemplateUpdateTemplateVisibilityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateVisibilityResponse$ {
  /** @deprecated use `TemplateUpdateTemplateVisibilityResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateVisibilityResponse$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateVisibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateVisibilityResponse$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuthResponse> = z
    .nativeEnum(TemplateUpdateTemplateGlobalAccessAuthResponse);

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuthResponse> =
    TemplateUpdateTemplateGlobalAccessAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalAccessAuthResponse$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalAccessAuthResponse$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalAccessAuthResponse$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuthResponse> = z
    .nativeEnum(TemplateUpdateTemplateGlobalActionAuthResponse);

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuthResponse> =
    TemplateUpdateTemplateGlobalActionAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalActionAuthResponse$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalActionAuthResponse$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalActionAuthResponse$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateAuthOptions$inboundSchema: z.ZodType<
  TemplateUpdateTemplateAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    TemplateUpdateTemplateGlobalAccessAuthResponse$inboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateUpdateTemplateGlobalActionAuthResponse$inboundSchema,
  ),
});

/** @internal */
export type TemplateUpdateTemplateAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateUpdateTemplateAuthOptions$outboundSchema: z.ZodType<
  TemplateUpdateTemplateAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    TemplateUpdateTemplateGlobalAccessAuthResponse$outboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateUpdateTemplateGlobalActionAuthResponse$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateAuthOptions$ {
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateAuthOptions$Outbound;
}

export function templateUpdateTemplateAuthOptionsToJSON(
  templateUpdateTemplateAuthOptions: TemplateUpdateTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateAuthOptions$outboundSchema.parse(
      templateUpdateTemplateAuthOptions,
    ),
  );
}

export function templateUpdateTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateResponse$inboundSchema: z.ZodType<
  TemplateUpdateTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateUpdateTemplateTypeResponse$inboundSchema,
  visibility: TemplateUpdateTemplateVisibilityResponse$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.nullable(z.number()),
  authOptions: z.nullable(
    z.lazy(() => TemplateUpdateTemplateAuthOptions$inboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/** @internal */
export type TemplateUpdateTemplateResponse$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateUpdateTemplateAuthOptions$Outbound | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const TemplateUpdateTemplateResponse$outboundSchema: z.ZodType<
  TemplateUpdateTemplateResponse$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateResponse
> = z.object({
  type: TemplateUpdateTemplateTypeResponse$outboundSchema,
  visibility: TemplateUpdateTemplateVisibilityResponse$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.nullable(z.number()),
  authOptions: z.nullable(
    z.lazy(() => TemplateUpdateTemplateAuthOptions$outboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateResponse$ {
  /** @deprecated use `TemplateUpdateTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateResponse$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateResponse$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponse$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateResponse$Outbound;
}

export function templateUpdateTemplateResponseToJSON(
  templateUpdateTemplateResponse: TemplateUpdateTemplateResponse,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateResponse$outboundSchema.parse(
      templateUpdateTemplateResponse,
    ),
  );
}

export function templateUpdateTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateResponse' from JSON`,
  );
}
