/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TemplateUpdateTemplateVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateUpdateTemplateVisibility = ClosedEnum<
  typeof TemplateUpdateTemplateVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateUpdateTemplateGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateUpdateTemplateGlobalAccessAuth = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateUpdateTemplateGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateUpdateTemplateGlobalActionAuth = ClosedEnum<
  typeof TemplateUpdateTemplateGlobalActionAuth
>;

export const TemplateUpdateTemplateType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateUpdateTemplateType = ClosedEnum<
  typeof TemplateUpdateTemplateType
>;

export type TemplateUpdateTemplateData = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: TemplateUpdateTemplateVisibility | undefined;
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth?: TemplateUpdateTemplateGlobalAccessAuth | null | undefined;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth?: TemplateUpdateTemplateGlobalActionAuth | null | undefined;
  /**
   * The title of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicTitle?: string | undefined;
  /**
   * The description of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicDescription?: string | undefined;
  type?: TemplateUpdateTemplateType | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const TemplateUpdateTemplateDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type TemplateUpdateTemplateDateFormat = ClosedEnum<
  typeof TemplateUpdateTemplateDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const TemplateUpdateTemplateDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type TemplateUpdateTemplateDistributionMethod = ClosedEnum<
  typeof TemplateUpdateTemplateDistributionMethod
>;

export type TemplateUpdateTemplateEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

/**
 * The language to use for email communications with recipients.
 */
export const TemplateUpdateTemplateLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type TemplateUpdateTemplateLanguage = ClosedEnum<
  typeof TemplateUpdateTemplateLanguage
>;

export const TemplateUpdateTemplateSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateUpdateTemplateSigningOrder = ClosedEnum<
  typeof TemplateUpdateTemplateSigningOrder
>;

export type TemplateUpdateTemplateMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: TemplateUpdateTemplateDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: TemplateUpdateTemplateDistributionMethod | undefined;
  emailSettings?: TemplateUpdateTemplateEmailSettings | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: TemplateUpdateTemplateLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  signingOrder?: TemplateUpdateTemplateSigningOrder | undefined;
};

export type TemplateUpdateTemplateRequestBody = {
  templateId: number;
  data?: TemplateUpdateTemplateData | undefined;
  meta?: TemplateUpdateTemplateMeta | undefined;
};

export const TemplateUpdateTemplateTemplatesType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateUpdateTemplateTemplatesType = ClosedEnum<
  typeof TemplateUpdateTemplateTemplatesType
>;

export const TemplateUpdateTemplateTemplatesVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateUpdateTemplateTemplatesVisibility = ClosedEnum<
  typeof TemplateUpdateTemplateTemplatesVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateUpdateTemplateTemplatesGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateUpdateTemplateTemplatesGlobalAccessAuth = ClosedEnum<
  typeof TemplateUpdateTemplateTemplatesGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateUpdateTemplateTemplatesGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateUpdateTemplateTemplatesGlobalActionAuth = ClosedEnum<
  typeof TemplateUpdateTemplateTemplatesGlobalActionAuth
>;

export type TemplateUpdateTemplateAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: TemplateUpdateTemplateTemplatesGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: TemplateUpdateTemplateTemplatesGlobalActionAuth | null;
};

/**
 * Successful response
 */
export type TemplateUpdateTemplateResponseBody = {
  type: TemplateUpdateTemplateTemplatesType;
  visibility: TemplateUpdateTemplateTemplatesVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateUpdateTemplateAuthOptions | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
};

/** @internal */
export const TemplateUpdateTemplateVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateVisibility
> = z.nativeEnum(TemplateUpdateTemplateVisibility);

/** @internal */
export const TemplateUpdateTemplateVisibility$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateVisibility
> = TemplateUpdateTemplateVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateVisibility$ {
  /** @deprecated use `TemplateUpdateTemplateVisibility$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateVisibility$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateVisibility$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateVisibility$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuth> = z.nativeEnum(
    TemplateUpdateTemplateGlobalAccessAuth,
  );

/** @internal */
export const TemplateUpdateTemplateGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalAccessAuth> =
    TemplateUpdateTemplateGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalAccessAuth$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuth> = z.nativeEnum(
    TemplateUpdateTemplateGlobalActionAuth,
  );

/** @internal */
export const TemplateUpdateTemplateGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateGlobalActionAuth> =
    TemplateUpdateTemplateGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateGlobalActionAuth$ {
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateType
> = z.nativeEnum(TemplateUpdateTemplateType);

/** @internal */
export const TemplateUpdateTemplateType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateType
> = TemplateUpdateTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateType$ {
  /** @deprecated use `TemplateUpdateTemplateType$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateType$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateType$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateType$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateData$inboundSchema: z.ZodType<
  TemplateUpdateTemplateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateUpdateTemplateVisibility$inboundSchema.optional(),
  globalAccessAuth: z.nullable(
    TemplateUpdateTemplateGlobalAccessAuth$inboundSchema,
  ).optional(),
  globalActionAuth: z.nullable(
    TemplateUpdateTemplateGlobalActionAuth$inboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateUpdateTemplateType$inboundSchema.optional(),
});

/** @internal */
export type TemplateUpdateTemplateData$Outbound = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: string | null | undefined;
  globalActionAuth?: string | null | undefined;
  publicTitle?: string | undefined;
  publicDescription?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const TemplateUpdateTemplateData$outboundSchema: z.ZodType<
  TemplateUpdateTemplateData$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateData
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateUpdateTemplateVisibility$outboundSchema.optional(),
  globalAccessAuth: z.nullable(
    TemplateUpdateTemplateGlobalAccessAuth$outboundSchema,
  ).optional(),
  globalActionAuth: z.nullable(
    TemplateUpdateTemplateGlobalActionAuth$outboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateUpdateTemplateType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateData$ {
  /** @deprecated use `TemplateUpdateTemplateData$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateData$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateData$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateData$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateData$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateData$Outbound;
}

export function templateUpdateTemplateDataToJSON(
  templateUpdateTemplateData: TemplateUpdateTemplateData,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateData$outboundSchema.parse(templateUpdateTemplateData),
  );
}

export function templateUpdateTemplateDataFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateData' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDateFormat
> = z.nativeEnum(TemplateUpdateTemplateDateFormat);

/** @internal */
export const TemplateUpdateTemplateDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateDateFormat
> = TemplateUpdateTemplateDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateDateFormat$ {
  /** @deprecated use `TemplateUpdateTemplateDateFormat$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateDateFormat$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateDateFormat$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateDateFormat$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateDistributionMethod> = z
    .nativeEnum(TemplateUpdateTemplateDistributionMethod);

/** @internal */
export const TemplateUpdateTemplateDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateDistributionMethod> =
    TemplateUpdateTemplateDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateDistributionMethod$ {
  /** @deprecated use `TemplateUpdateTemplateDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateEmailSettings$inboundSchema: z.ZodType<
  TemplateUpdateTemplateEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type TemplateUpdateTemplateEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateUpdateTemplateEmailSettings$outboundSchema: z.ZodType<
  TemplateUpdateTemplateEmailSettings$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateEmailSettings$ {
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateEmailSettings$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateEmailSettings$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateEmailSettings$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateEmailSettings$Outbound;
}

export function templateUpdateTemplateEmailSettingsToJSON(
  templateUpdateTemplateEmailSettings: TemplateUpdateTemplateEmailSettings,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateEmailSettings$outboundSchema.parse(
      templateUpdateTemplateEmailSettings,
    ),
  );
}

export function templateUpdateTemplateEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateLanguage$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateLanguage
> = z.nativeEnum(TemplateUpdateTemplateLanguage);

/** @internal */
export const TemplateUpdateTemplateLanguage$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateLanguage
> = TemplateUpdateTemplateLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateLanguage$ {
  /** @deprecated use `TemplateUpdateTemplateLanguage$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateLanguage$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateLanguage$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateLanguage$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateSigningOrder
> = z.nativeEnum(TemplateUpdateTemplateSigningOrder);

/** @internal */
export const TemplateUpdateTemplateSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateSigningOrder
> = TemplateUpdateTemplateSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateSigningOrder$ {
  /** @deprecated use `TemplateUpdateTemplateSigningOrder$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateSigningOrder$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateMeta$inboundSchema: z.ZodType<
  TemplateUpdateTemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateUpdateTemplateDateFormat$inboundSchema.optional(),
  distributionMethod: TemplateUpdateTemplateDistributionMethod$inboundSchema
    .optional(),
  emailSettings: z.lazy(() => TemplateUpdateTemplateEmailSettings$inboundSchema)
    .optional(),
  redirectUrl: z.string().optional(),
  language: TemplateUpdateTemplateLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  signingOrder: TemplateUpdateTemplateSigningOrder$inboundSchema.optional(),
});

/** @internal */
export type TemplateUpdateTemplateMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  emailSettings?: TemplateUpdateTemplateEmailSettings$Outbound | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  signingOrder?: string | undefined;
};

/** @internal */
export const TemplateUpdateTemplateMeta$outboundSchema: z.ZodType<
  TemplateUpdateTemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateUpdateTemplateDateFormat$outboundSchema.optional(),
  distributionMethod: TemplateUpdateTemplateDistributionMethod$outboundSchema
    .optional(),
  emailSettings: z.lazy(() =>
    TemplateUpdateTemplateEmailSettings$outboundSchema
  ).optional(),
  redirectUrl: z.string().optional(),
  language: TemplateUpdateTemplateLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  signingOrder: TemplateUpdateTemplateSigningOrder$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateMeta$ {
  /** @deprecated use `TemplateUpdateTemplateMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateMeta$outboundSchema` instead. */
  export const outboundSchema = TemplateUpdateTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateMeta$Outbound;
}

export function templateUpdateTemplateMetaToJSON(
  templateUpdateTemplateMeta: TemplateUpdateTemplateMeta,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateMeta$outboundSchema.parse(templateUpdateTemplateMeta),
  );
}

export function templateUpdateTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateRequestBody$inboundSchema: z.ZodType<
  TemplateUpdateTemplateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  data: z.lazy(() => TemplateUpdateTemplateData$inboundSchema).optional(),
  meta: z.lazy(() => TemplateUpdateTemplateMeta$inboundSchema).optional(),
});

/** @internal */
export type TemplateUpdateTemplateRequestBody$Outbound = {
  templateId: number;
  data?: TemplateUpdateTemplateData$Outbound | undefined;
  meta?: TemplateUpdateTemplateMeta$Outbound | undefined;
};

/** @internal */
export const TemplateUpdateTemplateRequestBody$outboundSchema: z.ZodType<
  TemplateUpdateTemplateRequestBody$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateRequestBody
> = z.object({
  templateId: z.number(),
  data: z.lazy(() => TemplateUpdateTemplateData$outboundSchema).optional(),
  meta: z.lazy(() => TemplateUpdateTemplateMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateRequestBody$ {
  /** @deprecated use `TemplateUpdateTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateRequestBody$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateRequestBody$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateRequestBody$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateRequestBody$Outbound;
}

export function templateUpdateTemplateRequestBodyToJSON(
  templateUpdateTemplateRequestBody: TemplateUpdateTemplateRequestBody,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateRequestBody$outboundSchema.parse(
      templateUpdateTemplateRequestBody,
    ),
  );
}

export function templateUpdateTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateRequestBody' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateTemplatesType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateUpdateTemplateTemplatesType
> = z.nativeEnum(TemplateUpdateTemplateTemplatesType);

/** @internal */
export const TemplateUpdateTemplateTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesType> =
    TemplateUpdateTemplateTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesType$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesType$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateTemplatesVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesVisibility> = z
    .nativeEnum(TemplateUpdateTemplateTemplatesVisibility);

/** @internal */
export const TemplateUpdateTemplateTemplatesVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesVisibility> =
    TemplateUpdateTemplateTemplatesVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesVisibility$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesVisibility$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesVisibility$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateTemplatesGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesGlobalAccessAuth> = z
    .nativeEnum(TemplateUpdateTemplateTemplatesGlobalAccessAuth);

/** @internal */
export const TemplateUpdateTemplateTemplatesGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesGlobalAccessAuth> =
    TemplateUpdateTemplateTemplatesGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesGlobalAccessAuth$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateTemplatesGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesGlobalActionAuth> = z
    .nativeEnum(TemplateUpdateTemplateTemplatesGlobalActionAuth);

/** @internal */
export const TemplateUpdateTemplateTemplatesGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateUpdateTemplateTemplatesGlobalActionAuth> =
    TemplateUpdateTemplateTemplatesGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateTemplatesGlobalActionAuth$ {
  /** @deprecated use `TemplateUpdateTemplateTemplatesGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateUpdateTemplateTemplatesGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateTemplatesGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateTemplatesGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateUpdateTemplateAuthOptions$inboundSchema: z.ZodType<
  TemplateUpdateTemplateAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateUpdateTemplateTemplatesGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateUpdateTemplateTemplatesGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateUpdateTemplateAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const TemplateUpdateTemplateAuthOptions$outboundSchema: z.ZodType<
  TemplateUpdateTemplateAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateUpdateTemplateTemplatesGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateUpdateTemplateTemplatesGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateAuthOptions$ {
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateAuthOptions$Outbound;
}

export function templateUpdateTemplateAuthOptionsToJSON(
  templateUpdateTemplateAuthOptions: TemplateUpdateTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateAuthOptions$outboundSchema.parse(
      templateUpdateTemplateAuthOptions,
    ),
  );
}

export function templateUpdateTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateUpdateTemplateAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateUpdateTemplateResponseBody$inboundSchema: z.ZodType<
  TemplateUpdateTemplateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateUpdateTemplateTemplatesType$inboundSchema,
  visibility: TemplateUpdateTemplateTemplatesVisibility$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateUpdateTemplateAuthOptions$inboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
});

/** @internal */
export type TemplateUpdateTemplateResponseBody$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateUpdateTemplateAuthOptions$Outbound | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
};

/** @internal */
export const TemplateUpdateTemplateResponseBody$outboundSchema: z.ZodType<
  TemplateUpdateTemplateResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateUpdateTemplateResponseBody
> = z.object({
  type: TemplateUpdateTemplateTemplatesType$outboundSchema,
  visibility: TemplateUpdateTemplateTemplatesVisibility$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateUpdateTemplateAuthOptions$outboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateUpdateTemplateResponseBody$ {
  /** @deprecated use `TemplateUpdateTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplateUpdateTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateUpdateTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateUpdateTemplateResponseBody$Outbound` instead. */
  export type Outbound = TemplateUpdateTemplateResponseBody$Outbound;
}

export function templateUpdateTemplateResponseBodyToJSON(
  templateUpdateTemplateResponseBody: TemplateUpdateTemplateResponseBody,
): string {
  return JSON.stringify(
    TemplateUpdateTemplateResponseBody$outboundSchema.parse(
      templateUpdateTemplateResponseBody,
    ),
  );
}

export function templateUpdateTemplateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateUpdateTemplateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateUpdateTemplateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateUpdateTemplateResponseBody' from JSON`,
  );
}
