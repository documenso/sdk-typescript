/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentDistributeDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  DdMMYyyyHHMM: "dd.MM.yyyy HH:mm",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentDistributeDateFormat = ClosedEnum<
  typeof DocumentDistributeDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentDistributeDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentDistributeDistributionMethod = ClosedEnum<
  typeof DocumentDistributeDistributionMethod
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentDistributeLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentDistributeLanguage = ClosedEnum<
  typeof DocumentDistributeLanguage
>;

export type DocumentDistributeEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentDistributeMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentDistributeDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: DocumentDistributeDistributionMethod | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentDistributeLanguage | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?: DocumentDistributeEmailSettings | undefined;
};

export type DocumentDistributeRequest = {
  /**
   * The ID of the document to send.
   */
  documentId: number;
  meta?: DocumentDistributeMeta | undefined;
};

export const DocumentDistributeVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentDistributeVisibility = ClosedEnum<
  typeof DocumentDistributeVisibility
>;

export const DocumentDistributeStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentDistributeStatus = ClosedEnum<
  typeof DocumentDistributeStatus
>;

export const DocumentDistributeSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentDistributeSource = ClosedEnum<
  typeof DocumentDistributeSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentDistributeGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentDistributeGlobalAccessAuth = ClosedEnum<
  typeof DocumentDistributeGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentDistributeGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentDistributeGlobalActionAuth = ClosedEnum<
  typeof DocumentDistributeGlobalActionAuth
>;

export type DocumentDistributeAuthOptions = {
  globalAccessAuth: Array<DocumentDistributeGlobalAccessAuth>;
  globalActionAuth: Array<DocumentDistributeGlobalActionAuth>;
};

export type DocumentDistributeFormValues = string | boolean | number;

/**
 * Successful response
 */
export type DocumentDistributeResponse = {
  visibility: DocumentDistributeVisibility;
  status: DocumentDistributeStatus;
  source: DocumentDistributeSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentDistributeAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentDistributeDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeDateFormat
> = z.nativeEnum(DocumentDistributeDateFormat);

/** @internal */
export const DocumentDistributeDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeDateFormat
> = DocumentDistributeDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeDateFormat$ {
  /** @deprecated use `DocumentDistributeDateFormat$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeDateFormat$inboundSchema;
  /** @deprecated use `DocumentDistributeDateFormat$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeDateFormat$outboundSchema;
}

/** @internal */
export const DocumentDistributeDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof DocumentDistributeDistributionMethod> = z.nativeEnum(
    DocumentDistributeDistributionMethod,
  );

/** @internal */
export const DocumentDistributeDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof DocumentDistributeDistributionMethod> =
    DocumentDistributeDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeDistributionMethod$ {
  /** @deprecated use `DocumentDistributeDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    DocumentDistributeDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentDistributeDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentDistributeLanguage$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeLanguage
> = z.nativeEnum(DocumentDistributeLanguage);

/** @internal */
export const DocumentDistributeLanguage$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeLanguage
> = DocumentDistributeLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeLanguage$ {
  /** @deprecated use `DocumentDistributeLanguage$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeLanguage$inboundSchema;
  /** @deprecated use `DocumentDistributeLanguage$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeLanguage$outboundSchema;
}

/** @internal */
export const DocumentDistributeEmailSettings$inboundSchema: z.ZodType<
  DocumentDistributeEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentDistributeEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentDistributeEmailSettings$outboundSchema: z.ZodType<
  DocumentDistributeEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentDistributeEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeEmailSettings$ {
  /** @deprecated use `DocumentDistributeEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeEmailSettings$inboundSchema;
  /** @deprecated use `DocumentDistributeEmailSettings$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeEmailSettings$outboundSchema;
  /** @deprecated use `DocumentDistributeEmailSettings$Outbound` instead. */
  export type Outbound = DocumentDistributeEmailSettings$Outbound;
}

export function documentDistributeEmailSettingsToJSON(
  documentDistributeEmailSettings: DocumentDistributeEmailSettings,
): string {
  return JSON.stringify(
    DocumentDistributeEmailSettings$outboundSchema.parse(
      documentDistributeEmailSettings,
    ),
  );
}

export function documentDistributeEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeMeta$inboundSchema: z.ZodType<
  DocumentDistributeMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentDistributeDateFormat$inboundSchema.optional(),
  distributionMethod: DocumentDistributeDistributionMethod$inboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentDistributeLanguage$inboundSchema.optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() => DocumentDistributeEmailSettings$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentDistributeMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?: DocumentDistributeEmailSettings$Outbound | undefined;
};

/** @internal */
export const DocumentDistributeMeta$outboundSchema: z.ZodType<
  DocumentDistributeMeta$Outbound,
  z.ZodTypeDef,
  DocumentDistributeMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentDistributeDateFormat$outboundSchema.optional(),
  distributionMethod: DocumentDistributeDistributionMethod$outboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentDistributeLanguage$outboundSchema.optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() => DocumentDistributeEmailSettings$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeMeta$ {
  /** @deprecated use `DocumentDistributeMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeMeta$inboundSchema;
  /** @deprecated use `DocumentDistributeMeta$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeMeta$outboundSchema;
  /** @deprecated use `DocumentDistributeMeta$Outbound` instead. */
  export type Outbound = DocumentDistributeMeta$Outbound;
}

export function documentDistributeMetaToJSON(
  documentDistributeMeta: DocumentDistributeMeta,
): string {
  return JSON.stringify(
    DocumentDistributeMeta$outboundSchema.parse(documentDistributeMeta),
  );
}

export function documentDistributeMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeMeta' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeRequest$inboundSchema: z.ZodType<
  DocumentDistributeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  meta: z.lazy(() => DocumentDistributeMeta$inboundSchema).optional(),
});

/** @internal */
export type DocumentDistributeRequest$Outbound = {
  documentId: number;
  meta?: DocumentDistributeMeta$Outbound | undefined;
};

/** @internal */
export const DocumentDistributeRequest$outboundSchema: z.ZodType<
  DocumentDistributeRequest$Outbound,
  z.ZodTypeDef,
  DocumentDistributeRequest
> = z.object({
  documentId: z.number(),
  meta: z.lazy(() => DocumentDistributeMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeRequest$ {
  /** @deprecated use `DocumentDistributeRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeRequest$inboundSchema;
  /** @deprecated use `DocumentDistributeRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeRequest$outboundSchema;
  /** @deprecated use `DocumentDistributeRequest$Outbound` instead. */
  export type Outbound = DocumentDistributeRequest$Outbound;
}

export function documentDistributeRequestToJSON(
  documentDistributeRequest: DocumentDistributeRequest,
): string {
  return JSON.stringify(
    DocumentDistributeRequest$outboundSchema.parse(documentDistributeRequest),
  );
}

export function documentDistributeRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeRequest' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeVisibility
> = z.nativeEnum(DocumentDistributeVisibility);

/** @internal */
export const DocumentDistributeVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeVisibility
> = DocumentDistributeVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeVisibility$ {
  /** @deprecated use `DocumentDistributeVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeVisibility$inboundSchema;
  /** @deprecated use `DocumentDistributeVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeVisibility$outboundSchema;
}

/** @internal */
export const DocumentDistributeStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeStatus
> = z.nativeEnum(DocumentDistributeStatus);

/** @internal */
export const DocumentDistributeStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeStatus
> = DocumentDistributeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeStatus$ {
  /** @deprecated use `DocumentDistributeStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeStatus$inboundSchema;
  /** @deprecated use `DocumentDistributeStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeStatus$outboundSchema;
}

/** @internal */
export const DocumentDistributeSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeSource
> = z.nativeEnum(DocumentDistributeSource);

/** @internal */
export const DocumentDistributeSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeSource
> = DocumentDistributeSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeSource$ {
  /** @deprecated use `DocumentDistributeSource$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeSource$inboundSchema;
  /** @deprecated use `DocumentDistributeSource$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeSource$outboundSchema;
}

/** @internal */
export const DocumentDistributeGlobalAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeGlobalAccessAuth
> = z.nativeEnum(DocumentDistributeGlobalAccessAuth);

/** @internal */
export const DocumentDistributeGlobalAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeGlobalAccessAuth
> = DocumentDistributeGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeGlobalAccessAuth$ {
  /** @deprecated use `DocumentDistributeGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentDistributeGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentDistributeGlobalActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeGlobalActionAuth
> = z.nativeEnum(DocumentDistributeGlobalActionAuth);

/** @internal */
export const DocumentDistributeGlobalActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributeGlobalActionAuth
> = DocumentDistributeGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeGlobalActionAuth$ {
  /** @deprecated use `DocumentDistributeGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentDistributeGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    DocumentDistributeGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentDistributeAuthOptions$inboundSchema: z.ZodType<
  DocumentDistributeAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(DocumentDistributeGlobalAccessAuth$inboundSchema),
  globalActionAuth: z.array(DocumentDistributeGlobalActionAuth$inboundSchema),
});

/** @internal */
export type DocumentDistributeAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentDistributeAuthOptions$outboundSchema: z.ZodType<
  DocumentDistributeAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentDistributeAuthOptions
> = z.object({
  globalAccessAuth: z.array(DocumentDistributeGlobalAccessAuth$outboundSchema),
  globalActionAuth: z.array(DocumentDistributeGlobalActionAuth$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeAuthOptions$ {
  /** @deprecated use `DocumentDistributeAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeAuthOptions$inboundSchema;
  /** @deprecated use `DocumentDistributeAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeAuthOptions$outboundSchema;
  /** @deprecated use `DocumentDistributeAuthOptions$Outbound` instead. */
  export type Outbound = DocumentDistributeAuthOptions$Outbound;
}

export function documentDistributeAuthOptionsToJSON(
  documentDistributeAuthOptions: DocumentDistributeAuthOptions,
): string {
  return JSON.stringify(
    DocumentDistributeAuthOptions$outboundSchema.parse(
      documentDistributeAuthOptions,
    ),
  );
}

export function documentDistributeAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeFormValues$inboundSchema: z.ZodType<
  DocumentDistributeFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentDistributeFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentDistributeFormValues$outboundSchema: z.ZodType<
  DocumentDistributeFormValues$Outbound,
  z.ZodTypeDef,
  DocumentDistributeFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeFormValues$ {
  /** @deprecated use `DocumentDistributeFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeFormValues$inboundSchema;
  /** @deprecated use `DocumentDistributeFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeFormValues$outboundSchema;
  /** @deprecated use `DocumentDistributeFormValues$Outbound` instead. */
  export type Outbound = DocumentDistributeFormValues$Outbound;
}

export function documentDistributeFormValuesToJSON(
  documentDistributeFormValues: DocumentDistributeFormValues,
): string {
  return JSON.stringify(
    DocumentDistributeFormValues$outboundSchema.parse(
      documentDistributeFormValues,
    ),
  );
}

export function documentDistributeFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentDistributeResponse$inboundSchema: z.ZodType<
  DocumentDistributeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentDistributeVisibility$inboundSchema,
  status: DocumentDistributeStatus$inboundSchema,
  source: DocumentDistributeSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentDistributeAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/** @internal */
export type DocumentDistributeResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentDistributeAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentDistributeResponse$outboundSchema: z.ZodType<
  DocumentDistributeResponse$Outbound,
  z.ZodTypeDef,
  DocumentDistributeResponse
> = z.object({
  visibility: DocumentDistributeVisibility$outboundSchema,
  status: DocumentDistributeStatus$outboundSchema,
  source: DocumentDistributeSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentDistributeAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributeResponse$ {
  /** @deprecated use `DocumentDistributeResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributeResponse$inboundSchema;
  /** @deprecated use `DocumentDistributeResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributeResponse$outboundSchema;
  /** @deprecated use `DocumentDistributeResponse$Outbound` instead. */
  export type Outbound = DocumentDistributeResponse$Outbound;
}

export function documentDistributeResponseToJSON(
  documentDistributeResponse: DocumentDistributeResponse,
): string {
  return JSON.stringify(
    DocumentDistributeResponse$outboundSchema.parse(documentDistributeResponse),
  );
}

export function documentDistributeResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentDistributeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentDistributeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentDistributeResponse' from JSON`,
  );
}
