/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the folder
 */
export const FolderUpdateFolderVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the folder
 */
export type FolderUpdateFolderVisibilityRequest = ClosedEnum<
  typeof FolderUpdateFolderVisibilityRequest
>;

export type FolderUpdateFolderData = {
  /**
   * The name of the folder
   */
  name?: string | undefined;
  /**
   * The folder ID to place this folder within. Leave empty to place folder at the root level.
   */
  parentId?: string | null | undefined;
  /**
   * The visibility of the folder
   */
  visibility?: FolderUpdateFolderVisibilityRequest | undefined;
  /**
   * Whether the folder should be pinned
   */
  pinned?: boolean | undefined;
};

export type FolderUpdateFolderRequest = {
  /**
   * The ID of the folder to update
   */
  folderId: string;
  data: FolderUpdateFolderData;
};

export const FolderUpdateFolderVisibilityResponse = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type FolderUpdateFolderVisibilityResponse = ClosedEnum<
  typeof FolderUpdateFolderVisibilityResponse
>;

export const FolderUpdateFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type FolderUpdateFolderType = ClosedEnum<typeof FolderUpdateFolderType>;

/**
 * Successful response
 */
export type FolderUpdateFolderResponse = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: FolderUpdateFolderVisibilityResponse;
  type: FolderUpdateFolderType;
};

/** @internal */
export const FolderUpdateFolderVisibilityRequest$inboundSchema: z.ZodNativeEnum<
  typeof FolderUpdateFolderVisibilityRequest
> = z.nativeEnum(FolderUpdateFolderVisibilityRequest);

/** @internal */
export const FolderUpdateFolderVisibilityRequest$outboundSchema:
  z.ZodNativeEnum<typeof FolderUpdateFolderVisibilityRequest> =
    FolderUpdateFolderVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderVisibilityRequest$ {
  /** @deprecated use `FolderUpdateFolderVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    FolderUpdateFolderVisibilityRequest$inboundSchema;
  /** @deprecated use `FolderUpdateFolderVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderVisibilityRequest$outboundSchema;
}

/** @internal */
export const FolderUpdateFolderData$inboundSchema: z.ZodType<
  FolderUpdateFolderData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  visibility: FolderUpdateFolderVisibilityRequest$inboundSchema.optional(),
  pinned: z.boolean().optional(),
});

/** @internal */
export type FolderUpdateFolderData$Outbound = {
  name?: string | undefined;
  parentId?: string | null | undefined;
  visibility?: string | undefined;
  pinned?: boolean | undefined;
};

/** @internal */
export const FolderUpdateFolderData$outboundSchema: z.ZodType<
  FolderUpdateFolderData$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderData
> = z.object({
  name: z.string().optional(),
  parentId: z.nullable(z.string()).optional(),
  visibility: FolderUpdateFolderVisibilityRequest$outboundSchema.optional(),
  pinned: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderData$ {
  /** @deprecated use `FolderUpdateFolderData$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderData$inboundSchema;
  /** @deprecated use `FolderUpdateFolderData$outboundSchema` instead. */
  export const outboundSchema = FolderUpdateFolderData$outboundSchema;
  /** @deprecated use `FolderUpdateFolderData$Outbound` instead. */
  export type Outbound = FolderUpdateFolderData$Outbound;
}

export function folderUpdateFolderDataToJSON(
  folderUpdateFolderData: FolderUpdateFolderData,
): string {
  return JSON.stringify(
    FolderUpdateFolderData$outboundSchema.parse(folderUpdateFolderData),
  );
}

export function folderUpdateFolderDataFromJSON(
  jsonString: string,
): SafeParseResult<FolderUpdateFolderData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderUpdateFolderData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderUpdateFolderData' from JSON`,
  );
}

/** @internal */
export const FolderUpdateFolderRequest$inboundSchema: z.ZodType<
  FolderUpdateFolderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  folderId: z.string(),
  data: z.lazy(() => FolderUpdateFolderData$inboundSchema),
});

/** @internal */
export type FolderUpdateFolderRequest$Outbound = {
  folderId: string;
  data: FolderUpdateFolderData$Outbound;
};

/** @internal */
export const FolderUpdateFolderRequest$outboundSchema: z.ZodType<
  FolderUpdateFolderRequest$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderRequest
> = z.object({
  folderId: z.string(),
  data: z.lazy(() => FolderUpdateFolderData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderRequest$ {
  /** @deprecated use `FolderUpdateFolderRequest$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderRequest$inboundSchema;
  /** @deprecated use `FolderUpdateFolderRequest$outboundSchema` instead. */
  export const outboundSchema = FolderUpdateFolderRequest$outboundSchema;
  /** @deprecated use `FolderUpdateFolderRequest$Outbound` instead. */
  export type Outbound = FolderUpdateFolderRequest$Outbound;
}

export function folderUpdateFolderRequestToJSON(
  folderUpdateFolderRequest: FolderUpdateFolderRequest,
): string {
  return JSON.stringify(
    FolderUpdateFolderRequest$outboundSchema.parse(folderUpdateFolderRequest),
  );
}

export function folderUpdateFolderRequestFromJSON(
  jsonString: string,
): SafeParseResult<FolderUpdateFolderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderUpdateFolderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderUpdateFolderRequest' from JSON`,
  );
}

/** @internal */
export const FolderUpdateFolderVisibilityResponse$inboundSchema:
  z.ZodNativeEnum<typeof FolderUpdateFolderVisibilityResponse> = z.nativeEnum(
    FolderUpdateFolderVisibilityResponse,
  );

/** @internal */
export const FolderUpdateFolderVisibilityResponse$outboundSchema:
  z.ZodNativeEnum<typeof FolderUpdateFolderVisibilityResponse> =
    FolderUpdateFolderVisibilityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderVisibilityResponse$ {
  /** @deprecated use `FolderUpdateFolderVisibilityResponse$inboundSchema` instead. */
  export const inboundSchema =
    FolderUpdateFolderVisibilityResponse$inboundSchema;
  /** @deprecated use `FolderUpdateFolderVisibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    FolderUpdateFolderVisibilityResponse$outboundSchema;
}

/** @internal */
export const FolderUpdateFolderType$inboundSchema: z.ZodNativeEnum<
  typeof FolderUpdateFolderType
> = z.nativeEnum(FolderUpdateFolderType);

/** @internal */
export const FolderUpdateFolderType$outboundSchema: z.ZodNativeEnum<
  typeof FolderUpdateFolderType
> = FolderUpdateFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderType$ {
  /** @deprecated use `FolderUpdateFolderType$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderType$inboundSchema;
  /** @deprecated use `FolderUpdateFolderType$outboundSchema` instead. */
  export const outboundSchema = FolderUpdateFolderType$outboundSchema;
}

/** @internal */
export const FolderUpdateFolderResponse$inboundSchema: z.ZodType<
  FolderUpdateFolderResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderUpdateFolderVisibilityResponse$inboundSchema,
  type: FolderUpdateFolderType$inboundSchema,
});

/** @internal */
export type FolderUpdateFolderResponse$Outbound = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: string;
  type: string;
};

/** @internal */
export const FolderUpdateFolderResponse$outboundSchema: z.ZodType<
  FolderUpdateFolderResponse$Outbound,
  z.ZodTypeDef,
  FolderUpdateFolderResponse
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderUpdateFolderVisibilityResponse$outboundSchema,
  type: FolderUpdateFolderType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderUpdateFolderResponse$ {
  /** @deprecated use `FolderUpdateFolderResponse$inboundSchema` instead. */
  export const inboundSchema = FolderUpdateFolderResponse$inboundSchema;
  /** @deprecated use `FolderUpdateFolderResponse$outboundSchema` instead. */
  export const outboundSchema = FolderUpdateFolderResponse$outboundSchema;
  /** @deprecated use `FolderUpdateFolderResponse$Outbound` instead. */
  export type Outbound = FolderUpdateFolderResponse$Outbound;
}

export function folderUpdateFolderResponseToJSON(
  folderUpdateFolderResponse: FolderUpdateFolderResponse,
): string {
  return JSON.stringify(
    FolderUpdateFolderResponse$outboundSchema.parse(folderUpdateFolderResponse),
  );
}

export function folderUpdateFolderResponseFromJSON(
  jsonString: string,
): SafeParseResult<FolderUpdateFolderResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderUpdateFolderResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderUpdateFolderResponse' from JSON`,
  );
}
