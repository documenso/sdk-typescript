/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter templates by type.
 */
export const QueryParamType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
/**
 * Filter templates by type.
 */
export type QueryParamType = ClosedEnum<typeof QueryParamType>;

export type TemplateFindTemplatesRequest = {
  /**
   * The search query.
   */
  query?: string | undefined;
  /**
   * The pagination page number, starts at 1.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  perPage?: number | undefined;
  /**
   * Filter templates by type.
   */
  type?: QueryParamType | undefined;
  /**
   * The ID of the folder to filter templates by.
   */
  folderId?: string | undefined;
};

export const TemplateFindTemplatesDataType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateFindTemplatesDataType = ClosedEnum<
  typeof TemplateFindTemplatesDataType
>;

export const TemplateFindTemplatesVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateFindTemplatesVisibility = ClosedEnum<
  typeof TemplateFindTemplatesVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateFindTemplatesGlobalAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateFindTemplatesGlobalAccessAuth = ClosedEnum<
  typeof TemplateFindTemplatesGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateFindTemplatesGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateFindTemplatesGlobalActionAuth = ClosedEnum<
  typeof TemplateFindTemplatesGlobalActionAuth
>;

export type TemplateFindTemplatesAuthOptions = {
  globalAccessAuth: Array<TemplateFindTemplatesGlobalAccessAuth>;
  globalActionAuth: Array<TemplateFindTemplatesGlobalActionAuth>;
};

export type TemplateFindTemplatesTeam = {
  id: number;
  url: string;
};

export const TemplateFindTemplatesFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateFindTemplatesFieldType = ClosedEnum<
  typeof TemplateFindTemplatesFieldType
>;

export const TemplateFindTemplatesTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type TemplateFindTemplatesTypeDropdown = ClosedEnum<
  typeof TemplateFindTemplatesTypeDropdown
>;

export type TemplateFindTemplatesValue3 = {
  value: string;
};

export type TemplateFindTemplatesFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeDropdown;
  values?: Array<TemplateFindTemplatesValue3> | undefined;
  defaultValue?: string | undefined;
};

export const TemplateFindTemplatesTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type TemplateFindTemplatesTypeCheckbox = ClosedEnum<
  typeof TemplateFindTemplatesTypeCheckbox
>;

export type TemplateFindTemplatesValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const TemplateFindTemplatesDirection = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type TemplateFindTemplatesDirection = ClosedEnum<
  typeof TemplateFindTemplatesDirection
>;

export type TemplateFindTemplatesFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeCheckbox;
  values?: Array<TemplateFindTemplatesValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: TemplateFindTemplatesDirection | undefined;
};

export const TemplateFindTemplatesTypeRadio = {
  Radio: "radio",
} as const;
export type TemplateFindTemplatesTypeRadio = ClosedEnum<
  typeof TemplateFindTemplatesTypeRadio
>;

export type TemplateFindTemplatesValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateFindTemplatesFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeRadio;
  values?: Array<TemplateFindTemplatesValue1> | undefined;
};

export const TemplateFindTemplatesTypeNumber = {
  Number: "number",
} as const;
export type TemplateFindTemplatesTypeNumber = ClosedEnum<
  typeof TemplateFindTemplatesTypeNumber
>;

export const TemplateFindTemplatesTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign6 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign6
>;

export type TemplateFindTemplatesFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeNumber;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign6 | undefined;
};

export const TemplateFindTemplatesTypeText = {
  Text: "text",
} as const;
export type TemplateFindTemplatesTypeText = ClosedEnum<
  typeof TemplateFindTemplatesTypeText
>;

export const TemplateFindTemplatesTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign5 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign5
>;

export type TemplateFindTemplatesFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign5 | undefined;
};

export const TemplateFindTemplatesTypeDate = {
  Date: "date",
} as const;
export type TemplateFindTemplatesTypeDate = ClosedEnum<
  typeof TemplateFindTemplatesTypeDate
>;

export const TemplateFindTemplatesTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign4 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign4
>;

export type TemplateFindTemplatesFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeDate;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign4 | undefined;
};

export const TemplateFindTemplatesTypeEmail = {
  Email: "email",
} as const;
export type TemplateFindTemplatesTypeEmail = ClosedEnum<
  typeof TemplateFindTemplatesTypeEmail
>;

export const TemplateFindTemplatesTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign3 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign3
>;

export type TemplateFindTemplatesFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeEmail;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign3 | undefined;
};

export const TemplateFindTemplatesTypeName = {
  Name: "name",
} as const;
export type TemplateFindTemplatesTypeName = ClosedEnum<
  typeof TemplateFindTemplatesTypeName
>;

export const TemplateFindTemplatesTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign2 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign2
>;

export type TemplateFindTemplatesFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeName;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign2 | undefined;
};

export const TemplateFindTemplatesTypeInitials = {
  Initials: "initials",
} as const;
export type TemplateFindTemplatesTypeInitials = ClosedEnum<
  typeof TemplateFindTemplatesTypeInitials
>;

export const TemplateFindTemplatesTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateFindTemplatesTextAlign1 = ClosedEnum<
  typeof TemplateFindTemplatesTextAlign1
>;

export type TemplateFindTemplatesFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesTypeInitials;
  fontSize?: number | undefined;
  textAlign?: TemplateFindTemplatesTextAlign1 | undefined;
};

export type TemplateFindTemplatesFieldMetaUnion =
  | TemplateFindTemplatesFieldMetaInitials
  | TemplateFindTemplatesFieldMetaName
  | TemplateFindTemplatesFieldMetaEmail
  | TemplateFindTemplatesFieldMetaDate
  | TemplateFindTemplatesFieldMetaText
  | TemplateFindTemplatesFieldMetaNumber
  | TemplateFindTemplatesFieldMetaRadio
  | TemplateFindTemplatesFieldMetaCheckbox
  | TemplateFindTemplatesFieldMetaDropdown;

export type TemplateFindTemplatesField = {
  envelopeId: string;
  envelopeItemId: string;
  type: TemplateFindTemplatesFieldType;
  id: number;
  secondaryId: string;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateFindTemplatesFieldMetaInitials
    | TemplateFindTemplatesFieldMetaName
    | TemplateFindTemplatesFieldMetaEmail
    | TemplateFindTemplatesFieldMetaDate
    | TemplateFindTemplatesFieldMetaText
    | TemplateFindTemplatesFieldMetaNumber
    | TemplateFindTemplatesFieldMetaRadio
    | TemplateFindTemplatesFieldMetaCheckbox
    | TemplateFindTemplatesFieldMetaDropdown
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateFindTemplatesRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type TemplateFindTemplatesRole = ClosedEnum<
  typeof TemplateFindTemplatesRole
>;

export const TemplateFindTemplatesReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateFindTemplatesReadStatus = ClosedEnum<
  typeof TemplateFindTemplatesReadStatus
>;

export const TemplateFindTemplatesSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateFindTemplatesSigningStatus = ClosedEnum<
  typeof TemplateFindTemplatesSigningStatus
>;

export const TemplateFindTemplatesSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateFindTemplatesSendStatus = ClosedEnum<
  typeof TemplateFindTemplatesSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateFindTemplatesAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateFindTemplatesAccessAuth = ClosedEnum<
  typeof TemplateFindTemplatesAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateFindTemplatesActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateFindTemplatesActionAuth = ClosedEnum<
  typeof TemplateFindTemplatesActionAuth
>;

export type TemplateFindTemplatesRecipientAuthOptions = {
  accessAuth: Array<TemplateFindTemplatesAccessAuth>;
  actionAuth: Array<TemplateFindTemplatesActionAuth>;
};

export type TemplateFindTemplatesRecipient = {
  envelopeId: string;
  role: TemplateFindTemplatesRole;
  readStatus: TemplateFindTemplatesReadStatus;
  signingStatus: TemplateFindTemplatesSigningStatus;
  sendStatus: TemplateFindTemplatesSendStatus;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateFindTemplatesRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateFindTemplatesSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateFindTemplatesSigningOrder = ClosedEnum<
  typeof TemplateFindTemplatesSigningOrder
>;

export const TemplateFindTemplatesDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateFindTemplatesDistributionMethod = ClosedEnum<
  typeof TemplateFindTemplatesDistributionMethod
>;

export type TemplateFindTemplatesTemplateMeta = {
  signingOrder: TemplateFindTemplatesSigningOrder;
  distributionMethod: TemplateFindTemplatesDistributionMethod;
};

export type TemplateFindTemplatesDirectLink = {
  token: string;
  enabled: boolean;
};

export type TemplateFindTemplatesData = {
  type: TemplateFindTemplatesDataType;
  visibility: TemplateFindTemplatesVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateFindTemplatesAuthOptions | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  envelopeId: string;
  team: TemplateFindTemplatesTeam | null;
  fields: Array<TemplateFindTemplatesField>;
  recipients: Array<TemplateFindTemplatesRecipient>;
  templateMeta: TemplateFindTemplatesTemplateMeta | null;
  directLink: TemplateFindTemplatesDirectLink | null;
  templateDocumentDataId?: string | undefined;
};

/**
 * Successful response
 */
export type TemplateFindTemplatesResponse = {
  data: Array<TemplateFindTemplatesData>;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The current page number, starts at 1.
   */
  currentPage: number;
  /**
   * The number of items per page.
   */
  perPage: number;
  /**
   * The total number of pages.
   */
  totalPages: number;
};

/** @internal */
export const QueryParamType$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = z.nativeEnum(QueryParamType);

/** @internal */
export const QueryParamType$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = QueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
  /** @deprecated use `QueryParamType$inboundSchema` instead. */
  export const inboundSchema = QueryParamType$inboundSchema;
  /** @deprecated use `QueryParamType$outboundSchema` instead. */
  export const outboundSchema = QueryParamType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesRequest$inboundSchema: z.ZodType<
  TemplateFindTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  type: QueryParamType$inboundSchema.optional(),
  folderId: z.string().optional(),
});

/** @internal */
export type TemplateFindTemplatesRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  type?: string | undefined;
  folderId?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesRequest$outboundSchema: z.ZodType<
  TemplateFindTemplatesRequest$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  type: QueryParamType$outboundSchema.optional(),
  folderId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRequest$ {
  /** @deprecated use `TemplateFindTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRequest$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRequest$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesRequest$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesRequest$Outbound;
}

export function templateFindTemplatesRequestToJSON(
  templateFindTemplatesRequest: TemplateFindTemplatesRequest,
): string {
  return JSON.stringify(
    TemplateFindTemplatesRequest$outboundSchema.parse(
      templateFindTemplatesRequest,
    ),
  );
}

export function templateFindTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesRequest' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesDataType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesDataType
> = z.nativeEnum(TemplateFindTemplatesDataType);

/** @internal */
export const TemplateFindTemplatesDataType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesDataType
> = TemplateFindTemplatesDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDataType$ {
  /** @deprecated use `TemplateFindTemplatesDataType$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesDataType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDataType$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesDataType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesVisibility
> = z.nativeEnum(TemplateFindTemplatesVisibility);

/** @internal */
export const TemplateFindTemplatesVisibility$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesVisibility
> = TemplateFindTemplatesVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesVisibility$ {
  /** @deprecated use `TemplateFindTemplatesVisibility$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesVisibility$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesVisibility$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesVisibility$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalAccessAuth> = z.nativeEnum(
    TemplateFindTemplatesGlobalAccessAuth,
  );

/** @internal */
export const TemplateFindTemplatesGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalAccessAuth> =
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesGlobalAccessAuth$ {
  /** @deprecated use `TemplateFindTemplatesGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalActionAuth> = z.nativeEnum(
    TemplateFindTemplatesGlobalActionAuth,
  );

/** @internal */
export const TemplateFindTemplatesGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalActionAuth> =
    TemplateFindTemplatesGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesGlobalActionAuth$ {
  /** @deprecated use `TemplateFindTemplatesGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesAuthOptions$inboundSchema: z.ZodType<
  TemplateFindTemplatesAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateFindTemplatesGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateFindTemplatesAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateFindTemplatesAuthOptions$outboundSchema: z.ZodType<
  TemplateFindTemplatesAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    TemplateFindTemplatesGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.array(
    TemplateFindTemplatesGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesAuthOptions$ {
  /** @deprecated use `TemplateFindTemplatesAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesAuthOptions$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesAuthOptions$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesAuthOptions$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesAuthOptions$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesAuthOptions$Outbound;
}

export function templateFindTemplatesAuthOptionsToJSON(
  templateFindTemplatesAuthOptions: TemplateFindTemplatesAuthOptions,
): string {
  return JSON.stringify(
    TemplateFindTemplatesAuthOptions$outboundSchema.parse(
      templateFindTemplatesAuthOptions,
    ),
  );
}

export function templateFindTemplatesAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTeam$inboundSchema: z.ZodType<
  TemplateFindTemplatesTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  url: z.string(),
});

/** @internal */
export type TemplateFindTemplatesTeam$Outbound = {
  id: number;
  url: string;
};

/** @internal */
export const TemplateFindTemplatesTeam$outboundSchema: z.ZodType<
  TemplateFindTemplatesTeam$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesTeam
> = z.object({
  id: z.number(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTeam$ {
  /** @deprecated use `TemplateFindTemplatesTeam$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTeam$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTeam$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTeam$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTeam$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTeam$Outbound;
}

export function templateFindTemplatesTeamToJSON(
  templateFindTemplatesTeam: TemplateFindTemplatesTeam,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTeam$outboundSchema.parse(templateFindTemplatesTeam),
  );
}

export function templateFindTemplatesTeamFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesTeam' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesFieldType
> = z.nativeEnum(TemplateFindTemplatesFieldType);

/** @internal */
export const TemplateFindTemplatesFieldType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesFieldType
> = TemplateFindTemplatesFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldType$ {
  /** @deprecated use `TemplateFindTemplatesFieldType$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldType$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeDropdown
> = z.nativeEnum(TemplateFindTemplatesTypeDropdown);

/** @internal */
export const TemplateFindTemplatesTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeDropdown
> = TemplateFindTemplatesTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeDropdown$ {
  /** @deprecated use `TemplateFindTemplatesTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeDropdown$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTypeDropdown$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesValue3$inboundSchema: z.ZodType<
  TemplateFindTemplatesValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type TemplateFindTemplatesValue3$Outbound = {
  value: string;
};

/** @internal */
export const TemplateFindTemplatesValue3$outboundSchema: z.ZodType<
  TemplateFindTemplatesValue3$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesValue3$ {
  /** @deprecated use `TemplateFindTemplatesValue3$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesValue3$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue3$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesValue3$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue3$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesValue3$Outbound;
}

export function templateFindTemplatesValue3ToJSON(
  templateFindTemplatesValue3: TemplateFindTemplatesValue3,
): string {
  return JSON.stringify(
    TemplateFindTemplatesValue3$outboundSchema.parse(
      templateFindTemplatesValue3,
    ),
  );
}

export function templateFindTemplatesValue3FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesValue3' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaDropdown$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue3$inboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateFindTemplatesValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaDropdown$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaDropdown$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue3$outboundSchema))
    .optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaDropdown$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaDropdown$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaDropdown$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaDropdown$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaDropdown$Outbound;
}

export function templateFindTemplatesFieldMetaDropdownToJSON(
  templateFindTemplatesFieldMetaDropdown:
    TemplateFindTemplatesFieldMetaDropdown,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaDropdown$outboundSchema.parse(
      templateFindTemplatesFieldMetaDropdown,
    ),
  );
}

export function templateFindTemplatesFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeCheckbox
> = z.nativeEnum(TemplateFindTemplatesTypeCheckbox);

/** @internal */
export const TemplateFindTemplatesTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeCheckbox
> = TemplateFindTemplatesTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeCheckbox$ {
  /** @deprecated use `TemplateFindTemplatesTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeCheckbox$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTypeCheckbox$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesValue2$inboundSchema: z.ZodType<
  TemplateFindTemplatesValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateFindTemplatesValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateFindTemplatesValue2$outboundSchema: z.ZodType<
  TemplateFindTemplatesValue2$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesValue2$ {
  /** @deprecated use `TemplateFindTemplatesValue2$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesValue2$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue2$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesValue2$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue2$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesValue2$Outbound;
}

export function templateFindTemplatesValue2ToJSON(
  templateFindTemplatesValue2: TemplateFindTemplatesValue2,
): string {
  return JSON.stringify(
    TemplateFindTemplatesValue2$outboundSchema.parse(
      templateFindTemplatesValue2,
    ),
  );
}

export function templateFindTemplatesValue2FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesValue2' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesDirection$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesDirection
> = z.nativeEnum(TemplateFindTemplatesDirection);

/** @internal */
export const TemplateFindTemplatesDirection$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesDirection
> = TemplateFindTemplatesDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDirection$ {
  /** @deprecated use `TemplateFindTemplatesDirection$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesDirection$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDirection$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesDirection$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaCheckbox$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue2$inboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: TemplateFindTemplatesDirection$inboundSchema.default("vertical"),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateFindTemplatesValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaCheckbox$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaCheckbox$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue2$outboundSchema))
    .optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
  direction: TemplateFindTemplatesDirection$outboundSchema.default("vertical"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaCheckbox$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaCheckbox$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaCheckbox$Outbound;
}

export function templateFindTemplatesFieldMetaCheckboxToJSON(
  templateFindTemplatesFieldMetaCheckbox:
    TemplateFindTemplatesFieldMetaCheckbox,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaCheckbox$outboundSchema.parse(
      templateFindTemplatesFieldMetaCheckbox,
    ),
  );
}

export function templateFindTemplatesFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeRadio
> = z.nativeEnum(TemplateFindTemplatesTypeRadio);

/** @internal */
export const TemplateFindTemplatesTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeRadio
> = TemplateFindTemplatesTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeRadio$ {
  /** @deprecated use `TemplateFindTemplatesTypeRadio$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeRadio$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeRadio$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeRadio$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesValue1$inboundSchema: z.ZodType<
  TemplateFindTemplatesValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateFindTemplatesValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateFindTemplatesValue1$outboundSchema: z.ZodType<
  TemplateFindTemplatesValue1$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesValue1$ {
  /** @deprecated use `TemplateFindTemplatesValue1$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesValue1$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue1$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesValue1$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesValue1$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesValue1$Outbound;
}

export function templateFindTemplatesValue1ToJSON(
  templateFindTemplatesValue1: TemplateFindTemplatesValue1,
): string {
  return JSON.stringify(
    TemplateFindTemplatesValue1$outboundSchema.parse(
      templateFindTemplatesValue1,
    ),
  );
}

export function templateFindTemplatesValue1FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesValue1' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaRadio$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue1$inboundSchema))
    .optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateFindTemplatesValue1$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaRadio$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaRadio$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => TemplateFindTemplatesValue1$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaRadio$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaRadio$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaRadio$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaRadio$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaRadio$Outbound;
}

export function templateFindTemplatesFieldMetaRadioToJSON(
  templateFindTemplatesFieldMetaRadio: TemplateFindTemplatesFieldMetaRadio,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaRadio$outboundSchema.parse(
      templateFindTemplatesFieldMetaRadio,
    ),
  );
}

export function templateFindTemplatesFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeNumber
> = z.nativeEnum(TemplateFindTemplatesTypeNumber);

/** @internal */
export const TemplateFindTemplatesTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeNumber
> = TemplateFindTemplatesTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeNumber$ {
  /** @deprecated use `TemplateFindTemplatesTypeNumber$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeNumber$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeNumber$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeNumber$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign6
> = z.nativeEnum(TemplateFindTemplatesTextAlign6);

/** @internal */
export const TemplateFindTemplatesTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign6
> = TemplateFindTemplatesTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign6$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign6$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign6$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign6$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign6$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaNumber$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeNumber$inboundSchema,
  numberFormat: z.nullable(z.string()).optional(),
  value: z.string().optional(),
  minValue: z.nullable(z.number()).optional(),
  maxValue: z.nullable(z.number()).optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaNumber$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaNumber$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeNumber$outboundSchema,
  numberFormat: z.nullable(z.string()).optional(),
  value: z.string().optional(),
  minValue: z.nullable(z.number()).optional(),
  maxValue: z.nullable(z.number()).optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaNumber$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaNumber$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaNumber$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaNumber$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaNumber$Outbound;
}

export function templateFindTemplatesFieldMetaNumberToJSON(
  templateFindTemplatesFieldMetaNumber: TemplateFindTemplatesFieldMetaNumber,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaNumber$outboundSchema.parse(
      templateFindTemplatesFieldMetaNumber,
    ),
  );
}

export function templateFindTemplatesFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeText$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeText
> = z.nativeEnum(TemplateFindTemplatesTypeText);

/** @internal */
export const TemplateFindTemplatesTypeText$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeText
> = TemplateFindTemplatesTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeText$ {
  /** @deprecated use `TemplateFindTemplatesTypeText$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeText$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeText$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeText$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign5
> = z.nativeEnum(TemplateFindTemplatesTextAlign5);

/** @internal */
export const TemplateFindTemplatesTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign5
> = TemplateFindTemplatesTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign5$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign5$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign5$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign5$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign5$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaText$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaText$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaText$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaText$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaText$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMetaText$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaText$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaText$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaText$Outbound;
}

export function templateFindTemplatesFieldMetaTextToJSON(
  templateFindTemplatesFieldMetaText: TemplateFindTemplatesFieldMetaText,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaText$outboundSchema.parse(
      templateFindTemplatesFieldMetaText,
    ),
  );
}

export function templateFindTemplatesFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaText' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeDate
> = z.nativeEnum(TemplateFindTemplatesTypeDate);

/** @internal */
export const TemplateFindTemplatesTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeDate
> = TemplateFindTemplatesTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeDate$ {
  /** @deprecated use `TemplateFindTemplatesTypeDate$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeDate$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeDate$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeDate$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign4
> = z.nativeEnum(TemplateFindTemplatesTextAlign4);

/** @internal */
export const TemplateFindTemplatesTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign4
> = TemplateFindTemplatesTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign4$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign4$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign4$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign4$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign4$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaDate$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaDate$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaDate$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaDate$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMetaDate$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaDate$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaDate$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaDate$Outbound;
}

export function templateFindTemplatesFieldMetaDateToJSON(
  templateFindTemplatesFieldMetaDate: TemplateFindTemplatesFieldMetaDate,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaDate$outboundSchema.parse(
      templateFindTemplatesFieldMetaDate,
    ),
  );
}

export function templateFindTemplatesFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeEmail
> = z.nativeEnum(TemplateFindTemplatesTypeEmail);

/** @internal */
export const TemplateFindTemplatesTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeEmail
> = TemplateFindTemplatesTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeEmail$ {
  /** @deprecated use `TemplateFindTemplatesTypeEmail$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeEmail$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeEmail$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeEmail$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign3
> = z.nativeEnum(TemplateFindTemplatesTextAlign3);

/** @internal */
export const TemplateFindTemplatesTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign3
> = TemplateFindTemplatesTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign3$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign3$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign3$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign3$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign3$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaEmail$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaEmail$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaEmail$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaEmail$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaEmail$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaEmail$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaEmail$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaEmail$Outbound;
}

export function templateFindTemplatesFieldMetaEmailToJSON(
  templateFindTemplatesFieldMetaEmail: TemplateFindTemplatesFieldMetaEmail,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaEmail$outboundSchema.parse(
      templateFindTemplatesFieldMetaEmail,
    ),
  );
}

export function templateFindTemplatesFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeName$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeName
> = z.nativeEnum(TemplateFindTemplatesTypeName);

/** @internal */
export const TemplateFindTemplatesTypeName$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeName
> = TemplateFindTemplatesTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeName$ {
  /** @deprecated use `TemplateFindTemplatesTypeName$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeName$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeName$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTypeName$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign2
> = z.nativeEnum(TemplateFindTemplatesTextAlign2);

/** @internal */
export const TemplateFindTemplatesTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign2
> = TemplateFindTemplatesTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign2$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign2$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign2$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign2$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign2$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaName$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaName$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaName$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaName$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaName$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMetaName$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaName$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaName$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaName$Outbound;
}

export function templateFindTemplatesFieldMetaNameToJSON(
  templateFindTemplatesFieldMetaName: TemplateFindTemplatesFieldMetaName,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaName$outboundSchema.parse(
      templateFindTemplatesFieldMetaName,
    ),
  );
}

export function templateFindTemplatesFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaName' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeInitials
> = z.nativeEnum(TemplateFindTemplatesTypeInitials);

/** @internal */
export const TemplateFindTemplatesTypeInitials$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTypeInitials
> = TemplateFindTemplatesTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTypeInitials$ {
  /** @deprecated use `TemplateFindTemplatesTypeInitials$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTypeInitials$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTypeInitials$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign1
> = z.nativeEnum(TemplateFindTemplatesTextAlign1);

/** @internal */
export const TemplateFindTemplatesTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTextAlign1
> = TemplateFindTemplatesTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTextAlign1$ {
  /** @deprecated use `TemplateFindTemplatesTextAlign1$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTextAlign1$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTextAlign1$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTextAlign1$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaInitials$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaInitials$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaInitials$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TemplateFindTemplatesTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaInitials$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaInitials$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaInitials$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaInitials$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaInitials$Outbound;
}

export function templateFindTemplatesFieldMetaInitialsToJSON(
  templateFindTemplatesFieldMetaInitials:
    TemplateFindTemplatesFieldMetaInitials,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaInitials$outboundSchema.parse(
      templateFindTemplatesFieldMetaInitials,
    ),
  );
}

export function templateFindTemplatesFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaUnion$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TemplateFindTemplatesFieldMetaInitials$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaName$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaEmail$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaDate$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaText$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaNumber$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaRadio$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaCheckbox$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaDropdown$inboundSchema),
]);

/** @internal */
export type TemplateFindTemplatesFieldMetaUnion$Outbound =
  | TemplateFindTemplatesFieldMetaInitials$Outbound
  | TemplateFindTemplatesFieldMetaName$Outbound
  | TemplateFindTemplatesFieldMetaEmail$Outbound
  | TemplateFindTemplatesFieldMetaDate$Outbound
  | TemplateFindTemplatesFieldMetaText$Outbound
  | TemplateFindTemplatesFieldMetaNumber$Outbound
  | TemplateFindTemplatesFieldMetaRadio$Outbound
  | TemplateFindTemplatesFieldMetaCheckbox$Outbound
  | TemplateFindTemplatesFieldMetaDropdown$Outbound;

/** @internal */
export const TemplateFindTemplatesFieldMetaUnion$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaUnion
> = z.union([
  z.lazy(() => TemplateFindTemplatesFieldMetaInitials$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaName$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaEmail$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaDate$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaText$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaNumber$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaRadio$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaCheckbox$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMetaDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaUnion$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaUnion$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaUnion$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaUnion$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaUnion$Outbound;
}

export function templateFindTemplatesFieldMetaUnionToJSON(
  templateFindTemplatesFieldMetaUnion: TemplateFindTemplatesFieldMetaUnion,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaUnion$outboundSchema.parse(
      templateFindTemplatesFieldMetaUnion,
    ),
  );
}

export function templateFindTemplatesFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesField$inboundSchema: z.ZodType<
  TemplateFindTemplatesField,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateFindTemplatesFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateFindTemplatesFieldMetaInitials$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaName$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaEmail$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaDate$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaText$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaNumber$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaRadio$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaCheckbox$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaDropdown$inboundSchema),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateFindTemplatesField$Outbound = {
  envelopeId: string;
  envelopeItemId: string;
  type: string;
  id: number;
  secondaryId: string;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateFindTemplatesFieldMetaInitials$Outbound
    | TemplateFindTemplatesFieldMetaName$Outbound
    | TemplateFindTemplatesFieldMetaEmail$Outbound
    | TemplateFindTemplatesFieldMetaDate$Outbound
    | TemplateFindTemplatesFieldMetaText$Outbound
    | TemplateFindTemplatesFieldMetaNumber$Outbound
    | TemplateFindTemplatesFieldMetaRadio$Outbound
    | TemplateFindTemplatesFieldMetaCheckbox$Outbound
    | TemplateFindTemplatesFieldMetaDropdown$Outbound
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateFindTemplatesField$outboundSchema: z.ZodType<
  TemplateFindTemplatesField$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesField
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateFindTemplatesFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateFindTemplatesFieldMetaInitials$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaName$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaEmail$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaDate$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaText$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaNumber$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaRadio$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaCheckbox$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMetaDropdown$outboundSchema),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesField$ {
  /** @deprecated use `TemplateFindTemplatesField$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesField$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesField$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesField$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesField$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesField$Outbound;
}

export function templateFindTemplatesFieldToJSON(
  templateFindTemplatesField: TemplateFindTemplatesField,
): string {
  return JSON.stringify(
    TemplateFindTemplatesField$outboundSchema.parse(templateFindTemplatesField),
  );
}

export function templateFindTemplatesFieldFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesField' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesRole$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesRole
> = z.nativeEnum(TemplateFindTemplatesRole);

/** @internal */
export const TemplateFindTemplatesRole$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesRole
> = TemplateFindTemplatesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRole$ {
  /** @deprecated use `TemplateFindTemplatesRole$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRole$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRole$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRole$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesReadStatus
> = z.nativeEnum(TemplateFindTemplatesReadStatus);

/** @internal */
export const TemplateFindTemplatesReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesReadStatus
> = TemplateFindTemplatesReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesReadStatus$ {
  /** @deprecated use `TemplateFindTemplatesReadStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesReadStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesReadStatus$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesReadStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesSigningStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningStatus
> = z.nativeEnum(TemplateFindTemplatesSigningStatus);

/** @internal */
export const TemplateFindTemplatesSigningStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningStatus
> = TemplateFindTemplatesSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSigningStatus$ {
  /** @deprecated use `TemplateFindTemplatesSigningStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSigningStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSendStatus
> = z.nativeEnum(TemplateFindTemplatesSendStatus);

/** @internal */
export const TemplateFindTemplatesSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSendStatus
> = TemplateFindTemplatesSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSendStatus$ {
  /** @deprecated use `TemplateFindTemplatesSendStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSendStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSendStatus$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesSendStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesAccessAuth
> = z.nativeEnum(TemplateFindTemplatesAccessAuth);

/** @internal */
export const TemplateFindTemplatesAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesAccessAuth
> = TemplateFindTemplatesAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesAccessAuth$ {
  /** @deprecated use `TemplateFindTemplatesAccessAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesAccessAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesAccessAuth$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesActionAuth
> = z.nativeEnum(TemplateFindTemplatesActionAuth);

/** @internal */
export const TemplateFindTemplatesActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesActionAuth
> = TemplateFindTemplatesActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesActionAuth$ {
  /** @deprecated use `TemplateFindTemplatesActionAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesActionAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesActionAuth$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesActionAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesRecipientAuthOptions$inboundSchema: z.ZodType<
  TemplateFindTemplatesRecipientAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAuth: z.array(TemplateFindTemplatesAccessAuth$inboundSchema),
  actionAuth: z.array(TemplateFindTemplatesActionAuth$inboundSchema),
});

/** @internal */
export type TemplateFindTemplatesRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const TemplateFindTemplatesRecipientAuthOptions$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesRecipientAuthOptions
  > = z.object({
    accessAuth: z.array(TemplateFindTemplatesAccessAuth$outboundSchema),
    actionAuth: z.array(TemplateFindTemplatesActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRecipientAuthOptions$ {
  /** @deprecated use `TemplateFindTemplatesRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesRecipientAuthOptions$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesRecipientAuthOptions$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipientAuthOptions$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesRecipientAuthOptions$Outbound;
}

export function templateFindTemplatesRecipientAuthOptionsToJSON(
  templateFindTemplatesRecipientAuthOptions:
    TemplateFindTemplatesRecipientAuthOptions,
): string {
  return JSON.stringify(
    TemplateFindTemplatesRecipientAuthOptions$outboundSchema.parse(
      templateFindTemplatesRecipientAuthOptions,
    ),
  );
}

export function templateFindTemplatesRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesRecipientAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesRecipient$inboundSchema: z.ZodType<
  TemplateFindTemplatesRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  role: TemplateFindTemplatesRole$inboundSchema,
  readStatus: TemplateFindTemplatesReadStatus$inboundSchema,
  signingStatus: TemplateFindTemplatesSigningStatus$inboundSchema,
  sendStatus: TemplateFindTemplatesSendStatus$inboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesRecipientAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateFindTemplatesRecipient$Outbound = {
  envelopeId: string;
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateFindTemplatesRecipientAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateFindTemplatesRecipient$outboundSchema: z.ZodType<
  TemplateFindTemplatesRecipient$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesRecipient
> = z.object({
  envelopeId: z.string(),
  role: TemplateFindTemplatesRole$outboundSchema,
  readStatus: TemplateFindTemplatesReadStatus$outboundSchema,
  signingStatus: TemplateFindTemplatesSigningStatus$outboundSchema,
  sendStatus: TemplateFindTemplatesSendStatus$outboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesRecipientAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRecipient$ {
  /** @deprecated use `TemplateFindTemplatesRecipient$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRecipient$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipient$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRecipient$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipient$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesRecipient$Outbound;
}

export function templateFindTemplatesRecipientToJSON(
  templateFindTemplatesRecipient: TemplateFindTemplatesRecipient,
): string {
  return JSON.stringify(
    TemplateFindTemplatesRecipient$outboundSchema.parse(
      templateFindTemplatesRecipient,
    ),
  );
}

export function templateFindTemplatesRecipientFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesRecipient' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningOrder
> = z.nativeEnum(TemplateFindTemplatesSigningOrder);

/** @internal */
export const TemplateFindTemplatesSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningOrder
> = TemplateFindTemplatesSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSigningOrder$ {
  /** @deprecated use `TemplateFindTemplatesSigningOrder$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSigningOrder$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesDistributionMethod> = z
    .nativeEnum(TemplateFindTemplatesDistributionMethod);

/** @internal */
export const TemplateFindTemplatesDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesDistributionMethod> =
    TemplateFindTemplatesDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDistributionMethod$ {
  /** @deprecated use `TemplateFindTemplatesDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTemplateMeta$inboundSchema: z.ZodType<
  TemplateFindTemplatesTemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  signingOrder: TemplateFindTemplatesSigningOrder$inboundSchema,
  distributionMethod: TemplateFindTemplatesDistributionMethod$inboundSchema,
});

/** @internal */
export type TemplateFindTemplatesTemplateMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
};

/** @internal */
export const TemplateFindTemplatesTemplateMeta$outboundSchema: z.ZodType<
  TemplateFindTemplatesTemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesTemplateMeta
> = z.object({
  signingOrder: TemplateFindTemplatesSigningOrder$outboundSchema,
  distributionMethod: TemplateFindTemplatesDistributionMethod$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplateMeta$ {
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplateMeta$Outbound;
}

export function templateFindTemplatesTemplateMetaToJSON(
  templateFindTemplatesTemplateMeta: TemplateFindTemplatesTemplateMeta,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTemplateMeta$outboundSchema.parse(
      templateFindTemplatesTemplateMeta,
    ),
  );
}

export function templateFindTemplatesTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesTemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesTemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesDirectLink$inboundSchema: z.ZodType<
  TemplateFindTemplatesDirectLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  enabled: z.boolean(),
});

/** @internal */
export type TemplateFindTemplatesDirectLink$Outbound = {
  token: string;
  enabled: boolean;
};

/** @internal */
export const TemplateFindTemplatesDirectLink$outboundSchema: z.ZodType<
  TemplateFindTemplatesDirectLink$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesDirectLink
> = z.object({
  token: z.string(),
  enabled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDirectLink$ {
  /** @deprecated use `TemplateFindTemplatesDirectLink$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesDirectLink$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDirectLink$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesDirectLink$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesDirectLink$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesDirectLink$Outbound;
}

export function templateFindTemplatesDirectLinkToJSON(
  templateFindTemplatesDirectLink: TemplateFindTemplatesDirectLink,
): string {
  return JSON.stringify(
    TemplateFindTemplatesDirectLink$outboundSchema.parse(
      templateFindTemplatesDirectLink,
    ),
  );
}

export function templateFindTemplatesDirectLinkFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesDirectLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesDirectLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesDirectLink' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesData$inboundSchema: z.ZodType<
  TemplateFindTemplatesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateFindTemplatesDataType$inboundSchema,
  visibility: TemplateFindTemplatesVisibility$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesAuthOptions$inboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  envelopeId: z.string(),
  team: z.nullable(z.lazy(() => TemplateFindTemplatesTeam$inboundSchema)),
  fields: z.array(z.lazy(() => TemplateFindTemplatesField$inboundSchema)),
  recipients: z.array(
    z.lazy(() => TemplateFindTemplatesRecipient$inboundSchema),
  ),
  templateMeta: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplateMeta$inboundSchema),
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateFindTemplatesDirectLink$inboundSchema),
  ),
  templateDocumentDataId: z.string().default(""),
});

/** @internal */
export type TemplateFindTemplatesData$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateFindTemplatesAuthOptions$Outbound | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
  envelopeId: string;
  team: TemplateFindTemplatesTeam$Outbound | null;
  fields: Array<TemplateFindTemplatesField$Outbound>;
  recipients: Array<TemplateFindTemplatesRecipient$Outbound>;
  templateMeta: TemplateFindTemplatesTemplateMeta$Outbound | null;
  directLink: TemplateFindTemplatesDirectLink$Outbound | null;
  templateDocumentDataId: string;
};

/** @internal */
export const TemplateFindTemplatesData$outboundSchema: z.ZodType<
  TemplateFindTemplatesData$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesData
> = z.object({
  type: TemplateFindTemplatesDataType$outboundSchema,
  visibility: TemplateFindTemplatesVisibility$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesAuthOptions$outboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
  envelopeId: z.string(),
  team: z.nullable(z.lazy(() => TemplateFindTemplatesTeam$outboundSchema)),
  fields: z.array(z.lazy(() => TemplateFindTemplatesField$outboundSchema)),
  recipients: z.array(
    z.lazy(() => TemplateFindTemplatesRecipient$outboundSchema),
  ),
  templateMeta: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplateMeta$outboundSchema),
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateFindTemplatesDirectLink$outboundSchema),
  ),
  templateDocumentDataId: z.string().default(""),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesData$ {
  /** @deprecated use `TemplateFindTemplatesData$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesData$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesData$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesData$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesData$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesData$Outbound;
}

export function templateFindTemplatesDataToJSON(
  templateFindTemplatesData: TemplateFindTemplatesData,
): string {
  return JSON.stringify(
    TemplateFindTemplatesData$outboundSchema.parse(templateFindTemplatesData),
  );
}

export function templateFindTemplatesDataFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesData' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesResponse$inboundSchema: z.ZodType<
  TemplateFindTemplatesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => TemplateFindTemplatesData$inboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/** @internal */
export type TemplateFindTemplatesResponse$Outbound = {
  data: Array<TemplateFindTemplatesData$Outbound>;
  count: number;
  currentPage: number;
  perPage: number;
  totalPages: number;
};

/** @internal */
export const TemplateFindTemplatesResponse$outboundSchema: z.ZodType<
  TemplateFindTemplatesResponse$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesResponse
> = z.object({
  data: z.array(z.lazy(() => TemplateFindTemplatesData$outboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesResponse$ {
  /** @deprecated use `TemplateFindTemplatesResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesResponse$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponse$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesResponse$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponse$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesResponse$Outbound;
}

export function templateFindTemplatesResponseToJSON(
  templateFindTemplatesResponse: TemplateFindTemplatesResponse,
): string {
  return JSON.stringify(
    TemplateFindTemplatesResponse$outboundSchema.parse(
      templateFindTemplatesResponse,
    ),
  );
}

export function templateFindTemplatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesResponse' from JSON`,
  );
}
