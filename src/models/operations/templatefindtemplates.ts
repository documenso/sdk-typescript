/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter templates by type.
 */
export const QueryParamType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
/**
 * Filter templates by type.
 */
export type QueryParamType = ClosedEnum<typeof QueryParamType>;

export type TemplateFindTemplatesRequest = {
  /**
   * The search query.
   */
  query?: string | undefined;
  /**
   * The pagination page number, starts at 1.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  perPage?: number | undefined;
  /**
   * Filter templates by type.
   */
  type?: QueryParamType | undefined;
};

export const TemplateFindTemplatesType = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateFindTemplatesType = ClosedEnum<
  typeof TemplateFindTemplatesType
>;

export const TemplateFindTemplatesVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateFindTemplatesVisibility = ClosedEnum<
  typeof TemplateFindTemplatesVisibility
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateFindTemplatesGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateFindTemplatesGlobalAccessAuth = ClosedEnum<
  typeof TemplateFindTemplatesGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateFindTemplatesGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateFindTemplatesGlobalActionAuth = ClosedEnum<
  typeof TemplateFindTemplatesGlobalActionAuth
>;

export type TemplateFindTemplatesAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: TemplateFindTemplatesGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: TemplateFindTemplatesGlobalActionAuth | null;
};

export type TemplateFindTemplatesTeam = {
  id: number;
  url: string;
};

export const TemplateFindTemplatesTemplatesType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateFindTemplatesTemplatesType = ClosedEnum<
  typeof TemplateFindTemplatesTemplatesType
>;

export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type =
  ClosedEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type
  >;

export type TemplateFindTemplatesFieldMetaTemplatesResponseValues = {
  value: string;
};

export type TemplateFindTemplatesFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type;
  values?:
    | Array<TemplateFindTemplatesFieldMetaTemplatesResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType =
  {
    Checkbox: "checkbox",
  } as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType =
  ClosedEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType
  >;

export type TemplateFindTemplatesFieldMetaTemplatesValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateFindTemplatesFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType;
  values?: Array<TemplateFindTemplatesFieldMetaTemplatesValues> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType =
  {
    Radio: "radio",
  } as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType =
  ClosedEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType
  >;

export type TemplateFindTemplatesFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateFindTemplatesFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType;
  values?: Array<TemplateFindTemplatesFieldMetaValues> | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type TemplateFindTemplatesFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType
  >;

export type TemplateFindTemplatesFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponse200Type = {
  Date: "date",
} as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponse200Type = ClosedEnum<
  typeof TemplateFindTemplatesFieldMetaTemplatesResponse200Type
>;

export type TemplateFindTemplatesFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesFieldMetaTemplatesResponse200Type;
  fontSize?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesResponseType = {
  Email: "email",
} as const;
export type TemplateFindTemplatesFieldMetaTemplatesResponseType = ClosedEnum<
  typeof TemplateFindTemplatesFieldMetaTemplatesResponseType
>;

export type TemplateFindTemplatesFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesFieldMetaTemplatesResponseType;
  fontSize?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaTemplatesType = {
  Name: "name",
} as const;
export type TemplateFindTemplatesFieldMetaTemplatesType = ClosedEnum<
  typeof TemplateFindTemplatesFieldMetaTemplatesType
>;

export type TemplateFindTemplatesFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesFieldMetaTemplatesType;
  fontSize?: number | undefined;
};

export const TemplateFindTemplatesFieldMetaType = {
  Initials: "initials",
} as const;
export type TemplateFindTemplatesFieldMetaType = ClosedEnum<
  typeof TemplateFindTemplatesFieldMetaType
>;

export type TemplateFindTemplatesFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateFindTemplatesFieldMetaType;
  fontSize?: number | undefined;
};

export type TemplateFindTemplatesFieldMeta =
  | TemplateFindTemplatesFieldMeta1
  | TemplateFindTemplatesFieldMeta2
  | TemplateFindTemplatesFieldMeta3
  | TemplateFindTemplatesFieldMeta4
  | TemplateFindTemplatesFieldMeta7
  | TemplateFindTemplatesFieldMeta9
  | TemplateFindTemplatesFieldMeta5
  | TemplateFindTemplatesFieldMeta8
  | TemplateFindTemplatesFieldMeta6;

export type TemplateFindTemplatesFields = {
  type: TemplateFindTemplatesTemplatesType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateFindTemplatesFieldMeta1
    | TemplateFindTemplatesFieldMeta2
    | TemplateFindTemplatesFieldMeta3
    | TemplateFindTemplatesFieldMeta4
    | TemplateFindTemplatesFieldMeta7
    | TemplateFindTemplatesFieldMeta9
    | TemplateFindTemplatesFieldMeta5
    | TemplateFindTemplatesFieldMeta8
    | TemplateFindTemplatesFieldMeta6
    | null;
};

export const TemplateFindTemplatesRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type TemplateFindTemplatesRole = ClosedEnum<
  typeof TemplateFindTemplatesRole
>;

export const TemplateFindTemplatesReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateFindTemplatesReadStatus = ClosedEnum<
  typeof TemplateFindTemplatesReadStatus
>;

export const TemplateFindTemplatesSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateFindTemplatesSigningStatus = ClosedEnum<
  typeof TemplateFindTemplatesSigningStatus
>;

export const TemplateFindTemplatesSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateFindTemplatesSendStatus = ClosedEnum<
  typeof TemplateFindTemplatesSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateFindTemplatesAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateFindTemplatesAccessAuth = ClosedEnum<
  typeof TemplateFindTemplatesAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateFindTemplatesActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateFindTemplatesActionAuth = ClosedEnum<
  typeof TemplateFindTemplatesActionAuth
>;

export type TemplateFindTemplatesTemplatesAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth: TemplateFindTemplatesAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth: TemplateFindTemplatesActionAuth | null;
};

export type TemplateFindTemplatesRecipients = {
  role: TemplateFindTemplatesRole;
  readStatus: TemplateFindTemplatesReadStatus;
  signingStatus: TemplateFindTemplatesSigningStatus;
  sendStatus: TemplateFindTemplatesSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateFindTemplatesTemplatesAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const TemplateFindTemplatesSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateFindTemplatesSigningOrder = ClosedEnum<
  typeof TemplateFindTemplatesSigningOrder
>;

export const TemplateFindTemplatesDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateFindTemplatesDistributionMethod = ClosedEnum<
  typeof TemplateFindTemplatesDistributionMethod
>;

export type TemplateFindTemplatesTemplateMeta = {
  signingOrder: TemplateFindTemplatesSigningOrder | null;
  distributionMethod: TemplateFindTemplatesDistributionMethod;
};

export type TemplateFindTemplatesDirectLink = {
  token: string;
  enabled: boolean;
};

export type TemplateFindTemplatesData = {
  type: TemplateFindTemplatesType;
  visibility: TemplateFindTemplatesVisibility;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateFindTemplatesAuthOptions | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  team: TemplateFindTemplatesTeam | null;
  fields: Array<TemplateFindTemplatesFields>;
  recipients: Array<TemplateFindTemplatesRecipients>;
  templateMeta: TemplateFindTemplatesTemplateMeta | null;
  directLink: TemplateFindTemplatesDirectLink | null;
};

/**
 * Successful response
 */
export type TemplateFindTemplatesResponseBody = {
  data: Array<TemplateFindTemplatesData>;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The current page number, starts at 1.
   */
  currentPage: number;
  /**
   * The number of items per page.
   */
  perPage: number;
  /**
   * The total number of pages.
   */
  totalPages: number;
};

/** @internal */
export const QueryParamType$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = z.nativeEnum(QueryParamType);

/** @internal */
export const QueryParamType$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamType
> = QueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamType$ {
  /** @deprecated use `QueryParamType$inboundSchema` instead. */
  export const inboundSchema = QueryParamType$inboundSchema;
  /** @deprecated use `QueryParamType$outboundSchema` instead. */
  export const outboundSchema = QueryParamType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesRequest$inboundSchema: z.ZodType<
  TemplateFindTemplatesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  type: QueryParamType$inboundSchema.optional(),
});

/** @internal */
export type TemplateFindTemplatesRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  type?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesRequest$outboundSchema: z.ZodType<
  TemplateFindTemplatesRequest$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  type: QueryParamType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRequest$ {
  /** @deprecated use `TemplateFindTemplatesRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRequest$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRequest$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesRequest$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesRequest$Outbound;
}

export function templateFindTemplatesRequestToJSON(
  templateFindTemplatesRequest: TemplateFindTemplatesRequest,
): string {
  return JSON.stringify(
    TemplateFindTemplatesRequest$outboundSchema.parse(
      templateFindTemplatesRequest,
    ),
  );
}

export function templateFindTemplatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesRequest' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesType
> = z.nativeEnum(TemplateFindTemplatesType);

/** @internal */
export const TemplateFindTemplatesType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesType
> = TemplateFindTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesType$ {
  /** @deprecated use `TemplateFindTemplatesType$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesType$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesVisibility$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesVisibility
> = z.nativeEnum(TemplateFindTemplatesVisibility);

/** @internal */
export const TemplateFindTemplatesVisibility$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesVisibility
> = TemplateFindTemplatesVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesVisibility$ {
  /** @deprecated use `TemplateFindTemplatesVisibility$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesVisibility$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesVisibility$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesVisibility$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalAccessAuth> = z.nativeEnum(
    TemplateFindTemplatesGlobalAccessAuth,
  );

/** @internal */
export const TemplateFindTemplatesGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalAccessAuth> =
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesGlobalAccessAuth$ {
  /** @deprecated use `TemplateFindTemplatesGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalActionAuth> = z.nativeEnum(
    TemplateFindTemplatesGlobalActionAuth,
  );

/** @internal */
export const TemplateFindTemplatesGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesGlobalActionAuth> =
    TemplateFindTemplatesGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesGlobalActionAuth$ {
  /** @deprecated use `TemplateFindTemplatesGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesAuthOptions$inboundSchema: z.ZodType<
  TemplateFindTemplatesAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateFindTemplatesGlobalAccessAuth$inboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateFindTemplatesGlobalActionAuth$inboundSchema,
  ),
});

/** @internal */
export type TemplateFindTemplatesAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const TemplateFindTemplatesAuthOptions$outboundSchema: z.ZodType<
  TemplateFindTemplatesAuthOptions$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesAuthOptions
> = z.object({
  globalAccessAuth: z.nullable(
    TemplateFindTemplatesGlobalAccessAuth$outboundSchema,
  ),
  globalActionAuth: z.nullable(
    TemplateFindTemplatesGlobalActionAuth$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesAuthOptions$ {
  /** @deprecated use `TemplateFindTemplatesAuthOptions$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesAuthOptions$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesAuthOptions$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesAuthOptions$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesAuthOptions$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesAuthOptions$Outbound;
}

export function templateFindTemplatesAuthOptionsToJSON(
  templateFindTemplatesAuthOptions: TemplateFindTemplatesAuthOptions,
): string {
  return JSON.stringify(
    TemplateFindTemplatesAuthOptions$outboundSchema.parse(
      templateFindTemplatesAuthOptions,
    ),
  );
}

export function templateFindTemplatesAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTeam$inboundSchema: z.ZodType<
  TemplateFindTemplatesTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  url: z.string(),
});

/** @internal */
export type TemplateFindTemplatesTeam$Outbound = {
  id: number;
  url: string;
};

/** @internal */
export const TemplateFindTemplatesTeam$outboundSchema: z.ZodType<
  TemplateFindTemplatesTeam$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesTeam
> = z.object({
  id: z.number().int(),
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTeam$ {
  /** @deprecated use `TemplateFindTemplatesTeam$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTeam$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTeam$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesTeam$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTeam$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTeam$Outbound;
}

export function templateFindTemplatesTeamToJSON(
  templateFindTemplatesTeam: TemplateFindTemplatesTeam,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTeam$outboundSchema.parse(templateFindTemplatesTeam),
  );
}

export function templateFindTemplatesTeamFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesTeam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesTeam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesTeam' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesTemplatesType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTemplatesType
> = z.nativeEnum(TemplateFindTemplatesTemplatesType);

/** @internal */
export const TemplateFindTemplatesTemplatesType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesTemplatesType
> = TemplateFindTemplatesTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesType$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesType$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTemplatesType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type
  > = z.nativeEnum(
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type,
  );

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type
  > =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponseValues$inboundSchema:
  z.ZodType<
    TemplateFindTemplatesFieldMetaTemplatesResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type TemplateFindTemplatesFieldMetaTemplatesResponseValues$Outbound = {
  value: string;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponseValues$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesFieldMetaTemplatesResponseValues$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesFieldMetaTemplatesResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponseValues$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponseValues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponseValues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponseValues$Outbound` instead. */
  export type Outbound =
    TemplateFindTemplatesFieldMetaTemplatesResponseValues$Outbound;
}

export function templateFindTemplatesFieldMetaTemplatesResponseValuesToJSON(
  templateFindTemplatesFieldMetaTemplatesResponseValues:
    TemplateFindTemplatesFieldMetaTemplatesResponseValues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaTemplatesResponseValues$outboundSchema.parse(
      templateFindTemplatesFieldMetaTemplatesResponseValues,
    ),
  );
}

export function templateFindTemplatesFieldMetaTemplatesResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesFieldMetaTemplatesResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaTemplatesResponseValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesFieldMetaTemplatesResponseValues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMeta9$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      TemplateFindTemplatesFieldMetaTemplatesResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateFindTemplatesFieldMetaTemplatesResponseValues$Outbound>
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta9$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta9$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFields9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      TemplateFindTemplatesFieldMetaTemplatesResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta9$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta9$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta9$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta9$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta9$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta9$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta9$Outbound;
}

export function templateFindTemplatesFieldMeta9ToJSON(
  templateFindTemplatesFieldMeta9: TemplateFindTemplatesFieldMeta9,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta9$outboundSchema.parse(
      templateFindTemplatesFieldMeta9,
    ),
  );
}

export function templateFindTemplatesFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta9' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType
  > = z.nativeEnum(
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType,
  );

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType
  > =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesValues$inboundSchema:
  z.ZodType<
    TemplateFindTemplatesFieldMetaTemplatesValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type TemplateFindTemplatesFieldMetaTemplatesValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesValues$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesFieldMetaTemplatesValues$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesFieldMetaTemplatesValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesValues$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesValues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesValues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesValues$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaTemplatesValues$Outbound;
}

export function templateFindTemplatesFieldMetaTemplatesValuesToJSON(
  templateFindTemplatesFieldMetaTemplatesValues:
    TemplateFindTemplatesFieldMetaTemplatesValues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaTemplatesValues$outboundSchema.parse(
      templateFindTemplatesFieldMetaTemplatesValues,
    ),
  );
}

export function templateFindTemplatesFieldMetaTemplatesValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesFieldMetaTemplatesValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaTemplatesValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesFieldMetaTemplatesValues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMeta8$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$inboundSchema,
  values: z.array(
    z.lazy(() => TemplateFindTemplatesFieldMetaTemplatesValues$inboundSchema),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateFindTemplatesFieldMetaTemplatesValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta8$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta8$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataFieldsType$outboundSchema,
  values: z.array(
    z.lazy(() => TemplateFindTemplatesFieldMetaTemplatesValues$outboundSchema),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta8$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta8$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta8$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta8$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta8$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta8$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta8$Outbound;
}

export function templateFindTemplatesFieldMeta8ToJSON(
  templateFindTemplatesFieldMeta8: TemplateFindTemplatesFieldMeta8,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta8$outboundSchema.parse(
      templateFindTemplatesFieldMeta8,
    ),
  );
}

export function templateFindTemplatesFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta8' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType
  > = z.nativeEnum(
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType,
  );

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType
  > =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMetaValues$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateFindTemplatesFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateFindTemplatesFieldMetaValues$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMetaValues$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaValues$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaValues$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaValues$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaValues$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMetaValues$Outbound;
}

export function templateFindTemplatesFieldMetaValuesToJSON(
  templateFindTemplatesFieldMetaValues: TemplateFindTemplatesFieldMetaValues,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMetaValues$outboundSchema.parse(
      templateFindTemplatesFieldMetaValues,
    ),
  );
}

export function templateFindTemplatesFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMetaValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesFieldMetaValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMeta7$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$inboundSchema,
  values: z.array(
    z.lazy(() => TemplateFindTemplatesFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateFindTemplatesFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta7$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta7$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyDataType$outboundSchema,
  values: z.array(
    z.lazy(() => TemplateFindTemplatesFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta7$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta7$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta7$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta7$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta7$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta7$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta7$Outbound;
}

export function templateFindTemplatesFieldMeta7ToJSON(
  templateFindTemplatesFieldMeta7: TemplateFindTemplatesFieldMeta7,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta7$outboundSchema.parse(
      templateFindTemplatesFieldMeta7,
    ),
  );
}

export function templateFindTemplatesFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta7' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta6$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta6$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta6$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta6$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta6$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta6$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta6$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta6$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta6$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta6$Outbound;
}

export function templateFindTemplatesFieldMeta6ToJSON(
  templateFindTemplatesFieldMeta6: TemplateFindTemplatesFieldMeta6,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta6$outboundSchema.parse(
      templateFindTemplatesFieldMeta6,
    ),
  );
}

export function templateFindTemplatesFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta6' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType
  > =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta5$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta5$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta5$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    TemplateFindTemplatesFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta5$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta5$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta5$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta5$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta5$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta5$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta5$Outbound;
}

export function templateFindTemplatesFieldMeta5ToJSON(
  templateFindTemplatesFieldMeta5: TemplateFindTemplatesFieldMeta5,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta5$outboundSchema.parse(
      templateFindTemplatesFieldMeta5,
    ),
  );
}

export function templateFindTemplatesFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta5' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200Type
  > = z.nativeEnum(TemplateFindTemplatesFieldMetaTemplatesResponse200Type);

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateFindTemplatesFieldMetaTemplatesResponse200Type
  > = TemplateFindTemplatesFieldMetaTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponse200Type$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta4$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta4$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta4$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta4$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta4$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta4$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta4$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta4$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta4$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta4$Outbound;
}

export function templateFindTemplatesFieldMeta4ToJSON(
  templateFindTemplatesFieldMeta4: TemplateFindTemplatesFieldMeta4,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta4$outboundSchema.parse(
      templateFindTemplatesFieldMeta4,
    ),
  );
}

export function templateFindTemplatesFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta4' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesFieldMetaTemplatesResponseType> =
    z.nativeEnum(TemplateFindTemplatesFieldMetaTemplatesResponseType);

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesFieldMetaTemplatesResponseType> =
    TemplateFindTemplatesFieldMetaTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesResponseType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponseType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesResponseType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta3$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta3$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta3$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta3$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta3$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta3$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta3$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta3$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta3$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta3$Outbound;
}

export function templateFindTemplatesFieldMeta3ToJSON(
  templateFindTemplatesFieldMeta3: TemplateFindTemplatesFieldMeta3,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta3$outboundSchema.parse(
      templateFindTemplatesFieldMeta3,
    ),
  );
}

export function templateFindTemplatesFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta3' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesFieldMetaTemplatesType> = z
    .nativeEnum(TemplateFindTemplatesFieldMetaTemplatesType);

/** @internal */
export const TemplateFindTemplatesFieldMetaTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesFieldMetaTemplatesType> =
    TemplateFindTemplatesFieldMetaTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaTemplatesType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta2$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta2$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta2$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaTemplatesType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta2$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta2$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta2$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta2$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta2$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta2$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta2$Outbound;
}

export function templateFindTemplatesFieldMeta2ToJSON(
  templateFindTemplatesFieldMeta2: TemplateFindTemplatesFieldMeta2,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta2$outboundSchema.parse(
      templateFindTemplatesFieldMeta2,
    ),
  );
}

export function templateFindTemplatesFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta2' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMetaType$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesFieldMetaType
> = z.nativeEnum(TemplateFindTemplatesFieldMetaType);

/** @internal */
export const TemplateFindTemplatesFieldMetaType$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesFieldMetaType
> = TemplateFindTemplatesFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMetaType$ {
  /** @deprecated use `TemplateFindTemplatesFieldMetaType$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMetaType$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesFieldMetaType$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesFieldMeta1$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type TemplateFindTemplatesFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateFindTemplatesFieldMeta1$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta1$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TemplateFindTemplatesFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta1$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta1$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta1$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta1$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta1$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta1$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta1$Outbound;
}

export function templateFindTemplatesFieldMeta1ToJSON(
  templateFindTemplatesFieldMeta1: TemplateFindTemplatesFieldMeta1,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta1$outboundSchema.parse(
      templateFindTemplatesFieldMeta1,
    ),
  );
}

export function templateFindTemplatesFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta1' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFieldMeta$inboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TemplateFindTemplatesFieldMeta1$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta2$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta3$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta4$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta7$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta9$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta5$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta8$inboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta6$inboundSchema),
]);

/** @internal */
export type TemplateFindTemplatesFieldMeta$Outbound =
  | TemplateFindTemplatesFieldMeta1$Outbound
  | TemplateFindTemplatesFieldMeta2$Outbound
  | TemplateFindTemplatesFieldMeta3$Outbound
  | TemplateFindTemplatesFieldMeta4$Outbound
  | TemplateFindTemplatesFieldMeta7$Outbound
  | TemplateFindTemplatesFieldMeta9$Outbound
  | TemplateFindTemplatesFieldMeta5$Outbound
  | TemplateFindTemplatesFieldMeta8$Outbound
  | TemplateFindTemplatesFieldMeta6$Outbound;

/** @internal */
export const TemplateFindTemplatesFieldMeta$outboundSchema: z.ZodType<
  TemplateFindTemplatesFieldMeta$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFieldMeta
> = z.union([
  z.lazy(() => TemplateFindTemplatesFieldMeta1$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta2$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta3$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta4$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta7$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta9$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta5$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta8$outboundSchema),
  z.lazy(() => TemplateFindTemplatesFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFieldMeta$ {
  /** @deprecated use `TemplateFindTemplatesFieldMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFieldMeta$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFieldMeta$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFieldMeta$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFieldMeta$Outbound;
}

export function templateFindTemplatesFieldMetaToJSON(
  templateFindTemplatesFieldMeta: TemplateFindTemplatesFieldMeta,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFieldMeta$outboundSchema.parse(
      templateFindTemplatesFieldMeta,
    ),
  );
}

export function templateFindTemplatesFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFieldMeta' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesFields$inboundSchema: z.ZodType<
  TemplateFindTemplatesFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateFindTemplatesTemplatesType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateFindTemplatesFieldMeta1$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta2$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta3$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta4$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta7$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta9$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta5$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta8$inboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type TemplateFindTemplatesFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateFindTemplatesFieldMeta1$Outbound
    | TemplateFindTemplatesFieldMeta2$Outbound
    | TemplateFindTemplatesFieldMeta3$Outbound
    | TemplateFindTemplatesFieldMeta4$Outbound
    | TemplateFindTemplatesFieldMeta7$Outbound
    | TemplateFindTemplatesFieldMeta9$Outbound
    | TemplateFindTemplatesFieldMeta5$Outbound
    | TemplateFindTemplatesFieldMeta8$Outbound
    | TemplateFindTemplatesFieldMeta6$Outbound
    | null;
};

/** @internal */
export const TemplateFindTemplatesFields$outboundSchema: z.ZodType<
  TemplateFindTemplatesFields$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesFields
> = z.object({
  type: TemplateFindTemplatesTemplatesType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateFindTemplatesFieldMeta1$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta2$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta3$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta4$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta7$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta9$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta5$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta8$outboundSchema),
      z.lazy(() => TemplateFindTemplatesFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesFields$ {
  /** @deprecated use `TemplateFindTemplatesFields$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesFields$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesFields$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesFields$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesFields$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesFields$Outbound;
}

export function templateFindTemplatesFieldsToJSON(
  templateFindTemplatesFields: TemplateFindTemplatesFields,
): string {
  return JSON.stringify(
    TemplateFindTemplatesFields$outboundSchema.parse(
      templateFindTemplatesFields,
    ),
  );
}

export function templateFindTemplatesFieldsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesFields' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesRole$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesRole
> = z.nativeEnum(TemplateFindTemplatesRole);

/** @internal */
export const TemplateFindTemplatesRole$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesRole
> = TemplateFindTemplatesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRole$ {
  /** @deprecated use `TemplateFindTemplatesRole$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRole$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRole$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRole$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesReadStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesReadStatus
> = z.nativeEnum(TemplateFindTemplatesReadStatus);

/** @internal */
export const TemplateFindTemplatesReadStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesReadStatus
> = TemplateFindTemplatesReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesReadStatus$ {
  /** @deprecated use `TemplateFindTemplatesReadStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesReadStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesReadStatus$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesReadStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesSigningStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningStatus
> = z.nativeEnum(TemplateFindTemplatesSigningStatus);

/** @internal */
export const TemplateFindTemplatesSigningStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningStatus
> = TemplateFindTemplatesSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSigningStatus$ {
  /** @deprecated use `TemplateFindTemplatesSigningStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSigningStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesSendStatus$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSendStatus
> = z.nativeEnum(TemplateFindTemplatesSendStatus);

/** @internal */
export const TemplateFindTemplatesSendStatus$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSendStatus
> = TemplateFindTemplatesSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSendStatus$ {
  /** @deprecated use `TemplateFindTemplatesSendStatus$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSendStatus$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSendStatus$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesSendStatus$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesAccessAuth
> = z.nativeEnum(TemplateFindTemplatesAccessAuth);

/** @internal */
export const TemplateFindTemplatesAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesAccessAuth
> = TemplateFindTemplatesAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesAccessAuth$ {
  /** @deprecated use `TemplateFindTemplatesAccessAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesAccessAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesAccessAuth$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesActionAuth
> = z.nativeEnum(TemplateFindTemplatesActionAuth);

/** @internal */
export const TemplateFindTemplatesActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesActionAuth
> = TemplateFindTemplatesActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesActionAuth$ {
  /** @deprecated use `TemplateFindTemplatesActionAuth$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesActionAuth$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesActionAuth$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesActionAuth$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTemplatesAuthOptions$inboundSchema: z.ZodType<
  TemplateFindTemplatesTemplatesAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAuth: z.nullable(TemplateFindTemplatesAccessAuth$inboundSchema),
  actionAuth: z.nullable(TemplateFindTemplatesActionAuth$inboundSchema),
});

/** @internal */
export type TemplateFindTemplatesTemplatesAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const TemplateFindTemplatesTemplatesAuthOptions$outboundSchema:
  z.ZodType<
    TemplateFindTemplatesTemplatesAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateFindTemplatesTemplatesAuthOptions
  > = z.object({
    accessAuth: z.nullable(TemplateFindTemplatesAccessAuth$outboundSchema),
    actionAuth: z.nullable(TemplateFindTemplatesActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplatesAuthOptions$ {
  /** @deprecated use `TemplateFindTemplatesTemplatesAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesTemplatesAuthOptions$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplatesAuthOptions$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplatesAuthOptions$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplatesAuthOptions$Outbound;
}

export function templateFindTemplatesTemplatesAuthOptionsToJSON(
  templateFindTemplatesTemplatesAuthOptions:
    TemplateFindTemplatesTemplatesAuthOptions,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTemplatesAuthOptions$outboundSchema.parse(
      templateFindTemplatesTemplatesAuthOptions,
    ),
  );
}

export function templateFindTemplatesTemplatesAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateFindTemplatesTemplatesAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateFindTemplatesTemplatesAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateFindTemplatesTemplatesAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesRecipients$inboundSchema: z.ZodType<
  TemplateFindTemplatesRecipients,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: TemplateFindTemplatesRole$inboundSchema,
  readStatus: TemplateFindTemplatesReadStatus$inboundSchema,
  signingStatus: TemplateFindTemplatesSigningStatus$inboundSchema,
  sendStatus: TemplateFindTemplatesSendStatus$inboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplatesAuthOptions$inboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type TemplateFindTemplatesRecipients$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateFindTemplatesTemplatesAuthOptions$Outbound | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const TemplateFindTemplatesRecipients$outboundSchema: z.ZodType<
  TemplateFindTemplatesRecipients$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesRecipients
> = z.object({
  role: TemplateFindTemplatesRole$outboundSchema,
  readStatus: TemplateFindTemplatesReadStatus$outboundSchema,
  signingStatus: TemplateFindTemplatesSigningStatus$outboundSchema,
  sendStatus: TemplateFindTemplatesSendStatus$outboundSchema,
  id: z.number().int(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplatesAuthOptions$outboundSchema),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesRecipients$ {
  /** @deprecated use `TemplateFindTemplatesRecipients$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesRecipients$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipients$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesRecipients$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesRecipients$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesRecipients$Outbound;
}

export function templateFindTemplatesRecipientsToJSON(
  templateFindTemplatesRecipients: TemplateFindTemplatesRecipients,
): string {
  return JSON.stringify(
    TemplateFindTemplatesRecipients$outboundSchema.parse(
      templateFindTemplatesRecipients,
    ),
  );
}

export function templateFindTemplatesRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesRecipients, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesRecipients$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesRecipients' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningOrder
> = z.nativeEnum(TemplateFindTemplatesSigningOrder);

/** @internal */
export const TemplateFindTemplatesSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof TemplateFindTemplatesSigningOrder
> = TemplateFindTemplatesSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesSigningOrder$ {
  /** @deprecated use `TemplateFindTemplatesSigningOrder$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesSigningOrder$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesDistributionMethod> = z
    .nativeEnum(TemplateFindTemplatesDistributionMethod);

/** @internal */
export const TemplateFindTemplatesDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateFindTemplatesDistributionMethod> =
    TemplateFindTemplatesDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDistributionMethod$ {
  /** @deprecated use `TemplateFindTemplatesDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateFindTemplatesDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateFindTemplatesTemplateMeta$inboundSchema: z.ZodType<
  TemplateFindTemplatesTemplateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  signingOrder: z.nullable(TemplateFindTemplatesSigningOrder$inboundSchema),
  distributionMethod: TemplateFindTemplatesDistributionMethod$inboundSchema,
});

/** @internal */
export type TemplateFindTemplatesTemplateMeta$Outbound = {
  signingOrder: string | null;
  distributionMethod: string;
};

/** @internal */
export const TemplateFindTemplatesTemplateMeta$outboundSchema: z.ZodType<
  TemplateFindTemplatesTemplateMeta$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesTemplateMeta
> = z.object({
  signingOrder: z.nullable(TemplateFindTemplatesSigningOrder$outboundSchema),
  distributionMethod: TemplateFindTemplatesDistributionMethod$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesTemplateMeta$ {
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesTemplateMeta$Outbound;
}

export function templateFindTemplatesTemplateMetaToJSON(
  templateFindTemplatesTemplateMeta: TemplateFindTemplatesTemplateMeta,
): string {
  return JSON.stringify(
    TemplateFindTemplatesTemplateMeta$outboundSchema.parse(
      templateFindTemplatesTemplateMeta,
    ),
  );
}

export function templateFindTemplatesTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesTemplateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesTemplateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesDirectLink$inboundSchema: z.ZodType<
  TemplateFindTemplatesDirectLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  enabled: z.boolean(),
});

/** @internal */
export type TemplateFindTemplatesDirectLink$Outbound = {
  token: string;
  enabled: boolean;
};

/** @internal */
export const TemplateFindTemplatesDirectLink$outboundSchema: z.ZodType<
  TemplateFindTemplatesDirectLink$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesDirectLink
> = z.object({
  token: z.string(),
  enabled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesDirectLink$ {
  /** @deprecated use `TemplateFindTemplatesDirectLink$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesDirectLink$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesDirectLink$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesDirectLink$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesDirectLink$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesDirectLink$Outbound;
}

export function templateFindTemplatesDirectLinkToJSON(
  templateFindTemplatesDirectLink: TemplateFindTemplatesDirectLink,
): string {
  return JSON.stringify(
    TemplateFindTemplatesDirectLink$outboundSchema.parse(
      templateFindTemplatesDirectLink,
    ),
  );
}

export function templateFindTemplatesDirectLinkFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesDirectLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesDirectLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesDirectLink' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesData$inboundSchema: z.ZodType<
  TemplateFindTemplatesData,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateFindTemplatesType$inboundSchema,
  visibility: TemplateFindTemplatesVisibility$inboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesAuthOptions$inboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  team: z.nullable(z.lazy(() => TemplateFindTemplatesTeam$inboundSchema)),
  fields: z.array(z.lazy(() => TemplateFindTemplatesFields$inboundSchema)),
  recipients: z.array(
    z.lazy(() => TemplateFindTemplatesRecipients$inboundSchema),
  ),
  templateMeta: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplateMeta$inboundSchema),
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateFindTemplatesDirectLink$inboundSchema),
  ),
});

/** @internal */
export type TemplateFindTemplatesData$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number | null;
  authOptions: TemplateFindTemplatesAuthOptions$Outbound | null;
  templateDocumentDataId: string;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  team: TemplateFindTemplatesTeam$Outbound | null;
  fields: Array<TemplateFindTemplatesFields$Outbound>;
  recipients: Array<TemplateFindTemplatesRecipients$Outbound>;
  templateMeta: TemplateFindTemplatesTemplateMeta$Outbound | null;
  directLink: TemplateFindTemplatesDirectLink$Outbound | null;
};

/** @internal */
export const TemplateFindTemplatesData$outboundSchema: z.ZodType<
  TemplateFindTemplatesData$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesData
> = z.object({
  type: TemplateFindTemplatesType$outboundSchema,
  visibility: TemplateFindTemplatesVisibility$outboundSchema,
  id: z.number().int(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number().int(),
  teamId: z.nullable(z.number().int()),
  authOptions: z.nullable(
    z.lazy(() => TemplateFindTemplatesAuthOptions$outboundSchema),
  ),
  templateDocumentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  team: z.nullable(z.lazy(() => TemplateFindTemplatesTeam$outboundSchema)),
  fields: z.array(z.lazy(() => TemplateFindTemplatesFields$outboundSchema)),
  recipients: z.array(
    z.lazy(() => TemplateFindTemplatesRecipients$outboundSchema),
  ),
  templateMeta: z.nullable(
    z.lazy(() => TemplateFindTemplatesTemplateMeta$outboundSchema),
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateFindTemplatesDirectLink$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesData$ {
  /** @deprecated use `TemplateFindTemplatesData$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesData$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesData$outboundSchema` instead. */
  export const outboundSchema = TemplateFindTemplatesData$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesData$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesData$Outbound;
}

export function templateFindTemplatesDataToJSON(
  templateFindTemplatesData: TemplateFindTemplatesData,
): string {
  return JSON.stringify(
    TemplateFindTemplatesData$outboundSchema.parse(templateFindTemplatesData),
  );
}

export function templateFindTemplatesDataFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesData' from JSON`,
  );
}

/** @internal */
export const TemplateFindTemplatesResponseBody$inboundSchema: z.ZodType<
  TemplateFindTemplatesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => TemplateFindTemplatesData$inboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/** @internal */
export type TemplateFindTemplatesResponseBody$Outbound = {
  data: Array<TemplateFindTemplatesData$Outbound>;
  count: number;
  currentPage: number;
  perPage: number;
  totalPages: number;
};

/** @internal */
export const TemplateFindTemplatesResponseBody$outboundSchema: z.ZodType<
  TemplateFindTemplatesResponseBody$Outbound,
  z.ZodTypeDef,
  TemplateFindTemplatesResponseBody
> = z.object({
  data: z.array(z.lazy(() => TemplateFindTemplatesData$outboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateFindTemplatesResponseBody$ {
  /** @deprecated use `TemplateFindTemplatesResponseBody$inboundSchema` instead. */
  export const inboundSchema = TemplateFindTemplatesResponseBody$inboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateFindTemplatesResponseBody$outboundSchema;
  /** @deprecated use `TemplateFindTemplatesResponseBody$Outbound` instead. */
  export type Outbound = TemplateFindTemplatesResponseBody$Outbound;
}

export function templateFindTemplatesResponseBodyToJSON(
  templateFindTemplatesResponseBody: TemplateFindTemplatesResponseBody,
): string {
  return JSON.stringify(
    TemplateFindTemplatesResponseBody$outboundSchema.parse(
      templateFindTemplatesResponseBody,
    ),
  );
}

export function templateFindTemplatesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TemplateFindTemplatesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateFindTemplatesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateFindTemplatesResponseBody' from JSON`,
  );
}
