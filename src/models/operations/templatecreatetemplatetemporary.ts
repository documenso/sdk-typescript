/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TemplateCreateTemplateTemporaryVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateTemplateTemporaryVisibilityRequest = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryVisibilityRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateTemplateTemporaryGlobalAccessAuthRequest = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateCreateTemplateTemporaryGlobalActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateCreateTemplateTemporaryGlobalActionAuthRequest = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryGlobalActionAuthRequest
>;

export const TemplateCreateTemplateTemporaryTypeRequest = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateCreateTemplateTemporaryTypeRequest = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeRequest
>;

/**
 * The date format to use for date fields and signing the document.
 */
export const TemplateCreateTemplateTemporaryDateFormat = {
  YyyyMMddHhMmA: "yyyy-MM-dd hh:mm a",
  YyyyMMdd: "yyyy-MM-dd",
  DdMMSlashYyyy: "dd/MM/yyyy",
  MmDdSlashYyyy: "MM/dd/yyyy",
  YyMMdd: "yy-MM-dd",
  MmmmDdCommaYyyy: "MMMM dd, yyyy",
  EeeeMmmmDdCommaYyyy: "EEEE, MMMM dd, yyyy",
  DdMMSlashYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  DdMMSlashYyyyHHmm: "dd/MM/yyyy HH:mm",
  MmDdSlashYyyyHhMmA: "MM/dd/yyyy hh:mm a",
  MmDdSlashYyyyHHmm: "MM/dd/yyyy HH:mm",
  DdDotMmDotYyyy: "dd.MM.yyyy",
  DdDotMmDotYyyyHHmm: "dd.MM.yyyy HH:mm",
  YyyyMMddHHmm: "yyyy-MM-dd HH:mm",
  YyMMddHhMmA: "yy-MM-dd hh:mm a",
  YyMMddHHmm: "yy-MM-dd HH:mm",
  YyyyMMddHHmmss: "yyyy-MM-dd HH:mm:ss",
  MmmmDdCommaYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  MmmmDdCommaYyyyHHmm: "MMMM dd, yyyy HH:mm",
  EeeeMmmmDdCommaYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  EeeeMmmmDdCommaYyyyHHmm: "EEEE, MMMM dd, yyyy HH:mm",
  Iso8601Full: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type TemplateCreateTemplateTemporaryDateFormat = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const TemplateCreateTemplateTemporaryDistributionMethodRequest = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type TemplateCreateTemplateTemporaryDistributionMethodRequest =
  ClosedEnum<typeof TemplateCreateTemplateTemporaryDistributionMethodRequest>;

export type TemplateCreateTemplateTemporaryEmailSettingsRequest = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

/**
 * The language to use for email communications with recipients.
 */
export const TemplateCreateTemplateTemporaryLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type TemplateCreateTemplateTemporaryLanguage = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryLanguage
>;

export const TemplateCreateTemplateTemporarySigningOrderRequest = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateCreateTemplateTemporarySigningOrderRequest = ClosedEnum<
  typeof TemplateCreateTemplateTemporarySigningOrderRequest
>;

export type TemplateCreateTemplateTemporaryMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: TemplateCreateTemplateTemporaryDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?:
    | TemplateCreateTemplateTemporaryDistributionMethodRequest
    | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?:
    | TemplateCreateTemplateTemporaryEmailSettingsRequest
    | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: TemplateCreateTemplateTemporaryLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  signingOrder?: TemplateCreateTemplateTemporarySigningOrderRequest | undefined;
  allowDictateNextSigner?: boolean | undefined;
};

export type TemplateCreateTemplateTemporaryRequest = {
  /**
   * The title of the document.
   */
  title: string;
  folderId?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: TemplateCreateTemplateTemporaryVisibilityRequest | undefined;
  globalAccessAuth?:
    | Array<TemplateCreateTemplateTemporaryGlobalAccessAuthRequest>
    | undefined;
  globalActionAuth?:
    | Array<TemplateCreateTemplateTemporaryGlobalActionAuthRequest>
    | undefined;
  /**
   * The title of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicTitle?: string | undefined;
  /**
   * The description of the template that will be displayed to the public. Only applicable for public templates.
   */
  publicDescription?: string | undefined;
  type?: TemplateCreateTemplateTemporaryTypeRequest | undefined;
  meta?: TemplateCreateTemplateTemporaryMeta | undefined;
};

export const TemplateCreateTemplateTemporaryTypeResponse = {
  Public: "PUBLIC",
  Private: "PRIVATE",
} as const;
export type TemplateCreateTemplateTemporaryTypeResponse = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeResponse
>;

export const TemplateCreateTemplateTemporaryVisibilityResponse = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateTemplateTemporaryVisibilityResponse = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryVisibilityResponse
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthResponse = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateTemplateTemporaryGlobalAccessAuthResponse =
  ClosedEnum<typeof TemplateCreateTemplateTemporaryGlobalAccessAuthResponse>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateCreateTemplateTemporaryGlobalActionAuthResponse = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateCreateTemplateTemporaryGlobalActionAuthResponse =
  ClosedEnum<typeof TemplateCreateTemplateTemporaryGlobalActionAuthResponse>;

export type TemplateCreateTemplateTemporaryAuthOptions = {
  globalAccessAuth: Array<
    TemplateCreateTemplateTemporaryGlobalAccessAuthResponse
  >;
  globalActionAuth: Array<
    TemplateCreateTemplateTemporaryGlobalActionAuthResponse
  >;
};

export const TemplateCreateTemplateTemporaryTemplateDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type TemplateCreateTemplateTemporaryTemplateDocumentDataType =
  ClosedEnum<typeof TemplateCreateTemplateTemporaryTemplateDocumentDataType>;

export type TemplateCreateTemplateTemporaryTemplateDocumentData = {
  type: TemplateCreateTemplateTemporaryTemplateDocumentDataType;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

export const TemplateCreateTemplateTemporaryTemplateMetaSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateCreateTemplateTemporaryTemplateMetaSigningOrder =
  ClosedEnum<typeof TemplateCreateTemplateTemporaryTemplateMetaSigningOrder>;

export const TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod =
  ClosedEnum<
    typeof TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod
  >;

export type TemplateCreateTemplateTemporaryTemplateMetaEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type TemplateCreateTemplateTemporaryTemplateMeta = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: TemplateCreateTemplateTemporaryTemplateMetaSigningOrder;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  distributionMethod:
    TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod;
  redirectUrl: string | null;
  language: string;
  emailSettings:
    | TemplateCreateTemplateTemporaryTemplateMetaEmailSettings
    | null;
  emailId: string | null;
  emailReplyTo: string | null;
  templateId: number | null;
};

export type TemplateCreateTemplateTemporaryDirectLink = {
  id: string;
  envelopeId: string;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
  templateId: number;
};

export type TemplateCreateTemplateTemporaryUser = {
  id: number;
  name: string | null;
  email: string;
};

export const TemplateCreateTemplateTemporaryRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type TemplateCreateTemplateTemporaryRole = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryRole
>;

export const TemplateCreateTemplateTemporaryReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateCreateTemplateTemporaryReadStatus = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryReadStatus
>;

export const TemplateCreateTemplateTemporarySigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateCreateTemplateTemporarySigningStatus = ClosedEnum<
  typeof TemplateCreateTemplateTemporarySigningStatus
>;

export const TemplateCreateTemplateTemporarySendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateCreateTemplateTemporarySendStatus = ClosedEnum<
  typeof TemplateCreateTemplateTemporarySendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateTemplateTemporaryAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateTemplateTemporaryAccessAuth = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateCreateTemplateTemporaryActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateCreateTemplateTemporaryActionAuth = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryActionAuth
>;

export type TemplateCreateTemplateTemporaryRecipientAuthOptions = {
  accessAuth: Array<TemplateCreateTemplateTemporaryAccessAuth>;
  actionAuth: Array<TemplateCreateTemplateTemporaryActionAuth>;
};

export type TemplateCreateTemplateTemporaryRecipient = {
  envelopeId: string;
  role: TemplateCreateTemplateTemporaryRole;
  readStatus: TemplateCreateTemplateTemporaryReadStatus;
  signingStatus: TemplateCreateTemplateTemporarySigningStatus;
  sendStatus: TemplateCreateTemplateTemporarySendStatus;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateCreateTemplateTemporaryRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateCreateTemplateTemporaryFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateCreateTemplateTemporaryFieldType = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryFieldType
>;

export const TemplateCreateTemplateTemporaryTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type TemplateCreateTemplateTemporaryTypeDropdown = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeDropdown
>;

export type TemplateCreateTemplateTemporaryValue3 = {
  value: string;
};

export type TemplateCreateTemplateTemporaryFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeDropdown;
  values?: Array<TemplateCreateTemplateTemporaryValue3> | undefined;
  defaultValue?: string | undefined;
};

export const TemplateCreateTemplateTemporaryTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type TemplateCreateTemplateTemporaryTypeCheckbox = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeCheckbox
>;

export type TemplateCreateTemplateTemporaryValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const TemplateCreateTemplateTemporaryDirection = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type TemplateCreateTemplateTemporaryDirection = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryDirection
>;

export type TemplateCreateTemplateTemporaryFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeCheckbox;
  values?: Array<TemplateCreateTemplateTemporaryValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: TemplateCreateTemplateTemporaryDirection | undefined;
};

export const TemplateCreateTemplateTemporaryTypeRadio = {
  Radio: "radio",
} as const;
export type TemplateCreateTemplateTemporaryTypeRadio = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeRadio
>;

export type TemplateCreateTemplateTemporaryValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateCreateTemplateTemporaryFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeRadio;
  values?: Array<TemplateCreateTemplateTemporaryValue1> | undefined;
};

export const TemplateCreateTemplateTemporaryTypeNumber = {
  Number: "number",
} as const;
export type TemplateCreateTemplateTemporaryTypeNumber = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeNumber
>;

export const TemplateCreateTemplateTemporaryTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign6 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign6
>;

export type TemplateCreateTemplateTemporaryFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeNumber;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign6 | undefined;
};

export const TemplateCreateTemplateTemporaryTypeText = {
  Text: "text",
} as const;
export type TemplateCreateTemplateTemporaryTypeText = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeText
>;

export const TemplateCreateTemplateTemporaryTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign5 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign5
>;

export type TemplateCreateTemplateTemporaryFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign5 | undefined;
};

export const TemplateCreateTemplateTemporaryTypeDate = {
  Date: "date",
} as const;
export type TemplateCreateTemplateTemporaryTypeDate = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeDate
>;

export const TemplateCreateTemplateTemporaryTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign4 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign4
>;

export type TemplateCreateTemplateTemporaryFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeDate;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign4 | undefined;
};

export const TemplateCreateTemplateTemporaryTypeEmail = {
  Email: "email",
} as const;
export type TemplateCreateTemplateTemporaryTypeEmail = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeEmail
>;

export const TemplateCreateTemplateTemporaryTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign3 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign3
>;

export type TemplateCreateTemplateTemporaryFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeEmail;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign3 | undefined;
};

export const TemplateCreateTemplateTemporaryTypeName = {
  Name: "name",
} as const;
export type TemplateCreateTemplateTemporaryTypeName = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeName
>;

export const TemplateCreateTemplateTemporaryTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign2 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign2
>;

export type TemplateCreateTemplateTemporaryFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeName;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign2 | undefined;
};

export const TemplateCreateTemplateTemporaryTypeInitials = {
  Initials: "initials",
} as const;
export type TemplateCreateTemplateTemporaryTypeInitials = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTypeInitials
>;

export const TemplateCreateTemplateTemporaryTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateTemplateTemporaryTextAlign1 = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryTextAlign1
>;

export type TemplateCreateTemplateTemporaryFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateTemplateTemporaryTypeInitials;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateTemplateTemporaryTextAlign1 | undefined;
};

export type TemplateCreateTemplateTemporaryFieldMetaUnion =
  | TemplateCreateTemplateTemporaryFieldMetaInitials
  | TemplateCreateTemplateTemporaryFieldMetaName
  | TemplateCreateTemplateTemporaryFieldMetaEmail
  | TemplateCreateTemplateTemporaryFieldMetaDate
  | TemplateCreateTemplateTemporaryFieldMetaText
  | TemplateCreateTemplateTemporaryFieldMetaNumber
  | TemplateCreateTemplateTemporaryFieldMetaRadio
  | TemplateCreateTemplateTemporaryFieldMetaCheckbox
  | TemplateCreateTemplateTemporaryFieldMetaDropdown;

export type TemplateCreateTemplateTemporaryField = {
  envelopeId: string;
  envelopeItemId: string;
  type: TemplateCreateTemplateTemporaryFieldType;
  id: number;
  secondaryId: string;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateTemplateTemporaryFieldMetaInitials
    | TemplateCreateTemplateTemporaryFieldMetaName
    | TemplateCreateTemplateTemporaryFieldMetaEmail
    | TemplateCreateTemplateTemporaryFieldMetaDate
    | TemplateCreateTemplateTemporaryFieldMetaText
    | TemplateCreateTemplateTemporaryFieldMetaNumber
    | TemplateCreateTemplateTemporaryFieldMetaRadio
    | TemplateCreateTemplateTemporaryFieldMetaCheckbox
    | TemplateCreateTemplateTemporaryFieldMetaDropdown
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateCreateTemplateTemporaryFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type TemplateCreateTemplateTemporaryFolderType = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryFolderType
>;

export const TemplateCreateTemplateTemporaryFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateTemplateTemporaryFolderVisibility = ClosedEnum<
  typeof TemplateCreateTemplateTemporaryFolderVisibility
>;

export type TemplateCreateTemplateTemporaryFolder = {
  id: string;
  name: string;
  type: TemplateCreateTemplateTemporaryFolderType;
  visibility: TemplateCreateTemplateTemporaryFolderVisibility;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

export type Template = {
  type: TemplateCreateTemplateTemporaryTypeResponse;
  visibility: TemplateCreateTemplateTemporaryVisibilityResponse;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateCreateTemplateTemporaryAuthOptions | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  envelopeId: string;
  templateDocumentDataId?: string | undefined;
  templateDocumentData: TemplateCreateTemplateTemporaryTemplateDocumentData;
  templateMeta: TemplateCreateTemplateTemporaryTemplateMeta;
  directLink: TemplateCreateTemplateTemporaryDirectLink | null;
  user: TemplateCreateTemplateTemporaryUser;
  recipients: Array<TemplateCreateTemplateTemporaryRecipient>;
  fields: Array<TemplateCreateTemplateTemporaryField>;
  folder: TemplateCreateTemplateTemporaryFolder | null;
};

/**
 * Successful response
 */
export type TemplateCreateTemplateTemporaryResponse = {
  template: Template;
  uploadUrl: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryVisibilityRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryVisibilityRequest> = z
    .nativeEnum(TemplateCreateTemplateTemporaryVisibilityRequest);

/** @internal */
export const TemplateCreateTemplateTemporaryVisibilityRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryVisibilityRequest> =
    TemplateCreateTemplateTemporaryVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryVisibilityRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryVisibilityRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryVisibilityRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalAccessAuthRequest
  > = z.nativeEnum(TemplateCreateTemplateTemporaryGlobalAccessAuthRequest);

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalAccessAuthRequest
  > = TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalActionAuthRequest
  > = z.nativeEnum(TemplateCreateTemplateTemporaryGlobalActionAuthRequest);

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalActionAuthRequest
  > = TemplateCreateTemplateTemporaryGlobalActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryGlobalActionAuthRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryGlobalActionAuthRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryGlobalActionAuthRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeRequest> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeRequest);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeRequest> =
    TemplateCreateTemplateTemporaryTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryDateFormat$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryDateFormat> = z
    .nativeEnum(TemplateCreateTemplateTemporaryDateFormat);

/** @internal */
export const TemplateCreateTemplateTemporaryDateFormat$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryDateFormat> =
    TemplateCreateTemplateTemporaryDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryDateFormat$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryDateFormat$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryDateFormat$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryDateFormat$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryDateFormat$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryDistributionMethodRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryDistributionMethodRequest
  > = z.nativeEnum(TemplateCreateTemplateTemporaryDistributionMethodRequest);

/** @internal */
export const TemplateCreateTemplateTemporaryDistributionMethodRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryDistributionMethodRequest
  > = TemplateCreateTemplateTemporaryDistributionMethodRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryDistributionMethodRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryDistributionMethodRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryDistributionMethodRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryDistributionMethodRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryDistributionMethodRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryEmailSettingsRequest$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryEmailSettingsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryEmailSettingsRequest$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateCreateTemplateTemporaryEmailSettingsRequest$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryEmailSettingsRequest$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryEmailSettingsRequest
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryEmailSettingsRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryEmailSettingsRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryEmailSettingsRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryEmailSettingsRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryEmailSettingsRequest$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryEmailSettingsRequest$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryEmailSettingsRequest$Outbound;
}

export function templateCreateTemplateTemporaryEmailSettingsRequestToJSON(
  templateCreateTemplateTemporaryEmailSettingsRequest:
    TemplateCreateTemplateTemporaryEmailSettingsRequest,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryEmailSettingsRequest$outboundSchema.parse(
      templateCreateTemplateTemporaryEmailSettingsRequest,
    ),
  );
}

export function templateCreateTemplateTemporaryEmailSettingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryEmailSettingsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryEmailSettingsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryEmailSettingsRequest' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryLanguage$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryLanguage> = z
    .nativeEnum(TemplateCreateTemplateTemporaryLanguage);

/** @internal */
export const TemplateCreateTemplateTemporaryLanguage$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryLanguage> =
    TemplateCreateTemplateTemporaryLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryLanguage$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryLanguage$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryLanguage$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryLanguage$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryLanguage$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporarySigningOrderRequest$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySigningOrderRequest> = z
    .nativeEnum(TemplateCreateTemplateTemporarySigningOrderRequest);

/** @internal */
export const TemplateCreateTemplateTemporarySigningOrderRequest$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySigningOrderRequest> =
    TemplateCreateTemplateTemporarySigningOrderRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporarySigningOrderRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporarySigningOrderRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporarySigningOrderRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporarySigningOrderRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporarySigningOrderRequest$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryMeta$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateCreateTemplateTemporaryDateFormat$inboundSchema
    .optional(),
  distributionMethod:
    TemplateCreateTemplateTemporaryDistributionMethodRequest$inboundSchema
      .optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() =>
    TemplateCreateTemplateTemporaryEmailSettingsRequest$inboundSchema
  ).optional(),
  redirectUrl: z.string().optional(),
  language: TemplateCreateTemplateTemporaryLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  signingOrder: TemplateCreateTemplateTemporarySigningOrderRequest$inboundSchema
    .optional(),
  allowDictateNextSigner: z.boolean().optional(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?:
    | TemplateCreateTemplateTemporaryEmailSettingsRequest$Outbound
    | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  signingOrder?: string | undefined;
  allowDictateNextSigner?: boolean | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryMeta$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryMeta$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: TemplateCreateTemplateTemporaryDateFormat$outboundSchema
    .optional(),
  distributionMethod:
    TemplateCreateTemplateTemporaryDistributionMethodRequest$outboundSchema
      .optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() =>
    TemplateCreateTemplateTemporaryEmailSettingsRequest$outboundSchema
  ).optional(),
  redirectUrl: z.string().optional(),
  language: TemplateCreateTemplateTemporaryLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  signingOrder:
    TemplateCreateTemplateTemporarySigningOrderRequest$outboundSchema
      .optional(),
  allowDictateNextSigner: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryMeta$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryMeta$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryMeta$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryMeta$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryMeta$Outbound;
}

export function templateCreateTemplateTemporaryMetaToJSON(
  templateCreateTemplateTemporaryMeta: TemplateCreateTemplateTemporaryMeta,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryMeta$outboundSchema.parse(
      templateCreateTemplateTemporaryMeta,
    ),
  );
}

export function templateCreateTemplateTemporaryMetaFromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryMeta' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryRequest$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  folderId: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateCreateTemplateTemporaryVisibilityRequest$inboundSchema
    .optional(),
  globalAccessAuth: z.array(
    TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$inboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    TemplateCreateTemplateTemporaryGlobalActionAuthRequest$inboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateCreateTemplateTemporaryTypeRequest$inboundSchema.optional(),
  meta: z.lazy(() => TemplateCreateTemplateTemporaryMeta$inboundSchema)
    .optional(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryRequest$Outbound = {
  title: string;
  folderId?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: Array<string> | undefined;
  globalActionAuth?: Array<string> | undefined;
  publicTitle?: string | undefined;
  publicDescription?: string | undefined;
  type?: string | undefined;
  meta?: TemplateCreateTemplateTemporaryMeta$Outbound | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryRequest$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryRequest$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryRequest
> = z.object({
  title: z.string(),
  folderId: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: TemplateCreateTemplateTemporaryVisibilityRequest$outboundSchema
    .optional(),
  globalAccessAuth: z.array(
    TemplateCreateTemplateTemporaryGlobalAccessAuthRequest$outboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    TemplateCreateTemplateTemporaryGlobalActionAuthRequest$outboundSchema,
  ).optional(),
  publicTitle: z.string().optional(),
  publicDescription: z.string().optional(),
  type: TemplateCreateTemplateTemporaryTypeRequest$outboundSchema.optional(),
  meta: z.lazy(() => TemplateCreateTemplateTemporaryMeta$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryRequest$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryRequest$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryRequest$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRequest$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryRequest$Outbound;
}

export function templateCreateTemplateTemporaryRequestToJSON(
  templateCreateTemplateTemporaryRequest:
    TemplateCreateTemplateTemporaryRequest,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryRequest$outboundSchema.parse(
      templateCreateTemplateTemporaryRequest,
    ),
  );
}

export function templateCreateTemplateTemporaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryRequest' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeResponse> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeResponse);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeResponse> =
    TemplateCreateTemplateTemporaryTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeResponse$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeResponse$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeResponse$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryVisibilityResponse$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryVisibilityResponse> = z
    .nativeEnum(TemplateCreateTemplateTemporaryVisibilityResponse);

/** @internal */
export const TemplateCreateTemplateTemporaryVisibilityResponse$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryVisibilityResponse> =
    TemplateCreateTemplateTemporaryVisibilityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryVisibilityResponse$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryVisibilityResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryVisibilityResponse$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryVisibilityResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryVisibilityResponse$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalAccessAuthResponse
  > = z.nativeEnum(TemplateCreateTemplateTemporaryGlobalAccessAuthResponse);

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalAccessAuthResponse
  > = TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalActionAuthResponse$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalActionAuthResponse
  > = z.nativeEnum(TemplateCreateTemplateTemporaryGlobalActionAuthResponse);

/** @internal */
export const TemplateCreateTemplateTemporaryGlobalActionAuthResponse$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryGlobalActionAuthResponse
  > = TemplateCreateTemplateTemporaryGlobalActionAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryGlobalActionAuthResponse$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalActionAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryGlobalActionAuthResponse$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryGlobalActionAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryGlobalActionAuthResponse$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryAuthOptions$inboundSchema:
  z.ZodType<TemplateCreateTemplateTemporaryAuthOptions, z.ZodTypeDef, unknown> =
    z.object({
      globalAccessAuth: z.array(
        TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$inboundSchema,
      ),
      globalActionAuth: z.array(
        TemplateCreateTemplateTemporaryGlobalActionAuthResponse$inboundSchema,
      ),
    });

/** @internal */
export type TemplateCreateTemplateTemporaryAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateCreateTemplateTemporaryAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryAuthOptions
  > = z.object({
    globalAccessAuth: z.array(
      TemplateCreateTemplateTemporaryGlobalAccessAuthResponse$outboundSchema,
    ),
    globalActionAuth: z.array(
      TemplateCreateTemplateTemporaryGlobalActionAuthResponse$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryAuthOptions$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryAuthOptions$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryAuthOptions$Outbound;
}

export function templateCreateTemplateTemporaryAuthOptionsToJSON(
  templateCreateTemplateTemporaryAuthOptions:
    TemplateCreateTemplateTemporaryAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryAuthOptions$outboundSchema.parse(
      templateCreateTemplateTemporaryAuthOptions,
    ),
  );
}

export function templateCreateTemplateTemporaryAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateDocumentDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateDocumentDataType
  > = z.nativeEnum(TemplateCreateTemplateTemporaryTemplateDocumentDataType);

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateDocumentDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateDocumentDataType
  > = TemplateCreateTemplateTemporaryTemplateDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateDocumentDataType$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateDocumentDataType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateDocumentDataType$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateDocumentDataType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateDocumentDataType$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateDocumentData$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TemplateCreateTemplateTemporaryTemplateDocumentDataType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryTemplateDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateDocumentData$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateDocumentData$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryTemplateDocumentData
  > = z.object({
    type:
      TemplateCreateTemplateTemporaryTemplateDocumentDataType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateDocumentData$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateDocumentData$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateDocumentData$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateDocumentData$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryTemplateDocumentData$Outbound;
}

export function templateCreateTemplateTemporaryTemplateDocumentDataToJSON(
  templateCreateTemplateTemporaryTemplateDocumentData:
    TemplateCreateTemplateTemporaryTemplateDocumentData,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryTemplateDocumentData$outboundSchema.parse(
      templateCreateTemplateTemporaryTemplateDocumentData,
    ),
  );
}

export function templateCreateTemplateTemporaryTemplateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryTemplateDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryTemplateDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryTemplateDocumentData' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateMetaSigningOrder
  > = z.nativeEnum(TemplateCreateTemplateTemporaryTemplateMetaSigningOrder);

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateMetaSigningOrder
  > = TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod
  > = z.nativeEnum(
    TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod,
  );

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod
  > =
    TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$Outbound =
  {
    recipientSigningRequest: boolean;
    recipientRemoved: boolean;
    recipientSigned: boolean;
    documentPending: boolean;
    documentCompleted: boolean;
    documentDeleted: boolean;
    ownerDocumentCompleted: boolean;
  };

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$Outbound;
}

export function templateCreateTemplateTemporaryTemplateMetaEmailSettingsToJSON(
  templateCreateTemplateTemporaryTemplateMetaEmailSettings:
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$outboundSchema
      .parse(templateCreateTemplateTemporaryTemplateMetaEmailSettings),
  );
}

export function templateCreateTemplateTemporaryTemplateMetaEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryTemplateMetaEmailSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryTemplateMetaEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMeta$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    signingOrder:
      TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$inboundSchema,
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    distributionMethod:
      TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$inboundSchema,
    redirectUrl: z.nullable(z.string()),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$inboundSchema
      ),
    ),
    emailId: z.nullable(z.string()),
    emailReplyTo: z.nullable(z.string()),
    templateId: z.nullable(z.number()),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryTemplateMeta$Outbound = {
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  signingOrder: string;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  distributionMethod: string;
  redirectUrl: string | null;
  language: string;
  emailSettings:
    | TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$Outbound
    | null;
  emailId: string | null;
  emailReplyTo: string | null;
  templateId: number | null;
};

/** @internal */
export const TemplateCreateTemplateTemporaryTemplateMeta$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryTemplateMeta$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryTemplateMeta
  > = z.object({
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    signingOrder:
      TemplateCreateTemplateTemporaryTemplateMetaSigningOrder$outboundSchema,
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    distributionMethod:
      TemplateCreateTemplateTemporaryTemplateMetaDistributionMethod$outboundSchema,
    redirectUrl: z.nullable(z.string()),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateTemplateTemporaryTemplateMetaEmailSettings$outboundSchema
      ),
    ),
    emailId: z.nullable(z.string()),
    emailReplyTo: z.nullable(z.string()),
    templateId: z.nullable(z.number()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTemplateMeta$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTemplateMeta$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTemplateMeta$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTemplateMeta$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryTemplateMeta$Outbound;
}

export function templateCreateTemplateTemporaryTemplateMetaToJSON(
  templateCreateTemplateTemporaryTemplateMeta:
    TemplateCreateTemplateTemporaryTemplateMeta,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryTemplateMeta$outboundSchema.parse(
      templateCreateTemplateTemporaryTemplateMeta,
    ),
  );
}

export function templateCreateTemplateTemporaryTemplateMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryTemplateMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryTemplateMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryTemplateMeta' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryDirectLink$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryDirectLink,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  envelopeId: z.string(),
  token: z.string(),
  createdAt: z.string(),
  enabled: z.boolean(),
  directTemplateRecipientId: z.number(),
  templateId: z.number(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryDirectLink$Outbound = {
  id: string;
  envelopeId: string;
  token: string;
  createdAt: string;
  enabled: boolean;
  directTemplateRecipientId: number;
  templateId: number;
};

/** @internal */
export const TemplateCreateTemplateTemporaryDirectLink$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryDirectLink$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryDirectLink
  > = z.object({
    id: z.string(),
    envelopeId: z.string(),
    token: z.string(),
    createdAt: z.string(),
    enabled: z.boolean(),
    directTemplateRecipientId: z.number(),
    templateId: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryDirectLink$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryDirectLink$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryDirectLink$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryDirectLink$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryDirectLink$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryDirectLink$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryDirectLink$Outbound;
}

export function templateCreateTemplateTemporaryDirectLinkToJSON(
  templateCreateTemplateTemporaryDirectLink:
    TemplateCreateTemplateTemporaryDirectLink,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryDirectLink$outboundSchema.parse(
      templateCreateTemplateTemporaryDirectLink,
    ),
  );
}

export function templateCreateTemplateTemporaryDirectLinkFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryDirectLink,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryDirectLink$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryDirectLink' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryUser$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryUser$Outbound = {
  id: number;
  name: string | null;
  email: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryUser$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryUser$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryUser
> = z.object({
  id: z.number(),
  name: z.nullable(z.string()),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryUser$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryUser$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryUser$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryUser$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryUser$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryUser$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryUser$Outbound;
}

export function templateCreateTemplateTemporaryUserToJSON(
  templateCreateTemplateTemporaryUser: TemplateCreateTemplateTemporaryUser,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryUser$outboundSchema.parse(
      templateCreateTemplateTemporaryUser,
    ),
  );
}

export function templateCreateTemplateTemporaryUserFromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryUser' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryRole$inboundSchema: z.ZodNativeEnum<
  typeof TemplateCreateTemplateTemporaryRole
> = z.nativeEnum(TemplateCreateTemplateTemporaryRole);

/** @internal */
export const TemplateCreateTemplateTemporaryRole$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryRole> =
    TemplateCreateTemplateTemporaryRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryRole$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryRole$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryRole$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRole$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryRole$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryReadStatus> = z
    .nativeEnum(TemplateCreateTemplateTemporaryReadStatus);

/** @internal */
export const TemplateCreateTemplateTemporaryReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryReadStatus> =
    TemplateCreateTemplateTemporaryReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryReadStatus$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryReadStatus$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryReadStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporarySigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySigningStatus> = z
    .nativeEnum(TemplateCreateTemplateTemporarySigningStatus);

/** @internal */
export const TemplateCreateTemplateTemporarySigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySigningStatus> =
    TemplateCreateTemplateTemporarySigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporarySigningStatus$ {
  /** @deprecated use `TemplateCreateTemplateTemporarySigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporarySigningStatus$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporarySigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporarySigningStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporarySendStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySendStatus> = z
    .nativeEnum(TemplateCreateTemplateTemporarySendStatus);

/** @internal */
export const TemplateCreateTemplateTemporarySendStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporarySendStatus> =
    TemplateCreateTemplateTemporarySendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporarySendStatus$ {
  /** @deprecated use `TemplateCreateTemplateTemporarySendStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporarySendStatus$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporarySendStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporarySendStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryAccessAuth> = z
    .nativeEnum(TemplateCreateTemplateTemporaryAccessAuth);

/** @internal */
export const TemplateCreateTemplateTemporaryAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryAccessAuth> =
    TemplateCreateTemplateTemporaryAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryAccessAuth$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryAccessAuth$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryActionAuth> = z
    .nativeEnum(TemplateCreateTemplateTemporaryActionAuth);

/** @internal */
export const TemplateCreateTemplateTemporaryActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryActionAuth> =
    TemplateCreateTemplateTemporaryActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryActionAuth$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryActionAuth$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryActionAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryRecipientAuthOptions$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryRecipientAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.array(
      TemplateCreateTemplateTemporaryAccessAuth$inboundSchema,
    ),
    actionAuth: z.array(
      TemplateCreateTemplateTemporaryActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const TemplateCreateTemplateTemporaryRecipientAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryRecipientAuthOptions
  > = z.object({
    accessAuth: z.array(
      TemplateCreateTemplateTemporaryAccessAuth$outboundSchema,
    ),
    actionAuth: z.array(
      TemplateCreateTemplateTemporaryActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryRecipientAuthOptions$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryRecipientAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryRecipientAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipientAuthOptions$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryRecipientAuthOptions$Outbound;
}

export function templateCreateTemplateTemporaryRecipientAuthOptionsToJSON(
  templateCreateTemplateTemporaryRecipientAuthOptions:
    TemplateCreateTemplateTemporaryRecipientAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryRecipientAuthOptions$outboundSchema.parse(
      templateCreateTemplateTemporaryRecipientAuthOptions,
    ),
  );
}

export function templateCreateTemplateTemporaryRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryRecipientAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryRecipient$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  role: TemplateCreateTemplateTemporaryRole$inboundSchema,
  readStatus: TemplateCreateTemplateTemporaryReadStatus$inboundSchema,
  signingStatus: TemplateCreateTemplateTemporarySigningStatus$inboundSchema,
  sendStatus: TemplateCreateTemplateTemporarySendStatus$inboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      TemplateCreateTemplateTemporaryRecipientAuthOptions$inboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryRecipient$Outbound = {
  envelopeId: string;
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions:
    | TemplateCreateTemplateTemporaryRecipientAuthOptions$Outbound
    | null;
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryRecipient$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryRecipient$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryRecipient
> = z.object({
  envelopeId: z.string(),
  role: TemplateCreateTemplateTemporaryRole$outboundSchema,
  readStatus: TemplateCreateTemplateTemporaryReadStatus$outboundSchema,
  signingStatus: TemplateCreateTemplateTemporarySigningStatus$outboundSchema,
  sendStatus: TemplateCreateTemplateTemporarySendStatus$outboundSchema,
  id: z.number(),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      TemplateCreateTemplateTemporaryRecipientAuthOptions$outboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryRecipient$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipient$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryRecipient$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipient$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryRecipient$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryRecipient$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryRecipient$Outbound;
}

export function templateCreateTemplateTemporaryRecipientToJSON(
  templateCreateTemplateTemporaryRecipient:
    TemplateCreateTemplateTemporaryRecipient,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryRecipient$outboundSchema.parse(
      templateCreateTemplateTemporaryRecipient,
    ),
  );
}

export function templateCreateTemplateTemporaryRecipientFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryRecipient,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryRecipient$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryRecipient' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFieldType> = z
    .nativeEnum(TemplateCreateTemplateTemporaryFieldType);

/** @internal */
export const TemplateCreateTemplateTemporaryFieldType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFieldType> =
    TemplateCreateTemplateTemporaryFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldType$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldType$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldType$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeDropdown> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeDropdown);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeDropdown> =
    TemplateCreateTemplateTemporaryTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeDropdown$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeDropdown$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeDropdown$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryValue3$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryValue3$Outbound = {
  value: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryValue3$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue3$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryValue3$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryValue3$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryValue3$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryValue3$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue3$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryValue3$Outbound;
}

export function templateCreateTemplateTemporaryValue3ToJSON(
  templateCreateTemplateTemporaryValue3: TemplateCreateTemplateTemporaryValue3,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryValue3$outboundSchema.parse(
      templateCreateTemplateTemporaryValue3,
    ),
  );
}

export function templateCreateTemplateTemporaryValue3FromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryValue3' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaDropdown,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateTemplateTemporaryValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaDropdown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaDropdown$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaDropdownToJSON(
  templateCreateTemplateTemporaryFieldMetaDropdown:
    TemplateCreateTemplateTemporaryFieldMetaDropdown,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaDropdown,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeCheckbox> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeCheckbox);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeCheckbox> =
    TemplateCreateTemplateTemporaryTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeCheckbox$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeCheckbox$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeCheckbox$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryValue2$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryValue2$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue2$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryValue2$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryValue2$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryValue2$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryValue2$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue2$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryValue2$Outbound;
}

export function templateCreateTemplateTemporaryValue2ToJSON(
  templateCreateTemplateTemporaryValue2: TemplateCreateTemplateTemporaryValue2,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryValue2$outboundSchema.parse(
      templateCreateTemplateTemporaryValue2,
    ),
  );
}

export function templateCreateTemplateTemporaryValue2FromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryValue2' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryDirection$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryDirection> = z
    .nativeEnum(TemplateCreateTemplateTemporaryDirection);

/** @internal */
export const TemplateCreateTemplateTemporaryDirection$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryDirection> =
    TemplateCreateTemplateTemporaryDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryDirection$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryDirection$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryDirection$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryDirection$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryDirection$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaCheckbox,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: TemplateCreateTemplateTemporaryDirection$inboundSchema.default(
      "vertical",
    ),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateTemplateTemporaryValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaCheckbox
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: TemplateCreateTemplateTemporaryDirection$outboundSchema.default(
      "vertical",
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaCheckbox$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaCheckboxToJSON(
  templateCreateTemplateTemporaryFieldMetaCheckbox:
    TemplateCreateTemplateTemporaryFieldMetaCheckbox,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaCheckbox,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeRadio> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeRadio);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeRadio> =
    TemplateCreateTemplateTemporaryTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeRadio$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeRadio$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeRadio$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryValue1$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryValue1$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryValue1$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryValue1$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryValue1$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryValue1$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryValue1$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryValue1$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryValue1$Outbound;
}

export function templateCreateTemplateTemporaryValue1ToJSON(
  templateCreateTemplateTemporaryValue1: TemplateCreateTemplateTemporaryValue1,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryValue1$outboundSchema.parse(
      templateCreateTemplateTemporaryValue1,
    ),
  );
}

export function templateCreateTemplateTemporaryValue1FromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryValue1' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaRadio,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateTemplateTemporaryValue1$Outbound> | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaRadio
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateTemplateTemporaryValue1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaRadio$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaRadioToJSON(
  templateCreateTemplateTemporaryFieldMetaRadio:
    TemplateCreateTemplateTemporaryFieldMetaRadio,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaRadio,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaRadio,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeNumber> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeNumber);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeNumber> =
    TemplateCreateTemplateTemporaryTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeNumber$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeNumber$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeNumber$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign6$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign6> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign6);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign6$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign6> =
    TemplateCreateTemplateTemporaryTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign6$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign6$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign6$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign6$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign6$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaNumber,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeNumber$inboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign6$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaNumber
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeNumber$outboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaNumber$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaNumberToJSON(
  templateCreateTemplateTemporaryFieldMetaNumber:
    TemplateCreateTemplateTemporaryFieldMetaNumber,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaNumber,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeText$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeText> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeText);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeText$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeText> =
    TemplateCreateTemplateTemporaryTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeText$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeText$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeText$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeText$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign5$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign5> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign5);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign5$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign5> =
    TemplateCreateTemplateTemporaryTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign5$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign5$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign5$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign5$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign5$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign5$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaText$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaText
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaText$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaText$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaText$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaTextToJSON(
  templateCreateTemplateTemporaryFieldMetaText:
    TemplateCreateTemplateTemporaryFieldMetaText,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaText,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaText' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeDate> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeDate);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeDate> =
    TemplateCreateTemplateTemporaryTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeDate$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeDate$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeDate$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign4$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign4> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign4);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign4$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign4> =
    TemplateCreateTemplateTemporaryTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign4$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign4$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign4$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign4$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign4$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaDate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign4$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaDate$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaDate
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaDate$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaDate$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaDate$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaDateToJSON(
  templateCreateTemplateTemporaryFieldMetaDate:
    TemplateCreateTemplateTemporaryFieldMetaDate,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaDate,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaDate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeEmail> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeEmail);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeEmail> =
    TemplateCreateTemplateTemporaryTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeEmail$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeEmail$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeEmail$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign3$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign3> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign3);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign3$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign3> =
    TemplateCreateTemplateTemporaryTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign3$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign3$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign3$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign3$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaEmail,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign3$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaEmail
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaEmail$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaEmailToJSON(
  templateCreateTemplateTemporaryFieldMetaEmail:
    TemplateCreateTemplateTemporaryFieldMetaEmail,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaEmail,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaEmail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeName$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeName> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeName);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeName$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeName> =
    TemplateCreateTemplateTemporaryTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeName$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeName$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeName$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeName$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign2$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign2> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign2);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign2$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign2> =
    TemplateCreateTemplateTemporaryTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign2$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign2$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign2$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign2$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaName,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign2$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaName$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaName
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaName$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaName$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaName$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaNameToJSON(
  templateCreateTemplateTemporaryFieldMetaName:
    TemplateCreateTemplateTemporaryFieldMetaName,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaName,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaName' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeInitials> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTypeInitials);

/** @internal */
export const TemplateCreateTemplateTemporaryTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTypeInitials> =
    TemplateCreateTemplateTemporaryTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTypeInitials$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTypeInitials$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTypeInitials$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign1$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign1> = z
    .nativeEnum(TemplateCreateTemplateTemporaryTextAlign1);

/** @internal */
export const TemplateCreateTemplateTemporaryTextAlign1$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryTextAlign1> =
    TemplateCreateTemplateTemporaryTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryTextAlign1$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign1$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryTextAlign1$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryTextAlign1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryTextAlign1$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaInitials,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign1$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaInitials
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateTemplateTemporaryTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateTemplateTemporaryTextAlign1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaInitials$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound` instead. */
  export type Outbound =
    TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaInitialsToJSON(
  templateCreateTemplateTemporaryFieldMetaInitials:
    TemplateCreateTemplateTemporaryFieldMetaInitials,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaInitials,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaInitials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaUnion$inboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema
    ),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema),
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema
    ),
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema
    ),
  ]);

/** @internal */
export type TemplateCreateTemplateTemporaryFieldMetaUnion$Outbound =
  | TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaName$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaDate$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaText$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound
  | TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound;

/** @internal */
export const TemplateCreateTemplateTemporaryFieldMetaUnion$outboundSchema:
  z.ZodType<
    TemplateCreateTemplateTemporaryFieldMetaUnion$Outbound,
    z.ZodTypeDef,
    TemplateCreateTemplateTemporaryFieldMetaUnion
  > = z.union([
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema
    ),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema),
    z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema),
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFieldMetaUnion$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaUnion$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFieldMetaUnion$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFieldMetaUnion$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFieldMetaUnion$Outbound;
}

export function templateCreateTemplateTemporaryFieldMetaUnionToJSON(
  templateCreateTemplateTemporaryFieldMetaUnion:
    TemplateCreateTemplateTemporaryFieldMetaUnion,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFieldMetaUnion$outboundSchema.parse(
      templateCreateTemplateTemporaryFieldMetaUnion,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryFieldMetaUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFieldMetaUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryField$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryField,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateCreateTemplateTemporaryFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaInitials$inboundSchema
      ),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaName$inboundSchema),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaEmail$inboundSchema),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaDate$inboundSchema),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaText$inboundSchema),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaNumber$inboundSchema
      ),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaRadio$inboundSchema),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaCheckbox$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaDropdown$inboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryField$Outbound = {
  envelopeId: string;
  envelopeItemId: string;
  type: string;
  id: number;
  secondaryId: string;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateTemplateTemporaryFieldMetaInitials$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaName$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaEmail$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaDate$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaText$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaNumber$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaRadio$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaCheckbox$Outbound
    | TemplateCreateTemplateTemporaryFieldMetaDropdown$Outbound
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateCreateTemplateTemporaryField$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryField$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryField
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateCreateTemplateTemporaryFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaInitials$outboundSchema
      ),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaName$outboundSchema),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaEmail$outboundSchema
      ),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaDate$outboundSchema),
      z.lazy(() => TemplateCreateTemplateTemporaryFieldMetaText$outboundSchema),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaNumber$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaRadio$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaCheckbox$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateTemplateTemporaryFieldMetaDropdown$outboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryField$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryField$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryField$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryField$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryField$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryField$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryField$Outbound;
}

export function templateCreateTemplateTemporaryFieldToJSON(
  templateCreateTemplateTemporaryField: TemplateCreateTemplateTemporaryField,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryField$outboundSchema.parse(
      templateCreateTemplateTemporaryField,
    ),
  );
}

export function templateCreateTemplateTemporaryFieldFromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryField' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryFolderType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFolderType> = z
    .nativeEnum(TemplateCreateTemplateTemporaryFolderType);

/** @internal */
export const TemplateCreateTemplateTemporaryFolderType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFolderType> =
    TemplateCreateTemplateTemporaryFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFolderType$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFolderType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFolderType$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFolderType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFolderType$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFolderVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFolderVisibility> = z
    .nativeEnum(TemplateCreateTemplateTemporaryFolderVisibility);

/** @internal */
export const TemplateCreateTemplateTemporaryFolderVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateTemplateTemporaryFolderVisibility> =
    TemplateCreateTemplateTemporaryFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFolderVisibility$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFolderVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFolderVisibility$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFolderVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFolderVisibility$outboundSchema;
}

/** @internal */
export const TemplateCreateTemplateTemporaryFolder$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateCreateTemplateTemporaryFolderType$inboundSchema,
  visibility: TemplateCreateTemplateTemporaryFolderVisibility$inboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryFolder$Outbound = {
  id: string;
  name: string;
  type: string;
  visibility: string;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryFolder$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryFolder$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryFolder
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateCreateTemplateTemporaryFolderType$outboundSchema,
  visibility: TemplateCreateTemplateTemporaryFolderVisibility$outboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryFolder$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryFolder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryFolder$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFolder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryFolder$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryFolder$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryFolder$Outbound;
}

export function templateCreateTemplateTemporaryFolderToJSON(
  templateCreateTemplateTemporaryFolder: TemplateCreateTemplateTemporaryFolder,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryFolder$outboundSchema.parse(
      templateCreateTemplateTemporaryFolder,
    ),
  );
}

export function templateCreateTemplateTemporaryFolderFromJSON(
  jsonString: string,
): SafeParseResult<TemplateCreateTemplateTemporaryFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateTemplateTemporaryFolder' from JSON`,
  );
}

/** @internal */
export const Template$inboundSchema: z.ZodType<
  Template,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateCreateTemplateTemporaryTypeResponse$inboundSchema,
  visibility: TemplateCreateTemplateTemporaryVisibilityResponse$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryAuthOptions$inboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
  templateDocumentData: z.lazy(() =>
    TemplateCreateTemplateTemporaryTemplateDocumentData$inboundSchema
  ),
  templateMeta: z.lazy(() =>
    TemplateCreateTemplateTemporaryTemplateMeta$inboundSchema
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryDirectLink$inboundSchema),
  ),
  user: z.lazy(() => TemplateCreateTemplateTemporaryUser$inboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateCreateTemplateTemporaryRecipient$inboundSchema),
  ),
  fields: z.array(
    z.lazy(() => TemplateCreateTemplateTemporaryField$inboundSchema),
  ),
  folder: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryFolder$inboundSchema),
  ),
});

/** @internal */
export type Template$Outbound = {
  type: string;
  visibility: string;
  id: number;
  externalId: string | null;
  title: string;
  userId: number;
  teamId: number;
  authOptions: TemplateCreateTemplateTemporaryAuthOptions$Outbound | null;
  createdAt: string;
  updatedAt: string;
  publicTitle: string;
  publicDescription: string;
  folderId: string | null;
  envelopeId: string;
  templateDocumentDataId: string;
  templateDocumentData:
    TemplateCreateTemplateTemporaryTemplateDocumentData$Outbound;
  templateMeta: TemplateCreateTemplateTemporaryTemplateMeta$Outbound;
  directLink: TemplateCreateTemplateTemporaryDirectLink$Outbound | null;
  user: TemplateCreateTemplateTemporaryUser$Outbound;
  recipients: Array<TemplateCreateTemplateTemporaryRecipient$Outbound>;
  fields: Array<TemplateCreateTemplateTemporaryField$Outbound>;
  folder: TemplateCreateTemplateTemporaryFolder$Outbound | null;
};

/** @internal */
export const Template$outboundSchema: z.ZodType<
  Template$Outbound,
  z.ZodTypeDef,
  Template
> = z.object({
  type: TemplateCreateTemplateTemporaryTypeResponse$outboundSchema,
  visibility: TemplateCreateTemplateTemporaryVisibilityResponse$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  title: z.string(),
  userId: z.number(),
  teamId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryAuthOptions$outboundSchema),
  ),
  createdAt: z.string(),
  updatedAt: z.string(),
  publicTitle: z.string(),
  publicDescription: z.string(),
  folderId: z.nullable(z.string()),
  envelopeId: z.string(),
  templateDocumentDataId: z.string().default(""),
  templateDocumentData: z.lazy(() =>
    TemplateCreateTemplateTemporaryTemplateDocumentData$outboundSchema
  ),
  templateMeta: z.lazy(() =>
    TemplateCreateTemplateTemporaryTemplateMeta$outboundSchema
  ),
  directLink: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryDirectLink$outboundSchema),
  ),
  user: z.lazy(() => TemplateCreateTemplateTemporaryUser$outboundSchema),
  recipients: z.array(
    z.lazy(() => TemplateCreateTemplateTemporaryRecipient$outboundSchema),
  ),
  fields: z.array(
    z.lazy(() => TemplateCreateTemplateTemporaryField$outboundSchema),
  ),
  folder: z.nullable(
    z.lazy(() => TemplateCreateTemplateTemporaryFolder$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Template$ {
  /** @deprecated use `Template$inboundSchema` instead. */
  export const inboundSchema = Template$inboundSchema;
  /** @deprecated use `Template$outboundSchema` instead. */
  export const outboundSchema = Template$outboundSchema;
  /** @deprecated use `Template$Outbound` instead. */
  export type Outbound = Template$Outbound;
}

export function templateToJSON(template: Template): string {
  return JSON.stringify(Template$outboundSchema.parse(template));
}

export function templateFromJSON(
  jsonString: string,
): SafeParseResult<Template, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Template$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Template' from JSON`,
  );
}

/** @internal */
export const TemplateCreateTemplateTemporaryResponse$inboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  template: z.lazy(() => Template$inboundSchema),
  uploadUrl: z.string(),
});

/** @internal */
export type TemplateCreateTemplateTemporaryResponse$Outbound = {
  template: Template$Outbound;
  uploadUrl: string;
};

/** @internal */
export const TemplateCreateTemplateTemporaryResponse$outboundSchema: z.ZodType<
  TemplateCreateTemplateTemporaryResponse$Outbound,
  z.ZodTypeDef,
  TemplateCreateTemplateTemporaryResponse
> = z.object({
  template: z.lazy(() => Template$outboundSchema),
  uploadUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateTemplateTemporaryResponse$ {
  /** @deprecated use `TemplateCreateTemplateTemporaryResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateTemplateTemporaryResponse$inboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateTemplateTemporaryResponse$outboundSchema;
  /** @deprecated use `TemplateCreateTemplateTemporaryResponse$Outbound` instead. */
  export type Outbound = TemplateCreateTemplateTemporaryResponse$Outbound;
}

export function templateCreateTemplateTemporaryResponseToJSON(
  templateCreateTemplateTemporaryResponse:
    TemplateCreateTemplateTemporaryResponse,
): string {
  return JSON.stringify(
    TemplateCreateTemplateTemporaryResponse$outboundSchema.parse(
      templateCreateTemplateTemporaryResponse,
    ),
  );
}

export function templateCreateTemplateTemporaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateTemplateTemporaryResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateTemplateTemporaryResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateTemplateTemporaryResponse' from JSON`,
  );
}
