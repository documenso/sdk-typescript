/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentAttachmentFindRequest = {
  documentId: number;
};

export const DocumentAttachmentFindType = {
  Link: "link",
} as const;
export type DocumentAttachmentFindType = ClosedEnum<
  typeof DocumentAttachmentFindType
>;

export type DocumentAttachmentFindData = {
  id: string;
  type: DocumentAttachmentFindType;
  label: string;
  data: string;
};

/**
 * Successful response
 */
export type DocumentAttachmentFindResponse = {
  data: Array<DocumentAttachmentFindData>;
};

/** @internal */
export const DocumentAttachmentFindRequest$inboundSchema: z.ZodType<
  DocumentAttachmentFindRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
});

/** @internal */
export type DocumentAttachmentFindRequest$Outbound = {
  documentId: number;
};

/** @internal */
export const DocumentAttachmentFindRequest$outboundSchema: z.ZodType<
  DocumentAttachmentFindRequest$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindRequest
> = z.object({
  documentId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindRequest$ {
  /** @deprecated use `DocumentAttachmentFindRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentAttachmentFindRequest$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentAttachmentFindRequest$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindRequest$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindRequest$Outbound;
}

export function documentAttachmentFindRequestToJSON(
  documentAttachmentFindRequest: DocumentAttachmentFindRequest,
): string {
  return JSON.stringify(
    DocumentAttachmentFindRequest$outboundSchema.parse(
      documentAttachmentFindRequest,
    ),
  );
}

export function documentAttachmentFindRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAttachmentFindRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentAttachmentFindRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAttachmentFindRequest' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentFindType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentAttachmentFindType
> = z.nativeEnum(DocumentAttachmentFindType);

/** @internal */
export const DocumentAttachmentFindType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentAttachmentFindType
> = DocumentAttachmentFindType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindType$ {
  /** @deprecated use `DocumentAttachmentFindType$inboundSchema` instead. */
  export const inboundSchema = DocumentAttachmentFindType$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindType$outboundSchema` instead. */
  export const outboundSchema = DocumentAttachmentFindType$outboundSchema;
}

/** @internal */
export const DocumentAttachmentFindData$inboundSchema: z.ZodType<
  DocumentAttachmentFindData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: DocumentAttachmentFindType$inboundSchema,
  label: z.string(),
  data: z.string(),
});

/** @internal */
export type DocumentAttachmentFindData$Outbound = {
  id: string;
  type: string;
  label: string;
  data: string;
};

/** @internal */
export const DocumentAttachmentFindData$outboundSchema: z.ZodType<
  DocumentAttachmentFindData$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindData
> = z.object({
  id: z.string(),
  type: DocumentAttachmentFindType$outboundSchema,
  label: z.string(),
  data: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindData$ {
  /** @deprecated use `DocumentAttachmentFindData$inboundSchema` instead. */
  export const inboundSchema = DocumentAttachmentFindData$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindData$outboundSchema` instead. */
  export const outboundSchema = DocumentAttachmentFindData$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindData$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindData$Outbound;
}

export function documentAttachmentFindDataToJSON(
  documentAttachmentFindData: DocumentAttachmentFindData,
): string {
  return JSON.stringify(
    DocumentAttachmentFindData$outboundSchema.parse(documentAttachmentFindData),
  );
}

export function documentAttachmentFindDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAttachmentFindData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentAttachmentFindData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAttachmentFindData' from JSON`,
  );
}

/** @internal */
export const DocumentAttachmentFindResponse$inboundSchema: z.ZodType<
  DocumentAttachmentFindResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => DocumentAttachmentFindData$inboundSchema)),
});

/** @internal */
export type DocumentAttachmentFindResponse$Outbound = {
  data: Array<DocumentAttachmentFindData$Outbound>;
};

/** @internal */
export const DocumentAttachmentFindResponse$outboundSchema: z.ZodType<
  DocumentAttachmentFindResponse$Outbound,
  z.ZodTypeDef,
  DocumentAttachmentFindResponse
> = z.object({
  data: z.array(z.lazy(() => DocumentAttachmentFindData$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAttachmentFindResponse$ {
  /** @deprecated use `DocumentAttachmentFindResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentAttachmentFindResponse$inboundSchema;
  /** @deprecated use `DocumentAttachmentFindResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentAttachmentFindResponse$outboundSchema;
  /** @deprecated use `DocumentAttachmentFindResponse$Outbound` instead. */
  export type Outbound = DocumentAttachmentFindResponse$Outbound;
}

export function documentAttachmentFindResponseToJSON(
  documentAttachmentFindResponse: DocumentAttachmentFindResponse,
): string {
  return JSON.stringify(
    DocumentAttachmentFindResponse$outboundSchema.parse(
      documentAttachmentFindResponse,
    ),
  );
}

export function documentAttachmentFindResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAttachmentFindResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentAttachmentFindResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAttachmentFindResponse' from JSON`,
  );
}
