/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the document.
 */
export const DocumentUpdateVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the document.
 */
export type DocumentUpdateVisibilityRequest = ClosedEnum<
  typeof DocumentUpdateVisibilityRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentUpdateGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentUpdateGlobalAccessAuthRequest = ClosedEnum<
  typeof DocumentUpdateGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentUpdateGlobalActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentUpdateGlobalActionAuthRequest = ClosedEnum<
  typeof DocumentUpdateGlobalActionAuthRequest
>;

export type DocumentUpdateData = {
  /**
   * The title of the document.
   */
  title?: string | undefined;
  /**
   * The external ID of the document.
   */
  externalId?: string | null | undefined;
  /**
   * The visibility of the document.
   */
  visibility?: DocumentUpdateVisibilityRequest | undefined;
  globalAccessAuth?: Array<DocumentUpdateGlobalAccessAuthRequest> | undefined;
  globalActionAuth?: Array<DocumentUpdateGlobalActionAuthRequest> | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentUpdateDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  DdMMYyyyHHMM: "dd.MM.yyyy HH:mm",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentUpdateDateFormat = ClosedEnum<
  typeof DocumentUpdateDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentUpdateDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentUpdateDistributionMethod = ClosedEnum<
  typeof DocumentUpdateDistributionMethod
>;

export const DocumentUpdateSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentUpdateSigningOrder = ClosedEnum<
  typeof DocumentUpdateSigningOrder
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentUpdateLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentUpdateLanguage = ClosedEnum<typeof DocumentUpdateLanguage>;

export type DocumentUpdateEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentUpdateMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentUpdateDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: DocumentUpdateDistributionMethod | undefined;
  signingOrder?: DocumentUpdateSigningOrder | undefined;
  allowDictateNextSigner?: boolean | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentUpdateLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?: DocumentUpdateEmailSettings | undefined;
};

export type DocumentUpdateRequest = {
  documentId: number;
  data?: DocumentUpdateData | undefined;
  meta?: DocumentUpdateMeta | undefined;
};

export const DocumentUpdateVisibilityResponse = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentUpdateVisibilityResponse = ClosedEnum<
  typeof DocumentUpdateVisibilityResponse
>;

export const DocumentUpdateStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentUpdateStatus = ClosedEnum<typeof DocumentUpdateStatus>;

export const DocumentUpdateSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentUpdateSource = ClosedEnum<typeof DocumentUpdateSource>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentUpdateGlobalAccessAuthResponse = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentUpdateGlobalAccessAuthResponse = ClosedEnum<
  typeof DocumentUpdateGlobalAccessAuthResponse
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentUpdateGlobalActionAuthResponse = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentUpdateGlobalActionAuthResponse = ClosedEnum<
  typeof DocumentUpdateGlobalActionAuthResponse
>;

export type DocumentUpdateAuthOptions = {
  globalAccessAuth: Array<DocumentUpdateGlobalAccessAuthResponse>;
  globalActionAuth: Array<DocumentUpdateGlobalActionAuthResponse>;
};

export type DocumentUpdateFormValues = string | boolean | number;

/**
 * Successful response
 */
export type DocumentUpdateResponse = {
  visibility: DocumentUpdateVisibilityResponse;
  status: DocumentUpdateStatus;
  source: DocumentUpdateSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentUpdateAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentUpdateVisibilityRequest$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateVisibilityRequest
> = z.nativeEnum(DocumentUpdateVisibilityRequest);

/** @internal */
export const DocumentUpdateVisibilityRequest$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateVisibilityRequest
> = DocumentUpdateVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateVisibilityRequest$ {
  /** @deprecated use `DocumentUpdateVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateVisibilityRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateVisibilityRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalAccessAuthRequest> = z.nativeEnum(
    DocumentUpdateGlobalAccessAuthRequest,
  );

/** @internal */
export const DocumentUpdateGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalAccessAuthRequest> =
    DocumentUpdateGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateGlobalAccessAuthRequest$ {
  /** @deprecated use `DocumentUpdateGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateGlobalActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalActionAuthRequest> = z.nativeEnum(
    DocumentUpdateGlobalActionAuthRequest,
  );

/** @internal */
export const DocumentUpdateGlobalActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalActionAuthRequest> =
    DocumentUpdateGlobalActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateGlobalActionAuthRequest$ {
  /** @deprecated use `DocumentUpdateGlobalActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateGlobalActionAuthRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateGlobalActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateGlobalActionAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentUpdateData$inboundSchema: z.ZodType<
  DocumentUpdateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: DocumentUpdateVisibilityRequest$inboundSchema.optional(),
  globalAccessAuth: z.array(DocumentUpdateGlobalAccessAuthRequest$inboundSchema)
    .optional(),
  globalActionAuth: z.array(DocumentUpdateGlobalActionAuthRequest$inboundSchema)
    .optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/** @internal */
export type DocumentUpdateData$Outbound = {
  title?: string | undefined;
  externalId?: string | null | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: Array<string> | undefined;
  globalActionAuth?: Array<string> | undefined;
  useLegacyFieldInsertion?: boolean | undefined;
};

/** @internal */
export const DocumentUpdateData$outboundSchema: z.ZodType<
  DocumentUpdateData$Outbound,
  z.ZodTypeDef,
  DocumentUpdateData
> = z.object({
  title: z.string().optional(),
  externalId: z.nullable(z.string()).optional(),
  visibility: DocumentUpdateVisibilityRequest$outboundSchema.optional(),
  globalAccessAuth: z.array(
    DocumentUpdateGlobalAccessAuthRequest$outboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    DocumentUpdateGlobalActionAuthRequest$outboundSchema,
  ).optional(),
  useLegacyFieldInsertion: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateData$ {
  /** @deprecated use `DocumentUpdateData$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateData$inboundSchema;
  /** @deprecated use `DocumentUpdateData$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateData$outboundSchema;
  /** @deprecated use `DocumentUpdateData$Outbound` instead. */
  export type Outbound = DocumentUpdateData$Outbound;
}

export function documentUpdateDataToJSON(
  documentUpdateData: DocumentUpdateData,
): string {
  return JSON.stringify(
    DocumentUpdateData$outboundSchema.parse(documentUpdateData),
  );
}

export function documentUpdateDataFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateData' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateDateFormat$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDateFormat
> = z.nativeEnum(DocumentUpdateDateFormat);

/** @internal */
export const DocumentUpdateDateFormat$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDateFormat
> = DocumentUpdateDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDateFormat$ {
  /** @deprecated use `DocumentUpdateDateFormat$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDateFormat$inboundSchema;
  /** @deprecated use `DocumentUpdateDateFormat$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDateFormat$outboundSchema;
}

/** @internal */
export const DocumentUpdateDistributionMethod$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDistributionMethod
> = z.nativeEnum(DocumentUpdateDistributionMethod);

/** @internal */
export const DocumentUpdateDistributionMethod$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateDistributionMethod
> = DocumentUpdateDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateDistributionMethod$ {
  /** @deprecated use `DocumentUpdateDistributionMethod$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentUpdateDistributionMethod$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentUpdateSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateSigningOrder
> = z.nativeEnum(DocumentUpdateSigningOrder);

/** @internal */
export const DocumentUpdateSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateSigningOrder
> = DocumentUpdateSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateSigningOrder$ {
  /** @deprecated use `DocumentUpdateSigningOrder$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateSigningOrder$inboundSchema;
  /** @deprecated use `DocumentUpdateSigningOrder$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentUpdateLanguage$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateLanguage
> = z.nativeEnum(DocumentUpdateLanguage);

/** @internal */
export const DocumentUpdateLanguage$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateLanguage
> = DocumentUpdateLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateLanguage$ {
  /** @deprecated use `DocumentUpdateLanguage$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateLanguage$inboundSchema;
  /** @deprecated use `DocumentUpdateLanguage$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateLanguage$outboundSchema;
}

/** @internal */
export const DocumentUpdateEmailSettings$inboundSchema: z.ZodType<
  DocumentUpdateEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentUpdateEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentUpdateEmailSettings$outboundSchema: z.ZodType<
  DocumentUpdateEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentUpdateEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateEmailSettings$ {
  /** @deprecated use `DocumentUpdateEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateEmailSettings$inboundSchema;
  /** @deprecated use `DocumentUpdateEmailSettings$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateEmailSettings$outboundSchema;
  /** @deprecated use `DocumentUpdateEmailSettings$Outbound` instead. */
  export type Outbound = DocumentUpdateEmailSettings$Outbound;
}

export function documentUpdateEmailSettingsToJSON(
  documentUpdateEmailSettings: DocumentUpdateEmailSettings,
): string {
  return JSON.stringify(
    DocumentUpdateEmailSettings$outboundSchema.parse(
      documentUpdateEmailSettings,
    ),
  );
}

export function documentUpdateEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateMeta$inboundSchema: z.ZodType<
  DocumentUpdateMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentUpdateDateFormat$inboundSchema.optional(),
  distributionMethod: DocumentUpdateDistributionMethod$inboundSchema.optional(),
  signingOrder: DocumentUpdateSigningOrder$inboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
  redirectUrl: z.string().optional(),
  language: DocumentUpdateLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() => DocumentUpdateEmailSettings$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentUpdateMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  signingOrder?: string | undefined;
  allowDictateNextSigner?: boolean | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  emailId?: string | null | undefined;
  emailReplyTo?: string | null | undefined;
  emailSettings?: DocumentUpdateEmailSettings$Outbound | undefined;
};

/** @internal */
export const DocumentUpdateMeta$outboundSchema: z.ZodType<
  DocumentUpdateMeta$Outbound,
  z.ZodTypeDef,
  DocumentUpdateMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentUpdateDateFormat$outboundSchema.optional(),
  distributionMethod: DocumentUpdateDistributionMethod$outboundSchema
    .optional(),
  signingOrder: DocumentUpdateSigningOrder$outboundSchema.optional(),
  allowDictateNextSigner: z.boolean().optional(),
  redirectUrl: z.string().optional(),
  language: DocumentUpdateLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  emailId: z.nullable(z.string()).optional(),
  emailReplyTo: z.nullable(z.string()).optional(),
  emailSettings: z.lazy(() => DocumentUpdateEmailSettings$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateMeta$ {
  /** @deprecated use `DocumentUpdateMeta$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateMeta$inboundSchema;
  /** @deprecated use `DocumentUpdateMeta$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateMeta$outboundSchema;
  /** @deprecated use `DocumentUpdateMeta$Outbound` instead. */
  export type Outbound = DocumentUpdateMeta$Outbound;
}

export function documentUpdateMetaToJSON(
  documentUpdateMeta: DocumentUpdateMeta,
): string {
  return JSON.stringify(
    DocumentUpdateMeta$outboundSchema.parse(documentUpdateMeta),
  );
}

export function documentUpdateMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateMeta' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateRequest$inboundSchema: z.ZodType<
  DocumentUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.number(),
  data: z.lazy(() => DocumentUpdateData$inboundSchema).optional(),
  meta: z.lazy(() => DocumentUpdateMeta$inboundSchema).optional(),
});

/** @internal */
export type DocumentUpdateRequest$Outbound = {
  documentId: number;
  data?: DocumentUpdateData$Outbound | undefined;
  meta?: DocumentUpdateMeta$Outbound | undefined;
};

/** @internal */
export const DocumentUpdateRequest$outboundSchema: z.ZodType<
  DocumentUpdateRequest$Outbound,
  z.ZodTypeDef,
  DocumentUpdateRequest
> = z.object({
  documentId: z.number(),
  data: z.lazy(() => DocumentUpdateData$outboundSchema).optional(),
  meta: z.lazy(() => DocumentUpdateMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateRequest$ {
  /** @deprecated use `DocumentUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateRequest$inboundSchema;
  /** @deprecated use `DocumentUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateRequest$outboundSchema;
  /** @deprecated use `DocumentUpdateRequest$Outbound` instead. */
  export type Outbound = DocumentUpdateRequest$Outbound;
}

export function documentUpdateRequestToJSON(
  documentUpdateRequest: DocumentUpdateRequest,
): string {
  return JSON.stringify(
    DocumentUpdateRequest$outboundSchema.parse(documentUpdateRequest),
  );
}

export function documentUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateRequest' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateVisibilityResponse$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateVisibilityResponse
> = z.nativeEnum(DocumentUpdateVisibilityResponse);

/** @internal */
export const DocumentUpdateVisibilityResponse$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateVisibilityResponse
> = DocumentUpdateVisibilityResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateVisibilityResponse$ {
  /** @deprecated use `DocumentUpdateVisibilityResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateVisibilityResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateVisibilityResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateVisibilityResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateStatus$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateStatus
> = z.nativeEnum(DocumentUpdateStatus);

/** @internal */
export const DocumentUpdateStatus$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateStatus
> = DocumentUpdateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateStatus$ {
  /** @deprecated use `DocumentUpdateStatus$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateStatus$inboundSchema;
  /** @deprecated use `DocumentUpdateStatus$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateStatus$outboundSchema;
}

/** @internal */
export const DocumentUpdateSource$inboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateSource
> = z.nativeEnum(DocumentUpdateSource);

/** @internal */
export const DocumentUpdateSource$outboundSchema: z.ZodNativeEnum<
  typeof DocumentUpdateSource
> = DocumentUpdateSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateSource$ {
  /** @deprecated use `DocumentUpdateSource$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateSource$inboundSchema;
  /** @deprecated use `DocumentUpdateSource$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateSource$outboundSchema;
}

/** @internal */
export const DocumentUpdateGlobalAccessAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalAccessAuthResponse> = z.nativeEnum(
    DocumentUpdateGlobalAccessAuthResponse,
  );

/** @internal */
export const DocumentUpdateGlobalAccessAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalAccessAuthResponse> =
    DocumentUpdateGlobalAccessAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateGlobalAccessAuthResponse$ {
  /** @deprecated use `DocumentUpdateGlobalAccessAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateGlobalAccessAuthResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateGlobalAccessAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateGlobalAccessAuthResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateGlobalActionAuthResponse$inboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalActionAuthResponse> = z.nativeEnum(
    DocumentUpdateGlobalActionAuthResponse,
  );

/** @internal */
export const DocumentUpdateGlobalActionAuthResponse$outboundSchema:
  z.ZodNativeEnum<typeof DocumentUpdateGlobalActionAuthResponse> =
    DocumentUpdateGlobalActionAuthResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateGlobalActionAuthResponse$ {
  /** @deprecated use `DocumentUpdateGlobalActionAuthResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentUpdateGlobalActionAuthResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateGlobalActionAuthResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentUpdateGlobalActionAuthResponse$outboundSchema;
}

/** @internal */
export const DocumentUpdateAuthOptions$inboundSchema: z.ZodType<
  DocumentUpdateAuthOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  globalAccessAuth: z.array(
    DocumentUpdateGlobalAccessAuthResponse$inboundSchema,
  ),
  globalActionAuth: z.array(
    DocumentUpdateGlobalActionAuthResponse$inboundSchema,
  ),
});

/** @internal */
export type DocumentUpdateAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentUpdateAuthOptions$outboundSchema: z.ZodType<
  DocumentUpdateAuthOptions$Outbound,
  z.ZodTypeDef,
  DocumentUpdateAuthOptions
> = z.object({
  globalAccessAuth: z.array(
    DocumentUpdateGlobalAccessAuthResponse$outboundSchema,
  ),
  globalActionAuth: z.array(
    DocumentUpdateGlobalActionAuthResponse$outboundSchema,
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateAuthOptions$ {
  /** @deprecated use `DocumentUpdateAuthOptions$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateAuthOptions$inboundSchema;
  /** @deprecated use `DocumentUpdateAuthOptions$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateAuthOptions$outboundSchema;
  /** @deprecated use `DocumentUpdateAuthOptions$Outbound` instead. */
  export type Outbound = DocumentUpdateAuthOptions$Outbound;
}

export function documentUpdateAuthOptionsToJSON(
  documentUpdateAuthOptions: DocumentUpdateAuthOptions,
): string {
  return JSON.stringify(
    DocumentUpdateAuthOptions$outboundSchema.parse(documentUpdateAuthOptions),
  );
}

export function documentUpdateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateAuthOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateAuthOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateFormValues$inboundSchema: z.ZodType<
  DocumentUpdateFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentUpdateFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentUpdateFormValues$outboundSchema: z.ZodType<
  DocumentUpdateFormValues$Outbound,
  z.ZodTypeDef,
  DocumentUpdateFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateFormValues$ {
  /** @deprecated use `DocumentUpdateFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateFormValues$inboundSchema;
  /** @deprecated use `DocumentUpdateFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateFormValues$outboundSchema;
  /** @deprecated use `DocumentUpdateFormValues$Outbound` instead. */
  export type Outbound = DocumentUpdateFormValues$Outbound;
}

export function documentUpdateFormValuesToJSON(
  documentUpdateFormValues: DocumentUpdateFormValues,
): string {
  return JSON.stringify(
    DocumentUpdateFormValues$outboundSchema.parse(documentUpdateFormValues),
  );
}

export function documentUpdateFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentUpdateResponse$inboundSchema: z.ZodType<
  DocumentUpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentUpdateVisibilityResponse$inboundSchema,
  status: DocumentUpdateStatus$inboundSchema,
  source: DocumentUpdateSource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentUpdateAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/** @internal */
export type DocumentUpdateResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentUpdateAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  templateId: number | null;
  folderId: string | null;
  useLegacyFieldInsertion: boolean;
};

/** @internal */
export const DocumentUpdateResponse$outboundSchema: z.ZodType<
  DocumentUpdateResponse$Outbound,
  z.ZodTypeDef,
  DocumentUpdateResponse
> = z.object({
  visibility: DocumentUpdateVisibilityResponse$outboundSchema,
  status: DocumentUpdateStatus$outboundSchema,
  source: DocumentUpdateSource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentUpdateAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.number(),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  useLegacyFieldInsertion: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentUpdateResponse$ {
  /** @deprecated use `DocumentUpdateResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentUpdateResponse$inboundSchema;
  /** @deprecated use `DocumentUpdateResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentUpdateResponse$outboundSchema;
  /** @deprecated use `DocumentUpdateResponse$Outbound` instead. */
  export type Outbound = DocumentUpdateResponse$Outbound;
}

export function documentUpdateResponseToJSON(
  documentUpdateResponse: DocumentUpdateResponse,
): string {
  return JSON.stringify(
    DocumentUpdateResponse$outboundSchema.parse(documentUpdateResponse),
  );
}

export function documentUpdateResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentUpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentUpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentUpdateResponse' from JSON`,
  );
}
