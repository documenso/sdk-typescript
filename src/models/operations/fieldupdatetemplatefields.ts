/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type =
  {
    Dropdown: "DROPDOWN",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues = {
  value: string;
};

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType;
    values?:
      | Array<FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues>
      | undefined;
    defaultValue?: string | undefined;
  };

export type FieldUpdateTemplateFieldsFields11 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type =
  {
    Checkbox: "CHECKBOX",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType;
    values?:
      | Array<FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

export type FieldUpdateTemplateFieldsFields10 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type =
  {
    Radio: "RADIO",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType =
  {
    Radio: "radio",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType;
    values?: Array<FieldUpdateTemplateFieldsFieldsValues> | undefined;
  };

export type FieldUpdateTemplateFieldsFields9 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type =
  {
    Number: "NUMBER",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType =
  {
    Number: "number",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldUpdateTemplateFieldsFields8 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type =
  {
    Text: "TEXT",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType =
  {
    Text: "text",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

export type FieldUpdateTemplateFieldsFields7 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type =
  {
    Date: "DATE",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType =
  {
    Date: "date",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType;
    fontSize?: number | undefined;
  };

export type FieldUpdateTemplateFieldsFields6 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type =
  {
    Email: "EMAIL",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType =
  {
    Email: "email",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldUpdateTemplateFieldsFields5 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type =
  {
    Name: "NAME",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  >;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType =
  {
    Name: "name",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  >;

export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType;
  fontSize?: number | undefined;
};

export type FieldUpdateTemplateFieldsFields4 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta
    | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType = {
  Initials: "INITIALS",
} as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType =
  ClosedEnum<typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType>;

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType =
  {
    Initials: "initials",
  } as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  >;

export type FieldUpdateTemplateFieldsFieldsFieldMeta = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType;
  fontSize?: number | undefined;
};

export type FieldUpdateTemplateFieldsFields3 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType;
  fieldMeta?: FieldUpdateTemplateFieldsFieldsFieldMeta | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsType = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsType = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsType
>;

export type FieldUpdateTemplateFieldsFields2 = {
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsType;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldsType = {
  Signature: "SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldsFieldsType = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldsType
>;

export type FieldUpdateTemplateFieldsFields1 = {
  type: FieldUpdateTemplateFieldsFieldsType;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export type FieldUpdateTemplateFieldsFields =
  | FieldUpdateTemplateFieldsFields1
  | FieldUpdateTemplateFieldsFields2
  | FieldUpdateTemplateFieldsFields3
  | FieldUpdateTemplateFieldsFields4
  | FieldUpdateTemplateFieldsFields5
  | FieldUpdateTemplateFieldsFields6
  | FieldUpdateTemplateFieldsFields7
  | FieldUpdateTemplateFieldsFields8
  | FieldUpdateTemplateFieldsFields9
  | FieldUpdateTemplateFieldsFields10
  | FieldUpdateTemplateFieldsFields11;

export type FieldUpdateTemplateFieldsRequestBody = {
  templateId: number;
  fields: Array<
    | FieldUpdateTemplateFieldsFields1
    | FieldUpdateTemplateFieldsFields2
    | FieldUpdateTemplateFieldsFields3
    | FieldUpdateTemplateFieldsFields4
    | FieldUpdateTemplateFieldsFields5
    | FieldUpdateTemplateFieldsFields6
    | FieldUpdateTemplateFieldsFields7
    | FieldUpdateTemplateFieldsFields8
    | FieldUpdateTemplateFieldsFields9
    | FieldUpdateTemplateFieldsFields10
    | FieldUpdateTemplateFieldsFields11
  >;
};

export const FieldUpdateTemplateFieldsType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldUpdateTemplateFieldsType = ClosedEnum<
  typeof FieldUpdateTemplateFieldsType
>;

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  >;

export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues = {
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type;
  values?:
    | Array<FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  >;

export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type;
  values?:
    | Array<FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  {
    Radio: "radio",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  >;

export type FieldUpdateTemplateFieldsFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType;
  values?: Array<FieldUpdateTemplateFieldsFieldMetaValues> | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  >;

export type FieldUpdateTemplateFieldsFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  >;

export type FieldUpdateTemplateFieldsFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type =
  {
    Date: "date",
  } as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  >;

export type FieldUpdateTemplateFieldsFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type;
  fontSize?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType = {
  Email: "email",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType =
  ClosedEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  >;

export type FieldUpdateTemplateFieldsFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType;
  fontSize?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType = {
  Name: "name",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType
>;

export type FieldUpdateTemplateFieldsFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType;
  fontSize?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaType = {
  Initials: "initials",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaType = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaType
>;

export type FieldUpdateTemplateFieldsFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaType;
  fontSize?: number | undefined;
};

export type FieldUpdateTemplateFieldsFieldMeta =
  | FieldUpdateTemplateFieldsFieldMeta1
  | FieldUpdateTemplateFieldsFieldMeta2
  | FieldUpdateTemplateFieldsFieldMeta3
  | FieldUpdateTemplateFieldsFieldMeta4
  | FieldUpdateTemplateFieldsFieldMeta7
  | FieldUpdateTemplateFieldsFieldMeta9
  | FieldUpdateTemplateFieldsFieldMeta5
  | FieldUpdateTemplateFieldsFieldMeta8
  | FieldUpdateTemplateFieldsFieldMeta6;

export type FieldUpdateTemplateFieldsTemplatesFieldsFields = {
  type: FieldUpdateTemplateFieldsType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldsFieldMeta1
    | FieldUpdateTemplateFieldsFieldMeta2
    | FieldUpdateTemplateFieldsFieldMeta3
    | FieldUpdateTemplateFieldsFieldMeta4
    | FieldUpdateTemplateFieldsFieldMeta7
    | FieldUpdateTemplateFieldsFieldMeta9
    | FieldUpdateTemplateFieldsFieldMeta5
    | FieldUpdateTemplateFieldsFieldMeta8
    | FieldUpdateTemplateFieldsFieldMeta6
    | null;
};

/**
 * Successful response
 */
export type FieldUpdateTemplateFieldsResponseBody = {
  fields: Array<FieldUpdateTemplateFieldsTemplatesFieldsFields>;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValuesToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema
      .parse(fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<
        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$Outbound
      >
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields11$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields11,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields11$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields11$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields11$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields11
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody11FieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields11$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields11$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields11$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields11$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFields11$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields11$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields11$Outbound;
}

export function fieldUpdateTemplateFieldsFields11ToJSON(
  fieldUpdateTemplateFieldsFields11: FieldUpdateTemplateFieldsFields11,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields11$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields11,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields11FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields11' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsValuesToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsValues:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldsTemplatesFieldsValues,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$inboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$Outbound>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldsTemplatesFieldsValues$outboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields10$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields10,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields10$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields10$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields10$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields10
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody10FieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields10$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields10$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields10$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields10$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFields10$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields10$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields10$Outbound;
}

export function fieldUpdateTemplateFieldsFields10ToJSON(
  fieldUpdateTemplateFieldsFields10: FieldUpdateTemplateFieldsFields10,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields10$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields10,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields10FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields10, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields10$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields10' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsValues$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldsValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldsValues$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldsValues$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldsValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsValues$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldsValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsValuesToJSON(
  fieldUpdateTemplateFieldsFieldsValues: FieldUpdateTemplateFieldsFieldsValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsValues$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldsValues,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldsValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsFieldsValues$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?: Array<FieldUpdateTemplateFieldsFieldsValues$Outbound> | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaType$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsFieldsValues$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields9$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields9,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields9$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields9$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields9$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields9
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody9FieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields9$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields9$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields9$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields9$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields9$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields9$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields9$Outbound;
}

export function fieldUpdateTemplateFieldsFields9ToJSON(
  fieldUpdateTemplateFieldsFields9: FieldUpdateTemplateFieldsFields9,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields9$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields9,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields9FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields9' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    numberFormat?: string | undefined;
    value?: string | undefined;
    minValue?: number | undefined;
    maxValue?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields8$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields8,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields8$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields8$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields8$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields8
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody8FieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields8$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields8$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields8$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields8$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields8$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields8$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields8$Outbound;
}

export function fieldUpdateTemplateFieldsFields8ToJSON(
  fieldUpdateTemplateFieldsFields8: FieldUpdateTemplateFieldsFields8,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields8$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields8,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields8FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields8' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    text?: string | undefined;
    characterLimit?: number | undefined;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields7$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields7$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields7$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields7$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields7
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody7FieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields7$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields7$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields7$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields7$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields7$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields7$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields7$Outbound;
}

export function fieldUpdateTemplateFieldsFields7ToJSON(
  fieldUpdateTemplateFieldsFields7: FieldUpdateTemplateFieldsFields7,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields7$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields7,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields7FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields7' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
      .parse(
        fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
      ),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields6$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields6$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields6$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields6$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields6
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody6Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyFieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields6$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields6$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields6$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields6$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields6$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields6$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields6$Outbound;
}

export function fieldUpdateTemplateFieldsFields6ToJSON(
  fieldUpdateTemplateFieldsFields6: FieldUpdateTemplateFieldsFields6,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields6$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields6,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields6FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields6' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema
      .parse(fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields5$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields5$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields5$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields5$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields5
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody5Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestFieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields5$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields5$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields5$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields5$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields5$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields5$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields5$Outbound;
}

export function fieldUpdateTemplateFieldsFields5ToJSON(
  fieldUpdateTemplateFieldsFields5: FieldUpdateTemplateFieldsFields5,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields5$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields5,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields5FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields5' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4FieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema
      .parse(fieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta),
  );
}

export function fieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields4$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields4$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields4$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields4$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields4
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBody4Type$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsFieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields4$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields4$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields4$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields4$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields4$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields4$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields4$Outbound;
}

export function fieldUpdateTemplateFieldsFields4ToJSON(
  fieldUpdateTemplateFieldsFields4: FieldUpdateTemplateFieldsFields4,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields4$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields4,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields4FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields4' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType
  > = z.nativeEnum(FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType);

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType
  > = FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType
  > =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldsFieldMeta$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldsFieldMeta
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestRequestBodyType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsFieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldsFieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsFieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldsFieldMeta:
    FieldUpdateTemplateFieldsFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldsFieldMeta$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldsFieldMeta,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldsFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldsFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields3$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsFieldMeta$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields3$Outbound = {
  type: string;
  fieldMeta?: FieldUpdateTemplateFieldsFieldsFieldMeta$Outbound | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields3$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields3$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields3
> = z.object({
  type:
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsRequestType$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldsFieldMeta$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields3$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields3$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields3$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields3$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields3$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields3$Outbound;
}

export function fieldUpdateTemplateFieldsFields3ToJSON(
  fieldUpdateTemplateFieldsFields3: FieldUpdateTemplateFieldsFields3,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields3$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields3,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields3FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields3' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsType> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldsTemplatesFieldsType);

/** @internal */
export const FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldsTemplatesFieldsType> =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFields2$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$inboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields2$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields2$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields2$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields2
> = z.object({
  type: FieldUpdateTemplateFieldsFieldsTemplatesFieldsType$outboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields2$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields2$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields2$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields2$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields2$Outbound;
}

export function fieldUpdateTemplateFieldsFields2ToJSON(
  fieldUpdateTemplateFieldsFields2: FieldUpdateTemplateFieldsFields2,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields2$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields2,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields2FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields2' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldUpdateTemplateFieldsFieldsType
> = z.nativeEnum(FieldUpdateTemplateFieldsFieldsType);

/** @internal */
export const FieldUpdateTemplateFieldsFieldsType$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldsType> =
    FieldUpdateTemplateFieldsFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldsType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldsType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldsType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFields1$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsFieldsType$inboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFields1$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFields1$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields1$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields1
> = z.object({
  type: FieldUpdateTemplateFieldsFieldsType$outboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields1$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields1$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields1$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields1$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields1$Outbound;
}

export function fieldUpdateTemplateFieldsFields1ToJSON(
  fieldUpdateTemplateFieldsFields1: FieldUpdateTemplateFieldsFields1,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields1$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields1,
    ),
  );
}

export function fieldUpdateTemplateFieldsFields1FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields1' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFields$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFields1$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields2$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields3$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields4$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields5$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields6$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields7$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields8$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields9$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields10$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields11$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldsFields$Outbound =
  | FieldUpdateTemplateFieldsFields1$Outbound
  | FieldUpdateTemplateFieldsFields2$Outbound
  | FieldUpdateTemplateFieldsFields3$Outbound
  | FieldUpdateTemplateFieldsFields4$Outbound
  | FieldUpdateTemplateFieldsFields5$Outbound
  | FieldUpdateTemplateFieldsFields6$Outbound
  | FieldUpdateTemplateFieldsFields7$Outbound
  | FieldUpdateTemplateFieldsFields8$Outbound
  | FieldUpdateTemplateFieldsFields9$Outbound
  | FieldUpdateTemplateFieldsFields10$Outbound
  | FieldUpdateTemplateFieldsFields11$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldsFields$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFields$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFields
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFields1$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields2$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields3$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields4$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields5$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields6$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields7$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields8$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields9$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields10$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFields11$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFields$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFields$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFields$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsFields$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFields$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFields$Outbound;
}

export function fieldUpdateTemplateFieldsFieldsToJSON(
  fieldUpdateTemplateFieldsFields: FieldUpdateTemplateFieldsFields,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFields$outboundSchema.parse(
      fieldUpdateTemplateFieldsFields,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFields, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsFields$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsRequestBody$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldUpdateTemplateFieldsFields1$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields2$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields3$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields4$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields5$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields6$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields7$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields8$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields9$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields10$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields11$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldsRequestBody$Outbound = {
  templateId: number;
  fields: Array<
    | FieldUpdateTemplateFieldsFields1$Outbound
    | FieldUpdateTemplateFieldsFields2$Outbound
    | FieldUpdateTemplateFieldsFields3$Outbound
    | FieldUpdateTemplateFieldsFields4$Outbound
    | FieldUpdateTemplateFieldsFields5$Outbound
    | FieldUpdateTemplateFieldsFields6$Outbound
    | FieldUpdateTemplateFieldsFields7$Outbound
    | FieldUpdateTemplateFieldsFields8$Outbound
    | FieldUpdateTemplateFieldsFields9$Outbound
    | FieldUpdateTemplateFieldsFields10$Outbound
    | FieldUpdateTemplateFieldsFields11$Outbound
  >;
};

/** @internal */
export const FieldUpdateTemplateFieldsRequestBody$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsRequestBody$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsRequestBody
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldUpdateTemplateFieldsFields1$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields2$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields3$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields4$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields5$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields6$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields7$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields8$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields9$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields10$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFields11$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsRequestBody$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsRequestBodyToJSON(
  fieldUpdateTemplateFieldsRequestBody: FieldUpdateTemplateFieldsRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsType$inboundSchema: z.ZodNativeEnum<
  typeof FieldUpdateTemplateFieldsType
> = z.nativeEnum(FieldUpdateTemplateFieldsType);

/** @internal */
export const FieldUpdateTemplateFieldsType$outboundSchema: z.ZodNativeEnum<
  typeof FieldUpdateTemplateFieldsType
> = FieldUpdateTemplateFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsType$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsType$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesToJSON(
  fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema
      .parse(fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta9$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta9,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$inboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta9$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta9$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta9
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseValues$outboundSchema
    ),
  ).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta9$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta9$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta9$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta9$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta9$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta9$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta9ToJSON(
  fieldUpdateTemplateFieldsFieldMeta9: FieldUpdateTemplateFieldsFieldMeta9,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta9$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta9,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta9, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta9$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta9' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValuesToJSON(
  fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema
      .parse(fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta8$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta8,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$inboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta8$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta8$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta8
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema,
  values: z.array(
    z.lazy(() =>
      FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsValues$outboundSchema
    ),
  ).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta8$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta8$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta8$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta8$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta8$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta8$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta8ToJSON(
  fieldUpdateTemplateFieldsFieldMeta8: FieldUpdateTemplateFieldsFieldMeta8,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta8$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta8,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta8, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta8$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta8' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaValues$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMetaValues,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaValues$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMetaValues$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMetaValues
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaValues$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaValues$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaValues$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaValues$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMetaValues$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaValuesToJSON(
  fieldUpdateTemplateFieldsFieldMetaValues:
    FieldUpdateTemplateFieldsFieldMetaValues,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaValues$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaValues,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta7$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta7,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema,
  values: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsFieldMetaValues$inboundSchema),
  ).optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsFieldMetaValues$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta7$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta7$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta7
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema,
  values: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsFieldMetaValues$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta7$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta7$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta7$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta7$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta7$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta7$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta7ToJSON(
  fieldUpdateTemplateFieldsFieldMeta7: FieldUpdateTemplateFieldsFieldMeta7,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta7$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta7,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta7' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta6$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta6,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta6$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta6$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta6
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta6$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta6$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta6$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta6$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta6$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta6$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta6ToJSON(
  fieldUpdateTemplateFieldsFieldMeta6: FieldUpdateTemplateFieldsFieldMeta6,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta6$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta6,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta6' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta5$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta5,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta5$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta5$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta5
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200ApplicationJSONType$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta5$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta5$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta5$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta5$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta5$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta5$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta5ToJSON(
  fieldUpdateTemplateFieldsFieldMeta5: FieldUpdateTemplateFieldsFieldMeta5,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta5$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta5,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta5' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta4$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta4,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta4$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta4$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta4
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponse200Type$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta4$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta4$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta4$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta4$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta4$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta4$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta4ToJSON(
  fieldUpdateTemplateFieldsFieldMeta4: FieldUpdateTemplateFieldsFieldMeta4,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta4$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta4,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta4' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  > = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType
  > =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta3$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta3,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta3$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta3$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta3
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type:
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsResponseType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta3$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta3$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta3$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta3$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta3$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta3ToJSON(
  fieldUpdateTemplateFieldsFieldMeta3: FieldUpdateTemplateFieldsFieldMeta3,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta3$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta3,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta3' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType
  > = z.nativeEnum(FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType
  > = FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta2$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta2,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta2$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta2$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta2
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldUpdateTemplateFieldsFieldMetaTemplatesFieldsType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta2$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta2$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta2$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta2ToJSON(
  fieldUpdateTemplateFieldsFieldMeta2: FieldUpdateTemplateFieldsFieldMeta2,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta2$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta2,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta2' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaType> = z.nativeEnum(
    FieldUpdateTemplateFieldsFieldMetaType,
  );

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaType> =
    FieldUpdateTemplateFieldsFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaType$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaType$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaType$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta1$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta1,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldUpdateTemplateFieldsFieldMetaType$inboundSchema,
  fontSize: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta1$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta1$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta1
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: FieldUpdateTemplateFieldsFieldMetaType$outboundSchema,
  fontSize: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMeta1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta1$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta1$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta1$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMeta1ToJSON(
  fieldUpdateTemplateFieldsFieldMeta1: FieldUpdateTemplateFieldsFieldMeta1,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta1$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta1,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta1' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta1$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta2$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta3$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta4$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta7$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta9$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta5$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta8$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta6$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldsFieldMeta$Outbound =
  | FieldUpdateTemplateFieldsFieldMeta1$Outbound
  | FieldUpdateTemplateFieldsFieldMeta2$Outbound
  | FieldUpdateTemplateFieldsFieldMeta3$Outbound
  | FieldUpdateTemplateFieldsFieldMeta4$Outbound
  | FieldUpdateTemplateFieldsFieldMeta7$Outbound
  | FieldUpdateTemplateFieldsFieldMeta9$Outbound
  | FieldUpdateTemplateFieldsFieldMeta5$Outbound
  | FieldUpdateTemplateFieldsFieldMeta8$Outbound
  | FieldUpdateTemplateFieldsFieldMeta6$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldsFieldMeta$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMeta$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMeta
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta1$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta2$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta3$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta4$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta7$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta9$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta5$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta8$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMeta6$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMeta$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFieldMeta$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMeta$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMeta$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMeta$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaToJSON(
  fieldUpdateTemplateFieldsFieldMeta: FieldUpdateTemplateFieldsFieldMeta,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMeta$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMeta,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMeta' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsFields$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsFields,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldUpdateTemplateFieldsType$inboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta1$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta2$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta3$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta4$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta7$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta9$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta5$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta8$inboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta6$inboundSchema),
      ]),
    ),
  });

/** @internal */
export type FieldUpdateTemplateFieldsTemplatesFieldsFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldsFieldMeta1$Outbound
    | FieldUpdateTemplateFieldsFieldMeta2$Outbound
    | FieldUpdateTemplateFieldsFieldMeta3$Outbound
    | FieldUpdateTemplateFieldsFieldMeta4$Outbound
    | FieldUpdateTemplateFieldsFieldMeta7$Outbound
    | FieldUpdateTemplateFieldsFieldMeta9$Outbound
    | FieldUpdateTemplateFieldsFieldMeta5$Outbound
    | FieldUpdateTemplateFieldsFieldMeta8$Outbound
    | FieldUpdateTemplateFieldsFieldMeta6$Outbound
    | null;
};

/** @internal */
export const FieldUpdateTemplateFieldsTemplatesFieldsFields$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsTemplatesFieldsFields$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsTemplatesFieldsFields
  > = z.object({
    type: FieldUpdateTemplateFieldsType$outboundSchema,
    id: z.number().int(),
    secondaryId: z.string(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    recipientId: z.number().int(),
    page: z.number(),
    positionX: z.any().optional(),
    positionY: z.any().optional(),
    width: z.any().optional(),
    height: z.any().optional(),
    customText: z.string(),
    inserted: z.boolean(),
    fieldMeta: z.nullable(
      z.union([
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta1$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta2$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta3$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta4$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta7$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta9$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta5$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta8$outboundSchema),
        z.lazy(() => FieldUpdateTemplateFieldsFieldMeta6$outboundSchema),
      ]),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTemplatesFieldsFields$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsFields$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsFields$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsFields$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTemplatesFieldsFields$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTemplatesFieldsFields$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsTemplatesFieldsFields$Outbound;
}

export function fieldUpdateTemplateFieldsTemplatesFieldsFieldsToJSON(
  fieldUpdateTemplateFieldsTemplatesFieldsFields:
    FieldUpdateTemplateFieldsTemplatesFieldsFields,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsTemplatesFieldsFields$outboundSchema.parse(
      fieldUpdateTemplateFieldsTemplatesFieldsFields,
    ),
  );
}

export function fieldUpdateTemplateFieldsTemplatesFieldsFieldsFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsTemplatesFieldsFields,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsTemplatesFieldsFields$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsTemplatesFieldsFields' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsResponseBody$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsTemplatesFieldsFields$inboundSchema),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldsResponseBody$Outbound = {
  fields: Array<FieldUpdateTemplateFieldsTemplatesFieldsFields$Outbound>;
};

/** @internal */
export const FieldUpdateTemplateFieldsResponseBody$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponseBody$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsResponseBody
> = z.object({
  fields: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsTemplatesFieldsFields$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsResponseBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsResponseBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsResponseBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponseBody$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsResponseBody$Outbound;
}

export function fieldUpdateTemplateFieldsResponseBodyToJSON(
  fieldUpdateTemplateFieldsResponseBody: FieldUpdateTemplateFieldsResponseBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsResponseBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsResponseBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsResponseBody' from JSON`,
  );
}
