/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FieldUpdateTemplateFieldsTypeDropdownRequestBody1 = {
  Dropdown: "DROPDOWN",
} as const;
export type FieldUpdateTemplateFieldsTypeDropdownRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeDropdownRequestBody2 = {
  Dropdown: "dropdown",
} as const;
export type FieldUpdateTemplateFieldsTypeDropdownRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody2
>;

export type FieldUpdateTemplateFieldsValueDropdown = {
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeDropdownRequestBody2;
  values?: Array<FieldUpdateTemplateFieldsValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldUpdateTemplateFieldsFieldDropdown = {
  type: FieldUpdateTemplateFieldsTypeDropdownRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody1 = {
  Checkbox: "CHECKBOX",
} as const;
export type FieldUpdateTemplateFieldsTypeCheckboxRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody2 = {
  Checkbox: "checkbox",
} as const;
export type FieldUpdateTemplateFieldsTypeCheckboxRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody2
>;

export type FieldUpdateTemplateFieldsValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody2;
  values?: Array<FieldUpdateTemplateFieldsValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldUpdateTemplateFieldsFieldCheckbox = {
  type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeRadioRequestBody1 = {
  Radio: "RADIO",
} as const;
export type FieldUpdateTemplateFieldsTypeRadioRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeRadioRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeRadioRequestBody2 = {
  Radio: "radio",
} as const;
export type FieldUpdateTemplateFieldsTypeRadioRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeRadioRequestBody2
>;

export type FieldUpdateTemplateFieldsValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaRadioRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeRadioRequestBody2;
  values?: Array<FieldUpdateTemplateFieldsValueRadio> | undefined;
};

export type FieldUpdateTemplateFieldsFieldRadio = {
  type: FieldUpdateTemplateFieldsTypeRadioRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaRadioRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeNumberRequestBody1 = {
  Number: "NUMBER",
} as const;
export type FieldUpdateTemplateFieldsTypeNumberRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeNumberRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeNumberRequestBody2 = {
  Number: "number",
} as const;
export type FieldUpdateTemplateFieldsTypeNumberRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeNumberRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignNumber = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignNumber
>;

export type FieldUpdateTemplateFieldsFieldMetaNumberRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeNumberRequestBody2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignNumber | undefined;
};

export type FieldUpdateTemplateFieldsFieldNumber = {
  type: FieldUpdateTemplateFieldsTypeNumberRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaNumberRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeTextRequestBody1 = {
  Text: "TEXT",
} as const;
export type FieldUpdateTemplateFieldsTypeTextRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeTextRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeTextRequestBody2 = {
  Text: "text",
} as const;
export type FieldUpdateTemplateFieldsTypeTextRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeTextRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignText = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignText
>;

export type FieldUpdateTemplateFieldsFieldMetaTextRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeTextRequestBody2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignText | undefined;
};

export type FieldUpdateTemplateFieldsFieldText = {
  type: FieldUpdateTemplateFieldsTypeTextRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaTextRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeDateRequestBody1 = {
  Date: "DATE",
} as const;
export type FieldUpdateTemplateFieldsTypeDateRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeDateRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeDateRequestBody2 = {
  Date: "date",
} as const;
export type FieldUpdateTemplateFieldsTypeDateRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeDateRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignDate = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignDate
>;

export type FieldUpdateTemplateFieldsFieldMetaDateRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeDateRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignDate | undefined;
};

export type FieldUpdateTemplateFieldsFieldDate = {
  type: FieldUpdateTemplateFieldsTypeDateRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaDateRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeEmailRequestBody1 = {
  Email: "EMAIL",
} as const;
export type FieldUpdateTemplateFieldsTypeEmailRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeEmailRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeEmailRequestBody2 = {
  Email: "email",
} as const;
export type FieldUpdateTemplateFieldsTypeEmailRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeEmailRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignEmail = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignEmail
>;

export type FieldUpdateTemplateFieldsFieldMetaEmailRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeEmailRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignEmail | undefined;
};

export type FieldUpdateTemplateFieldsFieldEmail = {
  type: FieldUpdateTemplateFieldsTypeEmailRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaEmailRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeNameRequestBody1 = {
  Name: "NAME",
} as const;
export type FieldUpdateTemplateFieldsTypeNameRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeNameRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeNameRequestBody2 = {
  Name: "name",
} as const;
export type FieldUpdateTemplateFieldsTypeNameRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeNameRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignName = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignName
>;

export type FieldUpdateTemplateFieldsFieldMetaNameRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeNameRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignName | undefined;
};

export type FieldUpdateTemplateFieldsFieldName = {
  type: FieldUpdateTemplateFieldsTypeNameRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaNameRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeInitialsRequestBody1 = {
  Initials: "INITIALS",
} as const;
export type FieldUpdateTemplateFieldsTypeInitialsRequestBody1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody1
>;

export const FieldUpdateTemplateFieldsTypeInitialsRequestBody2 = {
  Initials: "initials",
} as const;
export type FieldUpdateTemplateFieldsTypeInitialsRequestBody2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody2
>;

export const FieldUpdateTemplateFieldsTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignInitials = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignInitials
>;

export type FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsTypeInitialsRequestBody2;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignInitials | undefined;
};

export type FieldUpdateTemplateFieldsFieldInitials = {
  type: FieldUpdateTemplateFieldsTypeInitialsRequestBody1;
  fieldMeta?: FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody | undefined;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldsTypeFreeSignature = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeFreeSignature
>;

export type FieldUpdateTemplateFieldsFieldFreeSignature = {
  type: FieldUpdateTemplateFieldsTypeFreeSignature;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export const FieldUpdateTemplateFieldsTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type FieldUpdateTemplateFieldsTypeSignature = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeSignature
>;

export type FieldUpdateTemplateFieldsFieldSignature = {
  type: FieldUpdateTemplateFieldsTypeSignature;
  /**
   * The ID of the field to update.
   */
  id: number;
  /**
   * The page number the field will be on.
   */
  pageNumber?: number | undefined;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX?: number | undefined;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY?: number | undefined;
  /**
   * The width of the field.
   */
  width?: number | undefined;
  /**
   * The height of the field.
   */
  height?: number | undefined;
};

export type FieldUpdateTemplateFieldsFieldUnion =
  | FieldUpdateTemplateFieldsFieldSignature
  | FieldUpdateTemplateFieldsFieldFreeSignature
  | FieldUpdateTemplateFieldsFieldInitials
  | FieldUpdateTemplateFieldsFieldName
  | FieldUpdateTemplateFieldsFieldEmail
  | FieldUpdateTemplateFieldsFieldDate
  | FieldUpdateTemplateFieldsFieldText
  | FieldUpdateTemplateFieldsFieldNumber
  | FieldUpdateTemplateFieldsFieldRadio
  | FieldUpdateTemplateFieldsFieldCheckbox
  | FieldUpdateTemplateFieldsFieldDropdown;

export type FieldUpdateTemplateFieldsRequest = {
  templateId: number;
  fields: Array<
    | FieldUpdateTemplateFieldsFieldSignature
    | FieldUpdateTemplateFieldsFieldFreeSignature
    | FieldUpdateTemplateFieldsFieldInitials
    | FieldUpdateTemplateFieldsFieldName
    | FieldUpdateTemplateFieldsFieldEmail
    | FieldUpdateTemplateFieldsFieldDate
    | FieldUpdateTemplateFieldsFieldText
    | FieldUpdateTemplateFieldsFieldNumber
    | FieldUpdateTemplateFieldsFieldRadio
    | FieldUpdateTemplateFieldsFieldCheckbox
    | FieldUpdateTemplateFieldsFieldDropdown
  >;
};

export const FieldUpdateTemplateFieldsTypeResponse = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type FieldUpdateTemplateFieldsTypeResponse = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTypeResponse
>;

export const FieldUpdateTemplateFieldsFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeDropdown = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeDropdown
>;

export type FieldUpdateTemplateFieldsValueResponse3 = {
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaDropdownResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeDropdown;
  values?: Array<FieldUpdateTemplateFieldsValueResponse3> | undefined;
  defaultValue?: string | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeCheckbox = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeCheckbox
>;

export type FieldUpdateTemplateFieldsValueResponse2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaCheckboxResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeCheckbox;
  values?: Array<FieldUpdateTemplateFieldsValueResponse2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeRadio = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeRadio
>;

export type FieldUpdateTemplateFieldsValueResponse1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldUpdateTemplateFieldsFieldMetaRadioResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeRadio;
  values?: Array<FieldUpdateTemplateFieldsValueResponse1> | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeNumber = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeNumber
>;

export const FieldUpdateTemplateFieldsTextAlignResponse6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse6 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse6
>;

export type FieldUpdateTemplateFieldsFieldMetaNumberResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse6 | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeText = {
  Text: "text",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeText = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeText
>;

export const FieldUpdateTemplateFieldsTextAlignResponse5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse5 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse5
>;

export type FieldUpdateTemplateFieldsFieldMetaTextResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse5 | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeDate = {
  Date: "date",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeDate = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeDate
>;

export const FieldUpdateTemplateFieldsTextAlignResponse4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse4 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse4
>;

export type FieldUpdateTemplateFieldsFieldMetaDateResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse4 | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeEmail = {
  Email: "email",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeEmail = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeEmail
>;

export const FieldUpdateTemplateFieldsTextAlignResponse3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse3 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse3
>;

export type FieldUpdateTemplateFieldsFieldMetaEmailResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeEmail;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse3 | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeName = {
  Name: "name",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeName = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeName
>;

export const FieldUpdateTemplateFieldsTextAlignResponse2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse2 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse2
>;

export type FieldUpdateTemplateFieldsFieldMetaNameResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeName;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse2 | undefined;
};

export const FieldUpdateTemplateFieldsFieldMetaTypeInitials = {
  Initials: "initials",
} as const;
export type FieldUpdateTemplateFieldsFieldMetaTypeInitials = ClosedEnum<
  typeof FieldUpdateTemplateFieldsFieldMetaTypeInitials
>;

export const FieldUpdateTemplateFieldsTextAlignResponse1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type FieldUpdateTemplateFieldsTextAlignResponse1 = ClosedEnum<
  typeof FieldUpdateTemplateFieldsTextAlignResponse1
>;

export type FieldUpdateTemplateFieldsFieldMetaInitialsResponse = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: FieldUpdateTemplateFieldsFieldMetaTypeInitials;
  fontSize?: number | undefined;
  textAlign?: FieldUpdateTemplateFieldsTextAlignResponse1 | undefined;
};

export type FieldUpdateTemplateFieldsFieldMetaUnion =
  | FieldUpdateTemplateFieldsFieldMetaRadioResponse
  | FieldUpdateTemplateFieldsFieldMetaInitialsResponse
  | FieldUpdateTemplateFieldsFieldMetaNameResponse
  | FieldUpdateTemplateFieldsFieldMetaEmailResponse
  | FieldUpdateTemplateFieldsFieldMetaDateResponse
  | FieldUpdateTemplateFieldsFieldMetaDropdownResponse
  | FieldUpdateTemplateFieldsFieldMetaCheckboxResponse
  | FieldUpdateTemplateFieldsFieldMetaTextResponse
  | FieldUpdateTemplateFieldsFieldMetaNumberResponse;

export type FieldUpdateTemplateFieldsFieldResponse = {
  type: FieldUpdateTemplateFieldsTypeResponse;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldsFieldMetaRadioResponse
    | FieldUpdateTemplateFieldsFieldMetaInitialsResponse
    | FieldUpdateTemplateFieldsFieldMetaNameResponse
    | FieldUpdateTemplateFieldsFieldMetaEmailResponse
    | FieldUpdateTemplateFieldsFieldMetaDateResponse
    | FieldUpdateTemplateFieldsFieldMetaDropdownResponse
    | FieldUpdateTemplateFieldsFieldMetaCheckboxResponse
    | FieldUpdateTemplateFieldsFieldMetaTextResponse
    | FieldUpdateTemplateFieldsFieldMetaNumberResponse
    | null;
};

/**
 * Successful response
 */
export type FieldUpdateTemplateFieldsResponse = {
  fields: Array<FieldUpdateTemplateFieldsFieldResponse>;
};

/** @internal */
export const FieldUpdateTemplateFieldsTypeDropdownRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeDropdownRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeDropdownRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody1> =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeDropdownRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDropdownRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDropdownRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeDropdownRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeDropdownRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeDropdownRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDropdownRequestBody2> =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeDropdownRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDropdownRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDropdownRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeDropdownRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueDropdown$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueDropdown$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueDropdown$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueDropdown$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueDropdown$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueDropdown$Outbound;
}

export function fieldUpdateTemplateFieldsValueDropdownToJSON(
  fieldUpdateTemplateFieldsValueDropdown:
    FieldUpdateTemplateFieldsValueDropdown,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueDropdown$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueDropdown,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsValueDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsValueDropdown' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeDropdownRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaDropdownRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaDropdownRequestBody:
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaDropdownRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaDropdownRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldDropdown$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeDropdownRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldDropdown$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldDropdown$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldDropdown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeDropdownRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDropdownRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldDropdown$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDropdown$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldDropdown$Outbound;
}

export function fieldUpdateTemplateFieldsFieldDropdownToJSON(
  fieldUpdateTemplateFieldsFieldDropdown:
    FieldUpdateTemplateFieldsFieldDropdown,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldDropdown$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldDropdown,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldDropdown' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeCheckboxRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody1> =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeCheckboxRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeCheckboxRequestBody2> =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueCheckbox$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueCheckbox$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueCheckbox$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueCheckbox$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueCheckbox$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueCheckbox$Outbound;
}

export function fieldUpdateTemplateFieldsValueCheckboxToJSON(
  fieldUpdateTemplateFieldsValueCheckbox:
    FieldUpdateTemplateFieldsValueCheckbox,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueCheckbox$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueCheckbox,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsValueCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsValueCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaCheckboxRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody:
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaCheckboxRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldCheckbox$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldCheckbox
> = z.object({
  type: FieldUpdateTemplateFieldsTypeCheckboxRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaCheckboxRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldCheckbox$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldCheckbox$Outbound;
}

export function fieldUpdateTemplateFieldsFieldCheckboxToJSON(
  fieldUpdateTemplateFieldsFieldCheckbox:
    FieldUpdateTemplateFieldsFieldCheckbox,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldCheckbox,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeRadioRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeRadioRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeRadioRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeRadioRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeRadioRequestBody1> =
    FieldUpdateTemplateFieldsTypeRadioRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeRadioRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeRadioRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeRadioRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeRadioRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeRadioRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeRadioRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeRadioRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeRadioRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeRadioRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeRadioRequestBody2> =
    FieldUpdateTemplateFieldsTypeRadioRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeRadioRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeRadioRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeRadioRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeRadioRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeRadioRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueRadio$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueRadio$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueRadio$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueRadio$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueRadio$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueRadio$Outbound;
}

export function fieldUpdateTemplateFieldsValueRadioToJSON(
  fieldUpdateTemplateFieldsValueRadio: FieldUpdateTemplateFieldsValueRadio,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueRadio$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueRadio,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsValueRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsValueRadio' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody2$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueRadio$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeRadioRequestBody2$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaRadioRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaRadioRequestBody:
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaRadioRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaRadioRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaRadioRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaRadioRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldRadio$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeRadioRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldRadio$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldRadio$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldRadio
> = z.object({
  type: FieldUpdateTemplateFieldsTypeRadioRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaRadioRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldRadio$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldRadio$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldRadio$Outbound;
}

export function fieldUpdateTemplateFieldsFieldRadioToJSON(
  fieldUpdateTemplateFieldsFieldRadio: FieldUpdateTemplateFieldsFieldRadio,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldRadio$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldRadio,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldRadio' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeNumberRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNumberRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeNumberRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeNumberRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNumberRequestBody1> =
    FieldUpdateTemplateFieldsTypeNumberRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeNumberRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNumberRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeNumberRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNumberRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeNumberRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeNumberRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNumberRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeNumberRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeNumberRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNumberRequestBody2> =
    FieldUpdateTemplateFieldsTypeNumberRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeNumberRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNumberRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeNumberRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNumberRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeNumberRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignNumber> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignNumber);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignNumber> =
    FieldUpdateTemplateFieldsTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignNumber$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignNumber$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeNumberRequestBody2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaNumberRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaNumberRequestBody:
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaNumberRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaNumberRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaNumberRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaNumberRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldNumber$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeNumberRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldNumber$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldNumber$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldNumber
> = z.object({
  type: FieldUpdateTemplateFieldsTypeNumberRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaNumberRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldNumber$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldNumber$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldNumber$Outbound;
}

export function fieldUpdateTemplateFieldsFieldNumberToJSON(
  fieldUpdateTemplateFieldsFieldNumber: FieldUpdateTemplateFieldsFieldNumber,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldNumber$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldNumber,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldNumber' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeTextRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeTextRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeTextRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeTextRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeTextRequestBody1> =
    FieldUpdateTemplateFieldsTypeTextRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeTextRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeTextRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeTextRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeTextRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeTextRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeTextRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeTextRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeTextRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeTextRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeTextRequestBody2> =
    FieldUpdateTemplateFieldsTypeTextRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeTextRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeTextRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeTextRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeTextRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeTextRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignText> = z.nativeEnum(
    FieldUpdateTemplateFieldsTextAlignText,
  );

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignText> =
    FieldUpdateTemplateFieldsTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignText$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignText$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTextRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeTextRequestBody2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignText$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaTextRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTextRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeTextRequestBody2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignText$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTextRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaTextRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaTextRequestBody:
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaTextRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaTextRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaTextRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaTextRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaTextRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldText$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeTextRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldText$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaTextRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldText$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldText$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldText
> = z.object({
  type: FieldUpdateTemplateFieldsTypeTextRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaTextRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldText$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldText$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFieldText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldText$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldText$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldText$Outbound;
}

export function fieldUpdateTemplateFieldsFieldTextToJSON(
  fieldUpdateTemplateFieldsFieldText: FieldUpdateTemplateFieldsFieldText,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldText$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldText,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldText' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeDateRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDateRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeDateRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeDateRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDateRequestBody1> =
    FieldUpdateTemplateFieldsTypeDateRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeDateRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDateRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeDateRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDateRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeDateRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeDateRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDateRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeDateRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeDateRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeDateRequestBody2> =
    FieldUpdateTemplateFieldsTypeDateRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeDateRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDateRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeDateRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeDateRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeDateRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignDate> = z.nativeEnum(
    FieldUpdateTemplateFieldsTextAlignDate,
  );

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignDate> =
    FieldUpdateTemplateFieldsTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignDate$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDateRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeDateRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignDate$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaDateRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDateRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeDateRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignDate$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaDateRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaDateRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaDateRequestBody:
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaDateRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaDateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaDateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaDateRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaDateRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldDate$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeDateRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldDate$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaDateRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldDate$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldDate$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldDate
> = z.object({
  type: FieldUpdateTemplateFieldsTypeDateRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDateRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDate$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFieldDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldDate$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldDate$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldDate$Outbound;
}

export function fieldUpdateTemplateFieldsFieldDateToJSON(
  fieldUpdateTemplateFieldsFieldDate: FieldUpdateTemplateFieldsFieldDate,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldDate$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldDate,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldDate' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeEmailRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeEmailRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeEmailRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeEmailRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeEmailRequestBody1> =
    FieldUpdateTemplateFieldsTypeEmailRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeEmailRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeEmailRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeEmailRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeEmailRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeEmailRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeEmailRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeEmailRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeEmailRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeEmailRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeEmailRequestBody2> =
    FieldUpdateTemplateFieldsTypeEmailRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeEmailRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeEmailRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeEmailRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeEmailRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeEmailRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignEmail> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignEmail);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignEmail> =
    FieldUpdateTemplateFieldsTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignEmail$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignEmail$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeEmailRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignEmail$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaEmailRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaEmailRequestBody:
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaEmailRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaEmailRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaEmailRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaEmailRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldEmail$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeEmailRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldEmail$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldEmail$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldEmail
> = z.object({
  type: FieldUpdateTemplateFieldsTypeEmailRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaEmailRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldEmail$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldEmail$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldEmail$Outbound;
}

export function fieldUpdateTemplateFieldsFieldEmailToJSON(
  fieldUpdateTemplateFieldsFieldEmail: FieldUpdateTemplateFieldsFieldEmail,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldEmail$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldEmail,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldEmail' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeNameRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNameRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeNameRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeNameRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNameRequestBody1> =
    FieldUpdateTemplateFieldsTypeNameRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeNameRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNameRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeNameRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNameRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeNameRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeNameRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNameRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeNameRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeNameRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeNameRequestBody2> =
    FieldUpdateTemplateFieldsTypeNameRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeNameRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNameRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeNameRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeNameRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeNameRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignName> = z.nativeEnum(
    FieldUpdateTemplateFieldsTextAlignName,
  );

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignName> =
    FieldUpdateTemplateFieldsTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignName$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignName$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNameRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeNameRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignName$inboundSchema.optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaNameRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNameRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeNameRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignName$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaNameRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaNameRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaNameRequestBody:
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaNameRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaNameRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaNameRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaNameRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaNameRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldName$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeNameRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldName$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaNameRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldName$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldName$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldName
> = z.object({
  type: FieldUpdateTemplateFieldsTypeNameRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaNameRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldName$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldName$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsFieldName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldName$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldName$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldName$Outbound;
}

export function fieldUpdateTemplateFieldsFieldNameToJSON(
  fieldUpdateTemplateFieldsFieldName: FieldUpdateTemplateFieldsFieldName,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldName$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldName,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldName' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeInitialsRequestBody1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeInitialsRequestBody1);

/** @internal */
export const FieldUpdateTemplateFieldsTypeInitialsRequestBody1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody1> =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeInitialsRequestBody1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeInitialsRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeInitialsRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeInitialsRequestBody2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeInitialsRequestBody2);

/** @internal */
export const FieldUpdateTemplateFieldsTypeInitialsRequestBody2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeInitialsRequestBody2> =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeInitialsRequestBody2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeInitialsRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeInitialsRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeInitialsRequestBody2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignInitials> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignInitials);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignInitials> =
    FieldUpdateTemplateFieldsTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignInitials$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsTypeInitialsRequestBody2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaInitialsRequestBodyToJSON(
  fieldUpdateTemplateFieldsFieldMetaInitialsRequestBody:
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaInitialsRequestBody,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaInitialsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldInitials$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeInitialsRequestBody1$inboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$inboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$Outbound
    | undefined;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldInitials$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldInitials$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldInitials
> = z.object({
  type: FieldUpdateTemplateFieldsTypeInitialsRequestBody1$outboundSchema,
  fieldMeta: z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaInitialsRequestBody$outboundSchema
  ).optional(),
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldInitials$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldInitials$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldInitials$Outbound;
}

export function fieldUpdateTemplateFieldsFieldInitialsToJSON(
  fieldUpdateTemplateFieldsFieldInitials:
    FieldUpdateTemplateFieldsFieldInitials,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldInitials$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldInitials,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldInitials' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeFreeSignature> = z
    .nativeEnum(FieldUpdateTemplateFieldsTypeFreeSignature);

/** @internal */
export const FieldUpdateTemplateFieldsTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeFreeSignature> =
    FieldUpdateTemplateFieldsTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeFreeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeFreeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeFreeSignature$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldFreeSignature,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: FieldUpdateTemplateFieldsTypeFreeSignature$inboundSchema,
    id: z.number(),
    pageNumber: z.number().optional(),
    pageX: z.number().optional(),
    pageY: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldFreeSignature$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldFreeSignature
  > = z.object({
    type: FieldUpdateTemplateFieldsTypeFreeSignature$outboundSchema,
    id: z.number(),
    pageNumber: z.number().optional(),
    pageX: z.number().optional(),
    pageY: z.number().optional(),
    width: z.number().optional(),
    height: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldFreeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldFreeSignature$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldFreeSignature$Outbound;
}

export function fieldUpdateTemplateFieldsFieldFreeSignatureToJSON(
  fieldUpdateTemplateFieldsFieldFreeSignature:
    FieldUpdateTemplateFieldsFieldFreeSignature,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldFreeSignature,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeSignature> = z.nativeEnum(
    FieldUpdateTemplateFieldsTypeSignature,
  );

/** @internal */
export const FieldUpdateTemplateFieldsTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeSignature> =
    FieldUpdateTemplateFieldsTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeSignature$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldSignature$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeSignature$inboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldSignature$Outbound = {
  type: string;
  id: number;
  pageNumber?: number | undefined;
  pageX?: number | undefined;
  pageY?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldSignature$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldSignature$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldSignature
> = z.object({
  type: FieldUpdateTemplateFieldsTypeSignature$outboundSchema,
  id: z.number(),
  pageNumber: z.number().optional(),
  pageX: z.number().optional(),
  pageY: z.number().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldSignature$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldSignature$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldSignature$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldSignature$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldSignature$Outbound;
}

export function fieldUpdateTemplateFieldsFieldSignatureToJSON(
  fieldUpdateTemplateFieldsFieldSignature:
    FieldUpdateTemplateFieldsFieldSignature,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldSignature$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldSignature,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldSignature' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldUnion$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldSignature$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldInitials$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldName$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldEmail$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldDate$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldText$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldNumber$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldRadio$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldDropdown$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldsFieldUnion$Outbound =
  | FieldUpdateTemplateFieldsFieldSignature$Outbound
  | FieldUpdateTemplateFieldsFieldFreeSignature$Outbound
  | FieldUpdateTemplateFieldsFieldInitials$Outbound
  | FieldUpdateTemplateFieldsFieldName$Outbound
  | FieldUpdateTemplateFieldsFieldEmail$Outbound
  | FieldUpdateTemplateFieldsFieldDate$Outbound
  | FieldUpdateTemplateFieldsFieldText$Outbound
  | FieldUpdateTemplateFieldsFieldNumber$Outbound
  | FieldUpdateTemplateFieldsFieldRadio$Outbound
  | FieldUpdateTemplateFieldsFieldCheckbox$Outbound
  | FieldUpdateTemplateFieldsFieldDropdown$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldsFieldUnion$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldUnion$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldUnion
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldSignature$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldInitials$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldName$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldEmail$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldDate$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldText$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldNumber$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldRadio$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldUnion$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldUnion$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldUnion$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldUnion$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldUnion$Outbound;
}

export function fieldUpdateTemplateFieldsFieldUnionToJSON(
  fieldUpdateTemplateFieldsFieldUnion: FieldUpdateTemplateFieldsFieldUnion,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldUnion$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldUnion,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldUnion' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsRequest$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldUpdateTemplateFieldsFieldSignature$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldFreeSignature$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldInitials$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldName$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldEmail$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldDate$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldText$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldNumber$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldRadio$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldCheckbox$inboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldDropdown$inboundSchema),
    ]),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldsRequest$Outbound = {
  templateId: number;
  fields: Array<
    | FieldUpdateTemplateFieldsFieldSignature$Outbound
    | FieldUpdateTemplateFieldsFieldFreeSignature$Outbound
    | FieldUpdateTemplateFieldsFieldInitials$Outbound
    | FieldUpdateTemplateFieldsFieldName$Outbound
    | FieldUpdateTemplateFieldsFieldEmail$Outbound
    | FieldUpdateTemplateFieldsFieldDate$Outbound
    | FieldUpdateTemplateFieldsFieldText$Outbound
    | FieldUpdateTemplateFieldsFieldNumber$Outbound
    | FieldUpdateTemplateFieldsFieldRadio$Outbound
    | FieldUpdateTemplateFieldsFieldCheckbox$Outbound
    | FieldUpdateTemplateFieldsFieldDropdown$Outbound
  >;
};

/** @internal */
export const FieldUpdateTemplateFieldsRequest$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsRequest$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsRequest
> = z.object({
  templateId: z.number(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldUpdateTemplateFieldsFieldSignature$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldFreeSignature$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldInitials$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldName$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldEmail$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldDate$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldText$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldNumber$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldRadio$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldCheckbox$outboundSchema),
      z.lazy(() => FieldUpdateTemplateFieldsFieldDropdown$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsRequest$ {
  /** @deprecated use `FieldUpdateTemplateFieldsRequest$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsRequest$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsRequest$outboundSchema` instead. */
  export const outboundSchema = FieldUpdateTemplateFieldsRequest$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsRequest$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsRequest$Outbound;
}

export function fieldUpdateTemplateFieldsRequestToJSON(
  fieldUpdateTemplateFieldsRequest: FieldUpdateTemplateFieldsRequest,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsRequest$outboundSchema.parse(
      fieldUpdateTemplateFieldsRequest,
    ),
  );
}

export function fieldUpdateTemplateFieldsRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsRequest' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsTypeResponse$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeResponse> = z.nativeEnum(
    FieldUpdateTemplateFieldsTypeResponse,
  );

/** @internal */
export const FieldUpdateTemplateFieldsTypeResponse$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTypeResponse> =
    FieldUpdateTemplateFieldsTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTypeResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTypeResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTypeResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTypeResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTypeResponse$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeDropdown> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeDropdown);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeDropdown> =
    FieldUpdateTemplateFieldsFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeDropdown$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse3$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueResponse3$Outbound = {
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse3$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse3$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueResponse3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueResponse3$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueResponse3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueResponse3$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse3$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueResponse3$Outbound;
}

export function fieldUpdateTemplateFieldsValueResponse3ToJSON(
  fieldUpdateTemplateFieldsValueResponse3:
    FieldUpdateTemplateFieldsValueResponse3,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueResponse3$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueResponse3,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueResponse3FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsValueResponse3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueResponse3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsValueResponse3' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueResponse3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaDropdownResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaDropdownResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaDropdownResponse:
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaDropdownResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaDropdownResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaDropdownResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaDropdownResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeCheckbox> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeCheckbox);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeCheckbox> =
    FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse2$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueResponse2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse2$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse2$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueResponse2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueResponse2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueResponse2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueResponse2$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse2$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueResponse2$Outbound;
}

export function fieldUpdateTemplateFieldsValueResponse2ToJSON(
  fieldUpdateTemplateFieldsValueResponse2:
    FieldUpdateTemplateFieldsValueResponse2,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueResponse2$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueResponse2,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsValueResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsValueResponse2' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueResponse2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaCheckboxResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaCheckboxResponse:
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaCheckboxResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaCheckboxResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaCheckboxResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeRadio> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeRadio);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeRadio> =
    FieldUpdateTemplateFieldsFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeRadio$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse1$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type FieldUpdateTemplateFieldsValueResponse1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const FieldUpdateTemplateFieldsValueResponse1$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsValueResponse1$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsValueResponse1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsValueResponse1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsValueResponse1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsValueResponse1$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsValueResponse1$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsValueResponse1$Outbound;
}

export function fieldUpdateTemplateFieldsValueResponse1ToJSON(
  fieldUpdateTemplateFieldsValueResponse1:
    FieldUpdateTemplateFieldsValueResponse1,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsValueResponse1$outboundSchema.parse(
      fieldUpdateTemplateFieldsValueResponse1,
    ),
  );
}

export function fieldUpdateTemplateFieldsValueResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsValueResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsValueResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsValueResponse1' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaRadioResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<FieldUpdateTemplateFieldsValueResponse1$Outbound> | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaRadioResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => FieldUpdateTemplateFieldsValueResponse1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaRadioResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaRadioResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaRadioResponse:
    FieldUpdateTemplateFieldsFieldMetaRadioResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaRadioResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaRadioResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaRadioResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaRadioResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeNumber> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeNumber);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeNumber> =
    FieldUpdateTemplateFieldsFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeNumber$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse6$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse6> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse6);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse6$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse6> =
    FieldUpdateTemplateFieldsTextAlignResponse6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse6$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse6$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse6$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse6$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse6$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNumberResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse6$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaNumberResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaNumberResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaNumberResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaNumberResponse:
    FieldUpdateTemplateFieldsFieldMetaNumberResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaNumberResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaNumberResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaNumberResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaNumberResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeText> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeText);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeText> =
    FieldUpdateTemplateFieldsFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeText$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeText$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse5$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse5> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse5);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse5$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse5> =
    FieldUpdateTemplateFieldsTextAlignResponse5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse5$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse5$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse5$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse5$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse5$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTextResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse5$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaTextResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTextResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaTextResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaTextResponse:
    FieldUpdateTemplateFieldsFieldMetaTextResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaTextResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaTextResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaTextResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeDate> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeDate);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeDate> =
    FieldUpdateTemplateFieldsFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeDate$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse4$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse4> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse4);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse4$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse4> =
    FieldUpdateTemplateFieldsTextAlignResponse4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse4$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse4$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse4$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse4$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse4$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse4$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaDateResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaDateResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaDateResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaDateResponse:
    FieldUpdateTemplateFieldsFieldMetaDateResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaDateResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaDateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaDateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaDateResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeEmail> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeEmail);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeEmail> =
    FieldUpdateTemplateFieldsFieldMetaTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeEmail$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeEmail$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeEmail$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse3$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse3> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse3);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse3$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse3> =
    FieldUpdateTemplateFieldsTextAlignResponse3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse3$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse3$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse3$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse3$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse3$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaEmailResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse3$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaEmailResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaEmailResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaEmailResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaEmailResponse:
    FieldUpdateTemplateFieldsFieldMetaEmailResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaEmailResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaEmailResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaEmailResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaEmailResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeName$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeName> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeName);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeName$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeName> =
    FieldUpdateTemplateFieldsFieldMetaTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeName$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeName$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeName$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeName$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeName$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse2$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse2> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse2);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse2$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse2> =
    FieldUpdateTemplateFieldsTextAlignResponse2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse2$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse2$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse2$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNameResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse2$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaNameResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaNameResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaNameResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaNameResponse:
    FieldUpdateTemplateFieldsFieldMetaNameResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaNameResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaNameResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaNameResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaNameResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeInitials> = z
    .nativeEnum(FieldUpdateTemplateFieldsFieldMetaTypeInitials);

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsFieldMetaTypeInitials> =
    FieldUpdateTemplateFieldsFieldMetaTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaTypeInitials$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeInitials$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaTypeInitials$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse1$inboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse1> = z
    .nativeEnum(FieldUpdateTemplateFieldsTextAlignResponse1);

/** @internal */
export const FieldUpdateTemplateFieldsTextAlignResponse1$outboundSchema:
  z.ZodNativeEnum<typeof FieldUpdateTemplateFieldsTextAlignResponse1> =
    FieldUpdateTemplateFieldsTextAlignResponse1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsTextAlignResponse1$ {
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse1$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsTextAlignResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsTextAlignResponse1$outboundSchema;
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse1$inboundSchema
      .optional(),
  });

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema:
  z.ZodType<
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound,
    z.ZodTypeDef,
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: FieldUpdateTemplateFieldsFieldMetaTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: FieldUpdateTemplateFieldsTextAlignResponse1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaInitialsResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound` instead. */
  export type Outbound =
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaInitialsResponseToJSON(
  fieldUpdateTemplateFieldsFieldMetaInitialsResponse:
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaInitialsResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaInitialsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaInitialsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaInitialsResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaUnion$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema
  ),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema),
]);

/** @internal */
export type FieldUpdateTemplateFieldsFieldMetaUnion$Outbound =
  | FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound
  | FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound;

/** @internal */
export const FieldUpdateTemplateFieldsFieldMetaUnion$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldMetaUnion
> = z.union([
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema
  ),
  z.lazy(() =>
    FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema
  ),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema),
  z.lazy(() => FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldMetaUnion$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldMetaUnion$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldMetaUnion$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldMetaUnion$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldMetaUnion$Outbound;
}

export function fieldUpdateTemplateFieldsFieldMetaUnionToJSON(
  fieldUpdateTemplateFieldsFieldMetaUnion:
    FieldUpdateTemplateFieldsFieldMetaUnion,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldMetaUnion$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldMetaUnion,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  FieldUpdateTemplateFieldsFieldMetaUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldMetaUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsFieldResponse$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FieldUpdateTemplateFieldsTypeResponse$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaRadioResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaInitialsResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaNameResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaEmailResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaDateResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaDropdownResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaTextResponse$inboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaNumberResponse$inboundSchema
      ),
    ]),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldsFieldResponse$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldUpdateTemplateFieldsFieldMetaRadioResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaInitialsResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaNameResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaEmailResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaDateResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaDropdownResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaTextResponse$Outbound
    | FieldUpdateTemplateFieldsFieldMetaNumberResponse$Outbound
    | null;
};

/** @internal */
export const FieldUpdateTemplateFieldsFieldResponse$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsFieldResponse
> = z.object({
  type: FieldUpdateTemplateFieldsTypeResponse$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaRadioResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaInitialsResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaNameResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaEmailResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaDateResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaDropdownResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaCheckboxResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaTextResponse$outboundSchema
      ),
      z.lazy(() =>
        FieldUpdateTemplateFieldsFieldMetaNumberResponse$outboundSchema
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsFieldResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsFieldResponse$inboundSchema` instead. */
  export const inboundSchema =
    FieldUpdateTemplateFieldsFieldResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsFieldResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsFieldResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsFieldResponse$Outbound;
}

export function fieldUpdateTemplateFieldsFieldResponseToJSON(
  fieldUpdateTemplateFieldsFieldResponse:
    FieldUpdateTemplateFieldsFieldResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsFieldResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsFieldResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FieldUpdateTemplateFieldsFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsFieldResponse' from JSON`,
  );
}

/** @internal */
export const FieldUpdateTemplateFieldsResponse$inboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsFieldResponse$inboundSchema),
  ),
});

/** @internal */
export type FieldUpdateTemplateFieldsResponse$Outbound = {
  fields: Array<FieldUpdateTemplateFieldsFieldResponse$Outbound>;
};

/** @internal */
export const FieldUpdateTemplateFieldsResponse$outboundSchema: z.ZodType<
  FieldUpdateTemplateFieldsResponse$Outbound,
  z.ZodTypeDef,
  FieldUpdateTemplateFieldsResponse
> = z.object({
  fields: z.array(
    z.lazy(() => FieldUpdateTemplateFieldsFieldResponse$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldUpdateTemplateFieldsResponse$ {
  /** @deprecated use `FieldUpdateTemplateFieldsResponse$inboundSchema` instead. */
  export const inboundSchema = FieldUpdateTemplateFieldsResponse$inboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponse$outboundSchema` instead. */
  export const outboundSchema =
    FieldUpdateTemplateFieldsResponse$outboundSchema;
  /** @deprecated use `FieldUpdateTemplateFieldsResponse$Outbound` instead. */
  export type Outbound = FieldUpdateTemplateFieldsResponse$Outbound;
}

export function fieldUpdateTemplateFieldsResponseToJSON(
  fieldUpdateTemplateFieldsResponse: FieldUpdateTemplateFieldsResponse,
): string {
  return JSON.stringify(
    FieldUpdateTemplateFieldsResponse$outboundSchema.parse(
      fieldUpdateTemplateFieldsResponse,
    ),
  );
}

export function fieldUpdateTemplateFieldsResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldUpdateTemplateFieldsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldUpdateTemplateFieldsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldUpdateTemplateFieldsResponse' from JSON`,
  );
}
