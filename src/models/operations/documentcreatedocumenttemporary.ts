/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the document.
 */
export const DocumentCreateDocumentTemporaryVisibilityRequest = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the document.
 */
export type DocumentCreateDocumentTemporaryVisibilityRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryVisibilityRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentCreateDocumentTemporaryGlobalActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentCreateDocumentTemporaryGlobalActionAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryGlobalActionAuthRequest
>;

export type FormValuesRequest = string | boolean | number;

export const DocumentCreateDocumentTemporaryRoleRequest = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type DocumentCreateDocumentTemporaryRoleRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRoleRequest
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentCreateDocumentTemporaryAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentCreateDocumentTemporaryAccessAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentCreateDocumentTemporaryActionAuthRequest = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentCreateDocumentTemporaryActionAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryActionAuthRequest
>;

export const DocumentCreateDocumentTemporaryRecipientTypeDropdown1 = {
  Dropdown: "DROPDOWN",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeDropdown1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeDropdown2 = {
  Dropdown: "dropdown",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeDropdown2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown2
>;

export type DocumentCreateDocumentTemporaryValueDropdown = {
  value: string;
};

export type DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeDropdown2;
  values?: Array<DocumentCreateDocumentTemporaryValueDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type DocumentCreateDocumentTemporaryFieldDropdown = {
  type: DocumentCreateDocumentTemporaryRecipientTypeDropdown1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 = {
  Checkbox: "CHECKBOX",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeCheckbox1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 = {
  Checkbox: "checkbox",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeCheckbox2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox2
>;

export type DocumentCreateDocumentTemporaryValueCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox2;
  values?: Array<DocumentCreateDocumentTemporaryValueCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type DocumentCreateDocumentTemporaryFieldCheckbox = {
  type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeRadio1 = {
  Radio: "RADIO",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeRadio1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeRadio1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeRadio2 = {
  Radio: "radio",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeRadio2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeRadio2
>;

export type DocumentCreateDocumentTemporaryValueRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type DocumentCreateDocumentTemporaryRecipientFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeRadio2;
  values?: Array<DocumentCreateDocumentTemporaryValueRadio> | undefined;
};

export type DocumentCreateDocumentTemporaryFieldRadio = {
  type: DocumentCreateDocumentTemporaryRecipientTypeRadio1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaRadio
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeNumber1 = {
  Number: "NUMBER",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeNumber1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeNumber1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeNumber2 = {
  Number: "number",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeNumber2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeNumber2
>;

export const DocumentCreateDocumentTemporaryTextAlignNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignNumber = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignNumber
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeNumber2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignNumber | undefined;
};

export type DocumentCreateDocumentTemporaryFieldNumber = {
  type: DocumentCreateDocumentTemporaryRecipientTypeNumber1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaNumber
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeText1 = {
  Text: "TEXT",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeText1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeText1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeText2 = {
  Text: "text",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeText2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeText2
>;

export const DocumentCreateDocumentTemporaryTextAlignText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignText = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignText
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeText2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignText | undefined;
};

export type DocumentCreateDocumentTemporaryFieldText = {
  type: DocumentCreateDocumentTemporaryRecipientTypeText1;
  fieldMeta?: DocumentCreateDocumentTemporaryRecipientFieldMetaText | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeDate1 = {
  Date: "DATE",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeDate1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeDate1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeDate2 = {
  Date: "date",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeDate2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeDate2
>;

export const DocumentCreateDocumentTemporaryTextAlignDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignDate = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignDate
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeDate2;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignDate | undefined;
};

export type DocumentCreateDocumentTemporaryFieldDate = {
  type: DocumentCreateDocumentTemporaryRecipientTypeDate1;
  fieldMeta?: DocumentCreateDocumentTemporaryRecipientFieldMetaDate | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeEmail1 = {
  Email: "EMAIL",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeEmail1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeEmail1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeEmail2 = {
  Email: "email",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeEmail2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeEmail2
>;

export const DocumentCreateDocumentTemporaryTextAlignEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignEmail = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignEmail
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeEmail2;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignEmail | undefined;
};

export type DocumentCreateDocumentTemporaryFieldEmail = {
  type: DocumentCreateDocumentTemporaryRecipientTypeEmail1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaEmail
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeName1 = {
  Name: "NAME",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeName1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeName1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeName2 = {
  Name: "name",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeName2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeName2
>;

export const DocumentCreateDocumentTemporaryTextAlignName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignName = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignName
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeName2;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignName | undefined;
};

export type DocumentCreateDocumentTemporaryFieldName = {
  type: DocumentCreateDocumentTemporaryRecipientTypeName1;
  fieldMeta?: DocumentCreateDocumentTemporaryRecipientFieldMetaName | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryRecipientTypeInitials1 = {
  Initials: "INITIALS",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeInitials1 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeInitials1
>;

export const DocumentCreateDocumentTemporaryRecipientTypeInitials2 = {
  Initials: "initials",
} as const;
export type DocumentCreateDocumentTemporaryRecipientTypeInitials2 = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryRecipientTypeInitials2
>;

export const DocumentCreateDocumentTemporaryTextAlignInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentCreateDocumentTemporaryTextAlignInitials = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTextAlignInitials
>;

export type DocumentCreateDocumentTemporaryRecipientFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentCreateDocumentTemporaryRecipientTypeInitials2;
  fontSize?: number | undefined;
  textAlign?: DocumentCreateDocumentTemporaryTextAlignInitials | undefined;
};

export type DocumentCreateDocumentTemporaryFieldInitials = {
  type: DocumentCreateDocumentTemporaryRecipientTypeInitials1;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaInitials
    | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryTypeFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type DocumentCreateDocumentTemporaryTypeFreeSignature = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTypeFreeSignature
>;

export type DocumentCreateDocumentTemporaryFieldFreeSignature = {
  type: DocumentCreateDocumentTemporaryTypeFreeSignature;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const DocumentCreateDocumentTemporaryTypeSignature = {
  Signature: "SIGNATURE",
} as const;
export type DocumentCreateDocumentTemporaryTypeSignature = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryTypeSignature
>;

export type DocumentCreateDocumentTemporaryFieldSignature = {
  type: DocumentCreateDocumentTemporaryTypeSignature;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type DocumentCreateDocumentTemporaryFieldUnion =
  | DocumentCreateDocumentTemporaryFieldSignature
  | DocumentCreateDocumentTemporaryFieldFreeSignature
  | DocumentCreateDocumentTemporaryFieldInitials
  | DocumentCreateDocumentTemporaryFieldName
  | DocumentCreateDocumentTemporaryFieldEmail
  | DocumentCreateDocumentTemporaryFieldDate
  | DocumentCreateDocumentTemporaryFieldText
  | DocumentCreateDocumentTemporaryFieldNumber
  | DocumentCreateDocumentTemporaryFieldRadio
  | DocumentCreateDocumentTemporaryFieldCheckbox
  | DocumentCreateDocumentTemporaryFieldDropdown;

export type DocumentCreateDocumentTemporaryRecipientRequest = {
  email: string;
  name: string;
  role: DocumentCreateDocumentTemporaryRoleRequest;
  signingOrder?: number | undefined;
  accessAuth?:
    | Array<DocumentCreateDocumentTemporaryAccessAuthRequest>
    | undefined;
  actionAuth?:
    | Array<DocumentCreateDocumentTemporaryActionAuthRequest>
    | undefined;
  fields?:
    | Array<
      | DocumentCreateDocumentTemporaryFieldSignature
      | DocumentCreateDocumentTemporaryFieldFreeSignature
      | DocumentCreateDocumentTemporaryFieldInitials
      | DocumentCreateDocumentTemporaryFieldName
      | DocumentCreateDocumentTemporaryFieldEmail
      | DocumentCreateDocumentTemporaryFieldDate
      | DocumentCreateDocumentTemporaryFieldText
      | DocumentCreateDocumentTemporaryFieldNumber
      | DocumentCreateDocumentTemporaryFieldRadio
      | DocumentCreateDocumentTemporaryFieldCheckbox
      | DocumentCreateDocumentTemporaryFieldDropdown
    >
    | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentCreateDocumentTemporaryDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentCreateDocumentTemporaryDateFormat = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DocumentCreateDocumentTemporaryDistributionMethodRequest = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DocumentCreateDocumentTemporaryDistributionMethodRequest =
  ClosedEnum<typeof DocumentCreateDocumentTemporaryDistributionMethodRequest>;

export const DocumentCreateDocumentTemporarySigningOrderRequest = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentCreateDocumentTemporarySigningOrderRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySigningOrderRequest
>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentCreateDocumentTemporaryLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentCreateDocumentTemporaryLanguage = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryLanguage
>;

export type DocumentCreateDocumentTemporaryEmailSettingsRequest = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentCreateDocumentTemporaryMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentCreateDocumentTemporaryDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?:
    | DocumentCreateDocumentTemporaryDistributionMethodRequest
    | undefined;
  signingOrder?: DocumentCreateDocumentTemporarySigningOrderRequest | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentCreateDocumentTemporaryLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  emailSettings?:
    | DocumentCreateDocumentTemporaryEmailSettingsRequest
    | undefined;
};

export type DocumentCreateDocumentTemporaryRequest = {
  /**
   * The title of the document.
   */
  title: string;
  /**
   * The external ID of the document.
   */
  externalId?: string | undefined;
  /**
   * The visibility of the document.
   */
  visibility?: DocumentCreateDocumentTemporaryVisibilityRequest | undefined;
  globalAccessAuth?:
    | Array<DocumentCreateDocumentTemporaryGlobalAccessAuthRequest>
    | undefined;
  globalActionAuth?:
    | Array<DocumentCreateDocumentTemporaryGlobalActionAuthRequest>
    | undefined;
  formValues?: { [k: string]: string | boolean | number } | undefined;
  recipients?:
    | Array<DocumentCreateDocumentTemporaryRecipientRequest>
    | undefined;
  meta?: DocumentCreateDocumentTemporaryMeta | undefined;
};

export const DocumentVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentVisibility = ClosedEnum<typeof DocumentVisibility>;

export const DocumentCreateDocumentTemporaryStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentCreateDocumentTemporaryStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryStatus
>;

export const DocumentCreateDocumentTemporarySource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentCreateDocumentTemporarySource = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentGlobalAccessAuth = ClosedEnum<
  typeof DocumentGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentGlobalActionAuth = ClosedEnum<
  typeof DocumentGlobalActionAuth
>;

export type DocumentCreateDocumentTemporaryAuthOptions = {
  globalAccessAuth: Array<DocumentGlobalAccessAuth>;
  globalActionAuth: Array<DocumentGlobalActionAuth>;
};

export type DocumentFormValues = string | boolean | number;

export const DocumentDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type DocumentDocumentDataType = ClosedEnum<
  typeof DocumentDocumentDataType
>;

export type DocumentCreateDocumentTemporaryDocumentData = {
  type: DocumentDocumentDataType;
  id: string;
  data: string;
  initialData: string;
};

export const DocumentSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentSigningOrder = ClosedEnum<typeof DocumentSigningOrder>;

export const DocumentDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type DocumentDistributionMethod = ClosedEnum<
  typeof DocumentDistributionMethod
>;

export type DocumentEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentCreateDocumentTemporaryDocumentMeta = {
  signingOrder: DocumentSigningOrder;
  distributionMethod: DocumentDistributionMethod;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentEmailSettings | null;
};

export const DocumentFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type DocumentFolderType = ClosedEnum<typeof DocumentFolderType>;

export const DocumentFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentFolderVisibility = ClosedEnum<
  typeof DocumentFolderVisibility
>;

export type DocumentCreateDocumentTemporaryFolder = {
  id: string;
  name: string;
  type: DocumentFolderType;
  visibility: DocumentFolderVisibility;
  userId: number;
  teamId: number | null;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const DocumentRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type DocumentRole = ClosedEnum<typeof DocumentRole>;

export const DocumentCreateDocumentTemporaryReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type DocumentCreateDocumentTemporaryReadStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryReadStatus
>;

export const DocumentCreateDocumentTemporarySigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type DocumentCreateDocumentTemporarySigningStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySigningStatus
>;

export const DocumentCreateDocumentTemporarySendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type DocumentCreateDocumentTemporarySendStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentAccessAuth = ClosedEnum<typeof DocumentAccessAuth>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentActionAuth = ClosedEnum<typeof DocumentActionAuth>;

export type DocumentCreateDocumentTemporaryRecipientAuthOptions = {
  accessAuth: Array<DocumentAccessAuth>;
  actionAuth: Array<DocumentActionAuth>;
};

export type DocumentRecipient = {
  role: DocumentRole;
  readStatus: DocumentCreateDocumentTemporaryReadStatus;
  signingStatus: DocumentCreateDocumentTemporarySigningStatus;
  sendStatus: DocumentCreateDocumentTemporarySendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentCreateDocumentTemporaryRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const DocumentFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type DocumentFieldType = ClosedEnum<typeof DocumentFieldType>;

export const DocumentTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type DocumentTypeDropdown = ClosedEnum<typeof DocumentTypeDropdown>;

export type DocumentValue3 = {
  value: string;
};

export type FieldMetaDocumentDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeDropdown;
  values?: Array<DocumentValue3> | undefined;
  defaultValue?: string | undefined;
};

export const DocumentTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type DocumentTypeCheckbox = ClosedEnum<typeof DocumentTypeCheckbox>;

export type DocumentValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaDocumentCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeCheckbox;
  values?: Array<DocumentValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const DocumentTypeRadio = {
  Radio: "radio",
} as const;
export type DocumentTypeRadio = ClosedEnum<typeof DocumentTypeRadio>;

export type DocumentValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaDocumentRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeRadio;
  values?: Array<DocumentValue1> | undefined;
};

export const DocumentTypeNumber = {
  Number: "number",
} as const;
export type DocumentTypeNumber = ClosedEnum<typeof DocumentTypeNumber>;

export const DocumentTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign6 = ClosedEnum<typeof DocumentTextAlign6>;

export type FieldMetaDocumentNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign6 | undefined;
};

export const DocumentTypeText = {
  Text: "text",
} as const;
export type DocumentTypeText = ClosedEnum<typeof DocumentTypeText>;

export const DocumentTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign5 = ClosedEnum<typeof DocumentTextAlign5>;

export type FieldMetaDocumentText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign5 | undefined;
};

export const DocumentTypeDate = {
  Date: "date",
} as const;
export type DocumentTypeDate = ClosedEnum<typeof DocumentTypeDate>;

export const DocumentTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign4 = ClosedEnum<typeof DocumentTextAlign4>;

export type FieldMetaDocumentDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeDate;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign4 | undefined;
};

export const DocumentTypeEmail = {
  Email: "email",
} as const;
export type DocumentTypeEmail = ClosedEnum<typeof DocumentTypeEmail>;

export const DocumentTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign3 = ClosedEnum<typeof DocumentTextAlign3>;

export type FieldMetaDocumentEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeEmail;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign3 | undefined;
};

export const DocumentTypeName = {
  Name: "name",
} as const;
export type DocumentTypeName = ClosedEnum<typeof DocumentTypeName>;

export const DocumentTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign2 = ClosedEnum<typeof DocumentTextAlign2>;

export type FieldMetaDocumentName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeName;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign2 | undefined;
};

export const DocumentTypeInitials = {
  Initials: "initials",
} as const;
export type DocumentTypeInitials = ClosedEnum<typeof DocumentTypeInitials>;

export const DocumentTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign1 = ClosedEnum<typeof DocumentTextAlign1>;

export type FieldMetaDocumentInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeInitials;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign1 | undefined;
};

export type DocumentFieldMetaUnion =
  | FieldMetaDocumentRadio
  | FieldMetaDocumentInitials
  | FieldMetaDocumentName
  | FieldMetaDocumentEmail
  | FieldMetaDocumentDate
  | FieldMetaDocumentDropdown
  | FieldMetaDocumentCheckbox
  | FieldMetaDocumentText
  | FieldMetaDocumentNumber;

export type DocumentField = {
  type: DocumentFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMetaDocumentRadio
    | FieldMetaDocumentInitials
    | FieldMetaDocumentName
    | FieldMetaDocumentEmail
    | FieldMetaDocumentDate
    | FieldMetaDocumentDropdown
    | FieldMetaDocumentCheckbox
    | FieldMetaDocumentText
    | FieldMetaDocumentNumber
    | null;
};

export type Document = {
  visibility: DocumentVisibility;
  status: DocumentCreateDocumentTemporaryStatus;
  source: DocumentCreateDocumentTemporarySource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentCreateDocumentTemporaryAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  documentData: DocumentCreateDocumentTemporaryDocumentData;
  documentMeta: DocumentCreateDocumentTemporaryDocumentMeta | null;
  folder: DocumentCreateDocumentTemporaryFolder | null;
  recipients: Array<DocumentRecipient>;
  fields: Array<DocumentField>;
};

/**
 * Successful response
 */
export type DocumentCreateDocumentTemporaryResponse = {
  document: Document;
  /**
   * The URL to upload the document PDF to. Use a PUT request with the file via form-data
   */
  uploadUrl: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryVisibilityRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryVisibilityRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporaryVisibilityRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryVisibilityRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryVisibilityRequest> =
    DocumentCreateDocumentTemporaryVisibilityRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryVisibilityRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryVisibilityRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryVisibilityRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryVisibilityRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryVisibilityRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
  > = z.nativeEnum(DocumentCreateDocumentTemporaryGlobalAccessAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
  > = DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalActionAuthRequest
  > = z.nativeEnum(DocumentCreateDocumentTemporaryGlobalActionAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalActionAuthRequest
  > = DocumentCreateDocumentTemporaryGlobalActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryGlobalActionAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryGlobalActionAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryGlobalActionAuthRequest$outboundSchema;
}

/** @internal */
export const FormValuesRequest$inboundSchema: z.ZodType<
  FormValuesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type FormValuesRequest$Outbound = string | boolean | number;

/** @internal */
export const FormValuesRequest$outboundSchema: z.ZodType<
  FormValuesRequest$Outbound,
  z.ZodTypeDef,
  FormValuesRequest
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormValuesRequest$ {
  /** @deprecated use `FormValuesRequest$inboundSchema` instead. */
  export const inboundSchema = FormValuesRequest$inboundSchema;
  /** @deprecated use `FormValuesRequest$outboundSchema` instead. */
  export const outboundSchema = FormValuesRequest$outboundSchema;
  /** @deprecated use `FormValuesRequest$Outbound` instead. */
  export type Outbound = FormValuesRequest$Outbound;
}

export function formValuesRequestToJSON(
  formValuesRequest: FormValuesRequest,
): string {
  return JSON.stringify(
    FormValuesRequest$outboundSchema.parse(formValuesRequest),
  );
}

export function formValuesRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormValuesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormValuesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormValuesRequest' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRoleRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRoleRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRoleRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryRoleRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRoleRequest> =
    DocumentCreateDocumentTemporaryRoleRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRoleRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRoleRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRoleRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRoleRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRoleRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryAccessAuthRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporaryAccessAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryAccessAuthRequest> =
    DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryAccessAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryActionAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryActionAuthRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporaryActionAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryActionAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryActionAuthRequest> =
    DocumentCreateDocumentTemporaryActionAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryActionAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryActionAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryActionAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryActionAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryActionAuthRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDropdown1$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown1
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeDropdown1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDropdown1$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown1
  > = DocumentCreateDocumentTemporaryRecipientTypeDropdown1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeDropdown1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDropdown1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDropdown1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDropdown1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDropdown1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDropdown2$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown2
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeDropdown2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDropdown2$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeDropdown2
  > = DocumentCreateDocumentTemporaryRecipientTypeDropdown2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeDropdown2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDropdown2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDropdown2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDropdown2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDropdown2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryValueDropdown$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryValueDropdown,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryValueDropdown$Outbound = {
  value: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryValueDropdown$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryValueDropdown$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryValueDropdown
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryValueDropdown$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryValueDropdown$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryValueDropdown$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueDropdown$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryValueDropdown$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueDropdown$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryValueDropdown$Outbound;
}

export function documentCreateDocumentTemporaryValueDropdownToJSON(
  documentCreateDocumentTemporaryValueDropdown:
    DocumentCreateDocumentTemporaryValueDropdown,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryValueDropdown$outboundSchema.parse(
      documentCreateDocumentTemporaryValueDropdown,
    ),
  );
}

export function documentCreateDocumentTemporaryValueDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryValueDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryValueDropdown$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryValueDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeDropdown2$inboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueDropdown$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<DocumentCreateDocumentTemporaryValueDropdown$Outbound>
      | undefined;
    defaultValue?: string | undefined;
  };

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeDropdown2$outboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueDropdown$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaDropdownToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaDropdown:
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$outboundSchema
      .parse(documentCreateDocumentTemporaryRecipientFieldMetaDropdown),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldDropdown,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeDropdown1$inboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$inboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldDropdown$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldDropdown$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldDropdown
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeDropdown1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaDropdown$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldDropdown$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDropdown$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldDropdown$Outbound;
}

export function documentCreateDocumentTemporaryFieldDropdownToJSON(
  documentCreateDocumentTemporaryFieldDropdown:
    DocumentCreateDocumentTemporaryFieldDropdown,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldDropdown,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox1
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeCheckbox1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox1
  > = DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox2
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeCheckbox2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeCheckbox2
  > = DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryValueCheckbox$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryValueCheckbox,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryValueCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryValueCheckbox$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryValueCheckbox$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryValueCheckbox
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryValueCheckbox$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryValueCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryValueCheckbox$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryValueCheckbox$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueCheckbox$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryValueCheckbox$Outbound;
}

export function documentCreateDocumentTemporaryValueCheckboxToJSON(
  documentCreateDocumentTemporaryValueCheckbox:
    DocumentCreateDocumentTemporaryValueCheckbox,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryValueCheckbox$outboundSchema.parse(
      documentCreateDocumentTemporaryValueCheckbox,
    ),
  );
}

export function documentCreateDocumentTemporaryValueCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryValueCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryValueCheckbox$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryValueCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$inboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueCheckbox$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    values?:
      | Array<DocumentCreateDocumentTemporaryValueCheckbox$Outbound>
      | undefined;
    validationRule?: string | undefined;
    validationLength?: number | undefined;
  };

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox2$outboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueCheckbox$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaCheckboxToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaCheckbox:
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$outboundSchema
      .parse(documentCreateDocumentTemporaryRecipientFieldMetaCheckbox),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldCheckbox,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$inboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$inboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldCheckbox$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldCheckbox$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldCheckbox
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeCheckbox1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaCheckbox$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldCheckbox$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldCheckbox$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldCheckbox$Outbound;
}

export function documentCreateDocumentTemporaryFieldCheckboxToJSON(
  documentCreateDocumentTemporaryFieldCheckbox:
    DocumentCreateDocumentTemporaryFieldCheckbox,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldCheckbox,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeRadio1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeRadio1> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeRadio1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeRadio1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeRadio1> =
    DocumentCreateDocumentTemporaryRecipientTypeRadio1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeRadio1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeRadio1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeRadio1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeRadio1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeRadio1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeRadio2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeRadio2> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeRadio2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeRadio2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeRadio2> =
    DocumentCreateDocumentTemporaryRecipientTypeRadio2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeRadio2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeRadio2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeRadio2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeRadio2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeRadio2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryValueRadio$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryValueRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryValueRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryValueRadio$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryValueRadio$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryValueRadio
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryValueRadio$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryValueRadio$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryValueRadio$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueRadio$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryValueRadio$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryValueRadio$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryValueRadio$Outbound;
}

export function documentCreateDocumentTemporaryValueRadioToJSON(
  documentCreateDocumentTemporaryValueRadio:
    DocumentCreateDocumentTemporaryValueRadio,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryValueRadio$outboundSchema.parse(
      documentCreateDocumentTemporaryValueRadio,
    ),
  );
}

export function documentCreateDocumentTemporaryValueRadioFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryValueRadio,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryValueRadio$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryValueRadio' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeRadio2$inboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueRadio$inboundSchema),
    ).optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<DocumentCreateDocumentTemporaryValueRadio$Outbound>
    | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeRadio2$outboundSchema,
    values: z.array(
      z.lazy(() => DocumentCreateDocumentTemporaryValueRadio$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaRadioToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaRadio:
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientFieldMetaRadio,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaRadio,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldRadio$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeRadio1$inboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$inboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFieldRadio$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldRadio$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldRadio$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldRadio
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeRadio1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaRadio$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldRadio$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldRadio$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldRadio$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldRadio$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldRadio$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldRadio$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldRadio$Outbound;
}

export function documentCreateDocumentTemporaryFieldRadioToJSON(
  documentCreateDocumentTemporaryFieldRadio:
    DocumentCreateDocumentTemporaryFieldRadio,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldRadio$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldRadio,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldRadio,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldRadio$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldRadio' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeNumber1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeNumber1> =
    z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeNumber1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeNumber1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeNumber1> =
    DocumentCreateDocumentTemporaryRecipientTypeNumber1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeNumber1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeNumber1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeNumber1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeNumber1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeNumber1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeNumber2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeNumber2> =
    z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeNumber2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeNumber2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeNumber2> =
    DocumentCreateDocumentTemporaryRecipientTypeNumber2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeNumber2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeNumber2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeNumber2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeNumber2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeNumber2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignNumber$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignNumber> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignNumber);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignNumber$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignNumber> =
    DocumentCreateDocumentTemporaryTextAlignNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignNumber$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignNumber$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignNumber$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignNumber$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignNumber$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeNumber2$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignNumber$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeNumber2$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignNumber$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaNumberToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaNumber:
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$outboundSchema
      .parse(documentCreateDocumentTemporaryRecipientFieldMetaNumber),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldNumber$inboundSchema:
  z.ZodType<DocumentCreateDocumentTemporaryFieldNumber, z.ZodTypeDef, unknown> =
    z.object({
      type: DocumentCreateDocumentTemporaryRecipientTypeNumber1$inboundSchema,
      fieldMeta: z.lazy(() =>
        DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$inboundSchema
      ).optional(),
      pageNumber: z.number(),
      pageX: z.number(),
      pageY: z.number(),
      width: z.number(),
      height: z.number(),
    });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldNumber$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldNumber$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldNumber$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldNumber
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeNumber1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaNumber$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldNumber$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldNumber$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldNumber$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldNumber$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldNumber$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldNumber$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldNumber$Outbound;
}

export function documentCreateDocumentTemporaryFieldNumberToJSON(
  documentCreateDocumentTemporaryFieldNumber:
    DocumentCreateDocumentTemporaryFieldNumber,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldNumber$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldNumber,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldNumber$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldNumber' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeText1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeText1> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeText1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeText1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeText1> =
    DocumentCreateDocumentTemporaryRecipientTypeText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeText1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeText1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeText1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeText1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeText1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeText2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeText2> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeText2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeText2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeText2> =
    DocumentCreateDocumentTemporaryRecipientTypeText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeText2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeText2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeText2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeText2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeText2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignText$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignText> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignText);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignText$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignText> =
    DocumentCreateDocumentTemporaryTextAlignText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignText$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignText$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignText$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignText$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignText$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaText$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeText2$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignText$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaText$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaText
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeText2$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignText$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaText$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaText$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaText$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaTextToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaText:
    DocumentCreateDocumentTemporaryRecipientFieldMetaText,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientFieldMetaText,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaText' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldText$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeText1$inboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$inboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFieldText$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaText$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldText$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldText$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryFieldText
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeText1$outboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaText$outboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldText$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldText$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldText$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldText$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldText$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldText$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldText$Outbound;
}

export function documentCreateDocumentTemporaryFieldTextToJSON(
  documentCreateDocumentTemporaryFieldText:
    DocumentCreateDocumentTemporaryFieldText,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldText$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldText,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldText' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDate1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeDate1> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeDate1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDate1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeDate1> =
    DocumentCreateDocumentTemporaryRecipientTypeDate1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeDate1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDate1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDate1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDate1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDate1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDate2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeDate2> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeDate2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeDate2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeDate2> =
    DocumentCreateDocumentTemporaryRecipientTypeDate2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeDate2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDate2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDate2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeDate2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeDate2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignDate$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignDate> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignDate);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignDate$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignDate> =
    DocumentCreateDocumentTemporaryTextAlignDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignDate$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignDate$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignDate$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignDate$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignDate$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaDate$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeDate2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignDate$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaDate$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeDate2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignDate$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaDate$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaDate$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaDateToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaDate:
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientFieldMetaDate,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaDate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaDate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldDate$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeDate1$inboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$inboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFieldDate$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaDate$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldDate$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldDate$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryFieldDate
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeDate1$outboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaDate$outboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldDate$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDate$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldDate$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDate$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldDate$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldDate$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldDate$Outbound;
}

export function documentCreateDocumentTemporaryFieldDateToJSON(
  documentCreateDocumentTemporaryFieldDate:
    DocumentCreateDocumentTemporaryFieldDate,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldDate$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldDate,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldDate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldDate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldDate' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeEmail1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeEmail1> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeEmail1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeEmail1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeEmail1> =
    DocumentCreateDocumentTemporaryRecipientTypeEmail1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeEmail1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeEmail1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeEmail1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeEmail1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeEmail1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeEmail2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeEmail2> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeEmail2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeEmail2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeEmail2> =
    DocumentCreateDocumentTemporaryRecipientTypeEmail2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeEmail2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeEmail2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeEmail2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeEmail2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeEmail2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignEmail$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignEmail> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignEmail);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignEmail$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignEmail> =
    DocumentCreateDocumentTemporaryTextAlignEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignEmail$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignEmail$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignEmail$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignEmail$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignEmail$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeEmail2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignEmail$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeEmail2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignEmail$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaEmailToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaEmail:
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientFieldMetaEmail,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaEmail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldEmail$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeEmail1$inboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$inboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFieldEmail$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldEmail$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldEmail$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldEmail
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeEmail1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaEmail$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldEmail$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldEmail$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldEmail$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldEmail$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldEmail$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldEmail$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldEmail$Outbound;
}

export function documentCreateDocumentTemporaryFieldEmailToJSON(
  documentCreateDocumentTemporaryFieldEmail:
    DocumentCreateDocumentTemporaryFieldEmail,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldEmail$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldEmail,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldEmailFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldEmail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldEmail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldEmail' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeName1$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeName1> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeName1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeName1$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeName1> =
    DocumentCreateDocumentTemporaryRecipientTypeName1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeName1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeName1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeName1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeName1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeName1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeName2$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeName2> = z
    .nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeName2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeName2$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryRecipientTypeName2> =
    DocumentCreateDocumentTemporaryRecipientTypeName2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeName2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeName2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeName2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeName2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeName2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignName$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignName> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignName);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignName$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignName> =
    DocumentCreateDocumentTemporaryTextAlignName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignName$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignName$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignName$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignName$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignName$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaName$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaName,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeName2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignName$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaName$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaName
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeName2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignName$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaName$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaName$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaName$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaNameToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaName:
    DocumentCreateDocumentTemporaryRecipientFieldMetaName,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientFieldMetaName,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaName' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldName$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeName1$inboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$inboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFieldName$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaName$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldName$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldName$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryFieldName
> = z.object({
  type: DocumentCreateDocumentTemporaryRecipientTypeName1$outboundSchema,
  fieldMeta: z.lazy(() =>
    DocumentCreateDocumentTemporaryRecipientFieldMetaName$outboundSchema
  ).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldName$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldName$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldName$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldName$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldName$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldName$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldName$Outbound;
}

export function documentCreateDocumentTemporaryFieldNameToJSON(
  documentCreateDocumentTemporaryFieldName:
    DocumentCreateDocumentTemporaryFieldName,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldName$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldName,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldNameFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldName' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeInitials1$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeInitials1
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeInitials1);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeInitials1$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeInitials1
  > = DocumentCreateDocumentTemporaryRecipientTypeInitials1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeInitials1$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeInitials1$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeInitials1$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeInitials1$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeInitials1$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeInitials2$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeInitials2
  > = z.nativeEnum(DocumentCreateDocumentTemporaryRecipientTypeInitials2);

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientTypeInitials2$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryRecipientTypeInitials2
  > = DocumentCreateDocumentTemporaryRecipientTypeInitials2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientTypeInitials2$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeInitials2$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeInitials2$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientTypeInitials2$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientTypeInitials2$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignInitials$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignInitials> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTextAlignInitials);

/** @internal */
export const DocumentCreateDocumentTemporaryTextAlignInitials$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTextAlignInitials> =
    DocumentCreateDocumentTemporaryTextAlignInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTextAlignInitials$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignInitials$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTextAlignInitials$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTextAlignInitials$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTextAlignInitials$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeInitials2$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignInitials$inboundSchema
      .optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$Outbound =
  {
    label?: string | undefined;
    placeholder?: string | undefined;
    required?: boolean | undefined;
    readOnly?: boolean | undefined;
    type: string;
    fontSize?: number | undefined;
    textAlign?: string | undefined;
  };

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: DocumentCreateDocumentTemporaryRecipientTypeInitials2$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: DocumentCreateDocumentTemporaryTextAlignInitials$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$Outbound;
}

export function documentCreateDocumentTemporaryRecipientFieldMetaInitialsToJSON(
  documentCreateDocumentTemporaryRecipientFieldMetaInitials:
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$outboundSchema
      .parse(documentCreateDocumentTemporaryRecipientFieldMetaInitials),
  );
}

export function documentCreateDocumentTemporaryRecipientFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientFieldMetaInitials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldInitials$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldInitials,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeInitials1$inboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$inboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldInitials$Outbound = {
  type: string;
  fieldMeta?:
    | DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$Outbound
    | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldInitials$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldInitials$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldInitials
  > = z.object({
    type: DocumentCreateDocumentTemporaryRecipientTypeInitials1$outboundSchema,
    fieldMeta: z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientFieldMetaInitials$outboundSchema
    ).optional(),
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldInitials$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldInitials$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldInitials$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldInitials$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldInitials$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldInitials$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldInitials$Outbound;
}

export function documentCreateDocumentTemporaryFieldInitialsToJSON(
  documentCreateDocumentTemporaryFieldInitials:
    DocumentCreateDocumentTemporaryFieldInitials,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldInitials$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldInitials,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldInitialsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldInitials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldInitials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldInitials' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryTypeFreeSignature$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTypeFreeSignature> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTypeFreeSignature);

/** @internal */
export const DocumentCreateDocumentTemporaryTypeFreeSignature$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTypeFreeSignature> =
    DocumentCreateDocumentTemporaryTypeFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTypeFreeSignature$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTypeFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTypeFreeSignature$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTypeFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTypeFreeSignature$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldFreeSignature,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentCreateDocumentTemporaryTypeFreeSignature$inboundSchema,
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound = {
  type: string;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldFreeSignature
  > = z.object({
    type: DocumentCreateDocumentTemporaryTypeFreeSignature$outboundSchema,
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldFreeSignature$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound;
}

export function documentCreateDocumentTemporaryFieldFreeSignatureToJSON(
  documentCreateDocumentTemporaryFieldFreeSignature:
    DocumentCreateDocumentTemporaryFieldFreeSignature,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldFreeSignature,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldFreeSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldFreeSignature' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryTypeSignature$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTypeSignature> = z
    .nativeEnum(DocumentCreateDocumentTemporaryTypeSignature);

/** @internal */
export const DocumentCreateDocumentTemporaryTypeSignature$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryTypeSignature> =
    DocumentCreateDocumentTemporaryTypeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryTypeSignature$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryTypeSignature$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryTypeSignature$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryTypeSignature$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryTypeSignature$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldSignature$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldSignature,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentCreateDocumentTemporaryTypeSignature$inboundSchema,
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryFieldSignature$Outbound = {
  type: string;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFieldSignature$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldSignature$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldSignature
  > = z.object({
    type: DocumentCreateDocumentTemporaryTypeSignature$outboundSchema,
    pageNumber: z.number(),
    pageX: z.number(),
    pageY: z.number(),
    width: z.number(),
    height: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldSignature$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldSignature$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldSignature$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldSignature$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldSignature$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldSignature$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldSignature$Outbound;
}

export function documentCreateDocumentTemporaryFieldSignatureToJSON(
  documentCreateDocumentTemporaryFieldSignature:
    DocumentCreateDocumentTemporaryFieldSignature,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldSignature$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldSignature,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldSignatureFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldSignature,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldSignature$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldSignature' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryFieldUnion$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFieldUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DocumentCreateDocumentTemporaryFieldSignature$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldInitials$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldName$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldEmail$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldDate$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldText$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldNumber$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldRadio$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema),
  z.lazy(() => DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema),
]);

/** @internal */
export type DocumentCreateDocumentTemporaryFieldUnion$Outbound =
  | DocumentCreateDocumentTemporaryFieldSignature$Outbound
  | DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound
  | DocumentCreateDocumentTemporaryFieldInitials$Outbound
  | DocumentCreateDocumentTemporaryFieldName$Outbound
  | DocumentCreateDocumentTemporaryFieldEmail$Outbound
  | DocumentCreateDocumentTemporaryFieldDate$Outbound
  | DocumentCreateDocumentTemporaryFieldText$Outbound
  | DocumentCreateDocumentTemporaryFieldNumber$Outbound
  | DocumentCreateDocumentTemporaryFieldRadio$Outbound
  | DocumentCreateDocumentTemporaryFieldCheckbox$Outbound
  | DocumentCreateDocumentTemporaryFieldDropdown$Outbound;

/** @internal */
export const DocumentCreateDocumentTemporaryFieldUnion$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryFieldUnion$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryFieldUnion
  > = z.union([
    z.lazy(() => DocumentCreateDocumentTemporaryFieldSignature$outboundSchema),
    z.lazy(() =>
      DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema
    ),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldInitials$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldName$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldEmail$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldDate$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldText$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldNumber$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldRadio$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema),
    z.lazy(() => DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFieldUnion$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldUnion$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFieldUnion$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldUnion$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFieldUnion$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFieldUnion$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFieldUnion$Outbound;
}

export function documentCreateDocumentTemporaryFieldUnionToJSON(
  documentCreateDocumentTemporaryFieldUnion:
    DocumentCreateDocumentTemporaryFieldUnion,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFieldUnion$outboundSchema.parse(
      documentCreateDocumentTemporaryFieldUnion,
    ),
  );
}

export function documentCreateDocumentTemporaryFieldUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryFieldUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFieldUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryFieldUnion' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientRequest$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    email: z.string(),
    name: z.string(),
    role: DocumentCreateDocumentTemporaryRoleRequest$inboundSchema,
    signingOrder: z.number().optional(),
    accessAuth: z.array(
      DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema,
    ).optional(),
    actionAuth: z.array(
      DocumentCreateDocumentTemporaryActionAuthRequest$inboundSchema,
    ).optional(),
    fields: z.array(
      z.union([
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldSignature$inboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldFreeSignature$inboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldInitials$inboundSchema
        ),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldName$inboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldEmail$inboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldDate$inboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldText$inboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldNumber$inboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldRadio$inboundSchema),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldCheckbox$inboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldDropdown$inboundSchema
        ),
      ]),
    ).optional(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientRequest$Outbound = {
  email: string;
  name: string;
  role: string;
  signingOrder?: number | undefined;
  accessAuth?: Array<string> | undefined;
  actionAuth?: Array<string> | undefined;
  fields?:
    | Array<
      | DocumentCreateDocumentTemporaryFieldSignature$Outbound
      | DocumentCreateDocumentTemporaryFieldFreeSignature$Outbound
      | DocumentCreateDocumentTemporaryFieldInitials$Outbound
      | DocumentCreateDocumentTemporaryFieldName$Outbound
      | DocumentCreateDocumentTemporaryFieldEmail$Outbound
      | DocumentCreateDocumentTemporaryFieldDate$Outbound
      | DocumentCreateDocumentTemporaryFieldText$Outbound
      | DocumentCreateDocumentTemporaryFieldNumber$Outbound
      | DocumentCreateDocumentTemporaryFieldRadio$Outbound
      | DocumentCreateDocumentTemporaryFieldCheckbox$Outbound
      | DocumentCreateDocumentTemporaryFieldDropdown$Outbound
    >
    | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientRequest$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientRequest$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientRequest
  > = z.object({
    email: z.string(),
    name: z.string(),
    role: DocumentCreateDocumentTemporaryRoleRequest$outboundSchema,
    signingOrder: z.number().optional(),
    accessAuth: z.array(
      DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema,
    ).optional(),
    actionAuth: z.array(
      DocumentCreateDocumentTemporaryActionAuthRequest$outboundSchema,
    ).optional(),
    fields: z.array(
      z.union([
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldSignature$outboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldFreeSignature$outboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldInitials$outboundSchema
        ),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldName$outboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldEmail$outboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldDate$outboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldText$outboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldNumber$outboundSchema),
        z.lazy(() => DocumentCreateDocumentTemporaryFieldRadio$outboundSchema),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldCheckbox$outboundSchema
        ),
        z.lazy(() =>
          DocumentCreateDocumentTemporaryFieldDropdown$outboundSchema
        ),
      ]),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientRequest$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientRequest$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientRequest$Outbound;
}

export function documentCreateDocumentTemporaryRecipientRequestToJSON(
  documentCreateDocumentTemporaryRecipientRequest:
    DocumentCreateDocumentTemporaryRecipientRequest,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientRequest$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientRequest,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientRequest' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryDateFormat$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryDateFormat> = z
    .nativeEnum(DocumentCreateDocumentTemporaryDateFormat);

/** @internal */
export const DocumentCreateDocumentTemporaryDateFormat$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryDateFormat> =
    DocumentCreateDocumentTemporaryDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDateFormat$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDateFormat$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDateFormat$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDateFormat$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDateFormat$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryDistributionMethodRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryDistributionMethodRequest
  > = z.nativeEnum(DocumentCreateDocumentTemporaryDistributionMethodRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryDistributionMethodRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryDistributionMethodRequest
  > = DocumentCreateDocumentTemporaryDistributionMethodRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDistributionMethodRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDistributionMethodRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDistributionMethodRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDistributionMethodRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDistributionMethodRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySigningOrderRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningOrderRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporarySigningOrderRequest);

/** @internal */
export const DocumentCreateDocumentTemporarySigningOrderRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningOrderRequest> =
    DocumentCreateDocumentTemporarySigningOrderRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySigningOrderRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySigningOrderRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySigningOrderRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySigningOrderRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySigningOrderRequest$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryLanguage$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryLanguage> = z
    .nativeEnum(DocumentCreateDocumentTemporaryLanguage);

/** @internal */
export const DocumentCreateDocumentTemporaryLanguage$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryLanguage> =
    DocumentCreateDocumentTemporaryLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryLanguage$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryLanguage$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryLanguage$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryLanguage$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryLanguage$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryEmailSettingsRequest$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryEmailSettingsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryEmailSettingsRequest$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentCreateDocumentTemporaryEmailSettingsRequest$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryEmailSettingsRequest$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryEmailSettingsRequest
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryEmailSettingsRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryEmailSettingsRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryEmailSettingsRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryEmailSettingsRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryEmailSettingsRequest$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryEmailSettingsRequest$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryEmailSettingsRequest$Outbound;
}

export function documentCreateDocumentTemporaryEmailSettingsRequestToJSON(
  documentCreateDocumentTemporaryEmailSettingsRequest:
    DocumentCreateDocumentTemporaryEmailSettingsRequest,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryEmailSettingsRequest$outboundSchema.parse(
      documentCreateDocumentTemporaryEmailSettingsRequest,
    ),
  );
}

export function documentCreateDocumentTemporaryEmailSettingsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryEmailSettingsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryEmailSettingsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryEmailSettingsRequest' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryMeta$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentCreateDocumentTemporaryDateFormat$inboundSchema
    .optional(),
  distributionMethod:
    DocumentCreateDocumentTemporaryDistributionMethodRequest$inboundSchema
      .optional(),
  signingOrder: DocumentCreateDocumentTemporarySigningOrderRequest$inboundSchema
    .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentCreateDocumentTemporaryLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() =>
    DocumentCreateDocumentTemporaryEmailSettingsRequest$inboundSchema
  ).optional(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  signingOrder?: string | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  emailSettings?:
    | DocumentCreateDocumentTemporaryEmailSettingsRequest$Outbound
    | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryMeta$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryMeta$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentCreateDocumentTemporaryDateFormat$outboundSchema
    .optional(),
  distributionMethod:
    DocumentCreateDocumentTemporaryDistributionMethodRequest$outboundSchema
      .optional(),
  signingOrder:
    DocumentCreateDocumentTemporarySigningOrderRequest$outboundSchema
      .optional(),
  redirectUrl: z.string().optional(),
  language: DocumentCreateDocumentTemporaryLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() =>
    DocumentCreateDocumentTemporaryEmailSettingsRequest$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryMeta$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryMeta$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryMeta$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryMeta$Outbound;
}

export function documentCreateDocumentTemporaryMetaToJSON(
  documentCreateDocumentTemporaryMeta: DocumentCreateDocumentTemporaryMeta,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryMeta$outboundSchema.parse(
      documentCreateDocumentTemporaryMeta,
    ),
  );
}

export function documentCreateDocumentTemporaryMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentCreateDocumentTemporaryMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryMeta' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRequest$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  externalId: z.string().optional(),
  visibility: DocumentCreateDocumentTemporaryVisibilityRequest$inboundSchema
    .optional(),
  globalAccessAuth: z.array(
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    DocumentCreateDocumentTemporaryGlobalActionAuthRequest$inboundSchema,
  ).optional(),
  formValues: z.record(z.union([z.string(), z.boolean(), z.number()]))
    .optional(),
  recipients: z.array(
    z.lazy(() => DocumentCreateDocumentTemporaryRecipientRequest$inboundSchema),
  ).optional(),
  meta: z.lazy(() => DocumentCreateDocumentTemporaryMeta$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryRequest$Outbound = {
  title: string;
  externalId?: string | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: Array<string> | undefined;
  globalActionAuth?: Array<string> | undefined;
  formValues?: { [k: string]: string | boolean | number } | undefined;
  recipients?:
    | Array<DocumentCreateDocumentTemporaryRecipientRequest$Outbound>
    | undefined;
  meta?: DocumentCreateDocumentTemporaryMeta$Outbound | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRequest$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryRequest$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryRequest
> = z.object({
  title: z.string(),
  externalId: z.string().optional(),
  visibility: DocumentCreateDocumentTemporaryVisibilityRequest$outboundSchema
    .optional(),
  globalAccessAuth: z.array(
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema,
  ).optional(),
  globalActionAuth: z.array(
    DocumentCreateDocumentTemporaryGlobalActionAuthRequest$outboundSchema,
  ).optional(),
  formValues: z.record(z.union([z.string(), z.boolean(), z.number()]))
    .optional(),
  recipients: z.array(
    z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientRequest$outboundSchema
    ),
  ).optional(),
  meta: z.lazy(() => DocumentCreateDocumentTemporaryMeta$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRequest$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryRequest$Outbound;
}

export function documentCreateDocumentTemporaryRequestToJSON(
  documentCreateDocumentTemporaryRequest:
    DocumentCreateDocumentTemporaryRequest,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRequest$outboundSchema.parse(
      documentCreateDocumentTemporaryRequest,
    ),
  );
}

export function documentCreateDocumentTemporaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentCreateDocumentTemporaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRequest' from JSON`,
  );
}

/** @internal */
export const DocumentVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibility
> = z.nativeEnum(DocumentVisibility);

/** @internal */
export const DocumentVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibility
> = DocumentVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibility$ {
  /** @deprecated use `DocumentVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentVisibility$inboundSchema;
  /** @deprecated use `DocumentVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentVisibility$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryStatus> = z.nativeEnum(
    DocumentCreateDocumentTemporaryStatus,
  );

/** @internal */
export const DocumentCreateDocumentTemporaryStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryStatus> =
    DocumentCreateDocumentTemporaryStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySource$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySource> = z.nativeEnum(
    DocumentCreateDocumentTemporarySource,
  );

/** @internal */
export const DocumentCreateDocumentTemporarySource$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySource> =
    DocumentCreateDocumentTemporarySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySource$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySource$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySource$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySource$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySource$outboundSchema;
}

/** @internal */
export const DocumentGlobalAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalAccessAuth
> = z.nativeEnum(DocumentGlobalAccessAuth);

/** @internal */
export const DocumentGlobalAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalAccessAuth
> = DocumentGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGlobalAccessAuth$ {
  /** @deprecated use `DocumentGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentGlobalActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalActionAuth
> = z.nativeEnum(DocumentGlobalActionAuth);

/** @internal */
export const DocumentGlobalActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalActionAuth
> = DocumentGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGlobalActionAuth$ {
  /** @deprecated use `DocumentGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryAuthOptions$inboundSchema:
  z.ZodType<DocumentCreateDocumentTemporaryAuthOptions, z.ZodTypeDef, unknown> =
    z.object({
      globalAccessAuth: z.array(DocumentGlobalAccessAuth$inboundSchema),
      globalActionAuth: z.array(DocumentGlobalActionAuth$inboundSchema),
    });

/** @internal */
export type DocumentCreateDocumentTemporaryAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const DocumentCreateDocumentTemporaryAuthOptions$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryAuthOptions
  > = z.object({
    globalAccessAuth: z.array(DocumentGlobalAccessAuth$outboundSchema),
    globalActionAuth: z.array(DocumentGlobalActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryAuthOptions$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryAuthOptions$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryAuthOptions$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryAuthOptions$Outbound;
}

export function documentCreateDocumentTemporaryAuthOptionsToJSON(
  documentCreateDocumentTemporaryAuthOptions:
    DocumentCreateDocumentTemporaryAuthOptions,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryAuthOptions$outboundSchema.parse(
      documentCreateDocumentTemporaryAuthOptions,
    ),
  );
}

export function documentCreateDocumentTemporaryAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFormValues$inboundSchema: z.ZodType<
  DocumentFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentFormValues$outboundSchema: z.ZodType<
  DocumentFormValues$Outbound,
  z.ZodTypeDef,
  DocumentFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFormValues$ {
  /** @deprecated use `DocumentFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentFormValues$inboundSchema;
  /** @deprecated use `DocumentFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentFormValues$outboundSchema;
  /** @deprecated use `DocumentFormValues$Outbound` instead. */
  export type Outbound = DocumentFormValues$Outbound;
}

export function documentFormValuesToJSON(
  documentFormValues: DocumentFormValues,
): string {
  return JSON.stringify(
    DocumentFormValues$outboundSchema.parse(documentFormValues),
  );
}

export function documentFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentDocumentDataType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDocumentDataType
> = z.nativeEnum(DocumentDocumentDataType);

/** @internal */
export const DocumentDocumentDataType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDocumentDataType
> = DocumentDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDocumentDataType$ {
  /** @deprecated use `DocumentDocumentDataType$inboundSchema` instead. */
  export const inboundSchema = DocumentDocumentDataType$inboundSchema;
  /** @deprecated use `DocumentDocumentDataType$outboundSchema` instead. */
  export const outboundSchema = DocumentDocumentDataType$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentData$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentDocumentDataType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentData$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentData$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryDocumentData
  > = z.object({
    type: DocumentDocumentDataType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDocumentData$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDocumentData$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryDocumentData$Outbound;
}

export function documentCreateDocumentTemporaryDocumentDataToJSON(
  documentCreateDocumentTemporaryDocumentData:
    DocumentCreateDocumentTemporaryDocumentData,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema.parse(
      documentCreateDocumentTemporaryDocumentData,
    ),
  );
}

export function documentCreateDocumentTemporaryDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryDocumentData' from JSON`,
  );
}

/** @internal */
export const DocumentSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSigningOrder
> = z.nativeEnum(DocumentSigningOrder);

/** @internal */
export const DocumentSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSigningOrder
> = DocumentSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSigningOrder$ {
  /** @deprecated use `DocumentSigningOrder$inboundSchema` instead. */
  export const inboundSchema = DocumentSigningOrder$inboundSchema;
  /** @deprecated use `DocumentSigningOrder$outboundSchema` instead. */
  export const outboundSchema = DocumentSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentDistributionMethod$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributionMethod
> = z.nativeEnum(DocumentDistributionMethod);

/** @internal */
export const DocumentDistributionMethod$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributionMethod
> = DocumentDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributionMethod$ {
  /** @deprecated use `DocumentDistributionMethod$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentDistributionMethod$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentEmailSettings$inboundSchema: z.ZodType<
  DocumentEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentEmailSettings$outboundSchema: z.ZodType<
  DocumentEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentEmailSettings$ {
  /** @deprecated use `DocumentEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentEmailSettings$inboundSchema;
  /** @deprecated use `DocumentEmailSettings$outboundSchema` instead. */
  export const outboundSchema = DocumentEmailSettings$outboundSchema;
  /** @deprecated use `DocumentEmailSettings$Outbound` instead. */
  export type Outbound = DocumentEmailSettings$Outbound;
}

export function documentEmailSettingsToJSON(
  documentEmailSettings: DocumentEmailSettings,
): string {
  return JSON.stringify(
    DocumentEmailSettings$outboundSchema.parse(documentEmailSettings),
  );
}

export function documentEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    signingOrder: DocumentSigningOrder$inboundSchema,
    distributionMethod: DocumentDistributionMethod$inboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() => DocumentEmailSettings$inboundSchema),
    ),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryDocumentMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentEmailSettings$Outbound | null;
};

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentMeta$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryDocumentMeta
  > = z.object({
    signingOrder: DocumentSigningOrder$outboundSchema,
    distributionMethod: DocumentDistributionMethod$outboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() => DocumentEmailSettings$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDocumentMeta$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryDocumentMeta$Outbound;
}

export function documentCreateDocumentTemporaryDocumentMetaToJSON(
  documentCreateDocumentTemporaryDocumentMeta:
    DocumentCreateDocumentTemporaryDocumentMeta,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema.parse(
      documentCreateDocumentTemporaryDocumentMeta,
    ),
  );
}

export function documentCreateDocumentTemporaryDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryDocumentMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentFolderType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFolderType
> = z.nativeEnum(DocumentFolderType);

/** @internal */
export const DocumentFolderType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFolderType
> = DocumentFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFolderType$ {
  /** @deprecated use `DocumentFolderType$inboundSchema` instead. */
  export const inboundSchema = DocumentFolderType$inboundSchema;
  /** @deprecated use `DocumentFolderType$outboundSchema` instead. */
  export const outboundSchema = DocumentFolderType$outboundSchema;
}

/** @internal */
export const DocumentFolderVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFolderVisibility
> = z.nativeEnum(DocumentFolderVisibility);

/** @internal */
export const DocumentFolderVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFolderVisibility
> = DocumentFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFolderVisibility$ {
  /** @deprecated use `DocumentFolderVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentFolderVisibility$inboundSchema;
  /** @deprecated use `DocumentFolderVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentFolderVisibility$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryFolder$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: DocumentFolderType$inboundSchema,
  visibility: DocumentFolderVisibility$inboundSchema,
  userId: z.number(),
  teamId: z.nullable(z.number()),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryFolder$Outbound = {
  id: string;
  name: string;
  type: string;
  visibility: string;
  userId: number;
  teamId: number | null;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryFolder$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryFolder$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryFolder
> = z.object({
  id: z.string(),
  name: z.string(),
  type: DocumentFolderType$outboundSchema,
  visibility: DocumentFolderVisibility$outboundSchema,
  userId: z.number(),
  teamId: z.nullable(z.number()),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryFolder$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryFolder$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryFolder$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFolder$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryFolder$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryFolder$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryFolder$Outbound;
}

export function documentCreateDocumentTemporaryFolderToJSON(
  documentCreateDocumentTemporaryFolder: DocumentCreateDocumentTemporaryFolder,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryFolder$outboundSchema.parse(
      documentCreateDocumentTemporaryFolder,
    ),
  );
}

export function documentCreateDocumentTemporaryFolderFromJSON(
  jsonString: string,
): SafeParseResult<DocumentCreateDocumentTemporaryFolder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryFolder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryFolder' from JSON`,
  );
}

/** @internal */
export const DocumentRole$inboundSchema: z.ZodNativeEnum<typeof DocumentRole> =
  z.nativeEnum(DocumentRole);

/** @internal */
export const DocumentRole$outboundSchema: z.ZodNativeEnum<typeof DocumentRole> =
  DocumentRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRole$ {
  /** @deprecated use `DocumentRole$inboundSchema` instead. */
  export const inboundSchema = DocumentRole$inboundSchema;
  /** @deprecated use `DocumentRole$outboundSchema` instead. */
  export const outboundSchema = DocumentRole$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryReadStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporaryReadStatus);

/** @internal */
export const DocumentCreateDocumentTemporaryReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryReadStatus> =
    DocumentCreateDocumentTemporaryReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryReadStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryReadStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryReadStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporarySigningStatus);

/** @internal */
export const DocumentCreateDocumentTemporarySigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningStatus> =
    DocumentCreateDocumentTemporarySigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySigningStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySigningStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySigningStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySendStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySendStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporarySendStatus);

/** @internal */
export const DocumentCreateDocumentTemporarySendStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySendStatus> =
    DocumentCreateDocumentTemporarySendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySendStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySendStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySendStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySendStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySendStatus$outboundSchema;
}

/** @internal */
export const DocumentAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentAccessAuth
> = z.nativeEnum(DocumentAccessAuth);

/** @internal */
export const DocumentAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentAccessAuth
> = DocumentAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAccessAuth$ {
  /** @deprecated use `DocumentAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentAccessAuth$inboundSchema;
  /** @deprecated use `DocumentAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentActionAuth
> = z.nativeEnum(DocumentActionAuth);

/** @internal */
export const DocumentActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentActionAuth
> = DocumentActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentActionAuth$ {
  /** @deprecated use `DocumentActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentActionAuth$inboundSchema;
  /** @deprecated use `DocumentActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentActionAuth$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.array(DocumentAccessAuth$inboundSchema),
    actionAuth: z.array(DocumentActionAuth$inboundSchema),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientAuthOptions
  > = z.object({
    accessAuth: z.array(DocumentAccessAuth$outboundSchema),
    actionAuth: z.array(DocumentActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientAuthOptions$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound;
}

export function documentCreateDocumentTemporaryRecipientAuthOptionsToJSON(
  documentCreateDocumentTemporaryRecipientAuthOptions:
    DocumentCreateDocumentTemporaryRecipientAuthOptions,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientAuthOptions,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentRecipient$inboundSchema: z.ZodType<
  DocumentRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DocumentRole$inboundSchema,
  readStatus: DocumentCreateDocumentTemporaryReadStatus$inboundSchema,
  signingStatus: DocumentCreateDocumentTemporarySigningStatus$inboundSchema,
  sendStatus: DocumentCreateDocumentTemporarySendStatus$inboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type DocumentRecipient$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions:
    | DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound
    | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const DocumentRecipient$outboundSchema: z.ZodType<
  DocumentRecipient$Outbound,
  z.ZodTypeDef,
  DocumentRecipient
> = z.object({
  role: DocumentRole$outboundSchema,
  readStatus: DocumentCreateDocumentTemporaryReadStatus$outboundSchema,
  signingStatus: DocumentCreateDocumentTemporarySigningStatus$outboundSchema,
  sendStatus: DocumentCreateDocumentTemporarySendStatus$outboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRecipient$ {
  /** @deprecated use `DocumentRecipient$inboundSchema` instead. */
  export const inboundSchema = DocumentRecipient$inboundSchema;
  /** @deprecated use `DocumentRecipient$outboundSchema` instead. */
  export const outboundSchema = DocumentRecipient$outboundSchema;
  /** @deprecated use `DocumentRecipient$Outbound` instead. */
  export type Outbound = DocumentRecipient$Outbound;
}

export function documentRecipientToJSON(
  documentRecipient: DocumentRecipient,
): string {
  return JSON.stringify(
    DocumentRecipient$outboundSchema.parse(documentRecipient),
  );
}

export function documentRecipientFromJSON(
  jsonString: string,
): SafeParseResult<DocumentRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentRecipient' from JSON`,
  );
}

/** @internal */
export const DocumentFieldType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFieldType
> = z.nativeEnum(DocumentFieldType);

/** @internal */
export const DocumentFieldType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFieldType
> = DocumentFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFieldType$ {
  /** @deprecated use `DocumentFieldType$inboundSchema` instead. */
  export const inboundSchema = DocumentFieldType$inboundSchema;
  /** @deprecated use `DocumentFieldType$outboundSchema` instead. */
  export const outboundSchema = DocumentFieldType$outboundSchema;
}

/** @internal */
export const DocumentTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDropdown
> = z.nativeEnum(DocumentTypeDropdown);

/** @internal */
export const DocumentTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDropdown
> = DocumentTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeDropdown$ {
  /** @deprecated use `DocumentTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeDropdown$inboundSchema;
  /** @deprecated use `DocumentTypeDropdown$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeDropdown$outboundSchema;
}

/** @internal */
export const DocumentValue3$inboundSchema: z.ZodType<
  DocumentValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type DocumentValue3$Outbound = {
  value: string;
};

/** @internal */
export const DocumentValue3$outboundSchema: z.ZodType<
  DocumentValue3$Outbound,
  z.ZodTypeDef,
  DocumentValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue3$ {
  /** @deprecated use `DocumentValue3$inboundSchema` instead. */
  export const inboundSchema = DocumentValue3$inboundSchema;
  /** @deprecated use `DocumentValue3$outboundSchema` instead. */
  export const outboundSchema = DocumentValue3$outboundSchema;
  /** @deprecated use `DocumentValue3$Outbound` instead. */
  export type Outbound = DocumentValue3$Outbound;
}

export function documentValue3ToJSON(documentValue3: DocumentValue3): string {
  return JSON.stringify(DocumentValue3$outboundSchema.parse(documentValue3));
}

export function documentValue3FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue3' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentDropdown$inboundSchema: z.ZodType<
  FieldMetaDocumentDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue3$inboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldMetaDocumentDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentDropdown$outboundSchema: z.ZodType<
  FieldMetaDocumentDropdown$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue3$outboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentDropdown$ {
  /** @deprecated use `FieldMetaDocumentDropdown$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentDropdown$inboundSchema;
  /** @deprecated use `FieldMetaDocumentDropdown$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentDropdown$outboundSchema;
  /** @deprecated use `FieldMetaDocumentDropdown$Outbound` instead. */
  export type Outbound = FieldMetaDocumentDropdown$Outbound;
}

export function fieldMetaDocumentDropdownToJSON(
  fieldMetaDocumentDropdown: FieldMetaDocumentDropdown,
): string {
  return JSON.stringify(
    FieldMetaDocumentDropdown$outboundSchema.parse(fieldMetaDocumentDropdown),
  );
}

export function fieldMetaDocumentDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeCheckbox
> = z.nativeEnum(DocumentTypeCheckbox);

/** @internal */
export const DocumentTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeCheckbox
> = DocumentTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeCheckbox$ {
  /** @deprecated use `DocumentTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeCheckbox$inboundSchema;
  /** @deprecated use `DocumentTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeCheckbox$outboundSchema;
}

/** @internal */
export const DocumentValue2$inboundSchema: z.ZodType<
  DocumentValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentValue2$outboundSchema: z.ZodType<
  DocumentValue2$Outbound,
  z.ZodTypeDef,
  DocumentValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue2$ {
  /** @deprecated use `DocumentValue2$inboundSchema` instead. */
  export const inboundSchema = DocumentValue2$inboundSchema;
  /** @deprecated use `DocumentValue2$outboundSchema` instead. */
  export const outboundSchema = DocumentValue2$outboundSchema;
  /** @deprecated use `DocumentValue2$Outbound` instead. */
  export type Outbound = DocumentValue2$Outbound;
}

export function documentValue2ToJSON(documentValue2: DocumentValue2): string {
  return JSON.stringify(DocumentValue2$outboundSchema.parse(documentValue2));
}

export function documentValue2FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue2' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentCheckbox$inboundSchema: z.ZodType<
  FieldMetaDocumentCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue2$inboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldMetaDocumentCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldMetaDocumentCheckbox$outboundSchema: z.ZodType<
  FieldMetaDocumentCheckbox$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue2$outboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentCheckbox$ {
  /** @deprecated use `FieldMetaDocumentCheckbox$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentCheckbox$inboundSchema;
  /** @deprecated use `FieldMetaDocumentCheckbox$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentCheckbox$outboundSchema;
  /** @deprecated use `FieldMetaDocumentCheckbox$Outbound` instead. */
  export type Outbound = FieldMetaDocumentCheckbox$Outbound;
}

export function fieldMetaDocumentCheckboxToJSON(
  fieldMetaDocumentCheckbox: FieldMetaDocumentCheckbox,
): string {
  return JSON.stringify(
    FieldMetaDocumentCheckbox$outboundSchema.parse(fieldMetaDocumentCheckbox),
  );
}

export function fieldMetaDocumentCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeRadio
> = z.nativeEnum(DocumentTypeRadio);

/** @internal */
export const DocumentTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeRadio
> = DocumentTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeRadio$ {
  /** @deprecated use `DocumentTypeRadio$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeRadio$inboundSchema;
  /** @deprecated use `DocumentTypeRadio$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeRadio$outboundSchema;
}

/** @internal */
export const DocumentValue1$inboundSchema: z.ZodType<
  DocumentValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentValue1$outboundSchema: z.ZodType<
  DocumentValue1$Outbound,
  z.ZodTypeDef,
  DocumentValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue1$ {
  /** @deprecated use `DocumentValue1$inboundSchema` instead. */
  export const inboundSchema = DocumentValue1$inboundSchema;
  /** @deprecated use `DocumentValue1$outboundSchema` instead. */
  export const outboundSchema = DocumentValue1$outboundSchema;
  /** @deprecated use `DocumentValue1$Outbound` instead. */
  export type Outbound = DocumentValue1$Outbound;
}

export function documentValue1ToJSON(documentValue1: DocumentValue1): string {
  return JSON.stringify(DocumentValue1$outboundSchema.parse(documentValue1));
}

export function documentValue1FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue1' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentRadio$inboundSchema: z.ZodType<
  FieldMetaDocumentRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue1$inboundSchema)).optional(),
});

/** @internal */
export type FieldMetaDocumentRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue1$Outbound> | undefined;
};

/** @internal */
export const FieldMetaDocumentRadio$outboundSchema: z.ZodType<
  FieldMetaDocumentRadio$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue1$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentRadio$ {
  /** @deprecated use `FieldMetaDocumentRadio$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentRadio$inboundSchema;
  /** @deprecated use `FieldMetaDocumentRadio$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentRadio$outboundSchema;
  /** @deprecated use `FieldMetaDocumentRadio$Outbound` instead. */
  export type Outbound = FieldMetaDocumentRadio$Outbound;
}

export function fieldMetaDocumentRadioToJSON(
  fieldMetaDocumentRadio: FieldMetaDocumentRadio,
): string {
  return JSON.stringify(
    FieldMetaDocumentRadio$outboundSchema.parse(fieldMetaDocumentRadio),
  );
}

export function fieldMetaDocumentRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentRadio' from JSON`,
  );
}

/** @internal */
export const DocumentTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeNumber
> = z.nativeEnum(DocumentTypeNumber);

/** @internal */
export const DocumentTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeNumber
> = DocumentTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeNumber$ {
  /** @deprecated use `DocumentTypeNumber$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeNumber$inboundSchema;
  /** @deprecated use `DocumentTypeNumber$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeNumber$outboundSchema;
}

/** @internal */
export const DocumentTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign6
> = z.nativeEnum(DocumentTextAlign6);

/** @internal */
export const DocumentTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign6
> = DocumentTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign6$ {
  /** @deprecated use `DocumentTextAlign6$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign6$inboundSchema;
  /** @deprecated use `DocumentTextAlign6$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign6$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentNumber$inboundSchema: z.ZodType<
  FieldMetaDocumentNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeNumber$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentNumber$outboundSchema: z.ZodType<
  FieldMetaDocumentNumber$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeNumber$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentNumber$ {
  /** @deprecated use `FieldMetaDocumentNumber$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentNumber$inboundSchema;
  /** @deprecated use `FieldMetaDocumentNumber$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentNumber$outboundSchema;
  /** @deprecated use `FieldMetaDocumentNumber$Outbound` instead. */
  export type Outbound = FieldMetaDocumentNumber$Outbound;
}

export function fieldMetaDocumentNumberToJSON(
  fieldMetaDocumentNumber: FieldMetaDocumentNumber,
): string {
  return JSON.stringify(
    FieldMetaDocumentNumber$outboundSchema.parse(fieldMetaDocumentNumber),
  );
}

export function fieldMetaDocumentNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentNumber' from JSON`,
  );
}

/** @internal */
export const DocumentTypeText$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeText
> = z.nativeEnum(DocumentTypeText);

/** @internal */
export const DocumentTypeText$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeText
> = DocumentTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeText$ {
  /** @deprecated use `DocumentTypeText$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeText$inboundSchema;
  /** @deprecated use `DocumentTypeText$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeText$outboundSchema;
}

/** @internal */
export const DocumentTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign5
> = z.nativeEnum(DocumentTextAlign5);

/** @internal */
export const DocumentTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign5
> = DocumentTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign5$ {
  /** @deprecated use `DocumentTextAlign5$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign5$inboundSchema;
  /** @deprecated use `DocumentTextAlign5$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign5$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentText$inboundSchema: z.ZodType<
  FieldMetaDocumentText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentText$outboundSchema: z.ZodType<
  FieldMetaDocumentText$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentText$ {
  /** @deprecated use `FieldMetaDocumentText$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentText$inboundSchema;
  /** @deprecated use `FieldMetaDocumentText$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentText$outboundSchema;
  /** @deprecated use `FieldMetaDocumentText$Outbound` instead. */
  export type Outbound = FieldMetaDocumentText$Outbound;
}

export function fieldMetaDocumentTextToJSON(
  fieldMetaDocumentText: FieldMetaDocumentText,
): string {
  return JSON.stringify(
    FieldMetaDocumentText$outboundSchema.parse(fieldMetaDocumentText),
  );
}

export function fieldMetaDocumentTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentText' from JSON`,
  );
}

/** @internal */
export const DocumentTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDate
> = z.nativeEnum(DocumentTypeDate);

/** @internal */
export const DocumentTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDate
> = DocumentTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeDate$ {
  /** @deprecated use `DocumentTypeDate$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeDate$inboundSchema;
  /** @deprecated use `DocumentTypeDate$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeDate$outboundSchema;
}

/** @internal */
export const DocumentTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign4
> = z.nativeEnum(DocumentTextAlign4);

/** @internal */
export const DocumentTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign4
> = DocumentTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign4$ {
  /** @deprecated use `DocumentTextAlign4$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign4$inboundSchema;
  /** @deprecated use `DocumentTextAlign4$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign4$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentDate$inboundSchema: z.ZodType<
  FieldMetaDocumentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentDate$outboundSchema: z.ZodType<
  FieldMetaDocumentDate$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentDate$ {
  /** @deprecated use `FieldMetaDocumentDate$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentDate$inboundSchema;
  /** @deprecated use `FieldMetaDocumentDate$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentDate$outboundSchema;
  /** @deprecated use `FieldMetaDocumentDate$Outbound` instead. */
  export type Outbound = FieldMetaDocumentDate$Outbound;
}

export function fieldMetaDocumentDateToJSON(
  fieldMetaDocumentDate: FieldMetaDocumentDate,
): string {
  return JSON.stringify(
    FieldMetaDocumentDate$outboundSchema.parse(fieldMetaDocumentDate),
  );
}

export function fieldMetaDocumentDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentDate' from JSON`,
  );
}

/** @internal */
export const DocumentTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeEmail
> = z.nativeEnum(DocumentTypeEmail);

/** @internal */
export const DocumentTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeEmail
> = DocumentTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeEmail$ {
  /** @deprecated use `DocumentTypeEmail$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeEmail$inboundSchema;
  /** @deprecated use `DocumentTypeEmail$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeEmail$outboundSchema;
}

/** @internal */
export const DocumentTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign3
> = z.nativeEnum(DocumentTextAlign3);

/** @internal */
export const DocumentTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign3
> = DocumentTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign3$ {
  /** @deprecated use `DocumentTextAlign3$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign3$inboundSchema;
  /** @deprecated use `DocumentTextAlign3$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign3$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentEmail$inboundSchema: z.ZodType<
  FieldMetaDocumentEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentEmail$outboundSchema: z.ZodType<
  FieldMetaDocumentEmail$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentEmail$ {
  /** @deprecated use `FieldMetaDocumentEmail$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentEmail$inboundSchema;
  /** @deprecated use `FieldMetaDocumentEmail$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentEmail$outboundSchema;
  /** @deprecated use `FieldMetaDocumentEmail$Outbound` instead. */
  export type Outbound = FieldMetaDocumentEmail$Outbound;
}

export function fieldMetaDocumentEmailToJSON(
  fieldMetaDocumentEmail: FieldMetaDocumentEmail,
): string {
  return JSON.stringify(
    FieldMetaDocumentEmail$outboundSchema.parse(fieldMetaDocumentEmail),
  );
}

export function fieldMetaDocumentEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentEmail' from JSON`,
  );
}

/** @internal */
export const DocumentTypeName$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeName
> = z.nativeEnum(DocumentTypeName);

/** @internal */
export const DocumentTypeName$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeName
> = DocumentTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeName$ {
  /** @deprecated use `DocumentTypeName$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeName$inboundSchema;
  /** @deprecated use `DocumentTypeName$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeName$outboundSchema;
}

/** @internal */
export const DocumentTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign2
> = z.nativeEnum(DocumentTextAlign2);

/** @internal */
export const DocumentTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign2
> = DocumentTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign2$ {
  /** @deprecated use `DocumentTextAlign2$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign2$inboundSchema;
  /** @deprecated use `DocumentTextAlign2$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign2$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentName$inboundSchema: z.ZodType<
  FieldMetaDocumentName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentName$outboundSchema: z.ZodType<
  FieldMetaDocumentName$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentName$ {
  /** @deprecated use `FieldMetaDocumentName$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentName$inboundSchema;
  /** @deprecated use `FieldMetaDocumentName$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentName$outboundSchema;
  /** @deprecated use `FieldMetaDocumentName$Outbound` instead. */
  export type Outbound = FieldMetaDocumentName$Outbound;
}

export function fieldMetaDocumentNameToJSON(
  fieldMetaDocumentName: FieldMetaDocumentName,
): string {
  return JSON.stringify(
    FieldMetaDocumentName$outboundSchema.parse(fieldMetaDocumentName),
  );
}

export function fieldMetaDocumentNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentName' from JSON`,
  );
}

/** @internal */
export const DocumentTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeInitials
> = z.nativeEnum(DocumentTypeInitials);

/** @internal */
export const DocumentTypeInitials$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeInitials
> = DocumentTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeInitials$ {
  /** @deprecated use `DocumentTypeInitials$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeInitials$inboundSchema;
  /** @deprecated use `DocumentTypeInitials$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeInitials$outboundSchema;
}

/** @internal */
export const DocumentTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign1
> = z.nativeEnum(DocumentTextAlign1);

/** @internal */
export const DocumentTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign1
> = DocumentTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign1$ {
  /** @deprecated use `DocumentTextAlign1$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign1$inboundSchema;
  /** @deprecated use `DocumentTextAlign1$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign1$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentInitials$inboundSchema: z.ZodType<
  FieldMetaDocumentInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentInitials$outboundSchema: z.ZodType<
  FieldMetaDocumentInitials$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentInitials$ {
  /** @deprecated use `FieldMetaDocumentInitials$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentInitials$inboundSchema;
  /** @deprecated use `FieldMetaDocumentInitials$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentInitials$outboundSchema;
  /** @deprecated use `FieldMetaDocumentInitials$Outbound` instead. */
  export type Outbound = FieldMetaDocumentInitials$Outbound;
}

export function fieldMetaDocumentInitialsToJSON(
  fieldMetaDocumentInitials: FieldMetaDocumentInitials,
): string {
  return JSON.stringify(
    FieldMetaDocumentInitials$outboundSchema.parse(fieldMetaDocumentInitials),
  );
}

export function fieldMetaDocumentInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentInitials' from JSON`,
  );
}

/** @internal */
export const DocumentFieldMetaUnion$inboundSchema: z.ZodType<
  DocumentFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldMetaDocumentRadio$inboundSchema),
  z.lazy(() => FieldMetaDocumentInitials$inboundSchema),
  z.lazy(() => FieldMetaDocumentName$inboundSchema),
  z.lazy(() => FieldMetaDocumentEmail$inboundSchema),
  z.lazy(() => FieldMetaDocumentDate$inboundSchema),
  z.lazy(() => FieldMetaDocumentDropdown$inboundSchema),
  z.lazy(() => FieldMetaDocumentCheckbox$inboundSchema),
  z.lazy(() => FieldMetaDocumentText$inboundSchema),
  z.lazy(() => FieldMetaDocumentNumber$inboundSchema),
]);

/** @internal */
export type DocumentFieldMetaUnion$Outbound =
  | FieldMetaDocumentRadio$Outbound
  | FieldMetaDocumentInitials$Outbound
  | FieldMetaDocumentName$Outbound
  | FieldMetaDocumentEmail$Outbound
  | FieldMetaDocumentDate$Outbound
  | FieldMetaDocumentDropdown$Outbound
  | FieldMetaDocumentCheckbox$Outbound
  | FieldMetaDocumentText$Outbound
  | FieldMetaDocumentNumber$Outbound;

/** @internal */
export const DocumentFieldMetaUnion$outboundSchema: z.ZodType<
  DocumentFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  DocumentFieldMetaUnion
> = z.union([
  z.lazy(() => FieldMetaDocumentRadio$outboundSchema),
  z.lazy(() => FieldMetaDocumentInitials$outboundSchema),
  z.lazy(() => FieldMetaDocumentName$outboundSchema),
  z.lazy(() => FieldMetaDocumentEmail$outboundSchema),
  z.lazy(() => FieldMetaDocumentDate$outboundSchema),
  z.lazy(() => FieldMetaDocumentDropdown$outboundSchema),
  z.lazy(() => FieldMetaDocumentCheckbox$outboundSchema),
  z.lazy(() => FieldMetaDocumentText$outboundSchema),
  z.lazy(() => FieldMetaDocumentNumber$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFieldMetaUnion$ {
  /** @deprecated use `DocumentFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema = DocumentFieldMetaUnion$inboundSchema;
  /** @deprecated use `DocumentFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema = DocumentFieldMetaUnion$outboundSchema;
  /** @deprecated use `DocumentFieldMetaUnion$Outbound` instead. */
  export type Outbound = DocumentFieldMetaUnion$Outbound;
}

export function documentFieldMetaUnionToJSON(
  documentFieldMetaUnion: DocumentFieldMetaUnion,
): string {
  return JSON.stringify(
    DocumentFieldMetaUnion$outboundSchema.parse(documentFieldMetaUnion),
  );
}

export function documentFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const DocumentField$inboundSchema: z.ZodType<
  DocumentField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMetaDocumentRadio$inboundSchema),
      z.lazy(() => FieldMetaDocumentInitials$inboundSchema),
      z.lazy(() => FieldMetaDocumentName$inboundSchema),
      z.lazy(() => FieldMetaDocumentEmail$inboundSchema),
      z.lazy(() => FieldMetaDocumentDate$inboundSchema),
      z.lazy(() => FieldMetaDocumentDropdown$inboundSchema),
      z.lazy(() => FieldMetaDocumentCheckbox$inboundSchema),
      z.lazy(() => FieldMetaDocumentText$inboundSchema),
      z.lazy(() => FieldMetaDocumentNumber$inboundSchema),
    ]),
  ),
});

/** @internal */
export type DocumentField$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMetaDocumentRadio$Outbound
    | FieldMetaDocumentInitials$Outbound
    | FieldMetaDocumentName$Outbound
    | FieldMetaDocumentEmail$Outbound
    | FieldMetaDocumentDate$Outbound
    | FieldMetaDocumentDropdown$Outbound
    | FieldMetaDocumentCheckbox$Outbound
    | FieldMetaDocumentText$Outbound
    | FieldMetaDocumentNumber$Outbound
    | null;
};

/** @internal */
export const DocumentField$outboundSchema: z.ZodType<
  DocumentField$Outbound,
  z.ZodTypeDef,
  DocumentField
> = z.object({
  type: DocumentFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMetaDocumentRadio$outboundSchema),
      z.lazy(() => FieldMetaDocumentInitials$outboundSchema),
      z.lazy(() => FieldMetaDocumentName$outboundSchema),
      z.lazy(() => FieldMetaDocumentEmail$outboundSchema),
      z.lazy(() => FieldMetaDocumentDate$outboundSchema),
      z.lazy(() => FieldMetaDocumentDropdown$outboundSchema),
      z.lazy(() => FieldMetaDocumentCheckbox$outboundSchema),
      z.lazy(() => FieldMetaDocumentText$outboundSchema),
      z.lazy(() => FieldMetaDocumentNumber$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentField$ {
  /** @deprecated use `DocumentField$inboundSchema` instead. */
  export const inboundSchema = DocumentField$inboundSchema;
  /** @deprecated use `DocumentField$outboundSchema` instead. */
  export const outboundSchema = DocumentField$outboundSchema;
  /** @deprecated use `DocumentField$Outbound` instead. */
  export type Outbound = DocumentField$Outbound;
}

export function documentFieldToJSON(documentField: DocumentField): string {
  return JSON.stringify(DocumentField$outboundSchema.parse(documentField));
}

export function documentFieldFromJSON(
  jsonString: string,
): SafeParseResult<DocumentField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentField' from JSON`,
  );
}

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentVisibility$inboundSchema,
  status: DocumentCreateDocumentTemporaryStatus$inboundSchema,
  source: DocumentCreateDocumentTemporarySource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  documentData: z.lazy(() =>
    DocumentCreateDocumentTemporaryDocumentData$inboundSchema
  ),
  documentMeta: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema),
  ),
  folder: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryFolder$inboundSchema),
  ),
  recipients: z.array(z.lazy(() => DocumentRecipient$inboundSchema)),
  fields: z.array(z.lazy(() => DocumentField$inboundSchema)),
});

/** @internal */
export type Document$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentCreateDocumentTemporaryAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  folderId: string | null;
  documentData: DocumentCreateDocumentTemporaryDocumentData$Outbound;
  documentMeta: DocumentCreateDocumentTemporaryDocumentMeta$Outbound | null;
  folder: DocumentCreateDocumentTemporaryFolder$Outbound | null;
  recipients: Array<DocumentRecipient$Outbound>;
  fields: Array<DocumentField$Outbound>;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  visibility: DocumentVisibility$outboundSchema,
  status: DocumentCreateDocumentTemporaryStatus$outboundSchema,
  source: DocumentCreateDocumentTemporarySource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  folderId: z.nullable(z.string()),
  documentData: z.lazy(() =>
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema
  ),
  documentMeta: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema),
  ),
  folder: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryFolder$outboundSchema),
  ),
  recipients: z.array(z.lazy(() => DocumentRecipient$outboundSchema)),
  fields: z.array(z.lazy(() => DocumentField$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}

export function documentToJSON(document: Document): string {
  return JSON.stringify(Document$outboundSchema.parse(document));
}

export function documentFromJSON(
  jsonString: string,
): SafeParseResult<Document, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Document$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Document' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryResponse$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  document: z.lazy(() => Document$inboundSchema),
  uploadUrl: z.string(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryResponse$Outbound = {
  document: Document$Outbound;
  uploadUrl: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryResponse$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryResponse$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryResponse
> = z.object({
  document: z.lazy(() => Document$outboundSchema),
  uploadUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryResponse$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryResponse$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryResponse$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryResponse$Outbound;
}

export function documentCreateDocumentTemporaryResponseToJSON(
  documentCreateDocumentTemporaryResponse:
    DocumentCreateDocumentTemporaryResponse,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryResponse$outboundSchema.parse(
      documentCreateDocumentTemporaryResponse,
    ),
  );
}

export function documentCreateDocumentTemporaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryResponse' from JSON`,
  );
}
