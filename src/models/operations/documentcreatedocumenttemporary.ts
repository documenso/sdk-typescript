/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility of the document.
 */
export const VisibilityAccount = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
/**
 * The visibility of the document.
 */
export type VisibilityAccount = ClosedEnum<typeof VisibilityAccount>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentCreateDocumentTemporaryGlobalAccessAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const GlobalActionAuthAccount = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type GlobalActionAuthAccount = ClosedEnum<
  typeof GlobalActionAuthAccount
>;

export type FormValuesRequest = string | boolean | number;

export const RoleAccount = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type RoleAccount = ClosedEnum<typeof RoleAccount>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentCreateDocumentTemporaryAccessAuthRequest = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentCreateDocumentTemporaryAccessAuthRequest = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryAccessAuthRequest
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const ActionAuthAccount = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type ActionAuthAccount = ClosedEnum<typeof ActionAuthAccount>;

export const TypeAccountDropdown1 = {
  Dropdown: "DROPDOWN",
} as const;
export type TypeAccountDropdown1 = ClosedEnum<typeof TypeAccountDropdown1>;

export const TypeAccountDropdown2 = {
  Dropdown: "dropdown",
} as const;
export type TypeAccountDropdown2 = ClosedEnum<typeof TypeAccountDropdown2>;

export type ValueAccountDropdown = {
  value: string;
};

export type FieldMetaAccountDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountDropdown2;
  values?: Array<ValueAccountDropdown> | undefined;
  defaultValue?: string | undefined;
};

export type FieldAccountDropdown = {
  type: TypeAccountDropdown1;
  fieldMeta?: FieldMetaAccountDropdown | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountCheckbox1 = {
  Checkbox: "CHECKBOX",
} as const;
export type TypeAccountCheckbox1 = ClosedEnum<typeof TypeAccountCheckbox1>;

export const TypeAccountCheckbox2 = {
  Checkbox: "checkbox",
} as const;
export type TypeAccountCheckbox2 = ClosedEnum<typeof TypeAccountCheckbox2>;

export type ValueAccountCheckbox = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaAccountCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountCheckbox2;
  values?: Array<ValueAccountCheckbox> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export type FieldAccountCheckbox = {
  type: TypeAccountCheckbox1;
  fieldMeta?: FieldMetaAccountCheckbox | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountRadio1 = {
  Radio: "RADIO",
} as const;
export type TypeAccountRadio1 = ClosedEnum<typeof TypeAccountRadio1>;

export const TypeAccountRadio2 = {
  Radio: "radio",
} as const;
export type TypeAccountRadio2 = ClosedEnum<typeof TypeAccountRadio2>;

export type ValueAccountRadio = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaAccountRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountRadio2;
  values?: Array<ValueAccountRadio> | undefined;
};

export type FieldAccountRadio = {
  type: TypeAccountRadio1;
  fieldMeta?: FieldMetaAccountRadio | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountNumber1 = {
  Number: "NUMBER",
} as const;
export type TypeAccountNumber1 = ClosedEnum<typeof TypeAccountNumber1>;

export const TypeAccountNumber2 = {
  Number: "number",
} as const;
export type TypeAccountNumber2 = ClosedEnum<typeof TypeAccountNumber2>;

export const TextAlignAccountNumber = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountNumber = ClosedEnum<typeof TextAlignAccountNumber>;

export type FieldMetaAccountNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountNumber2;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountNumber | undefined;
};

export type FieldAccountNumber = {
  type: TypeAccountNumber1;
  fieldMeta?: FieldMetaAccountNumber | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountText1 = {
  Text: "TEXT",
} as const;
export type TypeAccountText1 = ClosedEnum<typeof TypeAccountText1>;

export const TypeAccountText2 = {
  Text: "text",
} as const;
export type TypeAccountText2 = ClosedEnum<typeof TypeAccountText2>;

export const TextAlignAccountText = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountText = ClosedEnum<typeof TextAlignAccountText>;

export type FieldMetaAccountText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountText2;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountText | undefined;
};

export type FieldAccountText = {
  type: TypeAccountText1;
  fieldMeta?: FieldMetaAccountText | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountDate1 = {
  Date: "DATE",
} as const;
export type TypeAccountDate1 = ClosedEnum<typeof TypeAccountDate1>;

export const TypeAccountDate2 = {
  Date: "date",
} as const;
export type TypeAccountDate2 = ClosedEnum<typeof TypeAccountDate2>;

export const TextAlignAccountDate = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountDate = ClosedEnum<typeof TextAlignAccountDate>;

export type FieldMetaAccountDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountDate2;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountDate | undefined;
};

export type FieldAccountDate = {
  type: TypeAccountDate1;
  fieldMeta?: FieldMetaAccountDate | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountEmail1 = {
  Email: "EMAIL",
} as const;
export type TypeAccountEmail1 = ClosedEnum<typeof TypeAccountEmail1>;

export const TypeAccountEmail2 = {
  Email: "email",
} as const;
export type TypeAccountEmail2 = ClosedEnum<typeof TypeAccountEmail2>;

export const TextAlignAccountEmail = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountEmail = ClosedEnum<typeof TextAlignAccountEmail>;

export type FieldMetaAccountEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountEmail2;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountEmail | undefined;
};

export type FieldAccountEmail = {
  type: TypeAccountEmail1;
  fieldMeta?: FieldMetaAccountEmail | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountName1 = {
  Name: "NAME",
} as const;
export type TypeAccountName1 = ClosedEnum<typeof TypeAccountName1>;

export const TypeAccountName2 = {
  Name: "name",
} as const;
export type TypeAccountName2 = ClosedEnum<typeof TypeAccountName2>;

export const TextAlignAccountName = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountName = ClosedEnum<typeof TextAlignAccountName>;

export type FieldMetaAccountName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountName2;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountName | undefined;
};

export type FieldAccountName = {
  type: TypeAccountName1;
  fieldMeta?: FieldMetaAccountName | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountInitials1 = {
  Initials: "INITIALS",
} as const;
export type TypeAccountInitials1 = ClosedEnum<typeof TypeAccountInitials1>;

export const TypeAccountInitials2 = {
  Initials: "initials",
} as const;
export type TypeAccountInitials2 = ClosedEnum<typeof TypeAccountInitials2>;

export const TextAlignAccountInitials = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TextAlignAccountInitials = ClosedEnum<
  typeof TextAlignAccountInitials
>;

export type FieldMetaAccountInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TypeAccountInitials2;
  fontSize?: number | undefined;
  textAlign?: TextAlignAccountInitials | undefined;
};

export type FieldAccountInitials = {
  type: TypeAccountInitials1;
  fieldMeta?: FieldMetaAccountInitials | undefined;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountFreeSignature = {
  FreeSignature: "FREE_SIGNATURE",
} as const;
export type TypeAccountFreeSignature = ClosedEnum<
  typeof TypeAccountFreeSignature
>;

export type FieldAccountFreeSignature = {
  type: TypeAccountFreeSignature;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export const TypeAccountSignature = {
  Signature: "SIGNATURE",
} as const;
export type TypeAccountSignature = ClosedEnum<typeof TypeAccountSignature>;

export type FieldAccountSignature = {
  type: TypeAccountSignature;
  /**
   * The page number the field will be on.
   */
  pageNumber: number;
  /**
   * The X coordinate of where the field will be placed.
   */
  pageX: number;
  /**
   * The Y coordinate of where the field will be placed.
   */
  pageY: number;
  /**
   * The width of the field.
   */
  width: number;
  /**
   * The height of the field.
   */
  height: number;
};

export type FieldAccountUnion =
  | FieldAccountSignature
  | FieldAccountFreeSignature
  | FieldAccountInitials
  | FieldAccountName
  | FieldAccountEmail
  | FieldAccountDate
  | FieldAccountText
  | FieldAccountNumber
  | FieldAccountRadio
  | FieldAccountCheckbox
  | FieldAccountDropdown;

export type RecipientAccount = {
  email: string;
  name: string;
  role: RoleAccount;
  signingOrder?: number | undefined;
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth?:
    | DocumentCreateDocumentTemporaryAccessAuthRequest
    | null
    | undefined;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth?: ActionAuthAccount | null | undefined;
  fields?:
    | Array<
      | FieldAccountSignature
      | FieldAccountFreeSignature
      | FieldAccountInitials
      | FieldAccountName
      | FieldAccountEmail
      | FieldAccountDate
      | FieldAccountText
      | FieldAccountNumber
      | FieldAccountRadio
      | FieldAccountCheckbox
      | FieldAccountDropdown
    >
    | undefined;
};

/**
 * The date format to use for date fields and signing the document.
 */
export const DocumentCreateDocumentTemporaryDateFormat = {
  YyyyMMDdHhMMA: "yyyy-MM-dd hh:mm a",
  YyyyMMDd: "yyyy-MM-dd",
  DdMMYyyyHhMMA: "dd/MM/yyyy hh:mm a",
  MMDdYyyyHhMMA: "MM/dd/yyyy hh:mm a",
  YyyyMMDdHHMM: "yyyy-MM-dd HH:mm",
  YyMMDdHhMMA: "yy-MM-dd hh:mm a",
  YyyyMMDdHHMMSs: "yyyy-MM-dd HH:mm:ss",
  MMMMDdYyyyHhMmA: "MMMM dd, yyyy hh:mm a",
  EEEEMMMMDdYyyyHhMmA: "EEEE, MMMM dd, yyyy hh:mm a",
  YyyyMMDdTHHMMSsSSSXXX: "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
} as const;
/**
 * The date format to use for date fields and signing the document.
 */
export type DocumentCreateDocumentTemporaryDateFormat = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryDateFormat
>;

/**
 * The distribution method to use when sending the document to the recipients.
 */
export const DistributionMethodAccount = {
  Email: "EMAIL",
  None: "NONE",
} as const;
/**
 * The distribution method to use when sending the document to the recipients.
 */
export type DistributionMethodAccount = ClosedEnum<
  typeof DistributionMethodAccount
>;

export const SigningOrderAccount = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type SigningOrderAccount = ClosedEnum<typeof SigningOrderAccount>;

/**
 * The language to use for email communications with recipients.
 */
export const DocumentCreateDocumentTemporaryLanguage = {
  De: "de",
  En: "en",
  Fr: "fr",
  Es: "es",
  It: "it",
  Pl: "pl",
} as const;
/**
 * The language to use for email communications with recipients.
 */
export type DocumentCreateDocumentTemporaryLanguage = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryLanguage
>;

export type EmailSettingsAccount = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentCreateDocumentTemporaryMeta = {
  /**
   * The subject of the email that will be sent to the recipients.
   */
  subject?: string | undefined;
  /**
   * The message of the email that will be sent to the recipients.
   */
  message?: string | undefined;
  /**
   * The timezone to use for date fields and signing the document. Example Etc/UTC, Australia/Melbourne
   */
  timezone?: string | undefined;
  /**
   * The date format to use for date fields and signing the document.
   */
  dateFormat?: DocumentCreateDocumentTemporaryDateFormat | undefined;
  /**
   * The distribution method to use when sending the document to the recipients.
   */
  distributionMethod?: DistributionMethodAccount | undefined;
  signingOrder?: SigningOrderAccount | undefined;
  /**
   * The URL to which the recipient should be redirected after signing the document.
   */
  redirectUrl?: string | undefined;
  /**
   * The language to use for email communications with recipients.
   */
  language?: DocumentCreateDocumentTemporaryLanguage | undefined;
  /**
   * Whether to allow recipients to sign using a typed signature.
   */
  typedSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using a draw signature.
   */
  drawSignatureEnabled?: boolean | undefined;
  /**
   * Whether to allow recipients to sign using an uploaded signature.
   */
  uploadSignatureEnabled?: boolean | undefined;
  emailSettings?: EmailSettingsAccount | undefined;
};

export type DocumentCreateDocumentTemporaryRequest = {
  /**
   * The title of the document.
   */
  title: string;
  /**
   * The external ID of the document.
   */
  externalId?: string | undefined;
  /**
   * The visibility of the document.
   */
  visibility?: VisibilityAccount | undefined;
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth?:
    | DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
    | undefined;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth?: GlobalActionAuthAccount | undefined;
  formValues?: { [k: string]: string | boolean | number } | undefined;
  recipients?: Array<RecipientAccount> | undefined;
  meta?: DocumentCreateDocumentTemporaryMeta | undefined;
};

export const DocumentVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type DocumentVisibility = ClosedEnum<typeof DocumentVisibility>;

export const DocumentCreateDocumentTemporaryStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type DocumentCreateDocumentTemporaryStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryStatus
>;

export const DocumentCreateDocumentTemporarySource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type DocumentCreateDocumentTemporarySource = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentGlobalAccessAuth = ClosedEnum<
  typeof DocumentGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const DocumentGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type DocumentGlobalActionAuth = ClosedEnum<
  typeof DocumentGlobalActionAuth
>;

export type DocumentCreateDocumentTemporaryAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: DocumentGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: DocumentGlobalActionAuth | null;
};

export type DocumentFormValues = string | boolean | number;

export const DocumentDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type DocumentDocumentDataType = ClosedEnum<
  typeof DocumentDocumentDataType
>;

export type DocumentCreateDocumentTemporaryDocumentData = {
  type: DocumentDocumentDataType;
  id: string;
  data: string;
  initialData: string;
};

export const DocumentSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type DocumentSigningOrder = ClosedEnum<typeof DocumentSigningOrder>;

export const DocumentDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type DocumentDistributionMethod = ClosedEnum<
  typeof DocumentDistributionMethod
>;

export type DocumentEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type DocumentCreateDocumentTemporaryDocumentMeta = {
  signingOrder: DocumentSigningOrder;
  distributionMethod: DocumentDistributionMethod;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentEmailSettings | null;
};

export const DocumentRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type DocumentRole = ClosedEnum<typeof DocumentRole>;

export const DocumentCreateDocumentTemporaryReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type DocumentCreateDocumentTemporaryReadStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporaryReadStatus
>;

export const DocumentCreateDocumentTemporarySigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type DocumentCreateDocumentTemporarySigningStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySigningStatus
>;

export const DocumentCreateDocumentTemporarySendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type DocumentCreateDocumentTemporarySendStatus = ClosedEnum<
  typeof DocumentCreateDocumentTemporarySendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const DocumentAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type DocumentAccessAuth = ClosedEnum<typeof DocumentAccessAuth>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const DocumentActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type DocumentActionAuth = ClosedEnum<typeof DocumentActionAuth>;

export type DocumentCreateDocumentTemporaryRecipientAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth: DocumentAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth: DocumentActionAuth | null;
};

export type DocumentRecipient = {
  role: DocumentRole;
  readStatus: DocumentCreateDocumentTemporaryReadStatus;
  signingStatus: DocumentCreateDocumentTemporarySigningStatus;
  sendStatus: DocumentCreateDocumentTemporarySendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: DocumentCreateDocumentTemporaryRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const DocumentFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type DocumentFieldType = ClosedEnum<typeof DocumentFieldType>;

export const DocumentTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type DocumentTypeDropdown = ClosedEnum<typeof DocumentTypeDropdown>;

export type DocumentValue3 = {
  value: string;
};

export type FieldMetaDocumentDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeDropdown;
  values?: Array<DocumentValue3> | undefined;
  defaultValue?: string | undefined;
};

export const DocumentTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type DocumentTypeCheckbox = ClosedEnum<typeof DocumentTypeCheckbox>;

export type DocumentValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaDocumentCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeCheckbox;
  values?: Array<DocumentValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const DocumentTypeRadio = {
  Radio: "radio",
} as const;
export type DocumentTypeRadio = ClosedEnum<typeof DocumentTypeRadio>;

export type DocumentValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type FieldMetaDocumentRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeRadio;
  values?: Array<DocumentValue1> | undefined;
};

export const DocumentTypeNumber = {
  Number: "number",
} as const;
export type DocumentTypeNumber = ClosedEnum<typeof DocumentTypeNumber>;

export const DocumentTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign6 = ClosedEnum<typeof DocumentTextAlign6>;

export type FieldMetaDocumentNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeNumber;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign6 | undefined;
};

export const DocumentTypeText = {
  Text: "text",
} as const;
export type DocumentTypeText = ClosedEnum<typeof DocumentTypeText>;

export const DocumentTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign5 = ClosedEnum<typeof DocumentTextAlign5>;

export type FieldMetaDocumentText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign5 | undefined;
};

export const DocumentTypeDate = {
  Date: "date",
} as const;
export type DocumentTypeDate = ClosedEnum<typeof DocumentTypeDate>;

export const DocumentTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign4 = ClosedEnum<typeof DocumentTextAlign4>;

export type FieldMetaDocumentDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeDate;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign4 | undefined;
};

export const DocumentTypeEmail = {
  Email: "email",
} as const;
export type DocumentTypeEmail = ClosedEnum<typeof DocumentTypeEmail>;

export const DocumentTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign3 = ClosedEnum<typeof DocumentTextAlign3>;

export type FieldMetaDocumentEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeEmail;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign3 | undefined;
};

export const DocumentTypeName = {
  Name: "name",
} as const;
export type DocumentTypeName = ClosedEnum<typeof DocumentTypeName>;

export const DocumentTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign2 = ClosedEnum<typeof DocumentTextAlign2>;

export type FieldMetaDocumentName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeName;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign2 | undefined;
};

export const DocumentTypeInitials = {
  Initials: "initials",
} as const;
export type DocumentTypeInitials = ClosedEnum<typeof DocumentTypeInitials>;

export const DocumentTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type DocumentTextAlign1 = ClosedEnum<typeof DocumentTextAlign1>;

export type FieldMetaDocumentInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: DocumentTypeInitials;
  fontSize?: number | undefined;
  textAlign?: DocumentTextAlign1 | undefined;
};

export type DocumentFieldMetaUnion =
  | FieldMetaDocumentRadio
  | FieldMetaDocumentInitials
  | FieldMetaDocumentName
  | FieldMetaDocumentEmail
  | FieldMetaDocumentDate
  | FieldMetaDocumentDropdown
  | FieldMetaDocumentCheckbox
  | FieldMetaDocumentText
  | FieldMetaDocumentNumber;

export type DocumentField = {
  type: DocumentFieldType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMetaDocumentRadio
    | FieldMetaDocumentInitials
    | FieldMetaDocumentName
    | FieldMetaDocumentEmail
    | FieldMetaDocumentDate
    | FieldMetaDocumentDropdown
    | FieldMetaDocumentCheckbox
    | FieldMetaDocumentText
    | FieldMetaDocumentNumber
    | null;
};

export type Document = {
  visibility: DocumentVisibility;
  status: DocumentCreateDocumentTemporaryStatus;
  source: DocumentCreateDocumentTemporarySource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: DocumentCreateDocumentTemporaryAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  documentData: DocumentCreateDocumentTemporaryDocumentData;
  documentMeta: DocumentCreateDocumentTemporaryDocumentMeta | null;
  recipients: Array<DocumentRecipient>;
  fields: Array<DocumentField>;
};

/**
 * Successful response
 */
export type DocumentCreateDocumentTemporaryResponse = {
  document: Document;
  /**
   * The URL to upload the document PDF to. Use a PUT request with the file via form-data
   */
  uploadUrl: string;
};

/** @internal */
export const VisibilityAccount$inboundSchema: z.ZodNativeEnum<
  typeof VisibilityAccount
> = z.nativeEnum(VisibilityAccount);

/** @internal */
export const VisibilityAccount$outboundSchema: z.ZodNativeEnum<
  typeof VisibilityAccount
> = VisibilityAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VisibilityAccount$ {
  /** @deprecated use `VisibilityAccount$inboundSchema` instead. */
  export const inboundSchema = VisibilityAccount$inboundSchema;
  /** @deprecated use `VisibilityAccount$outboundSchema` instead. */
  export const outboundSchema = VisibilityAccount$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
  > = z.nativeEnum(DocumentCreateDocumentTemporaryGlobalAccessAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<
    typeof DocumentCreateDocumentTemporaryGlobalAccessAuthRequest
  > = DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema;
}

/** @internal */
export const GlobalActionAuthAccount$inboundSchema: z.ZodNativeEnum<
  typeof GlobalActionAuthAccount
> = z.nativeEnum(GlobalActionAuthAccount);

/** @internal */
export const GlobalActionAuthAccount$outboundSchema: z.ZodNativeEnum<
  typeof GlobalActionAuthAccount
> = GlobalActionAuthAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GlobalActionAuthAccount$ {
  /** @deprecated use `GlobalActionAuthAccount$inboundSchema` instead. */
  export const inboundSchema = GlobalActionAuthAccount$inboundSchema;
  /** @deprecated use `GlobalActionAuthAccount$outboundSchema` instead. */
  export const outboundSchema = GlobalActionAuthAccount$outboundSchema;
}

/** @internal */
export const FormValuesRequest$inboundSchema: z.ZodType<
  FormValuesRequest,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type FormValuesRequest$Outbound = string | boolean | number;

/** @internal */
export const FormValuesRequest$outboundSchema: z.ZodType<
  FormValuesRequest$Outbound,
  z.ZodTypeDef,
  FormValuesRequest
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormValuesRequest$ {
  /** @deprecated use `FormValuesRequest$inboundSchema` instead. */
  export const inboundSchema = FormValuesRequest$inboundSchema;
  /** @deprecated use `FormValuesRequest$outboundSchema` instead. */
  export const outboundSchema = FormValuesRequest$outboundSchema;
  /** @deprecated use `FormValuesRequest$Outbound` instead. */
  export type Outbound = FormValuesRequest$Outbound;
}

export function formValuesRequestToJSON(
  formValuesRequest: FormValuesRequest,
): string {
  return JSON.stringify(
    FormValuesRequest$outboundSchema.parse(formValuesRequest),
  );
}

export function formValuesRequestFromJSON(
  jsonString: string,
): SafeParseResult<FormValuesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormValuesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormValuesRequest' from JSON`,
  );
}

/** @internal */
export const RoleAccount$inboundSchema: z.ZodNativeEnum<typeof RoleAccount> = z
  .nativeEnum(RoleAccount);

/** @internal */
export const RoleAccount$outboundSchema: z.ZodNativeEnum<typeof RoleAccount> =
  RoleAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RoleAccount$ {
  /** @deprecated use `RoleAccount$inboundSchema` instead. */
  export const inboundSchema = RoleAccount$inboundSchema;
  /** @deprecated use `RoleAccount$outboundSchema` instead. */
  export const outboundSchema = RoleAccount$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryAccessAuthRequest> = z
    .nativeEnum(DocumentCreateDocumentTemporaryAccessAuthRequest);

/** @internal */
export const DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryAccessAuthRequest> =
    DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryAccessAuthRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema;
}

/** @internal */
export const ActionAuthAccount$inboundSchema: z.ZodNativeEnum<
  typeof ActionAuthAccount
> = z.nativeEnum(ActionAuthAccount);

/** @internal */
export const ActionAuthAccount$outboundSchema: z.ZodNativeEnum<
  typeof ActionAuthAccount
> = ActionAuthAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActionAuthAccount$ {
  /** @deprecated use `ActionAuthAccount$inboundSchema` instead. */
  export const inboundSchema = ActionAuthAccount$inboundSchema;
  /** @deprecated use `ActionAuthAccount$outboundSchema` instead. */
  export const outboundSchema = ActionAuthAccount$outboundSchema;
}

/** @internal */
export const TypeAccountDropdown1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDropdown1
> = z.nativeEnum(TypeAccountDropdown1);

/** @internal */
export const TypeAccountDropdown1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDropdown1
> = TypeAccountDropdown1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountDropdown1$ {
  /** @deprecated use `TypeAccountDropdown1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountDropdown1$inboundSchema;
  /** @deprecated use `TypeAccountDropdown1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountDropdown1$outboundSchema;
}

/** @internal */
export const TypeAccountDropdown2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDropdown2
> = z.nativeEnum(TypeAccountDropdown2);

/** @internal */
export const TypeAccountDropdown2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDropdown2
> = TypeAccountDropdown2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountDropdown2$ {
  /** @deprecated use `TypeAccountDropdown2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountDropdown2$inboundSchema;
  /** @deprecated use `TypeAccountDropdown2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountDropdown2$outboundSchema;
}

/** @internal */
export const ValueAccountDropdown$inboundSchema: z.ZodType<
  ValueAccountDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type ValueAccountDropdown$Outbound = {
  value: string;
};

/** @internal */
export const ValueAccountDropdown$outboundSchema: z.ZodType<
  ValueAccountDropdown$Outbound,
  z.ZodTypeDef,
  ValueAccountDropdown
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueAccountDropdown$ {
  /** @deprecated use `ValueAccountDropdown$inboundSchema` instead. */
  export const inboundSchema = ValueAccountDropdown$inboundSchema;
  /** @deprecated use `ValueAccountDropdown$outboundSchema` instead. */
  export const outboundSchema = ValueAccountDropdown$outboundSchema;
  /** @deprecated use `ValueAccountDropdown$Outbound` instead. */
  export type Outbound = ValueAccountDropdown$Outbound;
}

export function valueAccountDropdownToJSON(
  valueAccountDropdown: ValueAccountDropdown,
): string {
  return JSON.stringify(
    ValueAccountDropdown$outboundSchema.parse(valueAccountDropdown),
  );
}

export function valueAccountDropdownFromJSON(
  jsonString: string,
): SafeParseResult<ValueAccountDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueAccountDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueAccountDropdown' from JSON`,
  );
}

/** @internal */
export const FieldMetaAccountDropdown$inboundSchema: z.ZodType<
  FieldMetaAccountDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountDropdown2$inboundSchema,
  values: z.array(z.lazy(() => ValueAccountDropdown$inboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldMetaAccountDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<ValueAccountDropdown$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldMetaAccountDropdown$outboundSchema: z.ZodType<
  FieldMetaAccountDropdown$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountDropdown2$outboundSchema,
  values: z.array(z.lazy(() => ValueAccountDropdown$outboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountDropdown$ {
  /** @deprecated use `FieldMetaAccountDropdown$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountDropdown$inboundSchema;
  /** @deprecated use `FieldMetaAccountDropdown$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountDropdown$outboundSchema;
  /** @deprecated use `FieldMetaAccountDropdown$Outbound` instead. */
  export type Outbound = FieldMetaAccountDropdown$Outbound;
}

export function fieldMetaAccountDropdownToJSON(
  fieldMetaAccountDropdown: FieldMetaAccountDropdown,
): string {
  return JSON.stringify(
    FieldMetaAccountDropdown$outboundSchema.parse(fieldMetaAccountDropdown),
  );
}

export function fieldMetaAccountDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountDropdown' from JSON`,
  );
}

/** @internal */
export const FieldAccountDropdown$inboundSchema: z.ZodType<
  FieldAccountDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountDropdown1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountDropdown$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountDropdown$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountDropdown$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountDropdown$outboundSchema: z.ZodType<
  FieldAccountDropdown$Outbound,
  z.ZodTypeDef,
  FieldAccountDropdown
> = z.object({
  type: TypeAccountDropdown1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountDropdown$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountDropdown$ {
  /** @deprecated use `FieldAccountDropdown$inboundSchema` instead. */
  export const inboundSchema = FieldAccountDropdown$inboundSchema;
  /** @deprecated use `FieldAccountDropdown$outboundSchema` instead. */
  export const outboundSchema = FieldAccountDropdown$outboundSchema;
  /** @deprecated use `FieldAccountDropdown$Outbound` instead. */
  export type Outbound = FieldAccountDropdown$Outbound;
}

export function fieldAccountDropdownToJSON(
  fieldAccountDropdown: FieldAccountDropdown,
): string {
  return JSON.stringify(
    FieldAccountDropdown$outboundSchema.parse(fieldAccountDropdown),
  );
}

export function fieldAccountDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountDropdown' from JSON`,
  );
}

/** @internal */
export const TypeAccountCheckbox1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountCheckbox1
> = z.nativeEnum(TypeAccountCheckbox1);

/** @internal */
export const TypeAccountCheckbox1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountCheckbox1
> = TypeAccountCheckbox1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountCheckbox1$ {
  /** @deprecated use `TypeAccountCheckbox1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountCheckbox1$inboundSchema;
  /** @deprecated use `TypeAccountCheckbox1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountCheckbox1$outboundSchema;
}

/** @internal */
export const TypeAccountCheckbox2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountCheckbox2
> = z.nativeEnum(TypeAccountCheckbox2);

/** @internal */
export const TypeAccountCheckbox2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountCheckbox2
> = TypeAccountCheckbox2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountCheckbox2$ {
  /** @deprecated use `TypeAccountCheckbox2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountCheckbox2$inboundSchema;
  /** @deprecated use `TypeAccountCheckbox2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountCheckbox2$outboundSchema;
}

/** @internal */
export const ValueAccountCheckbox$inboundSchema: z.ZodType<
  ValueAccountCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type ValueAccountCheckbox$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const ValueAccountCheckbox$outboundSchema: z.ZodType<
  ValueAccountCheckbox$Outbound,
  z.ZodTypeDef,
  ValueAccountCheckbox
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueAccountCheckbox$ {
  /** @deprecated use `ValueAccountCheckbox$inboundSchema` instead. */
  export const inboundSchema = ValueAccountCheckbox$inboundSchema;
  /** @deprecated use `ValueAccountCheckbox$outboundSchema` instead. */
  export const outboundSchema = ValueAccountCheckbox$outboundSchema;
  /** @deprecated use `ValueAccountCheckbox$Outbound` instead. */
  export type Outbound = ValueAccountCheckbox$Outbound;
}

export function valueAccountCheckboxToJSON(
  valueAccountCheckbox: ValueAccountCheckbox,
): string {
  return JSON.stringify(
    ValueAccountCheckbox$outboundSchema.parse(valueAccountCheckbox),
  );
}

export function valueAccountCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<ValueAccountCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueAccountCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueAccountCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldMetaAccountCheckbox$inboundSchema: z.ZodType<
  FieldMetaAccountCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountCheckbox2$inboundSchema,
  values: z.array(z.lazy(() => ValueAccountCheckbox$inboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldMetaAccountCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<ValueAccountCheckbox$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldMetaAccountCheckbox$outboundSchema: z.ZodType<
  FieldMetaAccountCheckbox$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountCheckbox2$outboundSchema,
  values: z.array(z.lazy(() => ValueAccountCheckbox$outboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountCheckbox$ {
  /** @deprecated use `FieldMetaAccountCheckbox$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountCheckbox$inboundSchema;
  /** @deprecated use `FieldMetaAccountCheckbox$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountCheckbox$outboundSchema;
  /** @deprecated use `FieldMetaAccountCheckbox$Outbound` instead. */
  export type Outbound = FieldMetaAccountCheckbox$Outbound;
}

export function fieldMetaAccountCheckboxToJSON(
  fieldMetaAccountCheckbox: FieldMetaAccountCheckbox,
): string {
  return JSON.stringify(
    FieldMetaAccountCheckbox$outboundSchema.parse(fieldMetaAccountCheckbox),
  );
}

export function fieldMetaAccountCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountCheckbox' from JSON`,
  );
}

/** @internal */
export const FieldAccountCheckbox$inboundSchema: z.ZodType<
  FieldAccountCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountCheckbox1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountCheckbox$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountCheckbox$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountCheckbox$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountCheckbox$outboundSchema: z.ZodType<
  FieldAccountCheckbox$Outbound,
  z.ZodTypeDef,
  FieldAccountCheckbox
> = z.object({
  type: TypeAccountCheckbox1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountCheckbox$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountCheckbox$ {
  /** @deprecated use `FieldAccountCheckbox$inboundSchema` instead. */
  export const inboundSchema = FieldAccountCheckbox$inboundSchema;
  /** @deprecated use `FieldAccountCheckbox$outboundSchema` instead. */
  export const outboundSchema = FieldAccountCheckbox$outboundSchema;
  /** @deprecated use `FieldAccountCheckbox$Outbound` instead. */
  export type Outbound = FieldAccountCheckbox$Outbound;
}

export function fieldAccountCheckboxToJSON(
  fieldAccountCheckbox: FieldAccountCheckbox,
): string {
  return JSON.stringify(
    FieldAccountCheckbox$outboundSchema.parse(fieldAccountCheckbox),
  );
}

export function fieldAccountCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountCheckbox' from JSON`,
  );
}

/** @internal */
export const TypeAccountRadio1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountRadio1
> = z.nativeEnum(TypeAccountRadio1);

/** @internal */
export const TypeAccountRadio1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountRadio1
> = TypeAccountRadio1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountRadio1$ {
  /** @deprecated use `TypeAccountRadio1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountRadio1$inboundSchema;
  /** @deprecated use `TypeAccountRadio1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountRadio1$outboundSchema;
}

/** @internal */
export const TypeAccountRadio2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountRadio2
> = z.nativeEnum(TypeAccountRadio2);

/** @internal */
export const TypeAccountRadio2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountRadio2
> = TypeAccountRadio2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountRadio2$ {
  /** @deprecated use `TypeAccountRadio2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountRadio2$inboundSchema;
  /** @deprecated use `TypeAccountRadio2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountRadio2$outboundSchema;
}

/** @internal */
export const ValueAccountRadio$inboundSchema: z.ZodType<
  ValueAccountRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type ValueAccountRadio$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const ValueAccountRadio$outboundSchema: z.ZodType<
  ValueAccountRadio$Outbound,
  z.ZodTypeDef,
  ValueAccountRadio
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueAccountRadio$ {
  /** @deprecated use `ValueAccountRadio$inboundSchema` instead. */
  export const inboundSchema = ValueAccountRadio$inboundSchema;
  /** @deprecated use `ValueAccountRadio$outboundSchema` instead. */
  export const outboundSchema = ValueAccountRadio$outboundSchema;
  /** @deprecated use `ValueAccountRadio$Outbound` instead. */
  export type Outbound = ValueAccountRadio$Outbound;
}

export function valueAccountRadioToJSON(
  valueAccountRadio: ValueAccountRadio,
): string {
  return JSON.stringify(
    ValueAccountRadio$outboundSchema.parse(valueAccountRadio),
  );
}

export function valueAccountRadioFromJSON(
  jsonString: string,
): SafeParseResult<ValueAccountRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueAccountRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueAccountRadio' from JSON`,
  );
}

/** @internal */
export const FieldMetaAccountRadio$inboundSchema: z.ZodType<
  FieldMetaAccountRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountRadio2$inboundSchema,
  values: z.array(z.lazy(() => ValueAccountRadio$inboundSchema)).optional(),
});

/** @internal */
export type FieldMetaAccountRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<ValueAccountRadio$Outbound> | undefined;
};

/** @internal */
export const FieldMetaAccountRadio$outboundSchema: z.ZodType<
  FieldMetaAccountRadio$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountRadio2$outboundSchema,
  values: z.array(z.lazy(() => ValueAccountRadio$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountRadio$ {
  /** @deprecated use `FieldMetaAccountRadio$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountRadio$inboundSchema;
  /** @deprecated use `FieldMetaAccountRadio$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountRadio$outboundSchema;
  /** @deprecated use `FieldMetaAccountRadio$Outbound` instead. */
  export type Outbound = FieldMetaAccountRadio$Outbound;
}

export function fieldMetaAccountRadioToJSON(
  fieldMetaAccountRadio: FieldMetaAccountRadio,
): string {
  return JSON.stringify(
    FieldMetaAccountRadio$outboundSchema.parse(fieldMetaAccountRadio),
  );
}

export function fieldMetaAccountRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountRadio' from JSON`,
  );
}

/** @internal */
export const FieldAccountRadio$inboundSchema: z.ZodType<
  FieldAccountRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountRadio1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountRadio$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountRadio$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountRadio$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountRadio$outboundSchema: z.ZodType<
  FieldAccountRadio$Outbound,
  z.ZodTypeDef,
  FieldAccountRadio
> = z.object({
  type: TypeAccountRadio1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountRadio$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountRadio$ {
  /** @deprecated use `FieldAccountRadio$inboundSchema` instead. */
  export const inboundSchema = FieldAccountRadio$inboundSchema;
  /** @deprecated use `FieldAccountRadio$outboundSchema` instead. */
  export const outboundSchema = FieldAccountRadio$outboundSchema;
  /** @deprecated use `FieldAccountRadio$Outbound` instead. */
  export type Outbound = FieldAccountRadio$Outbound;
}

export function fieldAccountRadioToJSON(
  fieldAccountRadio: FieldAccountRadio,
): string {
  return JSON.stringify(
    FieldAccountRadio$outboundSchema.parse(fieldAccountRadio),
  );
}

export function fieldAccountRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountRadio' from JSON`,
  );
}

/** @internal */
export const TypeAccountNumber1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountNumber1
> = z.nativeEnum(TypeAccountNumber1);

/** @internal */
export const TypeAccountNumber1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountNumber1
> = TypeAccountNumber1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountNumber1$ {
  /** @deprecated use `TypeAccountNumber1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountNumber1$inboundSchema;
  /** @deprecated use `TypeAccountNumber1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountNumber1$outboundSchema;
}

/** @internal */
export const TypeAccountNumber2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountNumber2
> = z.nativeEnum(TypeAccountNumber2);

/** @internal */
export const TypeAccountNumber2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountNumber2
> = TypeAccountNumber2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountNumber2$ {
  /** @deprecated use `TypeAccountNumber2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountNumber2$inboundSchema;
  /** @deprecated use `TypeAccountNumber2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountNumber2$outboundSchema;
}

/** @internal */
export const TextAlignAccountNumber$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountNumber
> = z.nativeEnum(TextAlignAccountNumber);

/** @internal */
export const TextAlignAccountNumber$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountNumber
> = TextAlignAccountNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountNumber$ {
  /** @deprecated use `TextAlignAccountNumber$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountNumber$inboundSchema;
  /** @deprecated use `TextAlignAccountNumber$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountNumber$outboundSchema;
}

/** @internal */
export const FieldMetaAccountNumber$inboundSchema: z.ZodType<
  FieldMetaAccountNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountNumber2$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountNumber$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountNumber$outboundSchema: z.ZodType<
  FieldMetaAccountNumber$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountNumber2$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountNumber$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountNumber$ {
  /** @deprecated use `FieldMetaAccountNumber$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountNumber$inboundSchema;
  /** @deprecated use `FieldMetaAccountNumber$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountNumber$outboundSchema;
  /** @deprecated use `FieldMetaAccountNumber$Outbound` instead. */
  export type Outbound = FieldMetaAccountNumber$Outbound;
}

export function fieldMetaAccountNumberToJSON(
  fieldMetaAccountNumber: FieldMetaAccountNumber,
): string {
  return JSON.stringify(
    FieldMetaAccountNumber$outboundSchema.parse(fieldMetaAccountNumber),
  );
}

export function fieldMetaAccountNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountNumber' from JSON`,
  );
}

/** @internal */
export const FieldAccountNumber$inboundSchema: z.ZodType<
  FieldAccountNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountNumber1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountNumber$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountNumber$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountNumber$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountNumber$outboundSchema: z.ZodType<
  FieldAccountNumber$Outbound,
  z.ZodTypeDef,
  FieldAccountNumber
> = z.object({
  type: TypeAccountNumber1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountNumber$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountNumber$ {
  /** @deprecated use `FieldAccountNumber$inboundSchema` instead. */
  export const inboundSchema = FieldAccountNumber$inboundSchema;
  /** @deprecated use `FieldAccountNumber$outboundSchema` instead. */
  export const outboundSchema = FieldAccountNumber$outboundSchema;
  /** @deprecated use `FieldAccountNumber$Outbound` instead. */
  export type Outbound = FieldAccountNumber$Outbound;
}

export function fieldAccountNumberToJSON(
  fieldAccountNumber: FieldAccountNumber,
): string {
  return JSON.stringify(
    FieldAccountNumber$outboundSchema.parse(fieldAccountNumber),
  );
}

export function fieldAccountNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountNumber' from JSON`,
  );
}

/** @internal */
export const TypeAccountText1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountText1
> = z.nativeEnum(TypeAccountText1);

/** @internal */
export const TypeAccountText1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountText1
> = TypeAccountText1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountText1$ {
  /** @deprecated use `TypeAccountText1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountText1$inboundSchema;
  /** @deprecated use `TypeAccountText1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountText1$outboundSchema;
}

/** @internal */
export const TypeAccountText2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountText2
> = z.nativeEnum(TypeAccountText2);

/** @internal */
export const TypeAccountText2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountText2
> = TypeAccountText2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountText2$ {
  /** @deprecated use `TypeAccountText2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountText2$inboundSchema;
  /** @deprecated use `TypeAccountText2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountText2$outboundSchema;
}

/** @internal */
export const TextAlignAccountText$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountText
> = z.nativeEnum(TextAlignAccountText);

/** @internal */
export const TextAlignAccountText$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountText
> = TextAlignAccountText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountText$ {
  /** @deprecated use `TextAlignAccountText$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountText$inboundSchema;
  /** @deprecated use `TextAlignAccountText$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountText$outboundSchema;
}

/** @internal */
export const FieldMetaAccountText$inboundSchema: z.ZodType<
  FieldMetaAccountText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountText2$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountText$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountText$outboundSchema: z.ZodType<
  FieldMetaAccountText$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountText2$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountText$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountText$ {
  /** @deprecated use `FieldMetaAccountText$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountText$inboundSchema;
  /** @deprecated use `FieldMetaAccountText$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountText$outboundSchema;
  /** @deprecated use `FieldMetaAccountText$Outbound` instead. */
  export type Outbound = FieldMetaAccountText$Outbound;
}

export function fieldMetaAccountTextToJSON(
  fieldMetaAccountText: FieldMetaAccountText,
): string {
  return JSON.stringify(
    FieldMetaAccountText$outboundSchema.parse(fieldMetaAccountText),
  );
}

export function fieldMetaAccountTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountText' from JSON`,
  );
}

/** @internal */
export const FieldAccountText$inboundSchema: z.ZodType<
  FieldAccountText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountText1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountText$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountText$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountText$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountText$outboundSchema: z.ZodType<
  FieldAccountText$Outbound,
  z.ZodTypeDef,
  FieldAccountText
> = z.object({
  type: TypeAccountText1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountText$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountText$ {
  /** @deprecated use `FieldAccountText$inboundSchema` instead. */
  export const inboundSchema = FieldAccountText$inboundSchema;
  /** @deprecated use `FieldAccountText$outboundSchema` instead. */
  export const outboundSchema = FieldAccountText$outboundSchema;
  /** @deprecated use `FieldAccountText$Outbound` instead. */
  export type Outbound = FieldAccountText$Outbound;
}

export function fieldAccountTextToJSON(
  fieldAccountText: FieldAccountText,
): string {
  return JSON.stringify(
    FieldAccountText$outboundSchema.parse(fieldAccountText),
  );
}

export function fieldAccountTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountText' from JSON`,
  );
}

/** @internal */
export const TypeAccountDate1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDate1
> = z.nativeEnum(TypeAccountDate1);

/** @internal */
export const TypeAccountDate1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDate1
> = TypeAccountDate1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountDate1$ {
  /** @deprecated use `TypeAccountDate1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountDate1$inboundSchema;
  /** @deprecated use `TypeAccountDate1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountDate1$outboundSchema;
}

/** @internal */
export const TypeAccountDate2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDate2
> = z.nativeEnum(TypeAccountDate2);

/** @internal */
export const TypeAccountDate2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountDate2
> = TypeAccountDate2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountDate2$ {
  /** @deprecated use `TypeAccountDate2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountDate2$inboundSchema;
  /** @deprecated use `TypeAccountDate2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountDate2$outboundSchema;
}

/** @internal */
export const TextAlignAccountDate$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountDate
> = z.nativeEnum(TextAlignAccountDate);

/** @internal */
export const TextAlignAccountDate$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountDate
> = TextAlignAccountDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountDate$ {
  /** @deprecated use `TextAlignAccountDate$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountDate$inboundSchema;
  /** @deprecated use `TextAlignAccountDate$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountDate$outboundSchema;
}

/** @internal */
export const FieldMetaAccountDate$inboundSchema: z.ZodType<
  FieldMetaAccountDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountDate2$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountDate$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountDate$outboundSchema: z.ZodType<
  FieldMetaAccountDate$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountDate2$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountDate$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountDate$ {
  /** @deprecated use `FieldMetaAccountDate$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountDate$inboundSchema;
  /** @deprecated use `FieldMetaAccountDate$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountDate$outboundSchema;
  /** @deprecated use `FieldMetaAccountDate$Outbound` instead. */
  export type Outbound = FieldMetaAccountDate$Outbound;
}

export function fieldMetaAccountDateToJSON(
  fieldMetaAccountDate: FieldMetaAccountDate,
): string {
  return JSON.stringify(
    FieldMetaAccountDate$outboundSchema.parse(fieldMetaAccountDate),
  );
}

export function fieldMetaAccountDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountDate' from JSON`,
  );
}

/** @internal */
export const FieldAccountDate$inboundSchema: z.ZodType<
  FieldAccountDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountDate1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountDate$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountDate$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountDate$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountDate$outboundSchema: z.ZodType<
  FieldAccountDate$Outbound,
  z.ZodTypeDef,
  FieldAccountDate
> = z.object({
  type: TypeAccountDate1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountDate$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountDate$ {
  /** @deprecated use `FieldAccountDate$inboundSchema` instead. */
  export const inboundSchema = FieldAccountDate$inboundSchema;
  /** @deprecated use `FieldAccountDate$outboundSchema` instead. */
  export const outboundSchema = FieldAccountDate$outboundSchema;
  /** @deprecated use `FieldAccountDate$Outbound` instead. */
  export type Outbound = FieldAccountDate$Outbound;
}

export function fieldAccountDateToJSON(
  fieldAccountDate: FieldAccountDate,
): string {
  return JSON.stringify(
    FieldAccountDate$outboundSchema.parse(fieldAccountDate),
  );
}

export function fieldAccountDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountDate' from JSON`,
  );
}

/** @internal */
export const TypeAccountEmail1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountEmail1
> = z.nativeEnum(TypeAccountEmail1);

/** @internal */
export const TypeAccountEmail1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountEmail1
> = TypeAccountEmail1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountEmail1$ {
  /** @deprecated use `TypeAccountEmail1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountEmail1$inboundSchema;
  /** @deprecated use `TypeAccountEmail1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountEmail1$outboundSchema;
}

/** @internal */
export const TypeAccountEmail2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountEmail2
> = z.nativeEnum(TypeAccountEmail2);

/** @internal */
export const TypeAccountEmail2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountEmail2
> = TypeAccountEmail2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountEmail2$ {
  /** @deprecated use `TypeAccountEmail2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountEmail2$inboundSchema;
  /** @deprecated use `TypeAccountEmail2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountEmail2$outboundSchema;
}

/** @internal */
export const TextAlignAccountEmail$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountEmail
> = z.nativeEnum(TextAlignAccountEmail);

/** @internal */
export const TextAlignAccountEmail$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountEmail
> = TextAlignAccountEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountEmail$ {
  /** @deprecated use `TextAlignAccountEmail$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountEmail$inboundSchema;
  /** @deprecated use `TextAlignAccountEmail$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountEmail$outboundSchema;
}

/** @internal */
export const FieldMetaAccountEmail$inboundSchema: z.ZodType<
  FieldMetaAccountEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountEmail2$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountEmail$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountEmail$outboundSchema: z.ZodType<
  FieldMetaAccountEmail$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountEmail2$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountEmail$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountEmail$ {
  /** @deprecated use `FieldMetaAccountEmail$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountEmail$inboundSchema;
  /** @deprecated use `FieldMetaAccountEmail$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountEmail$outboundSchema;
  /** @deprecated use `FieldMetaAccountEmail$Outbound` instead. */
  export type Outbound = FieldMetaAccountEmail$Outbound;
}

export function fieldMetaAccountEmailToJSON(
  fieldMetaAccountEmail: FieldMetaAccountEmail,
): string {
  return JSON.stringify(
    FieldMetaAccountEmail$outboundSchema.parse(fieldMetaAccountEmail),
  );
}

export function fieldMetaAccountEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountEmail' from JSON`,
  );
}

/** @internal */
export const FieldAccountEmail$inboundSchema: z.ZodType<
  FieldAccountEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountEmail1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountEmail$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountEmail$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountEmail$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountEmail$outboundSchema: z.ZodType<
  FieldAccountEmail$Outbound,
  z.ZodTypeDef,
  FieldAccountEmail
> = z.object({
  type: TypeAccountEmail1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountEmail$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountEmail$ {
  /** @deprecated use `FieldAccountEmail$inboundSchema` instead. */
  export const inboundSchema = FieldAccountEmail$inboundSchema;
  /** @deprecated use `FieldAccountEmail$outboundSchema` instead. */
  export const outboundSchema = FieldAccountEmail$outboundSchema;
  /** @deprecated use `FieldAccountEmail$Outbound` instead. */
  export type Outbound = FieldAccountEmail$Outbound;
}

export function fieldAccountEmailToJSON(
  fieldAccountEmail: FieldAccountEmail,
): string {
  return JSON.stringify(
    FieldAccountEmail$outboundSchema.parse(fieldAccountEmail),
  );
}

export function fieldAccountEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountEmail' from JSON`,
  );
}

/** @internal */
export const TypeAccountName1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountName1
> = z.nativeEnum(TypeAccountName1);

/** @internal */
export const TypeAccountName1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountName1
> = TypeAccountName1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountName1$ {
  /** @deprecated use `TypeAccountName1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountName1$inboundSchema;
  /** @deprecated use `TypeAccountName1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountName1$outboundSchema;
}

/** @internal */
export const TypeAccountName2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountName2
> = z.nativeEnum(TypeAccountName2);

/** @internal */
export const TypeAccountName2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountName2
> = TypeAccountName2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountName2$ {
  /** @deprecated use `TypeAccountName2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountName2$inboundSchema;
  /** @deprecated use `TypeAccountName2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountName2$outboundSchema;
}

/** @internal */
export const TextAlignAccountName$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountName
> = z.nativeEnum(TextAlignAccountName);

/** @internal */
export const TextAlignAccountName$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountName
> = TextAlignAccountName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountName$ {
  /** @deprecated use `TextAlignAccountName$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountName$inboundSchema;
  /** @deprecated use `TextAlignAccountName$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountName$outboundSchema;
}

/** @internal */
export const FieldMetaAccountName$inboundSchema: z.ZodType<
  FieldMetaAccountName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountName2$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountName$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountName$outboundSchema: z.ZodType<
  FieldMetaAccountName$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountName2$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountName$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountName$ {
  /** @deprecated use `FieldMetaAccountName$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountName$inboundSchema;
  /** @deprecated use `FieldMetaAccountName$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountName$outboundSchema;
  /** @deprecated use `FieldMetaAccountName$Outbound` instead. */
  export type Outbound = FieldMetaAccountName$Outbound;
}

export function fieldMetaAccountNameToJSON(
  fieldMetaAccountName: FieldMetaAccountName,
): string {
  return JSON.stringify(
    FieldMetaAccountName$outboundSchema.parse(fieldMetaAccountName),
  );
}

export function fieldMetaAccountNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountName' from JSON`,
  );
}

/** @internal */
export const FieldAccountName$inboundSchema: z.ZodType<
  FieldAccountName,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountName1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountName$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountName$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountName$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountName$outboundSchema: z.ZodType<
  FieldAccountName$Outbound,
  z.ZodTypeDef,
  FieldAccountName
> = z.object({
  type: TypeAccountName1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountName$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountName$ {
  /** @deprecated use `FieldAccountName$inboundSchema` instead. */
  export const inboundSchema = FieldAccountName$inboundSchema;
  /** @deprecated use `FieldAccountName$outboundSchema` instead. */
  export const outboundSchema = FieldAccountName$outboundSchema;
  /** @deprecated use `FieldAccountName$Outbound` instead. */
  export type Outbound = FieldAccountName$Outbound;
}

export function fieldAccountNameToJSON(
  fieldAccountName: FieldAccountName,
): string {
  return JSON.stringify(
    FieldAccountName$outboundSchema.parse(fieldAccountName),
  );
}

export function fieldAccountNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountName' from JSON`,
  );
}

/** @internal */
export const TypeAccountInitials1$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountInitials1
> = z.nativeEnum(TypeAccountInitials1);

/** @internal */
export const TypeAccountInitials1$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountInitials1
> = TypeAccountInitials1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountInitials1$ {
  /** @deprecated use `TypeAccountInitials1$inboundSchema` instead. */
  export const inboundSchema = TypeAccountInitials1$inboundSchema;
  /** @deprecated use `TypeAccountInitials1$outboundSchema` instead. */
  export const outboundSchema = TypeAccountInitials1$outboundSchema;
}

/** @internal */
export const TypeAccountInitials2$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountInitials2
> = z.nativeEnum(TypeAccountInitials2);

/** @internal */
export const TypeAccountInitials2$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountInitials2
> = TypeAccountInitials2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountInitials2$ {
  /** @deprecated use `TypeAccountInitials2$inboundSchema` instead. */
  export const inboundSchema = TypeAccountInitials2$inboundSchema;
  /** @deprecated use `TypeAccountInitials2$outboundSchema` instead. */
  export const outboundSchema = TypeAccountInitials2$outboundSchema;
}

/** @internal */
export const TextAlignAccountInitials$inboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountInitials
> = z.nativeEnum(TextAlignAccountInitials);

/** @internal */
export const TextAlignAccountInitials$outboundSchema: z.ZodNativeEnum<
  typeof TextAlignAccountInitials
> = TextAlignAccountInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TextAlignAccountInitials$ {
  /** @deprecated use `TextAlignAccountInitials$inboundSchema` instead. */
  export const inboundSchema = TextAlignAccountInitials$inboundSchema;
  /** @deprecated use `TextAlignAccountInitials$outboundSchema` instead. */
  export const outboundSchema = TextAlignAccountInitials$outboundSchema;
}

/** @internal */
export const FieldMetaAccountInitials$inboundSchema: z.ZodType<
  FieldMetaAccountInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountInitials2$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountInitials$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaAccountInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaAccountInitials$outboundSchema: z.ZodType<
  FieldMetaAccountInitials$Outbound,
  z.ZodTypeDef,
  FieldMetaAccountInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: TypeAccountInitials2$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: TextAlignAccountInitials$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaAccountInitials$ {
  /** @deprecated use `FieldMetaAccountInitials$inboundSchema` instead. */
  export const inboundSchema = FieldMetaAccountInitials$inboundSchema;
  /** @deprecated use `FieldMetaAccountInitials$outboundSchema` instead. */
  export const outboundSchema = FieldMetaAccountInitials$outboundSchema;
  /** @deprecated use `FieldMetaAccountInitials$Outbound` instead. */
  export type Outbound = FieldMetaAccountInitials$Outbound;
}

export function fieldMetaAccountInitialsToJSON(
  fieldMetaAccountInitials: FieldMetaAccountInitials,
): string {
  return JSON.stringify(
    FieldMetaAccountInitials$outboundSchema.parse(fieldMetaAccountInitials),
  );
}

export function fieldMetaAccountInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaAccountInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaAccountInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaAccountInitials' from JSON`,
  );
}

/** @internal */
export const FieldAccountInitials$inboundSchema: z.ZodType<
  FieldAccountInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountInitials1$inboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountInitials$inboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountInitials$Outbound = {
  type: string;
  fieldMeta?: FieldMetaAccountInitials$Outbound | undefined;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountInitials$outboundSchema: z.ZodType<
  FieldAccountInitials$Outbound,
  z.ZodTypeDef,
  FieldAccountInitials
> = z.object({
  type: TypeAccountInitials1$outboundSchema,
  fieldMeta: z.lazy(() => FieldMetaAccountInitials$outboundSchema).optional(),
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountInitials$ {
  /** @deprecated use `FieldAccountInitials$inboundSchema` instead. */
  export const inboundSchema = FieldAccountInitials$inboundSchema;
  /** @deprecated use `FieldAccountInitials$outboundSchema` instead. */
  export const outboundSchema = FieldAccountInitials$outboundSchema;
  /** @deprecated use `FieldAccountInitials$Outbound` instead. */
  export type Outbound = FieldAccountInitials$Outbound;
}

export function fieldAccountInitialsToJSON(
  fieldAccountInitials: FieldAccountInitials,
): string {
  return JSON.stringify(
    FieldAccountInitials$outboundSchema.parse(fieldAccountInitials),
  );
}

export function fieldAccountInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountInitials' from JSON`,
  );
}

/** @internal */
export const TypeAccountFreeSignature$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountFreeSignature
> = z.nativeEnum(TypeAccountFreeSignature);

/** @internal */
export const TypeAccountFreeSignature$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountFreeSignature
> = TypeAccountFreeSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountFreeSignature$ {
  /** @deprecated use `TypeAccountFreeSignature$inboundSchema` instead. */
  export const inboundSchema = TypeAccountFreeSignature$inboundSchema;
  /** @deprecated use `TypeAccountFreeSignature$outboundSchema` instead. */
  export const outboundSchema = TypeAccountFreeSignature$outboundSchema;
}

/** @internal */
export const FieldAccountFreeSignature$inboundSchema: z.ZodType<
  FieldAccountFreeSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountFreeSignature$inboundSchema,
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountFreeSignature$Outbound = {
  type: string;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountFreeSignature$outboundSchema: z.ZodType<
  FieldAccountFreeSignature$Outbound,
  z.ZodTypeDef,
  FieldAccountFreeSignature
> = z.object({
  type: TypeAccountFreeSignature$outboundSchema,
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountFreeSignature$ {
  /** @deprecated use `FieldAccountFreeSignature$inboundSchema` instead. */
  export const inboundSchema = FieldAccountFreeSignature$inboundSchema;
  /** @deprecated use `FieldAccountFreeSignature$outboundSchema` instead. */
  export const outboundSchema = FieldAccountFreeSignature$outboundSchema;
  /** @deprecated use `FieldAccountFreeSignature$Outbound` instead. */
  export type Outbound = FieldAccountFreeSignature$Outbound;
}

export function fieldAccountFreeSignatureToJSON(
  fieldAccountFreeSignature: FieldAccountFreeSignature,
): string {
  return JSON.stringify(
    FieldAccountFreeSignature$outboundSchema.parse(fieldAccountFreeSignature),
  );
}

export function fieldAccountFreeSignatureFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountFreeSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountFreeSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountFreeSignature' from JSON`,
  );
}

/** @internal */
export const TypeAccountSignature$inboundSchema: z.ZodNativeEnum<
  typeof TypeAccountSignature
> = z.nativeEnum(TypeAccountSignature);

/** @internal */
export const TypeAccountSignature$outboundSchema: z.ZodNativeEnum<
  typeof TypeAccountSignature
> = TypeAccountSignature$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TypeAccountSignature$ {
  /** @deprecated use `TypeAccountSignature$inboundSchema` instead. */
  export const inboundSchema = TypeAccountSignature$inboundSchema;
  /** @deprecated use `TypeAccountSignature$outboundSchema` instead. */
  export const outboundSchema = TypeAccountSignature$outboundSchema;
}

/** @internal */
export const FieldAccountSignature$inboundSchema: z.ZodType<
  FieldAccountSignature,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TypeAccountSignature$inboundSchema,
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/** @internal */
export type FieldAccountSignature$Outbound = {
  type: string;
  pageNumber: number;
  pageX: number;
  pageY: number;
  width: number;
  height: number;
};

/** @internal */
export const FieldAccountSignature$outboundSchema: z.ZodType<
  FieldAccountSignature$Outbound,
  z.ZodTypeDef,
  FieldAccountSignature
> = z.object({
  type: TypeAccountSignature$outboundSchema,
  pageNumber: z.number(),
  pageX: z.number(),
  pageY: z.number(),
  width: z.number(),
  height: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountSignature$ {
  /** @deprecated use `FieldAccountSignature$inboundSchema` instead. */
  export const inboundSchema = FieldAccountSignature$inboundSchema;
  /** @deprecated use `FieldAccountSignature$outboundSchema` instead. */
  export const outboundSchema = FieldAccountSignature$outboundSchema;
  /** @deprecated use `FieldAccountSignature$Outbound` instead. */
  export type Outbound = FieldAccountSignature$Outbound;
}

export function fieldAccountSignatureToJSON(
  fieldAccountSignature: FieldAccountSignature,
): string {
  return JSON.stringify(
    FieldAccountSignature$outboundSchema.parse(fieldAccountSignature),
  );
}

export function fieldAccountSignatureFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountSignature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountSignature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountSignature' from JSON`,
  );
}

/** @internal */
export const FieldAccountUnion$inboundSchema: z.ZodType<
  FieldAccountUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldAccountSignature$inboundSchema),
  z.lazy(() => FieldAccountFreeSignature$inboundSchema),
  z.lazy(() => FieldAccountInitials$inboundSchema),
  z.lazy(() => FieldAccountName$inboundSchema),
  z.lazy(() => FieldAccountEmail$inboundSchema),
  z.lazy(() => FieldAccountDate$inboundSchema),
  z.lazy(() => FieldAccountText$inboundSchema),
  z.lazy(() => FieldAccountNumber$inboundSchema),
  z.lazy(() => FieldAccountRadio$inboundSchema),
  z.lazy(() => FieldAccountCheckbox$inboundSchema),
  z.lazy(() => FieldAccountDropdown$inboundSchema),
]);

/** @internal */
export type FieldAccountUnion$Outbound =
  | FieldAccountSignature$Outbound
  | FieldAccountFreeSignature$Outbound
  | FieldAccountInitials$Outbound
  | FieldAccountName$Outbound
  | FieldAccountEmail$Outbound
  | FieldAccountDate$Outbound
  | FieldAccountText$Outbound
  | FieldAccountNumber$Outbound
  | FieldAccountRadio$Outbound
  | FieldAccountCheckbox$Outbound
  | FieldAccountDropdown$Outbound;

/** @internal */
export const FieldAccountUnion$outboundSchema: z.ZodType<
  FieldAccountUnion$Outbound,
  z.ZodTypeDef,
  FieldAccountUnion
> = z.union([
  z.lazy(() => FieldAccountSignature$outboundSchema),
  z.lazy(() => FieldAccountFreeSignature$outboundSchema),
  z.lazy(() => FieldAccountInitials$outboundSchema),
  z.lazy(() => FieldAccountName$outboundSchema),
  z.lazy(() => FieldAccountEmail$outboundSchema),
  z.lazy(() => FieldAccountDate$outboundSchema),
  z.lazy(() => FieldAccountText$outboundSchema),
  z.lazy(() => FieldAccountNumber$outboundSchema),
  z.lazy(() => FieldAccountRadio$outboundSchema),
  z.lazy(() => FieldAccountCheckbox$outboundSchema),
  z.lazy(() => FieldAccountDropdown$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldAccountUnion$ {
  /** @deprecated use `FieldAccountUnion$inboundSchema` instead. */
  export const inboundSchema = FieldAccountUnion$inboundSchema;
  /** @deprecated use `FieldAccountUnion$outboundSchema` instead. */
  export const outboundSchema = FieldAccountUnion$outboundSchema;
  /** @deprecated use `FieldAccountUnion$Outbound` instead. */
  export type Outbound = FieldAccountUnion$Outbound;
}

export function fieldAccountUnionToJSON(
  fieldAccountUnion: FieldAccountUnion,
): string {
  return JSON.stringify(
    FieldAccountUnion$outboundSchema.parse(fieldAccountUnion),
  );
}

export function fieldAccountUnionFromJSON(
  jsonString: string,
): SafeParseResult<FieldAccountUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldAccountUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldAccountUnion' from JSON`,
  );
}

/** @internal */
export const RecipientAccount$inboundSchema: z.ZodType<
  RecipientAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.string(),
  role: RoleAccount$inboundSchema,
  signingOrder: z.number().optional(),
  accessAuth: z.nullable(
    DocumentCreateDocumentTemporaryAccessAuthRequest$inboundSchema,
  ).optional(),
  actionAuth: z.nullable(ActionAuthAccount$inboundSchema).optional(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldAccountSignature$inboundSchema),
      z.lazy(() => FieldAccountFreeSignature$inboundSchema),
      z.lazy(() => FieldAccountInitials$inboundSchema),
      z.lazy(() => FieldAccountName$inboundSchema),
      z.lazy(() => FieldAccountEmail$inboundSchema),
      z.lazy(() => FieldAccountDate$inboundSchema),
      z.lazy(() => FieldAccountText$inboundSchema),
      z.lazy(() => FieldAccountNumber$inboundSchema),
      z.lazy(() => FieldAccountRadio$inboundSchema),
      z.lazy(() => FieldAccountCheckbox$inboundSchema),
      z.lazy(() => FieldAccountDropdown$inboundSchema),
    ]),
  ).optional(),
});

/** @internal */
export type RecipientAccount$Outbound = {
  email: string;
  name: string;
  role: string;
  signingOrder?: number | undefined;
  accessAuth?: string | null | undefined;
  actionAuth?: string | null | undefined;
  fields?:
    | Array<
      | FieldAccountSignature$Outbound
      | FieldAccountFreeSignature$Outbound
      | FieldAccountInitials$Outbound
      | FieldAccountName$Outbound
      | FieldAccountEmail$Outbound
      | FieldAccountDate$Outbound
      | FieldAccountText$Outbound
      | FieldAccountNumber$Outbound
      | FieldAccountRadio$Outbound
      | FieldAccountCheckbox$Outbound
      | FieldAccountDropdown$Outbound
    >
    | undefined;
};

/** @internal */
export const RecipientAccount$outboundSchema: z.ZodType<
  RecipientAccount$Outbound,
  z.ZodTypeDef,
  RecipientAccount
> = z.object({
  email: z.string(),
  name: z.string(),
  role: RoleAccount$outboundSchema,
  signingOrder: z.number().optional(),
  accessAuth: z.nullable(
    DocumentCreateDocumentTemporaryAccessAuthRequest$outboundSchema,
  ).optional(),
  actionAuth: z.nullable(ActionAuthAccount$outboundSchema).optional(),
  fields: z.array(
    z.union([
      z.lazy(() => FieldAccountSignature$outboundSchema),
      z.lazy(() => FieldAccountFreeSignature$outboundSchema),
      z.lazy(() => FieldAccountInitials$outboundSchema),
      z.lazy(() => FieldAccountName$outboundSchema),
      z.lazy(() => FieldAccountEmail$outboundSchema),
      z.lazy(() => FieldAccountDate$outboundSchema),
      z.lazy(() => FieldAccountText$outboundSchema),
      z.lazy(() => FieldAccountNumber$outboundSchema),
      z.lazy(() => FieldAccountRadio$outboundSchema),
      z.lazy(() => FieldAccountCheckbox$outboundSchema),
      z.lazy(() => FieldAccountDropdown$outboundSchema),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecipientAccount$ {
  /** @deprecated use `RecipientAccount$inboundSchema` instead. */
  export const inboundSchema = RecipientAccount$inboundSchema;
  /** @deprecated use `RecipientAccount$outboundSchema` instead. */
  export const outboundSchema = RecipientAccount$outboundSchema;
  /** @deprecated use `RecipientAccount$Outbound` instead. */
  export type Outbound = RecipientAccount$Outbound;
}

export function recipientAccountToJSON(
  recipientAccount: RecipientAccount,
): string {
  return JSON.stringify(
    RecipientAccount$outboundSchema.parse(recipientAccount),
  );
}

export function recipientAccountFromJSON(
  jsonString: string,
): SafeParseResult<RecipientAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecipientAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecipientAccount' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryDateFormat$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryDateFormat> = z
    .nativeEnum(DocumentCreateDocumentTemporaryDateFormat);

/** @internal */
export const DocumentCreateDocumentTemporaryDateFormat$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryDateFormat> =
    DocumentCreateDocumentTemporaryDateFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDateFormat$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDateFormat$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDateFormat$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDateFormat$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDateFormat$outboundSchema;
}

/** @internal */
export const DistributionMethodAccount$inboundSchema: z.ZodNativeEnum<
  typeof DistributionMethodAccount
> = z.nativeEnum(DistributionMethodAccount);

/** @internal */
export const DistributionMethodAccount$outboundSchema: z.ZodNativeEnum<
  typeof DistributionMethodAccount
> = DistributionMethodAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DistributionMethodAccount$ {
  /** @deprecated use `DistributionMethodAccount$inboundSchema` instead. */
  export const inboundSchema = DistributionMethodAccount$inboundSchema;
  /** @deprecated use `DistributionMethodAccount$outboundSchema` instead. */
  export const outboundSchema = DistributionMethodAccount$outboundSchema;
}

/** @internal */
export const SigningOrderAccount$inboundSchema: z.ZodNativeEnum<
  typeof SigningOrderAccount
> = z.nativeEnum(SigningOrderAccount);

/** @internal */
export const SigningOrderAccount$outboundSchema: z.ZodNativeEnum<
  typeof SigningOrderAccount
> = SigningOrderAccount$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SigningOrderAccount$ {
  /** @deprecated use `SigningOrderAccount$inboundSchema` instead. */
  export const inboundSchema = SigningOrderAccount$inboundSchema;
  /** @deprecated use `SigningOrderAccount$outboundSchema` instead. */
  export const outboundSchema = SigningOrderAccount$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryLanguage$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryLanguage> = z
    .nativeEnum(DocumentCreateDocumentTemporaryLanguage);

/** @internal */
export const DocumentCreateDocumentTemporaryLanguage$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryLanguage> =
    DocumentCreateDocumentTemporaryLanguage$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryLanguage$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryLanguage$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryLanguage$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryLanguage$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryLanguage$outboundSchema;
}

/** @internal */
export const EmailSettingsAccount$inboundSchema: z.ZodType<
  EmailSettingsAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type EmailSettingsAccount$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const EmailSettingsAccount$outboundSchema: z.ZodType<
  EmailSettingsAccount$Outbound,
  z.ZodTypeDef,
  EmailSettingsAccount
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailSettingsAccount$ {
  /** @deprecated use `EmailSettingsAccount$inboundSchema` instead. */
  export const inboundSchema = EmailSettingsAccount$inboundSchema;
  /** @deprecated use `EmailSettingsAccount$outboundSchema` instead. */
  export const outboundSchema = EmailSettingsAccount$outboundSchema;
  /** @deprecated use `EmailSettingsAccount$Outbound` instead. */
  export type Outbound = EmailSettingsAccount$Outbound;
}

export function emailSettingsAccountToJSON(
  emailSettingsAccount: EmailSettingsAccount,
): string {
  return JSON.stringify(
    EmailSettingsAccount$outboundSchema.parse(emailSettingsAccount),
  );
}

export function emailSettingsAccountFromJSON(
  jsonString: string,
): SafeParseResult<EmailSettingsAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailSettingsAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailSettingsAccount' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryMeta$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentCreateDocumentTemporaryDateFormat$inboundSchema
    .optional(),
  distributionMethod: DistributionMethodAccount$inboundSchema.optional(),
  signingOrder: SigningOrderAccount$inboundSchema.optional(),
  redirectUrl: z.string().optional(),
  language: DocumentCreateDocumentTemporaryLanguage$inboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() => EmailSettingsAccount$inboundSchema).optional(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryMeta$Outbound = {
  subject?: string | undefined;
  message?: string | undefined;
  timezone?: string | undefined;
  dateFormat?: string | undefined;
  distributionMethod?: string | undefined;
  signingOrder?: string | undefined;
  redirectUrl?: string | undefined;
  language?: string | undefined;
  typedSignatureEnabled?: boolean | undefined;
  drawSignatureEnabled?: boolean | undefined;
  uploadSignatureEnabled?: boolean | undefined;
  emailSettings?: EmailSettingsAccount$Outbound | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryMeta$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryMeta$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryMeta
> = z.object({
  subject: z.string().optional(),
  message: z.string().optional(),
  timezone: z.string().optional(),
  dateFormat: DocumentCreateDocumentTemporaryDateFormat$outboundSchema
    .optional(),
  distributionMethod: DistributionMethodAccount$outboundSchema.optional(),
  signingOrder: SigningOrderAccount$outboundSchema.optional(),
  redirectUrl: z.string().optional(),
  language: DocumentCreateDocumentTemporaryLanguage$outboundSchema.optional(),
  typedSignatureEnabled: z.boolean().optional(),
  drawSignatureEnabled: z.boolean().optional(),
  uploadSignatureEnabled: z.boolean().optional(),
  emailSettings: z.lazy(() => EmailSettingsAccount$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryMeta$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryMeta$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryMeta$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryMeta$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryMeta$Outbound;
}

export function documentCreateDocumentTemporaryMetaToJSON(
  documentCreateDocumentTemporaryMeta: DocumentCreateDocumentTemporaryMeta,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryMeta$outboundSchema.parse(
      documentCreateDocumentTemporaryMeta,
    ),
  );
}

export function documentCreateDocumentTemporaryMetaFromJSON(
  jsonString: string,
): SafeParseResult<DocumentCreateDocumentTemporaryMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryMeta' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryRequest$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  externalId: z.string().optional(),
  visibility: VisibilityAccount$inboundSchema.optional(),
  globalAccessAuth:
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$inboundSchema
      .optional(),
  globalActionAuth: GlobalActionAuthAccount$inboundSchema.optional(),
  formValues: z.record(z.union([z.string(), z.boolean(), z.number()]))
    .optional(),
  recipients: z.array(z.lazy(() => RecipientAccount$inboundSchema)).optional(),
  meta: z.lazy(() => DocumentCreateDocumentTemporaryMeta$inboundSchema)
    .optional(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryRequest$Outbound = {
  title: string;
  externalId?: string | undefined;
  visibility?: string | undefined;
  globalAccessAuth?: string | undefined;
  globalActionAuth?: string | undefined;
  formValues?: { [k: string]: string | boolean | number } | undefined;
  recipients?: Array<RecipientAccount$Outbound> | undefined;
  meta?: DocumentCreateDocumentTemporaryMeta$Outbound | undefined;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRequest$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryRequest$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryRequest
> = z.object({
  title: z.string(),
  externalId: z.string().optional(),
  visibility: VisibilityAccount$outboundSchema.optional(),
  globalAccessAuth:
    DocumentCreateDocumentTemporaryGlobalAccessAuthRequest$outboundSchema
      .optional(),
  globalActionAuth: GlobalActionAuthAccount$outboundSchema.optional(),
  formValues: z.record(z.union([z.string(), z.boolean(), z.number()]))
    .optional(),
  recipients: z.array(z.lazy(() => RecipientAccount$outboundSchema)).optional(),
  meta: z.lazy(() => DocumentCreateDocumentTemporaryMeta$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRequest$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRequest$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRequest$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRequest$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryRequest$Outbound;
}

export function documentCreateDocumentTemporaryRequestToJSON(
  documentCreateDocumentTemporaryRequest:
    DocumentCreateDocumentTemporaryRequest,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRequest$outboundSchema.parse(
      documentCreateDocumentTemporaryRequest,
    ),
  );
}

export function documentCreateDocumentTemporaryRequestFromJSON(
  jsonString: string,
): SafeParseResult<DocumentCreateDocumentTemporaryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentCreateDocumentTemporaryRequest' from JSON`,
  );
}

/** @internal */
export const DocumentVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibility
> = z.nativeEnum(DocumentVisibility);

/** @internal */
export const DocumentVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibility
> = DocumentVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibility$ {
  /** @deprecated use `DocumentVisibility$inboundSchema` instead. */
  export const inboundSchema = DocumentVisibility$inboundSchema;
  /** @deprecated use `DocumentVisibility$outboundSchema` instead. */
  export const outboundSchema = DocumentVisibility$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryStatus> = z.nativeEnum(
    DocumentCreateDocumentTemporaryStatus,
  );

/** @internal */
export const DocumentCreateDocumentTemporaryStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryStatus> =
    DocumentCreateDocumentTemporaryStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySource$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySource> = z.nativeEnum(
    DocumentCreateDocumentTemporarySource,
  );

/** @internal */
export const DocumentCreateDocumentTemporarySource$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySource> =
    DocumentCreateDocumentTemporarySource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySource$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySource$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySource$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySource$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySource$outboundSchema;
}

/** @internal */
export const DocumentGlobalAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalAccessAuth
> = z.nativeEnum(DocumentGlobalAccessAuth);

/** @internal */
export const DocumentGlobalAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalAccessAuth
> = DocumentGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGlobalAccessAuth$ {
  /** @deprecated use `DocumentGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGlobalAccessAuth$inboundSchema;
  /** @deprecated use `DocumentGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentGlobalActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalActionAuth
> = z.nativeEnum(DocumentGlobalActionAuth);

/** @internal */
export const DocumentGlobalActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentGlobalActionAuth
> = DocumentGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentGlobalActionAuth$ {
  /** @deprecated use `DocumentGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentGlobalActionAuth$inboundSchema;
  /** @deprecated use `DocumentGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentGlobalActionAuth$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryAuthOptions$inboundSchema:
  z.ZodType<DocumentCreateDocumentTemporaryAuthOptions, z.ZodTypeDef, unknown> =
    z.object({
      globalAccessAuth: z.nullable(DocumentGlobalAccessAuth$inboundSchema),
      globalActionAuth: z.nullable(DocumentGlobalActionAuth$inboundSchema),
    });

/** @internal */
export type DocumentCreateDocumentTemporaryAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const DocumentCreateDocumentTemporaryAuthOptions$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryAuthOptions
  > = z.object({
    globalAccessAuth: z.nullable(DocumentGlobalAccessAuth$outboundSchema),
    globalActionAuth: z.nullable(DocumentGlobalActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryAuthOptions$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryAuthOptions$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryAuthOptions$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryAuthOptions$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryAuthOptions$Outbound;
}

export function documentCreateDocumentTemporaryAuthOptionsToJSON(
  documentCreateDocumentTemporaryAuthOptions:
    DocumentCreateDocumentTemporaryAuthOptions,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryAuthOptions$outboundSchema.parse(
      documentCreateDocumentTemporaryAuthOptions,
    ),
  );
}

export function documentCreateDocumentTemporaryAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentFormValues$inboundSchema: z.ZodType<
  DocumentFormValues,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type DocumentFormValues$Outbound = string | boolean | number;

/** @internal */
export const DocumentFormValues$outboundSchema: z.ZodType<
  DocumentFormValues$Outbound,
  z.ZodTypeDef,
  DocumentFormValues
> = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFormValues$ {
  /** @deprecated use `DocumentFormValues$inboundSchema` instead. */
  export const inboundSchema = DocumentFormValues$inboundSchema;
  /** @deprecated use `DocumentFormValues$outboundSchema` instead. */
  export const outboundSchema = DocumentFormValues$outboundSchema;
  /** @deprecated use `DocumentFormValues$Outbound` instead. */
  export type Outbound = DocumentFormValues$Outbound;
}

export function documentFormValuesToJSON(
  documentFormValues: DocumentFormValues,
): string {
  return JSON.stringify(
    DocumentFormValues$outboundSchema.parse(documentFormValues),
  );
}

export function documentFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFormValues, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFormValues$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFormValues' from JSON`,
  );
}

/** @internal */
export const DocumentDocumentDataType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDocumentDataType
> = z.nativeEnum(DocumentDocumentDataType);

/** @internal */
export const DocumentDocumentDataType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDocumentDataType
> = DocumentDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDocumentDataType$ {
  /** @deprecated use `DocumentDocumentDataType$inboundSchema` instead. */
  export const inboundSchema = DocumentDocumentDataType$inboundSchema;
  /** @deprecated use `DocumentDocumentDataType$outboundSchema` instead. */
  export const outboundSchema = DocumentDocumentDataType$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentData$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: DocumentDocumentDataType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentData$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentData$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryDocumentData
  > = z.object({
    type: DocumentDocumentDataType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDocumentData$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDocumentData$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentData$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryDocumentData$Outbound;
}

export function documentCreateDocumentTemporaryDocumentDataToJSON(
  documentCreateDocumentTemporaryDocumentData:
    DocumentCreateDocumentTemporaryDocumentData,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema.parse(
      documentCreateDocumentTemporaryDocumentData,
    ),
  );
}

export function documentCreateDocumentTemporaryDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryDocumentData' from JSON`,
  );
}

/** @internal */
export const DocumentSigningOrder$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSigningOrder
> = z.nativeEnum(DocumentSigningOrder);

/** @internal */
export const DocumentSigningOrder$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSigningOrder
> = DocumentSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSigningOrder$ {
  /** @deprecated use `DocumentSigningOrder$inboundSchema` instead. */
  export const inboundSchema = DocumentSigningOrder$inboundSchema;
  /** @deprecated use `DocumentSigningOrder$outboundSchema` instead. */
  export const outboundSchema = DocumentSigningOrder$outboundSchema;
}

/** @internal */
export const DocumentDistributionMethod$inboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributionMethod
> = z.nativeEnum(DocumentDistributionMethod);

/** @internal */
export const DocumentDistributionMethod$outboundSchema: z.ZodNativeEnum<
  typeof DocumentDistributionMethod
> = DocumentDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentDistributionMethod$ {
  /** @deprecated use `DocumentDistributionMethod$inboundSchema` instead. */
  export const inboundSchema = DocumentDistributionMethod$inboundSchema;
  /** @deprecated use `DocumentDistributionMethod$outboundSchema` instead. */
  export const outboundSchema = DocumentDistributionMethod$outboundSchema;
}

/** @internal */
export const DocumentEmailSettings$inboundSchema: z.ZodType<
  DocumentEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/** @internal */
export type DocumentEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const DocumentEmailSettings$outboundSchema: z.ZodType<
  DocumentEmailSettings$Outbound,
  z.ZodTypeDef,
  DocumentEmailSettings
> = z.object({
  recipientSigningRequest: z.boolean().default(true),
  recipientRemoved: z.boolean().default(true),
  recipientSigned: z.boolean().default(true),
  documentPending: z.boolean().default(true),
  documentCompleted: z.boolean().default(true),
  documentDeleted: z.boolean().default(true),
  ownerDocumentCompleted: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentEmailSettings$ {
  /** @deprecated use `DocumentEmailSettings$inboundSchema` instead. */
  export const inboundSchema = DocumentEmailSettings$inboundSchema;
  /** @deprecated use `DocumentEmailSettings$outboundSchema` instead. */
  export const outboundSchema = DocumentEmailSettings$outboundSchema;
  /** @deprecated use `DocumentEmailSettings$Outbound` instead. */
  export type Outbound = DocumentEmailSettings$Outbound;
}

export function documentEmailSettingsToJSON(
  documentEmailSettings: DocumentEmailSettings,
): string {
  return JSON.stringify(
    DocumentEmailSettings$outboundSchema.parse(documentEmailSettings),
  );
}

export function documentEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentEmailSettings' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    signingOrder: DocumentSigningOrder$inboundSchema,
    distributionMethod: DocumentDistributionMethod$inboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() => DocumentEmailSettings$inboundSchema),
    ),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryDocumentMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: DocumentEmailSettings$Outbound | null;
};

/** @internal */
export const DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryDocumentMeta$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryDocumentMeta
  > = z.object({
    signingOrder: DocumentSigningOrder$outboundSchema,
    distributionMethod: DocumentDistributionMethod$outboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() => DocumentEmailSettings$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryDocumentMeta$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryDocumentMeta$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryDocumentMeta$Outbound;
}

export function documentCreateDocumentTemporaryDocumentMetaToJSON(
  documentCreateDocumentTemporaryDocumentMeta:
    DocumentCreateDocumentTemporaryDocumentMeta,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema.parse(
      documentCreateDocumentTemporaryDocumentMeta,
    ),
  );
}

export function documentCreateDocumentTemporaryDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryDocumentMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryDocumentMeta' from JSON`,
  );
}

/** @internal */
export const DocumentRole$inboundSchema: z.ZodNativeEnum<typeof DocumentRole> =
  z.nativeEnum(DocumentRole);

/** @internal */
export const DocumentRole$outboundSchema: z.ZodNativeEnum<typeof DocumentRole> =
  DocumentRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRole$ {
  /** @deprecated use `DocumentRole$inboundSchema` instead. */
  export const inboundSchema = DocumentRole$inboundSchema;
  /** @deprecated use `DocumentRole$outboundSchema` instead. */
  export const outboundSchema = DocumentRole$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryReadStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporaryReadStatus);

/** @internal */
export const DocumentCreateDocumentTemporaryReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporaryReadStatus> =
    DocumentCreateDocumentTemporaryReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryReadStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryReadStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryReadStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporarySigningStatus);

/** @internal */
export const DocumentCreateDocumentTemporarySigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySigningStatus> =
    DocumentCreateDocumentTemporarySigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySigningStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySigningStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySigningStatus$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporarySendStatus$inboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySendStatus> = z
    .nativeEnum(DocumentCreateDocumentTemporarySendStatus);

/** @internal */
export const DocumentCreateDocumentTemporarySendStatus$outboundSchema:
  z.ZodNativeEnum<typeof DocumentCreateDocumentTemporarySendStatus> =
    DocumentCreateDocumentTemporarySendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporarySendStatus$ {
  /** @deprecated use `DocumentCreateDocumentTemporarySendStatus$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporarySendStatus$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporarySendStatus$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporarySendStatus$outboundSchema;
}

/** @internal */
export const DocumentAccessAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentAccessAuth
> = z.nativeEnum(DocumentAccessAuth);

/** @internal */
export const DocumentAccessAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentAccessAuth
> = DocumentAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAccessAuth$ {
  /** @deprecated use `DocumentAccessAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentAccessAuth$inboundSchema;
  /** @deprecated use `DocumentAccessAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentAccessAuth$outboundSchema;
}

/** @internal */
export const DocumentActionAuth$inboundSchema: z.ZodNativeEnum<
  typeof DocumentActionAuth
> = z.nativeEnum(DocumentActionAuth);

/** @internal */
export const DocumentActionAuth$outboundSchema: z.ZodNativeEnum<
  typeof DocumentActionAuth
> = DocumentActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentActionAuth$ {
  /** @deprecated use `DocumentActionAuth$inboundSchema` instead. */
  export const inboundSchema = DocumentActionAuth$inboundSchema;
  /** @deprecated use `DocumentActionAuth$outboundSchema` instead. */
  export const outboundSchema = DocumentActionAuth$outboundSchema;
}

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.nullable(DocumentAccessAuth$inboundSchema),
    actionAuth: z.nullable(DocumentActionAuth$inboundSchema),
  });

/** @internal */
export type DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema:
  z.ZodType<
    DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    DocumentCreateDocumentTemporaryRecipientAuthOptions
  > = z.object({
    accessAuth: z.nullable(DocumentAccessAuth$outboundSchema),
    actionAuth: z.nullable(DocumentActionAuth$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryRecipientAuthOptions$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound` instead. */
  export type Outbound =
    DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound;
}

export function documentCreateDocumentTemporaryRecipientAuthOptionsToJSON(
  documentCreateDocumentTemporaryRecipientAuthOptions:
    DocumentCreateDocumentTemporaryRecipientAuthOptions,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema.parse(
      documentCreateDocumentTemporaryRecipientAuthOptions,
    ),
  );
}

export function documentCreateDocumentTemporaryRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const DocumentRecipient$inboundSchema: z.ZodType<
  DocumentRecipient,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: DocumentRole$inboundSchema,
  readStatus: DocumentCreateDocumentTemporaryReadStatus$inboundSchema,
  signingStatus: DocumentCreateDocumentTemporarySigningStatus$inboundSchema,
  sendStatus: DocumentCreateDocumentTemporarySendStatus$inboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$inboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/** @internal */
export type DocumentRecipient$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions:
    | DocumentCreateDocumentTemporaryRecipientAuthOptions$Outbound
    | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const DocumentRecipient$outboundSchema: z.ZodType<
  DocumentRecipient$Outbound,
  z.ZodTypeDef,
  DocumentRecipient
> = z.object({
  role: DocumentRole$outboundSchema,
  readStatus: DocumentCreateDocumentTemporaryReadStatus$outboundSchema,
  signingStatus: DocumentCreateDocumentTemporarySigningStatus$outboundSchema,
  sendStatus: DocumentCreateDocumentTemporarySendStatus$outboundSchema,
  id: z.number(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  email: z.string(),
  name: z.string(),
  token: z.string(),
  documentDeletedAt: z.nullable(z.string()),
  expired: z.nullable(z.string()),
  signedAt: z.nullable(z.string()),
  authOptions: z.nullable(
    z.lazy(() =>
      DocumentCreateDocumentTemporaryRecipientAuthOptions$outboundSchema
    ),
  ),
  signingOrder: z.nullable(z.number()),
  rejectionReason: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentRecipient$ {
  /** @deprecated use `DocumentRecipient$inboundSchema` instead. */
  export const inboundSchema = DocumentRecipient$inboundSchema;
  /** @deprecated use `DocumentRecipient$outboundSchema` instead. */
  export const outboundSchema = DocumentRecipient$outboundSchema;
  /** @deprecated use `DocumentRecipient$Outbound` instead. */
  export type Outbound = DocumentRecipient$Outbound;
}

export function documentRecipientToJSON(
  documentRecipient: DocumentRecipient,
): string {
  return JSON.stringify(
    DocumentRecipient$outboundSchema.parse(documentRecipient),
  );
}

export function documentRecipientFromJSON(
  jsonString: string,
): SafeParseResult<DocumentRecipient, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentRecipient$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentRecipient' from JSON`,
  );
}

/** @internal */
export const DocumentFieldType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentFieldType
> = z.nativeEnum(DocumentFieldType);

/** @internal */
export const DocumentFieldType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentFieldType
> = DocumentFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFieldType$ {
  /** @deprecated use `DocumentFieldType$inboundSchema` instead. */
  export const inboundSchema = DocumentFieldType$inboundSchema;
  /** @deprecated use `DocumentFieldType$outboundSchema` instead. */
  export const outboundSchema = DocumentFieldType$outboundSchema;
}

/** @internal */
export const DocumentTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDropdown
> = z.nativeEnum(DocumentTypeDropdown);

/** @internal */
export const DocumentTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDropdown
> = DocumentTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeDropdown$ {
  /** @deprecated use `DocumentTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeDropdown$inboundSchema;
  /** @deprecated use `DocumentTypeDropdown$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeDropdown$outboundSchema;
}

/** @internal */
export const DocumentValue3$inboundSchema: z.ZodType<
  DocumentValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type DocumentValue3$Outbound = {
  value: string;
};

/** @internal */
export const DocumentValue3$outboundSchema: z.ZodType<
  DocumentValue3$Outbound,
  z.ZodTypeDef,
  DocumentValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue3$ {
  /** @deprecated use `DocumentValue3$inboundSchema` instead. */
  export const inboundSchema = DocumentValue3$inboundSchema;
  /** @deprecated use `DocumentValue3$outboundSchema` instead. */
  export const outboundSchema = DocumentValue3$outboundSchema;
  /** @deprecated use `DocumentValue3$Outbound` instead. */
  export type Outbound = DocumentValue3$Outbound;
}

export function documentValue3ToJSON(documentValue3: DocumentValue3): string {
  return JSON.stringify(DocumentValue3$outboundSchema.parse(documentValue3));
}

export function documentValue3FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue3' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentDropdown$inboundSchema: z.ZodType<
  FieldMetaDocumentDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDropdown$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue3$inboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/** @internal */
export type FieldMetaDocumentDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentDropdown$outboundSchema: z.ZodType<
  FieldMetaDocumentDropdown$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentDropdown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDropdown$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue3$outboundSchema)).optional(),
  defaultValue: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentDropdown$ {
  /** @deprecated use `FieldMetaDocumentDropdown$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentDropdown$inboundSchema;
  /** @deprecated use `FieldMetaDocumentDropdown$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentDropdown$outboundSchema;
  /** @deprecated use `FieldMetaDocumentDropdown$Outbound` instead. */
  export type Outbound = FieldMetaDocumentDropdown$Outbound;
}

export function fieldMetaDocumentDropdownToJSON(
  fieldMetaDocumentDropdown: FieldMetaDocumentDropdown,
): string {
  return JSON.stringify(
    FieldMetaDocumentDropdown$outboundSchema.parse(fieldMetaDocumentDropdown),
  );
}

export function fieldMetaDocumentDropdownFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentDropdown' from JSON`,
  );
}

/** @internal */
export const DocumentTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeCheckbox
> = z.nativeEnum(DocumentTypeCheckbox);

/** @internal */
export const DocumentTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeCheckbox
> = DocumentTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeCheckbox$ {
  /** @deprecated use `DocumentTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeCheckbox$inboundSchema;
  /** @deprecated use `DocumentTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeCheckbox$outboundSchema;
}

/** @internal */
export const DocumentValue2$inboundSchema: z.ZodType<
  DocumentValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentValue2$outboundSchema: z.ZodType<
  DocumentValue2$Outbound,
  z.ZodTypeDef,
  DocumentValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue2$ {
  /** @deprecated use `DocumentValue2$inboundSchema` instead. */
  export const inboundSchema = DocumentValue2$inboundSchema;
  /** @deprecated use `DocumentValue2$outboundSchema` instead. */
  export const outboundSchema = DocumentValue2$outboundSchema;
  /** @deprecated use `DocumentValue2$Outbound` instead. */
  export type Outbound = DocumentValue2$Outbound;
}

export function documentValue2ToJSON(documentValue2: DocumentValue2): string {
  return JSON.stringify(DocumentValue2$outboundSchema.parse(documentValue2));
}

export function documentValue2FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue2' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentCheckbox$inboundSchema: z.ZodType<
  FieldMetaDocumentCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeCheckbox$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue2$inboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/** @internal */
export type FieldMetaDocumentCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const FieldMetaDocumentCheckbox$outboundSchema: z.ZodType<
  FieldMetaDocumentCheckbox$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentCheckbox
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeCheckbox$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue2$outboundSchema)).optional(),
  validationRule: z.string().optional(),
  validationLength: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentCheckbox$ {
  /** @deprecated use `FieldMetaDocumentCheckbox$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentCheckbox$inboundSchema;
  /** @deprecated use `FieldMetaDocumentCheckbox$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentCheckbox$outboundSchema;
  /** @deprecated use `FieldMetaDocumentCheckbox$Outbound` instead. */
  export type Outbound = FieldMetaDocumentCheckbox$Outbound;
}

export function fieldMetaDocumentCheckboxToJSON(
  fieldMetaDocumentCheckbox: FieldMetaDocumentCheckbox,
): string {
  return JSON.stringify(
    FieldMetaDocumentCheckbox$outboundSchema.parse(fieldMetaDocumentCheckbox),
  );
}

export function fieldMetaDocumentCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentCheckbox' from JSON`,
  );
}

/** @internal */
export const DocumentTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeRadio
> = z.nativeEnum(DocumentTypeRadio);

/** @internal */
export const DocumentTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeRadio
> = DocumentTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeRadio$ {
  /** @deprecated use `DocumentTypeRadio$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeRadio$inboundSchema;
  /** @deprecated use `DocumentTypeRadio$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeRadio$outboundSchema;
}

/** @internal */
export const DocumentValue1$inboundSchema: z.ZodType<
  DocumentValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type DocumentValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const DocumentValue1$outboundSchema: z.ZodType<
  DocumentValue1$Outbound,
  z.ZodTypeDef,
  DocumentValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentValue1$ {
  /** @deprecated use `DocumentValue1$inboundSchema` instead. */
  export const inboundSchema = DocumentValue1$inboundSchema;
  /** @deprecated use `DocumentValue1$outboundSchema` instead. */
  export const outboundSchema = DocumentValue1$outboundSchema;
  /** @deprecated use `DocumentValue1$Outbound` instead. */
  export type Outbound = DocumentValue1$Outbound;
}

export function documentValue1ToJSON(documentValue1: DocumentValue1): string {
  return JSON.stringify(DocumentValue1$outboundSchema.parse(documentValue1));
}

export function documentValue1FromJSON(
  jsonString: string,
): SafeParseResult<DocumentValue1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentValue1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentValue1' from JSON`,
  );
}

/** @internal */
export const FieldMetaDocumentRadio$inboundSchema: z.ZodType<
  FieldMetaDocumentRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeRadio$inboundSchema,
  values: z.array(z.lazy(() => DocumentValue1$inboundSchema)).optional(),
});

/** @internal */
export type FieldMetaDocumentRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<DocumentValue1$Outbound> | undefined;
};

/** @internal */
export const FieldMetaDocumentRadio$outboundSchema: z.ZodType<
  FieldMetaDocumentRadio$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentRadio
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeRadio$outboundSchema,
  values: z.array(z.lazy(() => DocumentValue1$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentRadio$ {
  /** @deprecated use `FieldMetaDocumentRadio$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentRadio$inboundSchema;
  /** @deprecated use `FieldMetaDocumentRadio$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentRadio$outboundSchema;
  /** @deprecated use `FieldMetaDocumentRadio$Outbound` instead. */
  export type Outbound = FieldMetaDocumentRadio$Outbound;
}

export function fieldMetaDocumentRadioToJSON(
  fieldMetaDocumentRadio: FieldMetaDocumentRadio,
): string {
  return JSON.stringify(
    FieldMetaDocumentRadio$outboundSchema.parse(fieldMetaDocumentRadio),
  );
}

export function fieldMetaDocumentRadioFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentRadio' from JSON`,
  );
}

/** @internal */
export const DocumentTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeNumber
> = z.nativeEnum(DocumentTypeNumber);

/** @internal */
export const DocumentTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeNumber
> = DocumentTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeNumber$ {
  /** @deprecated use `DocumentTypeNumber$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeNumber$inboundSchema;
  /** @deprecated use `DocumentTypeNumber$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeNumber$outboundSchema;
}

/** @internal */
export const DocumentTextAlign6$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign6
> = z.nativeEnum(DocumentTextAlign6);

/** @internal */
export const DocumentTextAlign6$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign6
> = DocumentTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign6$ {
  /** @deprecated use `DocumentTextAlign6$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign6$inboundSchema;
  /** @deprecated use `DocumentTextAlign6$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign6$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentNumber$inboundSchema: z.ZodType<
  FieldMetaDocumentNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeNumber$inboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign6$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentNumber$outboundSchema: z.ZodType<
  FieldMetaDocumentNumber$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentNumber
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeNumber$outboundSchema,
  numberFormat: z.string().optional(),
  value: z.string().optional(),
  minValue: z.number().optional(),
  maxValue: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign6$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentNumber$ {
  /** @deprecated use `FieldMetaDocumentNumber$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentNumber$inboundSchema;
  /** @deprecated use `FieldMetaDocumentNumber$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentNumber$outboundSchema;
  /** @deprecated use `FieldMetaDocumentNumber$Outbound` instead. */
  export type Outbound = FieldMetaDocumentNumber$Outbound;
}

export function fieldMetaDocumentNumberToJSON(
  fieldMetaDocumentNumber: FieldMetaDocumentNumber,
): string {
  return JSON.stringify(
    FieldMetaDocumentNumber$outboundSchema.parse(fieldMetaDocumentNumber),
  );
}

export function fieldMetaDocumentNumberFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentNumber' from JSON`,
  );
}

/** @internal */
export const DocumentTypeText$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeText
> = z.nativeEnum(DocumentTypeText);

/** @internal */
export const DocumentTypeText$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeText
> = DocumentTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeText$ {
  /** @deprecated use `DocumentTypeText$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeText$inboundSchema;
  /** @deprecated use `DocumentTypeText$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeText$outboundSchema;
}

/** @internal */
export const DocumentTextAlign5$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign5
> = z.nativeEnum(DocumentTextAlign5);

/** @internal */
export const DocumentTextAlign5$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign5
> = DocumentTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign5$ {
  /** @deprecated use `DocumentTextAlign5$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign5$inboundSchema;
  /** @deprecated use `DocumentTextAlign5$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign5$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentText$inboundSchema: z.ZodType<
  FieldMetaDocumentText,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeText$inboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign5$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentText$outboundSchema: z.ZodType<
  FieldMetaDocumentText$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentText
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeText$outboundSchema,
  text: z.string().optional(),
  characterLimit: z.number().optional(),
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign5$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentText$ {
  /** @deprecated use `FieldMetaDocumentText$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentText$inboundSchema;
  /** @deprecated use `FieldMetaDocumentText$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentText$outboundSchema;
  /** @deprecated use `FieldMetaDocumentText$Outbound` instead. */
  export type Outbound = FieldMetaDocumentText$Outbound;
}

export function fieldMetaDocumentTextToJSON(
  fieldMetaDocumentText: FieldMetaDocumentText,
): string {
  return JSON.stringify(
    FieldMetaDocumentText$outboundSchema.parse(fieldMetaDocumentText),
  );
}

export function fieldMetaDocumentTextFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentText' from JSON`,
  );
}

/** @internal */
export const DocumentTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDate
> = z.nativeEnum(DocumentTypeDate);

/** @internal */
export const DocumentTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeDate
> = DocumentTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeDate$ {
  /** @deprecated use `DocumentTypeDate$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeDate$inboundSchema;
  /** @deprecated use `DocumentTypeDate$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeDate$outboundSchema;
}

/** @internal */
export const DocumentTextAlign4$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign4
> = z.nativeEnum(DocumentTextAlign4);

/** @internal */
export const DocumentTextAlign4$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign4
> = DocumentTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign4$ {
  /** @deprecated use `DocumentTextAlign4$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign4$inboundSchema;
  /** @deprecated use `DocumentTextAlign4$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign4$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentDate$inboundSchema: z.ZodType<
  FieldMetaDocumentDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDate$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign4$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentDate$outboundSchema: z.ZodType<
  FieldMetaDocumentDate$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentDate
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeDate$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign4$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentDate$ {
  /** @deprecated use `FieldMetaDocumentDate$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentDate$inboundSchema;
  /** @deprecated use `FieldMetaDocumentDate$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentDate$outboundSchema;
  /** @deprecated use `FieldMetaDocumentDate$Outbound` instead. */
  export type Outbound = FieldMetaDocumentDate$Outbound;
}

export function fieldMetaDocumentDateToJSON(
  fieldMetaDocumentDate: FieldMetaDocumentDate,
): string {
  return JSON.stringify(
    FieldMetaDocumentDate$outboundSchema.parse(fieldMetaDocumentDate),
  );
}

export function fieldMetaDocumentDateFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentDate' from JSON`,
  );
}

/** @internal */
export const DocumentTypeEmail$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeEmail
> = z.nativeEnum(DocumentTypeEmail);

/** @internal */
export const DocumentTypeEmail$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeEmail
> = DocumentTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeEmail$ {
  /** @deprecated use `DocumentTypeEmail$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeEmail$inboundSchema;
  /** @deprecated use `DocumentTypeEmail$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeEmail$outboundSchema;
}

/** @internal */
export const DocumentTextAlign3$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign3
> = z.nativeEnum(DocumentTextAlign3);

/** @internal */
export const DocumentTextAlign3$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign3
> = DocumentTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign3$ {
  /** @deprecated use `DocumentTextAlign3$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign3$inboundSchema;
  /** @deprecated use `DocumentTextAlign3$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign3$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentEmail$inboundSchema: z.ZodType<
  FieldMetaDocumentEmail,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeEmail$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign3$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentEmail$outboundSchema: z.ZodType<
  FieldMetaDocumentEmail$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentEmail
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeEmail$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign3$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentEmail$ {
  /** @deprecated use `FieldMetaDocumentEmail$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentEmail$inboundSchema;
  /** @deprecated use `FieldMetaDocumentEmail$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentEmail$outboundSchema;
  /** @deprecated use `FieldMetaDocumentEmail$Outbound` instead. */
  export type Outbound = FieldMetaDocumentEmail$Outbound;
}

export function fieldMetaDocumentEmailToJSON(
  fieldMetaDocumentEmail: FieldMetaDocumentEmail,
): string {
  return JSON.stringify(
    FieldMetaDocumentEmail$outboundSchema.parse(fieldMetaDocumentEmail),
  );
}

export function fieldMetaDocumentEmailFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentEmail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentEmail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentEmail' from JSON`,
  );
}

/** @internal */
export const DocumentTypeName$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeName
> = z.nativeEnum(DocumentTypeName);

/** @internal */
export const DocumentTypeName$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeName
> = DocumentTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeName$ {
  /** @deprecated use `DocumentTypeName$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeName$inboundSchema;
  /** @deprecated use `DocumentTypeName$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeName$outboundSchema;
}

/** @internal */
export const DocumentTextAlign2$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign2
> = z.nativeEnum(DocumentTextAlign2);

/** @internal */
export const DocumentTextAlign2$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign2
> = DocumentTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign2$ {
  /** @deprecated use `DocumentTextAlign2$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign2$inboundSchema;
  /** @deprecated use `DocumentTextAlign2$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign2$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentName$inboundSchema: z.ZodType<
  FieldMetaDocumentName,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeName$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign2$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentName$outboundSchema: z.ZodType<
  FieldMetaDocumentName$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentName
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeName$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentName$ {
  /** @deprecated use `FieldMetaDocumentName$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentName$inboundSchema;
  /** @deprecated use `FieldMetaDocumentName$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentName$outboundSchema;
  /** @deprecated use `FieldMetaDocumentName$Outbound` instead. */
  export type Outbound = FieldMetaDocumentName$Outbound;
}

export function fieldMetaDocumentNameToJSON(
  fieldMetaDocumentName: FieldMetaDocumentName,
): string {
  return JSON.stringify(
    FieldMetaDocumentName$outboundSchema.parse(fieldMetaDocumentName),
  );
}

export function fieldMetaDocumentNameFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentName, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentName$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentName' from JSON`,
  );
}

/** @internal */
export const DocumentTypeInitials$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeInitials
> = z.nativeEnum(DocumentTypeInitials);

/** @internal */
export const DocumentTypeInitials$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTypeInitials
> = DocumentTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTypeInitials$ {
  /** @deprecated use `DocumentTypeInitials$inboundSchema` instead. */
  export const inboundSchema = DocumentTypeInitials$inboundSchema;
  /** @deprecated use `DocumentTypeInitials$outboundSchema` instead. */
  export const outboundSchema = DocumentTypeInitials$outboundSchema;
}

/** @internal */
export const DocumentTextAlign1$inboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign1
> = z.nativeEnum(DocumentTextAlign1);

/** @internal */
export const DocumentTextAlign1$outboundSchema: z.ZodNativeEnum<
  typeof DocumentTextAlign1
> = DocumentTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentTextAlign1$ {
  /** @deprecated use `DocumentTextAlign1$inboundSchema` instead. */
  export const inboundSchema = DocumentTextAlign1$inboundSchema;
  /** @deprecated use `DocumentTextAlign1$outboundSchema` instead. */
  export const outboundSchema = DocumentTextAlign1$outboundSchema;
}

/** @internal */
export const FieldMetaDocumentInitials$inboundSchema: z.ZodType<
  FieldMetaDocumentInitials,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeInitials$inboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign1$inboundSchema.optional(),
});

/** @internal */
export type FieldMetaDocumentInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const FieldMetaDocumentInitials$outboundSchema: z.ZodType<
  FieldMetaDocumentInitials$Outbound,
  z.ZodTypeDef,
  FieldMetaDocumentInitials
> = z.object({
  label: z.string().optional(),
  placeholder: z.string().optional(),
  required: z.boolean().optional(),
  readOnly: z.boolean().optional(),
  type: DocumentTypeInitials$outboundSchema,
  fontSize: z.number().optional(),
  textAlign: DocumentTextAlign1$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMetaDocumentInitials$ {
  /** @deprecated use `FieldMetaDocumentInitials$inboundSchema` instead. */
  export const inboundSchema = FieldMetaDocumentInitials$inboundSchema;
  /** @deprecated use `FieldMetaDocumentInitials$outboundSchema` instead. */
  export const outboundSchema = FieldMetaDocumentInitials$outboundSchema;
  /** @deprecated use `FieldMetaDocumentInitials$Outbound` instead. */
  export type Outbound = FieldMetaDocumentInitials$Outbound;
}

export function fieldMetaDocumentInitialsToJSON(
  fieldMetaDocumentInitials: FieldMetaDocumentInitials,
): string {
  return JSON.stringify(
    FieldMetaDocumentInitials$outboundSchema.parse(fieldMetaDocumentInitials),
  );
}

export function fieldMetaDocumentInitialsFromJSON(
  jsonString: string,
): SafeParseResult<FieldMetaDocumentInitials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMetaDocumentInitials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMetaDocumentInitials' from JSON`,
  );
}

/** @internal */
export const DocumentFieldMetaUnion$inboundSchema: z.ZodType<
  DocumentFieldMetaUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FieldMetaDocumentRadio$inboundSchema),
  z.lazy(() => FieldMetaDocumentInitials$inboundSchema),
  z.lazy(() => FieldMetaDocumentName$inboundSchema),
  z.lazy(() => FieldMetaDocumentEmail$inboundSchema),
  z.lazy(() => FieldMetaDocumentDate$inboundSchema),
  z.lazy(() => FieldMetaDocumentDropdown$inboundSchema),
  z.lazy(() => FieldMetaDocumentCheckbox$inboundSchema),
  z.lazy(() => FieldMetaDocumentText$inboundSchema),
  z.lazy(() => FieldMetaDocumentNumber$inboundSchema),
]);

/** @internal */
export type DocumentFieldMetaUnion$Outbound =
  | FieldMetaDocumentRadio$Outbound
  | FieldMetaDocumentInitials$Outbound
  | FieldMetaDocumentName$Outbound
  | FieldMetaDocumentEmail$Outbound
  | FieldMetaDocumentDate$Outbound
  | FieldMetaDocumentDropdown$Outbound
  | FieldMetaDocumentCheckbox$Outbound
  | FieldMetaDocumentText$Outbound
  | FieldMetaDocumentNumber$Outbound;

/** @internal */
export const DocumentFieldMetaUnion$outboundSchema: z.ZodType<
  DocumentFieldMetaUnion$Outbound,
  z.ZodTypeDef,
  DocumentFieldMetaUnion
> = z.union([
  z.lazy(() => FieldMetaDocumentRadio$outboundSchema),
  z.lazy(() => FieldMetaDocumentInitials$outboundSchema),
  z.lazy(() => FieldMetaDocumentName$outboundSchema),
  z.lazy(() => FieldMetaDocumentEmail$outboundSchema),
  z.lazy(() => FieldMetaDocumentDate$outboundSchema),
  z.lazy(() => FieldMetaDocumentDropdown$outboundSchema),
  z.lazy(() => FieldMetaDocumentCheckbox$outboundSchema),
  z.lazy(() => FieldMetaDocumentText$outboundSchema),
  z.lazy(() => FieldMetaDocumentNumber$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFieldMetaUnion$ {
  /** @deprecated use `DocumentFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema = DocumentFieldMetaUnion$inboundSchema;
  /** @deprecated use `DocumentFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema = DocumentFieldMetaUnion$outboundSchema;
  /** @deprecated use `DocumentFieldMetaUnion$Outbound` instead. */
  export type Outbound = DocumentFieldMetaUnion$Outbound;
}

export function documentFieldMetaUnionToJSON(
  documentFieldMetaUnion: DocumentFieldMetaUnion,
): string {
  return JSON.stringify(
    DocumentFieldMetaUnion$outboundSchema.parse(documentFieldMetaUnion),
  );
}

export function documentFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFieldMetaUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFieldMetaUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const DocumentField$inboundSchema: z.ZodType<
  DocumentField,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DocumentFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMetaDocumentRadio$inboundSchema),
      z.lazy(() => FieldMetaDocumentInitials$inboundSchema),
      z.lazy(() => FieldMetaDocumentName$inboundSchema),
      z.lazy(() => FieldMetaDocumentEmail$inboundSchema),
      z.lazy(() => FieldMetaDocumentDate$inboundSchema),
      z.lazy(() => FieldMetaDocumentDropdown$inboundSchema),
      z.lazy(() => FieldMetaDocumentCheckbox$inboundSchema),
      z.lazy(() => FieldMetaDocumentText$inboundSchema),
      z.lazy(() => FieldMetaDocumentNumber$inboundSchema),
    ]),
  ),
});

/** @internal */
export type DocumentField$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | FieldMetaDocumentRadio$Outbound
    | FieldMetaDocumentInitials$Outbound
    | FieldMetaDocumentName$Outbound
    | FieldMetaDocumentEmail$Outbound
    | FieldMetaDocumentDate$Outbound
    | FieldMetaDocumentDropdown$Outbound
    | FieldMetaDocumentCheckbox$Outbound
    | FieldMetaDocumentText$Outbound
    | FieldMetaDocumentNumber$Outbound
    | null;
};

/** @internal */
export const DocumentField$outboundSchema: z.ZodType<
  DocumentField$Outbound,
  z.ZodTypeDef,
  DocumentField
> = z.object({
  type: DocumentFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => FieldMetaDocumentRadio$outboundSchema),
      z.lazy(() => FieldMetaDocumentInitials$outboundSchema),
      z.lazy(() => FieldMetaDocumentName$outboundSchema),
      z.lazy(() => FieldMetaDocumentEmail$outboundSchema),
      z.lazy(() => FieldMetaDocumentDate$outboundSchema),
      z.lazy(() => FieldMetaDocumentDropdown$outboundSchema),
      z.lazy(() => FieldMetaDocumentCheckbox$outboundSchema),
      z.lazy(() => FieldMetaDocumentText$outboundSchema),
      z.lazy(() => FieldMetaDocumentNumber$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentField$ {
  /** @deprecated use `DocumentField$inboundSchema` instead. */
  export const inboundSchema = DocumentField$inboundSchema;
  /** @deprecated use `DocumentField$outboundSchema` instead. */
  export const outboundSchema = DocumentField$outboundSchema;
  /** @deprecated use `DocumentField$Outbound` instead. */
  export type Outbound = DocumentField$Outbound;
}

export function documentFieldToJSON(documentField: DocumentField): string {
  return JSON.stringify(DocumentField$outboundSchema.parse(documentField));
}

export function documentFieldFromJSON(
  jsonString: string,
): SafeParseResult<DocumentField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentField' from JSON`,
  );
}

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  visibility: DocumentVisibility$inboundSchema,
  status: DocumentCreateDocumentTemporaryStatus$inboundSchema,
  source: DocumentCreateDocumentTemporarySource$inboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryAuthOptions$inboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  documentData: z.lazy(() =>
    DocumentCreateDocumentTemporaryDocumentData$inboundSchema
  ),
  documentMeta: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryDocumentMeta$inboundSchema),
  ),
  recipients: z.array(z.lazy(() => DocumentRecipient$inboundSchema)),
  fields: z.array(z.lazy(() => DocumentField$inboundSchema)),
});

/** @internal */
export type Document$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: DocumentCreateDocumentTemporaryAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  documentData: DocumentCreateDocumentTemporaryDocumentData$Outbound;
  documentMeta: DocumentCreateDocumentTemporaryDocumentMeta$Outbound | null;
  recipients: Array<DocumentRecipient$Outbound>;
  fields: Array<DocumentField$Outbound>;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  visibility: DocumentVisibility$outboundSchema,
  status: DocumentCreateDocumentTemporaryStatus$outboundSchema,
  source: DocumentCreateDocumentTemporarySource$outboundSchema,
  id: z.number(),
  externalId: z.nullable(z.string()),
  userId: z.number(),
  authOptions: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryAuthOptions$outboundSchema),
  ),
  formValues: z.nullable(
    z.record(z.union([z.string(), z.boolean(), z.number()])),
  ),
  title: z.string(),
  documentDataId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  completedAt: z.nullable(z.string()),
  deletedAt: z.nullable(z.string()),
  teamId: z.nullable(z.number()),
  templateId: z.nullable(z.number()),
  documentData: z.lazy(() =>
    DocumentCreateDocumentTemporaryDocumentData$outboundSchema
  ),
  documentMeta: z.nullable(
    z.lazy(() => DocumentCreateDocumentTemporaryDocumentMeta$outboundSchema),
  ),
  recipients: z.array(z.lazy(() => DocumentRecipient$outboundSchema)),
  fields: z.array(z.lazy(() => DocumentField$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}

export function documentToJSON(document: Document): string {
  return JSON.stringify(Document$outboundSchema.parse(document));
}

export function documentFromJSON(
  jsonString: string,
): SafeParseResult<Document, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Document$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Document' from JSON`,
  );
}

/** @internal */
export const DocumentCreateDocumentTemporaryResponse$inboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  document: z.lazy(() => Document$inboundSchema),
  uploadUrl: z.string(),
});

/** @internal */
export type DocumentCreateDocumentTemporaryResponse$Outbound = {
  document: Document$Outbound;
  uploadUrl: string;
};

/** @internal */
export const DocumentCreateDocumentTemporaryResponse$outboundSchema: z.ZodType<
  DocumentCreateDocumentTemporaryResponse$Outbound,
  z.ZodTypeDef,
  DocumentCreateDocumentTemporaryResponse
> = z.object({
  document: z.lazy(() => Document$outboundSchema),
  uploadUrl: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentCreateDocumentTemporaryResponse$ {
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$inboundSchema` instead. */
  export const inboundSchema =
    DocumentCreateDocumentTemporaryResponse$inboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$outboundSchema` instead. */
  export const outboundSchema =
    DocumentCreateDocumentTemporaryResponse$outboundSchema;
  /** @deprecated use `DocumentCreateDocumentTemporaryResponse$Outbound` instead. */
  export type Outbound = DocumentCreateDocumentTemporaryResponse$Outbound;
}

export function documentCreateDocumentTemporaryResponseToJSON(
  documentCreateDocumentTemporaryResponse:
    DocumentCreateDocumentTemporaryResponse,
): string {
  return JSON.stringify(
    DocumentCreateDocumentTemporaryResponse$outboundSchema.parse(
      documentCreateDocumentTemporaryResponse,
    ),
  );
}

export function documentCreateDocumentTemporaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DocumentCreateDocumentTemporaryResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DocumentCreateDocumentTemporaryResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DocumentCreateDocumentTemporaryResponse' from JSON`,
  );
}
