/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FieldDeleteTemplateFieldRequest = {
  fieldId: number;
};

/**
 * Successful response
 */
export type FieldDeleteTemplateFieldResponse = {
  success: boolean;
};

/** @internal */
export const FieldDeleteTemplateFieldRequest$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fieldId: z.number(),
});

/** @internal */
export type FieldDeleteTemplateFieldRequest$Outbound = {
  fieldId: number;
};

/** @internal */
export const FieldDeleteTemplateFieldRequest$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldRequest$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldRequest
> = z.object({
  fieldId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldRequest$ {
  /** @deprecated use `FieldDeleteTemplateFieldRequest$inboundSchema` instead. */
  export const inboundSchema = FieldDeleteTemplateFieldRequest$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldRequest$outboundSchema` instead. */
  export const outboundSchema = FieldDeleteTemplateFieldRequest$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldRequest$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldRequest$Outbound;
}

export function fieldDeleteTemplateFieldRequestToJSON(
  fieldDeleteTemplateFieldRequest: FieldDeleteTemplateFieldRequest,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldRequest$outboundSchema.parse(
      fieldDeleteTemplateFieldRequest,
    ),
  );
}

export function fieldDeleteTemplateFieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<FieldDeleteTemplateFieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldDeleteTemplateFieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldDeleteTemplateFieldRequest' from JSON`,
  );
}

/** @internal */
export const FieldDeleteTemplateFieldResponse$inboundSchema: z.ZodType<
  FieldDeleteTemplateFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type FieldDeleteTemplateFieldResponse$Outbound = {
  success: boolean;
};

/** @internal */
export const FieldDeleteTemplateFieldResponse$outboundSchema: z.ZodType<
  FieldDeleteTemplateFieldResponse$Outbound,
  z.ZodTypeDef,
  FieldDeleteTemplateFieldResponse
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldDeleteTemplateFieldResponse$ {
  /** @deprecated use `FieldDeleteTemplateFieldResponse$inboundSchema` instead. */
  export const inboundSchema = FieldDeleteTemplateFieldResponse$inboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldResponse$outboundSchema` instead. */
  export const outboundSchema = FieldDeleteTemplateFieldResponse$outboundSchema;
  /** @deprecated use `FieldDeleteTemplateFieldResponse$Outbound` instead. */
  export type Outbound = FieldDeleteTemplateFieldResponse$Outbound;
}

export function fieldDeleteTemplateFieldResponseToJSON(
  fieldDeleteTemplateFieldResponse: FieldDeleteTemplateFieldResponse,
): string {
  return JSON.stringify(
    FieldDeleteTemplateFieldResponse$outboundSchema.parse(
      fieldDeleteTemplateFieldResponse,
    ),
  );
}

export function fieldDeleteTemplateFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<FieldDeleteTemplateFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldDeleteTemplateFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldDeleteTemplateFieldResponse' from JSON`,
  );
}
