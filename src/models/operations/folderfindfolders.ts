/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const FolderFindFoldersQueryParamType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type FolderFindFoldersQueryParamType = ClosedEnum<
  typeof FolderFindFoldersQueryParamType
>;

export type FolderFindFoldersRequest = {
  /**
   * The search query.
   */
  query?: string | undefined;
  /**
   * The pagination page number, starts at 1.
   */
  page?: number | undefined;
  /**
   * The number of items per page.
   */
  perPage?: number | undefined;
  parentId?: string | undefined;
  type?: FolderFindFoldersQueryParamType | undefined;
};

export const FolderFindFoldersVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type FolderFindFoldersVisibility = ClosedEnum<
  typeof FolderFindFoldersVisibility
>;

export const FolderFindFoldersDataType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type FolderFindFoldersDataType = ClosedEnum<
  typeof FolderFindFoldersDataType
>;

export type FolderFindFoldersData = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: FolderFindFoldersVisibility;
  type: FolderFindFoldersDataType;
};

/**
 * Successful response
 */
export type FolderFindFoldersResponse = {
  data: Array<FolderFindFoldersData>;
  /**
   * The total number of items.
   */
  count: number;
  /**
   * The current page number, starts at 1.
   */
  currentPage: number;
  /**
   * The number of items per page.
   */
  perPage: number;
  /**
   * The total number of pages.
   */
  totalPages: number;
};

/** @internal */
export const FolderFindFoldersQueryParamType$inboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersQueryParamType
> = z.nativeEnum(FolderFindFoldersQueryParamType);

/** @internal */
export const FolderFindFoldersQueryParamType$outboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersQueryParamType
> = FolderFindFoldersQueryParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersQueryParamType$ {
  /** @deprecated use `FolderFindFoldersQueryParamType$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersQueryParamType$inboundSchema;
  /** @deprecated use `FolderFindFoldersQueryParamType$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersQueryParamType$outboundSchema;
}

/** @internal */
export const FolderFindFoldersRequest$inboundSchema: z.ZodType<
  FolderFindFoldersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  parentId: z.string().optional(),
  type: FolderFindFoldersQueryParamType$inboundSchema.optional(),
});

/** @internal */
export type FolderFindFoldersRequest$Outbound = {
  query?: string | undefined;
  page?: number | undefined;
  perPage?: number | undefined;
  parentId?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const FolderFindFoldersRequest$outboundSchema: z.ZodType<
  FolderFindFoldersRequest$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersRequest
> = z.object({
  query: z.string().optional(),
  page: z.number().optional(),
  perPage: z.number().optional(),
  parentId: z.string().optional(),
  type: FolderFindFoldersQueryParamType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersRequest$ {
  /** @deprecated use `FolderFindFoldersRequest$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersRequest$inboundSchema;
  /** @deprecated use `FolderFindFoldersRequest$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersRequest$outboundSchema;
  /** @deprecated use `FolderFindFoldersRequest$Outbound` instead. */
  export type Outbound = FolderFindFoldersRequest$Outbound;
}

export function folderFindFoldersRequestToJSON(
  folderFindFoldersRequest: FolderFindFoldersRequest,
): string {
  return JSON.stringify(
    FolderFindFoldersRequest$outboundSchema.parse(folderFindFoldersRequest),
  );
}

export function folderFindFoldersRequestFromJSON(
  jsonString: string,
): SafeParseResult<FolderFindFoldersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderFindFoldersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderFindFoldersRequest' from JSON`,
  );
}

/** @internal */
export const FolderFindFoldersVisibility$inboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersVisibility
> = z.nativeEnum(FolderFindFoldersVisibility);

/** @internal */
export const FolderFindFoldersVisibility$outboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersVisibility
> = FolderFindFoldersVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersVisibility$ {
  /** @deprecated use `FolderFindFoldersVisibility$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersVisibility$inboundSchema;
  /** @deprecated use `FolderFindFoldersVisibility$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersVisibility$outboundSchema;
}

/** @internal */
export const FolderFindFoldersDataType$inboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersDataType
> = z.nativeEnum(FolderFindFoldersDataType);

/** @internal */
export const FolderFindFoldersDataType$outboundSchema: z.ZodNativeEnum<
  typeof FolderFindFoldersDataType
> = FolderFindFoldersDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersDataType$ {
  /** @deprecated use `FolderFindFoldersDataType$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersDataType$inboundSchema;
  /** @deprecated use `FolderFindFoldersDataType$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersDataType$outboundSchema;
}

/** @internal */
export const FolderFindFoldersData$inboundSchema: z.ZodType<
  FolderFindFoldersData,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderFindFoldersVisibility$inboundSchema,
  type: FolderFindFoldersDataType$inboundSchema,
});

/** @internal */
export type FolderFindFoldersData$Outbound = {
  id: string;
  name: string;
  userId: number;
  teamId: number;
  parentId: string | null;
  pinned: boolean;
  createdAt: string;
  updatedAt: string;
  visibility: string;
  type: string;
};

/** @internal */
export const FolderFindFoldersData$outboundSchema: z.ZodType<
  FolderFindFoldersData$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersData
> = z.object({
  id: z.string(),
  name: z.string(),
  userId: z.number(),
  teamId: z.number(),
  parentId: z.nullable(z.string()),
  pinned: z.boolean(),
  createdAt: z.string(),
  updatedAt: z.string(),
  visibility: FolderFindFoldersVisibility$outboundSchema,
  type: FolderFindFoldersDataType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersData$ {
  /** @deprecated use `FolderFindFoldersData$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersData$inboundSchema;
  /** @deprecated use `FolderFindFoldersData$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersData$outboundSchema;
  /** @deprecated use `FolderFindFoldersData$Outbound` instead. */
  export type Outbound = FolderFindFoldersData$Outbound;
}

export function folderFindFoldersDataToJSON(
  folderFindFoldersData: FolderFindFoldersData,
): string {
  return JSON.stringify(
    FolderFindFoldersData$outboundSchema.parse(folderFindFoldersData),
  );
}

export function folderFindFoldersDataFromJSON(
  jsonString: string,
): SafeParseResult<FolderFindFoldersData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderFindFoldersData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderFindFoldersData' from JSON`,
  );
}

/** @internal */
export const FolderFindFoldersResponse$inboundSchema: z.ZodType<
  FolderFindFoldersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => FolderFindFoldersData$inboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/** @internal */
export type FolderFindFoldersResponse$Outbound = {
  data: Array<FolderFindFoldersData$Outbound>;
  count: number;
  currentPage: number;
  perPage: number;
  totalPages: number;
};

/** @internal */
export const FolderFindFoldersResponse$outboundSchema: z.ZodType<
  FolderFindFoldersResponse$Outbound,
  z.ZodTypeDef,
  FolderFindFoldersResponse
> = z.object({
  data: z.array(z.lazy(() => FolderFindFoldersData$outboundSchema)),
  count: z.number(),
  currentPage: z.number(),
  perPage: z.number(),
  totalPages: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FolderFindFoldersResponse$ {
  /** @deprecated use `FolderFindFoldersResponse$inboundSchema` instead. */
  export const inboundSchema = FolderFindFoldersResponse$inboundSchema;
  /** @deprecated use `FolderFindFoldersResponse$outboundSchema` instead. */
  export const outboundSchema = FolderFindFoldersResponse$outboundSchema;
  /** @deprecated use `FolderFindFoldersResponse$Outbound` instead. */
  export type Outbound = FolderFindFoldersResponse$Outbound;
}

export function folderFindFoldersResponseToJSON(
  folderFindFoldersResponse: FolderFindFoldersResponse,
): string {
  return JSON.stringify(
    FolderFindFoldersResponse$outboundSchema.parse(folderFindFoldersResponse),
  );
}

export function folderFindFoldersResponseFromJSON(
  jsonString: string,
): SafeParseResult<FolderFindFoldersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FolderFindFoldersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FolderFindFoldersResponse' from JSON`,
  );
}
