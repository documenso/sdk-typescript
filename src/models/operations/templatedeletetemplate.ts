/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateDeleteTemplateRequest = {
  templateId: number;
};

/**
 * Successful response
 */
export type TemplateDeleteTemplateResponse = {
  success: boolean;
};

/** @internal */
export const TemplateDeleteTemplateRequest$inboundSchema: z.ZodType<
  TemplateDeleteTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
});

/** @internal */
export type TemplateDeleteTemplateRequest$Outbound = {
  templateId: number;
};

/** @internal */
export const TemplateDeleteTemplateRequest$outboundSchema: z.ZodType<
  TemplateDeleteTemplateRequest$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateRequest
> = z.object({
  templateId: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateRequest$ {
  /** @deprecated use `TemplateDeleteTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = TemplateDeleteTemplateRequest$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateRequest$outboundSchema` instead. */
  export const outboundSchema = TemplateDeleteTemplateRequest$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateRequest$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateRequest$Outbound;
}

export function templateDeleteTemplateRequestToJSON(
  templateDeleteTemplateRequest: TemplateDeleteTemplateRequest,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateRequest$outboundSchema.parse(
      templateDeleteTemplateRequest,
    ),
  );
}

export function templateDeleteTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDeleteTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateRequest' from JSON`,
  );
}

/** @internal */
export const TemplateDeleteTemplateResponse$inboundSchema: z.ZodType<
  TemplateDeleteTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean(),
});

/** @internal */
export type TemplateDeleteTemplateResponse$Outbound = {
  success: boolean;
};

/** @internal */
export const TemplateDeleteTemplateResponse$outboundSchema: z.ZodType<
  TemplateDeleteTemplateResponse$Outbound,
  z.ZodTypeDef,
  TemplateDeleteTemplateResponse
> = z.object({
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateDeleteTemplateResponse$ {
  /** @deprecated use `TemplateDeleteTemplateResponse$inboundSchema` instead. */
  export const inboundSchema = TemplateDeleteTemplateResponse$inboundSchema;
  /** @deprecated use `TemplateDeleteTemplateResponse$outboundSchema` instead. */
  export const outboundSchema = TemplateDeleteTemplateResponse$outboundSchema;
  /** @deprecated use `TemplateDeleteTemplateResponse$Outbound` instead. */
  export type Outbound = TemplateDeleteTemplateResponse$Outbound;
}

export function templateDeleteTemplateResponseToJSON(
  templateDeleteTemplateResponse: TemplateDeleteTemplateResponse,
): string {
  return JSON.stringify(
    TemplateDeleteTemplateResponse$outboundSchema.parse(
      templateDeleteTemplateResponse,
    ),
  );
}

export function templateDeleteTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<TemplateDeleteTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TemplateDeleteTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TemplateDeleteTemplateResponse' from JSON`,
  );
}
