/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateCreateDocumentFromTemplateRecipients = {
  /**
   * The ID of the recipient in the template.
   */
  id: number;
  email: string;
  name?: string | undefined;
};

export type TemplateCreateDocumentFromTemplateRequestBody = {
  templateId: number;
  /**
   * The information of the recipients to create the document with.
   */
  recipients: Array<TemplateCreateDocumentFromTemplateRecipients>;
  /**
   * Whether to create the document as pending and distribute it to recipients.
   */
  distributeDocument?: boolean | undefined;
  /**
   * The data ID of an alternative PDF to use when creating the document. If not provided, the PDF attached to the template will be used.
   */
  customDocumentDataId?: string | undefined;
};

export const TemplateCreateDocumentFromTemplateVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateDocumentFromTemplateVisibility = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateVisibility
>;

export const TemplateCreateDocumentFromTemplateStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
} as const;
export type TemplateCreateDocumentFromTemplateStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateStatus
>;

export const TemplateCreateDocumentFromTemplateSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type TemplateCreateDocumentFromTemplateSource = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateDocumentFromTemplateGlobalAccessAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateCreateDocumentFromTemplateGlobalActionAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateGlobalActionAuth
>;

export type TemplateCreateDocumentFromTemplateAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  globalAccessAuth: TemplateCreateDocumentFromTemplateGlobalAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
   */
  globalActionAuth: TemplateCreateDocumentFromTemplateGlobalActionAuth | null;
};

export type TemplateCreateDocumentFromTemplateFormValues =
  | string
  | boolean
  | number;

export const TemplateCreateDocumentFromTemplateType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type TemplateCreateDocumentFromTemplateType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateType
>;

export type TemplateCreateDocumentFromTemplateDocumentData = {
  type: TemplateCreateDocumentFromTemplateType;
  id: string;
  data: string;
  initialData: string;
};

export const TemplateCreateDocumentFromTemplateSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateCreateDocumentFromTemplateSigningOrder = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSigningOrder
>;

export const TemplateCreateDocumentFromTemplateDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateCreateDocumentFromTemplateDistributionMethod = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateDistributionMethod
>;

export type TemplateCreateDocumentFromTemplateEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type TemplateCreateDocumentFromTemplateDocumentMeta = {
  signingOrder: TemplateCreateDocumentFromTemplateSigningOrder;
  distributionMethod: TemplateCreateDocumentFromTemplateDistributionMethod;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  language: string;
  emailSettings: TemplateCreateDocumentFromTemplateEmailSettings | null;
};

export const TemplateCreateDocumentFromTemplateRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
} as const;
export type TemplateCreateDocumentFromTemplateRole = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateRole
>;

export const TemplateCreateDocumentFromTemplateReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateCreateDocumentFromTemplateReadStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateReadStatus
>;

export const TemplateCreateDocumentFromTemplateSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateCreateDocumentFromTemplateSigningStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSigningStatus
>;

export const TemplateCreateDocumentFromTemplateSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateCreateDocumentFromTemplateSendStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateDocumentFromTemplateAccessAuth = {
  Account: "ACCOUNT",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateDocumentFromTemplateAccessAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateCreateDocumentFromTemplateActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateCreateDocumentFromTemplateActionAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateActionAuth
>;

export type TemplateCreateDocumentFromTemplateTemplatesAuthOptions = {
  /**
   * The type of authentication required for the recipient to access the document.
   */
  accessAuth: TemplateCreateDocumentFromTemplateAccessAuth | null;
  /**
   * The type of authentication required for the recipient to sign the document.
   */
  actionAuth: TemplateCreateDocumentFromTemplateActionAuth | null;
};

export type TemplateCreateDocumentFromTemplateTemplatesRecipients = {
  role: TemplateCreateDocumentFromTemplateRole;
  readStatus: TemplateCreateDocumentFromTemplateReadStatus;
  signingStatus: TemplateCreateDocumentFromTemplateSigningStatus;
  sendStatus: TemplateCreateDocumentFromTemplateSendStatus;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateCreateDocumentFromTemplateTemplatesAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
};

export const TemplateCreateDocumentFromTemplateTemplatesType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateCreateDocumentFromTemplateTemplatesType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTemplatesType
>;

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type =
  {
    Dropdown: "dropdown",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  >;

export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues =
  {
    value: string;
  };

export type TemplateCreateDocumentFromTemplateFieldMeta9 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type;
  values?:
    | Array<TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues>
    | undefined;
  defaultValue?: string | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type =
  {
    Checkbox: "checkbox",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  >;

export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateCreateDocumentFromTemplateFieldMeta8 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type;
  values?:
    | Array<TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType =
  {
    Radio: "radio",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  >;

export type TemplateCreateDocumentFromTemplateFieldMetaValues = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateCreateDocumentFromTemplateFieldMeta7 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType;
  values?: Array<TemplateCreateDocumentFromTemplateFieldMetaValues> | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  {
    Number: "number",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  >;

export type TemplateCreateDocumentFromTemplateFieldMeta6 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType
  >;

export type TemplateCreateDocumentFromTemplateFieldMeta5 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type =
  {
    Date: "date",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type
  >;

export type TemplateCreateDocumentFromTemplateFieldMeta4 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type;
  fontSize?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType =
  {
    Email: "email",
  } as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType =
  ClosedEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType
  >;

export type TemplateCreateDocumentFromTemplateFieldMeta3 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType;
  fontSize?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesType = {
  Name: "name",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesType =
  ClosedEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesType>;

export type TemplateCreateDocumentFromTemplateFieldMeta2 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTemplatesType;
  fontSize?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaType = {
  Initials: "initials",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldMetaType
>;

export type TemplateCreateDocumentFromTemplateFieldMeta1 = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaType;
  fontSize?: number | undefined;
};

export type TemplateCreateDocumentFromTemplateFieldMeta =
  | TemplateCreateDocumentFromTemplateFieldMeta1
  | TemplateCreateDocumentFromTemplateFieldMeta2
  | TemplateCreateDocumentFromTemplateFieldMeta3
  | TemplateCreateDocumentFromTemplateFieldMeta4
  | TemplateCreateDocumentFromTemplateFieldMeta7
  | TemplateCreateDocumentFromTemplateFieldMeta9
  | TemplateCreateDocumentFromTemplateFieldMeta5
  | TemplateCreateDocumentFromTemplateFieldMeta8
  | TemplateCreateDocumentFromTemplateFieldMeta6;

export type TemplateCreateDocumentFromTemplateFields = {
  type: TemplateCreateDocumentFromTemplateTemplatesType;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateDocumentFromTemplateFieldMeta1
    | TemplateCreateDocumentFromTemplateFieldMeta2
    | TemplateCreateDocumentFromTemplateFieldMeta3
    | TemplateCreateDocumentFromTemplateFieldMeta4
    | TemplateCreateDocumentFromTemplateFieldMeta7
    | TemplateCreateDocumentFromTemplateFieldMeta9
    | TemplateCreateDocumentFromTemplateFieldMeta5
    | TemplateCreateDocumentFromTemplateFieldMeta8
    | TemplateCreateDocumentFromTemplateFieldMeta6
    | null;
};

/**
 * Successful response
 */
export type TemplateCreateDocumentFromTemplateResponseBody = {
  visibility: TemplateCreateDocumentFromTemplateVisibility;
  status: TemplateCreateDocumentFromTemplateStatus;
  source: TemplateCreateDocumentFromTemplateSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: TemplateCreateDocumentFromTemplateAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  documentData: TemplateCreateDocumentFromTemplateDocumentData;
  documentMeta: TemplateCreateDocumentFromTemplateDocumentMeta | null;
  recipients: Array<TemplateCreateDocumentFromTemplateTemplatesRecipients>;
  fields: Array<TemplateCreateDocumentFromTemplateFields>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipients$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipients,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    email: z.string(),
    name: z.string().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateRecipients$Outbound = {
  id: number;
  email: string;
  name?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipients$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipients$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRecipients
  > = z.object({
    id: z.number(),
    email: z.string(),
    name: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRecipients$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipients$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRecipients$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipients$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRecipients$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipients$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateRecipients$Outbound;
}

export function templateCreateDocumentFromTemplateRecipientsToJSON(
  templateCreateDocumentFromTemplateRecipients:
    TemplateCreateDocumentFromTemplateRecipients,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRecipients$outboundSchema.parse(
      templateCreateDocumentFromTemplateRecipients,
    ),
  );
}

export function templateCreateDocumentFromTemplateRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRecipients,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRecipients$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRecipients' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRequestBody$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    templateId: z.number(),
    recipients: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateRecipients$inboundSchema),
    ),
    distributeDocument: z.boolean().optional(),
    customDocumentDataId: z.string().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateRequestBody$Outbound = {
  templateId: number;
  recipients: Array<TemplateCreateDocumentFromTemplateRecipients$Outbound>;
  distributeDocument?: boolean | undefined;
  customDocumentDataId?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRequestBody$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRequestBody$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRequestBody
  > = z.object({
    templateId: z.number(),
    recipients: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateRecipients$outboundSchema),
    ),
    distributeDocument: z.boolean().optional(),
    customDocumentDataId: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRequestBody$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRequestBody$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRequestBody$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequestBody$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateRequestBody$Outbound;
}

export function templateCreateDocumentFromTemplateRequestBodyToJSON(
  templateCreateDocumentFromTemplateRequestBody:
    TemplateCreateDocumentFromTemplateRequestBody,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRequestBody$outboundSchema.parse(
      templateCreateDocumentFromTemplateRequestBody,
    ),
  );
}

export function templateCreateDocumentFromTemplateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRequestBody' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateVisibility> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateVisibility);

/** @internal */
export const TemplateCreateDocumentFromTemplateVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateVisibility> =
    TemplateCreateDocumentFromTemplateVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateVisibility$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateVisibility$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateVisibility$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateStatus> =
    TemplateCreateDocumentFromTemplateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSource$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSource> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSource);

/** @internal */
export const TemplateCreateDocumentFromTemplateSource$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSource> =
    TemplateCreateDocumentFromTemplateSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSource$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSource$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSource$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSource$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSource$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateGlobalAccessAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth> =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateGlobalAccessAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalActionAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateGlobalActionAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalActionAuth> =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateGlobalActionAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    globalAccessAuth: z.nullable(
      TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema,
    ),
    globalActionAuth: z.nullable(
      TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateAuthOptions$Outbound = {
  globalAccessAuth: string | null;
  globalActionAuth: string | null;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateAuthOptions
  > = z.object({
    globalAccessAuth: z.nullable(
      TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema,
    ),
    globalActionAuth: z.nullable(
      TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateAuthOptions$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateAuthOptions$Outbound;
}

export function templateCreateDocumentFromTemplateAuthOptionsToJSON(
  templateCreateDocumentFromTemplateAuthOptions:
    TemplateCreateDocumentFromTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema.parse(
      templateCreateDocumentFromTemplateAuthOptions,
    ),
  );
}

export function templateCreateDocumentFromTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFormValues$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFormValues,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type TemplateCreateDocumentFromTemplateFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const TemplateCreateDocumentFromTemplateFormValues$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFormValues$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFormValues
  > = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFormValues$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFormValues$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFormValues$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFormValues$Outbound;
}

export function templateCreateDocumentFromTemplateFormValuesToJSON(
  templateCreateDocumentFromTemplateFormValues:
    TemplateCreateDocumentFromTemplateFormValues,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFormValues$outboundSchema.parse(
      templateCreateDocumentFromTemplateFormValues,
    ),
  );
}

export function templateCreateDocumentFromTemplateFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFormValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFormValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFormValues' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateType> = z.nativeEnum(
    TemplateCreateDocumentFromTemplateType,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateType> =
    TemplateCreateDocumentFromTemplateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentData$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TemplateCreateDocumentFromTemplateType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentData$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentData$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateDocumentData
  > = z.object({
    type: TemplateCreateDocumentFromTemplateType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDocumentData$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDocumentData$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDocumentData$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateDocumentData$Outbound;
}

export function templateCreateDocumentFromTemplateDocumentDataToJSON(
  templateCreateDocumentFromTemplateDocumentData:
    TemplateCreateDocumentFromTemplateDocumentData,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateDocumentData$outboundSchema.parse(
      templateCreateDocumentFromTemplateDocumentData,
    ),
  );
}

export function templateCreateDocumentFromTemplateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateDocumentData' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningOrder> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSigningOrder);

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningOrder> =
    TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSigningOrder$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDistributionMethod> =
    z.nativeEnum(TemplateCreateDocumentFromTemplateDistributionMethod);

/** @internal */
export const TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDistributionMethod> =
    TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDistributionMethod$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateEmailSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateEmailSettings$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateEmailSettings
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateEmailSettings$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateEmailSettings$Outbound;
}

export function templateCreateDocumentFromTemplateEmailSettingsToJSON(
  templateCreateDocumentFromTemplateEmailSettings:
    TemplateCreateDocumentFromTemplateEmailSettings,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema.parse(
      templateCreateDocumentFromTemplateEmailSettings,
    ),
  );
}

export function templateCreateDocumentFromTemplateEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateEmailSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    signingOrder: TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema,
    distributionMethod:
      TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number().int(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema
      ),
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateDocumentMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  password: string | null;
  dateFormat: string | null;
  documentId: number;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  language: string;
  emailSettings:
    | TemplateCreateDocumentFromTemplateEmailSettings$Outbound
    | null;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentMeta$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateDocumentMeta
  > = z.object({
    signingOrder: TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema,
    distributionMethod:
      TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    password: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    documentId: z.number().int(),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema
      ),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDocumentMeta$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateDocumentMeta$Outbound;
}

export function templateCreateDocumentFromTemplateDocumentMetaToJSON(
  templateCreateDocumentFromTemplateDocumentMeta:
    TemplateCreateDocumentFromTemplateDocumentMeta,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema.parse(
      templateCreateDocumentFromTemplateDocumentMeta,
    ),
  );
}

export function templateCreateDocumentFromTemplateDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateDocumentMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateDocumentMeta' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRole$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateRole> = z.nativeEnum(
    TemplateCreateDocumentFromTemplateRole,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateRole$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateRole> =
    TemplateCreateDocumentFromTemplateRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRole$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRole$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRole$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRole$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRole$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateReadStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateReadStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateReadStatus> =
    TemplateCreateDocumentFromTemplateReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateReadStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateReadStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateReadStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSigningStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningStatus> =
    TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSigningStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSendStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSendStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSendStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateSendStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSendStatus> =
    TemplateCreateDocumentFromTemplateSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSendStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSendStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSendStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSendStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSendStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateAccessAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateAccessAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateAccessAuth> =
    TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateAccessAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateActionAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateActionAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateActionAuth> =
    TemplateCreateDocumentFromTemplateActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateActionAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateActionAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateActionAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesAuthOptions$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.nullable(
      TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema,
    ),
    actionAuth: z.nullable(
      TemplateCreateDocumentFromTemplateActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateTemplatesAuthOptions$Outbound = {
  accessAuth: string | null;
  actionAuth: string | null;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions
  > = z.object({
    accessAuth: z.nullable(
      TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema,
    ),
    actionAuth: z.nullable(
      TemplateCreateDocumentFromTemplateActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTemplatesAuthOptions$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesAuthOptions$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions$Outbound;
}

export function templateCreateDocumentFromTemplateTemplatesAuthOptionsToJSON(
  templateCreateDocumentFromTemplateTemplatesAuthOptions:
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateTemplatesAuthOptions$outboundSchema.parse(
      templateCreateDocumentFromTemplateTemplatesAuthOptions,
    ),
  );
}

export function templateCreateDocumentFromTemplateTemplatesAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateTemplatesAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateTemplatesAuthOptions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateDocumentFromTemplateTemplatesAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesRecipients$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateTemplatesRecipients,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: TemplateCreateDocumentFromTemplateRole$inboundSchema,
    readStatus: TemplateCreateDocumentFromTemplateReadStatus$inboundSchema,
    signingStatus:
      TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema,
    sendStatus: TemplateCreateDocumentFromTemplateSendStatus$inboundSchema,
    id: z.number().int(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateTemplatesAuthOptions$inboundSchema
      ),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateTemplatesRecipients$Outbound = {
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  documentId: number | null;
  templateId: number | null;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions:
    | TemplateCreateDocumentFromTemplateTemplatesAuthOptions$Outbound
    | null;
  signingOrder: number | null;
  rejectionReason: string | null;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesRecipients$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateTemplatesRecipients$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateTemplatesRecipients
  > = z.object({
    role: TemplateCreateDocumentFromTemplateRole$outboundSchema,
    readStatus: TemplateCreateDocumentFromTemplateReadStatus$outboundSchema,
    signingStatus:
      TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema,
    sendStatus: TemplateCreateDocumentFromTemplateSendStatus$outboundSchema,
    id: z.number().int(),
    documentId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateTemplatesAuthOptions$outboundSchema
      ),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTemplatesRecipients$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesRecipients$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesRecipients$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesRecipients$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesRecipients$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesRecipients$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateTemplatesRecipients$Outbound;
}

export function templateCreateDocumentFromTemplateTemplatesRecipientsToJSON(
  templateCreateDocumentFromTemplateTemplatesRecipients:
    TemplateCreateDocumentFromTemplateTemplatesRecipients,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateTemplatesRecipients$outboundSchema.parse(
      templateCreateDocumentFromTemplateTemplatesRecipients,
    ),
  );
}

export function templateCreateDocumentFromTemplateTemplatesRecipientsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateTemplatesRecipients,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateTemplatesRecipients$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateTemplatesRecipients' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTemplatesType> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTemplatesType);

/** @internal */
export const TemplateCreateDocumentFromTemplateTemplatesType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTemplatesType> =
    TemplateCreateDocumentFromTemplateTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTemplatesType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$Outbound =
  {
    value: string;
  };

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues
  > = z.object({
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaTemplatesResponseValuesToJSON(
  templateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$outboundSchema
      .parse(
        templateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues,
      ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaTemplatesResponseValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta9,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$inboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$inboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta9$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$Outbound
    >
    | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta9$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta9
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields9Type$outboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseValues$outboundSchema
      ),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta9$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta9$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta9$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta9ToJSON(
  templateCreateDocumentFromTemplateFieldMeta9:
    TemplateCreateDocumentFromTemplateFieldMeta9,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta9,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta9FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta9,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta9' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$Outbound =
  {
    id: number;
    checked: boolean;
    value: string;
  };

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaTemplatesValuesToJSON(
  templateCreateDocumentFromTemplateFieldMetaTemplatesValues:
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$outboundSchema
      .parse(templateCreateDocumentFromTemplateFieldMetaTemplatesValues),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaTemplatesValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta8,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$inboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$inboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta8$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$Outbound>
    | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta8$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta8
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFields8Type$outboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaTemplatesValues$outboundSchema
      ),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta8$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta8$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta8$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta8ToJSON(
  templateCreateDocumentFromTemplateFieldMeta8:
    TemplateCreateDocumentFromTemplateFieldMeta8,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta8,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta8FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta8,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta8' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaValues$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaValues,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaValues$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaValues$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaValues$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaValues
  > = z.object({
    id: z.number(),
    checked: z.boolean(),
    value: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaValues$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaValues$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaValues$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaValues$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaValues$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaValuesToJSON(
  templateCreateDocumentFromTemplateFieldMetaValues:
    TemplateCreateDocumentFromTemplateFieldMetaValues,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaValues$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaValues,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaValues' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta7,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$inboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaValues$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta7$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?:
    | Array<TemplateCreateDocumentFromTemplateFieldMetaValues$Outbound>
    | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta7$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta7
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyFieldsType$outboundSchema,
    values: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaValues$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta7$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta7$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta7$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta7ToJSON(
  templateCreateDocumentFromTemplateFieldMeta7:
    TemplateCreateDocumentFromTemplateFieldMeta7,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta7,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta7FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta7,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta7' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta6,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$inboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta6$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | undefined;
  value?: string | undefined;
  minValue?: number | undefined;
  maxValue?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta6$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta6
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONResponseBodyType$outboundSchema,
    numberFormat: z.string().optional(),
    value: z.string().optional(),
    minValue: z.number().optional(),
    maxValue: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta6$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta6$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta6$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta6ToJSON(
  templateCreateDocumentFromTemplateFieldMeta6:
    TemplateCreateDocumentFromTemplateFieldMeta6,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta6,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta6FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta6,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta6' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta5,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta5$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta5$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta5
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200ApplicationJSONType$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta5$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta5$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta5$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta5ToJSON(
  templateCreateDocumentFromTemplateFieldMeta5:
    TemplateCreateDocumentFromTemplateFieldMeta5,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta5,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta5FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta5,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta5' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta4$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta4$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta4
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponse200Type$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta4$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta4$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta4$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta4ToJSON(
  templateCreateDocumentFromTemplateFieldMeta4:
    TemplateCreateDocumentFromTemplateFieldMeta4,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta4,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta4FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta4' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType
  > = z.nativeEnum(
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType
  > =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta3$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta3$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta3
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesResponseType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta3$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta3$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta3$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta3ToJSON(
  templateCreateDocumentFromTemplateFieldMeta3:
    TemplateCreateDocumentFromTemplateFieldMeta3,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta3,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta3FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta3' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesType
  > = z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTemplatesType);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTemplatesType
  > = TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta2$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta2$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta2
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTemplatesType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta2$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta2$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta2$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta2ToJSON(
  templateCreateDocumentFromTemplateFieldMeta2:
    TemplateCreateDocumentFromTemplateFieldMeta2,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta2,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta2FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta2' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaType> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaType);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaType> =
    TemplateCreateDocumentFromTemplateFieldMetaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaType$inboundSchema,
    fontSize: z.number().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta1$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta1$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta1
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaType$outboundSchema,
    fontSize: z.number().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta1$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta1$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta1$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMeta1ToJSON(
  templateCreateDocumentFromTemplateFieldMeta1:
    TemplateCreateDocumentFromTemplateFieldMeta1,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta1,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMeta1FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta1' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema),
  ]);

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMeta$Outbound =
  | TemplateCreateDocumentFromTemplateFieldMeta1$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta2$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta3$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta4$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta7$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta9$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta5$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta8$Outbound
  | TemplateCreateDocumentFromTemplateFieldMeta6$Outbound;

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMeta$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMeta$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMeta
  > = z.union([
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMeta$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMeta$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMeta$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFieldMeta$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaToJSON(
  templateCreateDocumentFromTemplateFieldMeta:
    TemplateCreateDocumentFromTemplateFieldMeta,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMeta$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMeta,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMeta' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFields$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateFields,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TemplateCreateDocumentFromTemplateTemplatesType$inboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta1$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta2$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta3$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta4$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta7$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta9$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta5$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta8$inboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta6$inboundSchema),
    ]),
  ),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateFields$Outbound = {
  type: string;
  id: number;
  secondaryId: string;
  documentId: number | null;
  templateId: number | null;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateDocumentFromTemplateFieldMeta1$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta2$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta3$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta4$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta7$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta9$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta5$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta8$Outbound
    | TemplateCreateDocumentFromTemplateFieldMeta6$Outbound
    | null;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFields$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateFields$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateFields
> = z.object({
  type: TemplateCreateDocumentFromTemplateTemplatesType$outboundSchema,
  id: z.number().int(),
  secondaryId: z.string(),
  documentId: z.nullable(z.number().int()),
  templateId: z.nullable(z.number().int()),
  recipientId: z.number().int(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta1$outboundSchema),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMeta2$outboundSchema
      ),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta3$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta4$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta7$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta9$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta5$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta8$outboundSchema),
      z.lazy(() => TemplateCreateDocumentFromTemplateFieldMeta6$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFields$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFields$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFields$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFields$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFields$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFields$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFields$Outbound;
}

export function templateCreateDocumentFromTemplateFieldsToJSON(
  templateCreateDocumentFromTemplateFields:
    TemplateCreateDocumentFromTemplateFields,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFields$outboundSchema.parse(
      templateCreateDocumentFromTemplateFields,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFields,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFields$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFields' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateResponseBody$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    visibility: TemplateCreateDocumentFromTemplateVisibility$inboundSchema,
    status: TemplateCreateDocumentFromTemplateStatus$inboundSchema,
    source: TemplateCreateDocumentFromTemplateSource$inboundSchema,
    id: z.number().int(),
    externalId: z.nullable(z.string()),
    userId: z.number(),
    authOptions: z.nullable(
      z.lazy(() => TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema),
    ),
    formValues: z.nullable(
      z.record(z.union([z.string(), z.boolean(), z.number()])),
    ),
    title: z.string(),
    documentDataId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    completedAt: z.nullable(z.string()),
    deletedAt: z.nullable(z.string()),
    teamId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    documentData: z.lazy(() =>
      TemplateCreateDocumentFromTemplateDocumentData$inboundSchema
    ),
    documentMeta: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema
      ),
    ),
    recipients: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateTemplatesRecipients$inboundSchema
      ),
    ),
    fields: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateFields$inboundSchema),
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateResponseBody$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: TemplateCreateDocumentFromTemplateAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  documentDataId: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number | null;
  templateId: number | null;
  documentData: TemplateCreateDocumentFromTemplateDocumentData$Outbound;
  documentMeta: TemplateCreateDocumentFromTemplateDocumentMeta$Outbound | null;
  recipients: Array<
    TemplateCreateDocumentFromTemplateTemplatesRecipients$Outbound
  >;
  fields: Array<TemplateCreateDocumentFromTemplateFields$Outbound>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateResponseBody$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateResponseBody$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateResponseBody
  > = z.object({
    visibility: TemplateCreateDocumentFromTemplateVisibility$outboundSchema,
    status: TemplateCreateDocumentFromTemplateStatus$outboundSchema,
    source: TemplateCreateDocumentFromTemplateSource$outboundSchema,
    id: z.number().int(),
    externalId: z.nullable(z.string()),
    userId: z.number(),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema
      ),
    ),
    formValues: z.nullable(
      z.record(z.union([z.string(), z.boolean(), z.number()])),
    ),
    title: z.string(),
    documentDataId: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    completedAt: z.nullable(z.string()),
    deletedAt: z.nullable(z.string()),
    teamId: z.nullable(z.number().int()),
    templateId: z.nullable(z.number().int()),
    documentData: z.lazy(() =>
      TemplateCreateDocumentFromTemplateDocumentData$outboundSchema
    ),
    documentMeta: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema
      ),
    ),
    recipients: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateTemplatesRecipients$outboundSchema
      ),
    ),
    fields: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateFields$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateResponseBody$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateResponseBody$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateResponseBody$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponseBody$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateResponseBody$Outbound;
}

export function templateCreateDocumentFromTemplateResponseBodyToJSON(
  templateCreateDocumentFromTemplateResponseBody:
    TemplateCreateDocumentFromTemplateResponseBody,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateResponseBody$outboundSchema.parse(
      templateCreateDocumentFromTemplateResponseBody,
    ),
  );
}

export function templateCreateDocumentFromTemplateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateResponseBody' from JSON`,
  );
}
