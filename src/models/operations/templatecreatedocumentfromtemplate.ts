/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TemplateCreateDocumentFromTemplateRecipientRequest = {
  /**
   * The ID of the recipient in the template.
   */
  id: number;
  email: string;
  name?: string | undefined;
};

export type CustomDocumentDatum = {
  documentDataId: string;
  envelopeItemId: string;
};

export const PrefillFieldTypeDate = {
  Date: "date",
} as const;
export type PrefillFieldTypeDate = ClosedEnum<typeof PrefillFieldTypeDate>;

export type PrefillFieldDate = {
  type: PrefillFieldTypeDate;
  value?: string | undefined;
  id: number;
};

export const PrefillFieldTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type PrefillFieldTypeDropdown = ClosedEnum<
  typeof PrefillFieldTypeDropdown
>;

export type PrefillFieldDropdown = {
  type: PrefillFieldTypeDropdown;
  label?: string | undefined;
  value?: string | undefined;
  id: number;
};

export const PrefillFieldTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type PrefillFieldTypeCheckbox = ClosedEnum<
  typeof PrefillFieldTypeCheckbox
>;

export type PrefillFieldCheckbox = {
  type: PrefillFieldTypeCheckbox;
  label?: string | undefined;
  value?: Array<string> | undefined;
  id: number;
};

export const PrefillFieldTypeRadio = {
  Radio: "radio",
} as const;
export type PrefillFieldTypeRadio = ClosedEnum<typeof PrefillFieldTypeRadio>;

export type PrefillFieldRadio = {
  type: PrefillFieldTypeRadio;
  label?: string | undefined;
  value?: string | undefined;
  id: number;
};

export const PrefillFieldTypeNumber = {
  Number: "number",
} as const;
export type PrefillFieldTypeNumber = ClosedEnum<typeof PrefillFieldTypeNumber>;

export type PrefillFieldNumber = {
  type: PrefillFieldTypeNumber;
  label?: string | undefined;
  placeholder?: string | undefined;
  value?: string | undefined;
  id: number;
};

export const PrefillFieldTypeText = {
  Text: "text",
} as const;
export type PrefillFieldTypeText = ClosedEnum<typeof PrefillFieldTypeText>;

export type PrefillFieldText = {
  type: PrefillFieldTypeText;
  label?: string | undefined;
  placeholder?: string | undefined;
  value?: string | undefined;
  id: number;
};

export type PrefillField =
  | PrefillFieldText
  | PrefillFieldNumber
  | PrefillFieldRadio
  | PrefillFieldCheckbox
  | PrefillFieldDropdown
  | PrefillFieldDate;

export type TemplateCreateDocumentFromTemplateRequest = {
  templateId: number;
  /**
   * The information of the recipients to create the document with.
   */
  recipients: Array<TemplateCreateDocumentFromTemplateRecipientRequest>;
  /**
   * Whether to create the document as pending and distribute it to recipients.
   */
  distributeDocument?: boolean | undefined;
  /**
   * [DEPRECATED] - Use customDocumentData instead. The data ID of an alternative PDF to use when creating the document. If not provided, the PDF attached to the template will be used.
   */
  customDocumentDataId?: string | undefined;
  /**
   * The data IDs of alternative PDFs to use when creating the document. If not provided, the PDF attached to the template will be used.
   */
  customDocumentData?: Array<CustomDocumentDatum> | undefined;
  /**
   * The ID of the folder to create the document in. If not provided, the document will be created in the root folder.
   */
  folderId?: string | undefined;
  /**
   * The fields to prefill on the document before sending it out. Useful when you want to create a document from an existing template and pre-fill the fields with specific values.
   */
  prefillFields?:
    | Array<
      | PrefillFieldText
      | PrefillFieldNumber
      | PrefillFieldRadio
      | PrefillFieldCheckbox
      | PrefillFieldDropdown
      | PrefillFieldDate
    >
    | undefined;
};

export const TemplateCreateDocumentFromTemplateVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateDocumentFromTemplateVisibility = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateVisibility
>;

export const TemplateCreateDocumentFromTemplateStatus = {
  Draft: "DRAFT",
  Pending: "PENDING",
  Completed: "COMPLETED",
  Rejected: "REJECTED",
} as const;
export type TemplateCreateDocumentFromTemplateStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateStatus
>;

export const TemplateCreateDocumentFromTemplateSource = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
  TemplateDirectLink: "TEMPLATE_DIRECT_LINK",
} as const;
export type TemplateCreateDocumentFromTemplateSource = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSource
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateDocumentFromTemplateGlobalAccessAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
} as const;
/**
 * The type of authentication required for the recipient to sign the document. This field is restricted to Enterprise plan users only.
 */
export type TemplateCreateDocumentFromTemplateGlobalActionAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateGlobalActionAuth
>;

export type TemplateCreateDocumentFromTemplateAuthOptions = {
  globalAccessAuth: Array<TemplateCreateDocumentFromTemplateGlobalAccessAuth>;
  globalActionAuth: Array<TemplateCreateDocumentFromTemplateGlobalActionAuth>;
};

export type TemplateCreateDocumentFromTemplateFormValues =
  | string
  | boolean
  | number;

export const TemplateCreateDocumentFromTemplateDocumentDataType = {
  S3Path: "S3_PATH",
  Bytes: "BYTES",
  Bytes64: "BYTES_64",
} as const;
export type TemplateCreateDocumentFromTemplateDocumentDataType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateDocumentDataType
>;

export type TemplateCreateDocumentFromTemplateDocumentData = {
  type: TemplateCreateDocumentFromTemplateDocumentDataType;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

export const TemplateCreateDocumentFromTemplateSigningOrder = {
  Parallel: "PARALLEL",
  Sequential: "SEQUENTIAL",
} as const;
export type TemplateCreateDocumentFromTemplateSigningOrder = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSigningOrder
>;

export const TemplateCreateDocumentFromTemplateDistributionMethod = {
  Email: "EMAIL",
  None: "NONE",
} as const;
export type TemplateCreateDocumentFromTemplateDistributionMethod = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateDistributionMethod
>;

export type TemplateCreateDocumentFromTemplateEmailSettings = {
  /**
   * Whether to send an email to all recipients that the document is ready for them to sign.
   */
  recipientSigningRequest?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who was removed from a pending document.
   */
  recipientRemoved?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when a recipient has signed the document.
   */
  recipientSigned?: boolean | undefined;
  /**
   * Whether to send an email to the recipient who has just signed the document indicating that there are still other recipients who need to sign the document. This will only be sent if the document is still pending after the recipient has signed.
   */
  documentPending?: boolean | undefined;
  /**
   * Whether to send an email to all recipients when the document is complete.
   */
  documentCompleted?: boolean | undefined;
  /**
   * Whether to send an email to all recipients if a pending document has been deleted.
   */
  documentDeleted?: boolean | undefined;
  /**
   * Whether to send an email to the document owner when the document is complete.
   */
  ownerDocumentCompleted?: boolean | undefined;
};

export type TemplateCreateDocumentFromTemplateDocumentMeta = {
  signingOrder: TemplateCreateDocumentFromTemplateSigningOrder;
  distributionMethod: TemplateCreateDocumentFromTemplateDistributionMethod;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings: TemplateCreateDocumentFromTemplateEmailSettings | null;
  emailId: string | null;
  emailReplyTo: string | null;
  password?: string | null | undefined;
  documentId?: number | undefined;
};

export const TemplateCreateDocumentFromTemplateFolderType = {
  Document: "DOCUMENT",
  Template: "TEMPLATE",
} as const;
export type TemplateCreateDocumentFromTemplateFolderType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFolderType
>;

export const TemplateCreateDocumentFromTemplateFolderVisibility = {
  Everyone: "EVERYONE",
  ManagerAndAbove: "MANAGER_AND_ABOVE",
  Admin: "ADMIN",
} as const;
export type TemplateCreateDocumentFromTemplateFolderVisibility = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFolderVisibility
>;

export type TemplateCreateDocumentFromTemplateFolder = {
  id: string;
  name: string;
  type: TemplateCreateDocumentFromTemplateFolderType;
  visibility: TemplateCreateDocumentFromTemplateFolderVisibility;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

export const TemplateCreateDocumentFromTemplateRole = {
  Cc: "CC",
  Signer: "SIGNER",
  Viewer: "VIEWER",
  Approver: "APPROVER",
  Assistant: "ASSISTANT",
} as const;
export type TemplateCreateDocumentFromTemplateRole = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateRole
>;

export const TemplateCreateDocumentFromTemplateReadStatus = {
  NotOpened: "NOT_OPENED",
  Opened: "OPENED",
} as const;
export type TemplateCreateDocumentFromTemplateReadStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateReadStatus
>;

export const TemplateCreateDocumentFromTemplateSigningStatus = {
  NotSigned: "NOT_SIGNED",
  Signed: "SIGNED",
  Rejected: "REJECTED",
} as const;
export type TemplateCreateDocumentFromTemplateSigningStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSigningStatus
>;

export const TemplateCreateDocumentFromTemplateSendStatus = {
  NotSent: "NOT_SENT",
  Sent: "SENT",
} as const;
export type TemplateCreateDocumentFromTemplateSendStatus = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateSendStatus
>;

/**
 * The type of authentication required for the recipient to access the document.
 */
export const TemplateCreateDocumentFromTemplateAccessAuth = {
  Account: "ACCOUNT",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
} as const;
/**
 * The type of authentication required for the recipient to access the document.
 */
export type TemplateCreateDocumentFromTemplateAccessAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateAccessAuth
>;

/**
 * The type of authentication required for the recipient to sign the document.
 */
export const TemplateCreateDocumentFromTemplateActionAuth = {
  Account: "ACCOUNT",
  Passkey: "PASSKEY",
  TwoFactorAuth: "TWO_FACTOR_AUTH",
  Password: "PASSWORD",
  ExplicitNone: "EXPLICIT_NONE",
} as const;
/**
 * The type of authentication required for the recipient to sign the document.
 */
export type TemplateCreateDocumentFromTemplateActionAuth = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateActionAuth
>;

export type TemplateCreateDocumentFromTemplateRecipientAuthOptions = {
  accessAuth: Array<TemplateCreateDocumentFromTemplateAccessAuth>;
  actionAuth: Array<TemplateCreateDocumentFromTemplateActionAuth>;
};

export type TemplateCreateDocumentFromTemplateRecipientResponse = {
  envelopeId: string;
  role: TemplateCreateDocumentFromTemplateRole;
  readStatus: TemplateCreateDocumentFromTemplateReadStatus;
  signingStatus: TemplateCreateDocumentFromTemplateSigningStatus;
  sendStatus: TemplateCreateDocumentFromTemplateSendStatus;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions: TemplateCreateDocumentFromTemplateRecipientAuthOptions | null;
  /**
   * The order in which the recipient should sign the document. Only works if the document is set to sequential signing.
   */
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldType = {
  Signature: "SIGNATURE",
  FreeSignature: "FREE_SIGNATURE",
  Initials: "INITIALS",
  Name: "NAME",
  Email: "EMAIL",
  Date: "DATE",
  Text: "TEXT",
  Number: "NUMBER",
  Radio: "RADIO",
  Checkbox: "CHECKBOX",
  Dropdown: "DROPDOWN",
} as const;
export type TemplateCreateDocumentFromTemplateFieldType = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldType
>;

export const TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown = {
  Dropdown: "dropdown",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown =
  ClosedEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown>;

export type TemplateCreateDocumentFromTemplateValue3 = {
  value: string;
};

export type TemplateCreateDocumentFromTemplateFieldMetaDropdown = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown;
  values?: Array<TemplateCreateDocumentFromTemplateValue3> | undefined;
  defaultValue?: string | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox = {
  Checkbox: "checkbox",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox =
  ClosedEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox>;

export type TemplateCreateDocumentFromTemplateValue2 = {
  id: number;
  checked: boolean;
  value: string;
};

export const TemplateCreateDocumentFromTemplateDirection = {
  Vertical: "vertical",
  Horizontal: "horizontal",
} as const;
export type TemplateCreateDocumentFromTemplateDirection = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateDirection
>;

export type TemplateCreateDocumentFromTemplateFieldMetaCheckbox = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox;
  values?: Array<TemplateCreateDocumentFromTemplateValue2> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction?: TemplateCreateDocumentFromTemplateDirection | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTypeRadio = {
  Radio: "radio",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeRadio = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldMetaTypeRadio
>;

export type TemplateCreateDocumentFromTemplateValue1 = {
  id: number;
  checked: boolean;
  value: string;
};

export type TemplateCreateDocumentFromTemplateFieldMetaRadio = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeRadio;
  values?: Array<TemplateCreateDocumentFromTemplateValue1> | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTypeNumber = {
  Number: "number",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeNumber = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldMetaTypeNumber
>;

export const TemplateCreateDocumentFromTemplateTextAlign6 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign6 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign6
>;

export type TemplateCreateDocumentFromTemplateFieldMetaNumber = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeNumber;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign6 | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTypeText = {
  Text: "text",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeText = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldMetaTypeText
>;

export const TemplateCreateDocumentFromTemplateTextAlign5 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign5 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign5
>;

export type TemplateCreateDocumentFromTemplateFieldMetaText = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeText;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign5 | undefined;
};

export const TemplateCreateDocumentFromTemplateFieldMetaTypeDate = {
  Date: "date",
} as const;
export type TemplateCreateDocumentFromTemplateFieldMetaTypeDate = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDate
>;

export const TemplateCreateDocumentFromTemplateTextAlign4 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign4 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign4
>;

export type TemplateCreateDocumentFromTemplateFieldMetaDate = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateFieldMetaTypeDate;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign4 | undefined;
};

export const TemplateCreateDocumentFromTemplateTypeEmail = {
  Email: "email",
} as const;
export type TemplateCreateDocumentFromTemplateTypeEmail = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTypeEmail
>;

export const TemplateCreateDocumentFromTemplateTextAlign3 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign3 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign3
>;

export type TemplateCreateDocumentFromTemplateFieldMetaEmail = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateTypeEmail;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign3 | undefined;
};

export const TemplateCreateDocumentFromTemplateTypeName = {
  Name: "name",
} as const;
export type TemplateCreateDocumentFromTemplateTypeName = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTypeName
>;

export const TemplateCreateDocumentFromTemplateTextAlign2 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign2 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign2
>;

export type TemplateCreateDocumentFromTemplateFieldMetaName = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateTypeName;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign2 | undefined;
};

export const TemplateCreateDocumentFromTemplateTypeInitials = {
  Initials: "initials",
} as const;
export type TemplateCreateDocumentFromTemplateTypeInitials = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTypeInitials
>;

export const TemplateCreateDocumentFromTemplateTextAlign1 = {
  Left: "left",
  Center: "center",
  Right: "right",
} as const;
export type TemplateCreateDocumentFromTemplateTextAlign1 = ClosedEnum<
  typeof TemplateCreateDocumentFromTemplateTextAlign1
>;

export type TemplateCreateDocumentFromTemplateFieldMetaInitials = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: TemplateCreateDocumentFromTemplateTypeInitials;
  fontSize?: number | undefined;
  textAlign?: TemplateCreateDocumentFromTemplateTextAlign1 | undefined;
};

export type TemplateCreateDocumentFromTemplateFieldMetaUnion =
  | TemplateCreateDocumentFromTemplateFieldMetaInitials
  | TemplateCreateDocumentFromTemplateFieldMetaName
  | TemplateCreateDocumentFromTemplateFieldMetaEmail
  | TemplateCreateDocumentFromTemplateFieldMetaDate
  | TemplateCreateDocumentFromTemplateFieldMetaText
  | TemplateCreateDocumentFromTemplateFieldMetaNumber
  | TemplateCreateDocumentFromTemplateFieldMetaRadio
  | TemplateCreateDocumentFromTemplateFieldMetaCheckbox
  | TemplateCreateDocumentFromTemplateFieldMetaDropdown;

export type TemplateCreateDocumentFromTemplateField = {
  envelopeId: string;
  envelopeItemId: string;
  type: TemplateCreateDocumentFromTemplateFieldType;
  id: number;
  secondaryId: string;
  recipientId: number;
  /**
   * The page number of the field on the document. Starts from 1.
   */
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateDocumentFromTemplateFieldMetaInitials
    | TemplateCreateDocumentFromTemplateFieldMetaName
    | TemplateCreateDocumentFromTemplateFieldMetaEmail
    | TemplateCreateDocumentFromTemplateFieldMetaDate
    | TemplateCreateDocumentFromTemplateFieldMetaText
    | TemplateCreateDocumentFromTemplateFieldMetaNumber
    | TemplateCreateDocumentFromTemplateFieldMetaRadio
    | TemplateCreateDocumentFromTemplateFieldMetaCheckbox
    | TemplateCreateDocumentFromTemplateFieldMetaDropdown
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/**
 * Successful response
 */
export type TemplateCreateDocumentFromTemplateResponse = {
  visibility: TemplateCreateDocumentFromTemplateVisibility;
  status: TemplateCreateDocumentFromTemplateStatus;
  source: TemplateCreateDocumentFromTemplateSource;
  id: number;
  /**
   * A custom external ID you can use to identify the document.
   */
  externalId: string | null;
  /**
   * The ID of the user that created this document.
   */
  userId: number;
  authOptions: TemplateCreateDocumentFromTemplateAuthOptions | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  folderId: string | null;
  envelopeId: string;
  /**
   * The ID of the template that the document was created from, if any.
   */
  templateId?: number | null | undefined;
  documentDataId?: string | undefined;
  documentData: TemplateCreateDocumentFromTemplateDocumentData;
  documentMeta: TemplateCreateDocumentFromTemplateDocumentMeta;
  folder: TemplateCreateDocumentFromTemplateFolder | null;
  recipients: Array<TemplateCreateDocumentFromTemplateRecipientResponse>;
  fields: Array<TemplateCreateDocumentFromTemplateField>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientRequest$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.number(),
    email: z.string(),
    name: z.string().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateRecipientRequest$Outbound = {
  id: number;
  email: string;
  name?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientRequest$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientRequest$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRecipientRequest
  > = z.object({
    id: z.number(),
    email: z.string(),
    name: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRecipientRequest$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRecipientRequest$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRecipientRequest$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientRequest$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateRecipientRequest$Outbound;
}

export function templateCreateDocumentFromTemplateRecipientRequestToJSON(
  templateCreateDocumentFromTemplateRecipientRequest:
    TemplateCreateDocumentFromTemplateRecipientRequest,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRecipientRequest$outboundSchema.parse(
      templateCreateDocumentFromTemplateRecipientRequest,
    ),
  );
}

export function templateCreateDocumentFromTemplateRecipientRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRecipientRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRecipientRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRecipientRequest' from JSON`,
  );
}

/** @internal */
export const CustomDocumentDatum$inboundSchema: z.ZodType<
  CustomDocumentDatum,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentDataId: z.string(),
  envelopeItemId: z.string(),
});

/** @internal */
export type CustomDocumentDatum$Outbound = {
  documentDataId: string;
  envelopeItemId: string;
};

/** @internal */
export const CustomDocumentDatum$outboundSchema: z.ZodType<
  CustomDocumentDatum$Outbound,
  z.ZodTypeDef,
  CustomDocumentDatum
> = z.object({
  documentDataId: z.string(),
  envelopeItemId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDocumentDatum$ {
  /** @deprecated use `CustomDocumentDatum$inboundSchema` instead. */
  export const inboundSchema = CustomDocumentDatum$inboundSchema;
  /** @deprecated use `CustomDocumentDatum$outboundSchema` instead. */
  export const outboundSchema = CustomDocumentDatum$outboundSchema;
  /** @deprecated use `CustomDocumentDatum$Outbound` instead. */
  export type Outbound = CustomDocumentDatum$Outbound;
}

export function customDocumentDatumToJSON(
  customDocumentDatum: CustomDocumentDatum,
): string {
  return JSON.stringify(
    CustomDocumentDatum$outboundSchema.parse(customDocumentDatum),
  );
}

export function customDocumentDatumFromJSON(
  jsonString: string,
): SafeParseResult<CustomDocumentDatum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomDocumentDatum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomDocumentDatum' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeDate$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeDate
> = z.nativeEnum(PrefillFieldTypeDate);

/** @internal */
export const PrefillFieldTypeDate$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeDate
> = PrefillFieldTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeDate$ {
  /** @deprecated use `PrefillFieldTypeDate$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeDate$inboundSchema;
  /** @deprecated use `PrefillFieldTypeDate$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeDate$outboundSchema;
}

/** @internal */
export const PrefillFieldDate$inboundSchema: z.ZodType<
  PrefillFieldDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeDate$inboundSchema,
  value: z.string().optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldDate$Outbound = {
  type: string;
  value?: string | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldDate$outboundSchema: z.ZodType<
  PrefillFieldDate$Outbound,
  z.ZodTypeDef,
  PrefillFieldDate
> = z.object({
  type: PrefillFieldTypeDate$outboundSchema,
  value: z.string().optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldDate$ {
  /** @deprecated use `PrefillFieldDate$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldDate$inboundSchema;
  /** @deprecated use `PrefillFieldDate$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldDate$outboundSchema;
  /** @deprecated use `PrefillFieldDate$Outbound` instead. */
  export type Outbound = PrefillFieldDate$Outbound;
}

export function prefillFieldDateToJSON(
  prefillFieldDate: PrefillFieldDate,
): string {
  return JSON.stringify(
    PrefillFieldDate$outboundSchema.parse(prefillFieldDate),
  );
}

export function prefillFieldDateFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldDate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldDate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldDate' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeDropdown$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeDropdown
> = z.nativeEnum(PrefillFieldTypeDropdown);

/** @internal */
export const PrefillFieldTypeDropdown$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeDropdown
> = PrefillFieldTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeDropdown$ {
  /** @deprecated use `PrefillFieldTypeDropdown$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeDropdown$inboundSchema;
  /** @deprecated use `PrefillFieldTypeDropdown$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeDropdown$outboundSchema;
}

/** @internal */
export const PrefillFieldDropdown$inboundSchema: z.ZodType<
  PrefillFieldDropdown,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeDropdown$inboundSchema,
  label: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldDropdown$Outbound = {
  type: string;
  label?: string | undefined;
  value?: string | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldDropdown$outboundSchema: z.ZodType<
  PrefillFieldDropdown$Outbound,
  z.ZodTypeDef,
  PrefillFieldDropdown
> = z.object({
  type: PrefillFieldTypeDropdown$outboundSchema,
  label: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldDropdown$ {
  /** @deprecated use `PrefillFieldDropdown$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldDropdown$inboundSchema;
  /** @deprecated use `PrefillFieldDropdown$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldDropdown$outboundSchema;
  /** @deprecated use `PrefillFieldDropdown$Outbound` instead. */
  export type Outbound = PrefillFieldDropdown$Outbound;
}

export function prefillFieldDropdownToJSON(
  prefillFieldDropdown: PrefillFieldDropdown,
): string {
  return JSON.stringify(
    PrefillFieldDropdown$outboundSchema.parse(prefillFieldDropdown),
  );
}

export function prefillFieldDropdownFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldDropdown, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldDropdown$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldDropdown' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeCheckbox$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeCheckbox
> = z.nativeEnum(PrefillFieldTypeCheckbox);

/** @internal */
export const PrefillFieldTypeCheckbox$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeCheckbox
> = PrefillFieldTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeCheckbox$ {
  /** @deprecated use `PrefillFieldTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeCheckbox$inboundSchema;
  /** @deprecated use `PrefillFieldTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeCheckbox$outboundSchema;
}

/** @internal */
export const PrefillFieldCheckbox$inboundSchema: z.ZodType<
  PrefillFieldCheckbox,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeCheckbox$inboundSchema,
  label: z.string().optional(),
  value: z.array(z.string()).optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldCheckbox$Outbound = {
  type: string;
  label?: string | undefined;
  value?: Array<string> | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldCheckbox$outboundSchema: z.ZodType<
  PrefillFieldCheckbox$Outbound,
  z.ZodTypeDef,
  PrefillFieldCheckbox
> = z.object({
  type: PrefillFieldTypeCheckbox$outboundSchema,
  label: z.string().optional(),
  value: z.array(z.string()).optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldCheckbox$ {
  /** @deprecated use `PrefillFieldCheckbox$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldCheckbox$inboundSchema;
  /** @deprecated use `PrefillFieldCheckbox$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldCheckbox$outboundSchema;
  /** @deprecated use `PrefillFieldCheckbox$Outbound` instead. */
  export type Outbound = PrefillFieldCheckbox$Outbound;
}

export function prefillFieldCheckboxToJSON(
  prefillFieldCheckbox: PrefillFieldCheckbox,
): string {
  return JSON.stringify(
    PrefillFieldCheckbox$outboundSchema.parse(prefillFieldCheckbox),
  );
}

export function prefillFieldCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldCheckbox, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldCheckbox$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldCheckbox' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeRadio$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeRadio
> = z.nativeEnum(PrefillFieldTypeRadio);

/** @internal */
export const PrefillFieldTypeRadio$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeRadio
> = PrefillFieldTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeRadio$ {
  /** @deprecated use `PrefillFieldTypeRadio$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeRadio$inboundSchema;
  /** @deprecated use `PrefillFieldTypeRadio$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeRadio$outboundSchema;
}

/** @internal */
export const PrefillFieldRadio$inboundSchema: z.ZodType<
  PrefillFieldRadio,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeRadio$inboundSchema,
  label: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldRadio$Outbound = {
  type: string;
  label?: string | undefined;
  value?: string | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldRadio$outboundSchema: z.ZodType<
  PrefillFieldRadio$Outbound,
  z.ZodTypeDef,
  PrefillFieldRadio
> = z.object({
  type: PrefillFieldTypeRadio$outboundSchema,
  label: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldRadio$ {
  /** @deprecated use `PrefillFieldRadio$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldRadio$inboundSchema;
  /** @deprecated use `PrefillFieldRadio$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldRadio$outboundSchema;
  /** @deprecated use `PrefillFieldRadio$Outbound` instead. */
  export type Outbound = PrefillFieldRadio$Outbound;
}

export function prefillFieldRadioToJSON(
  prefillFieldRadio: PrefillFieldRadio,
): string {
  return JSON.stringify(
    PrefillFieldRadio$outboundSchema.parse(prefillFieldRadio),
  );
}

export function prefillFieldRadioFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldRadio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldRadio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldRadio' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeNumber$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeNumber
> = z.nativeEnum(PrefillFieldTypeNumber);

/** @internal */
export const PrefillFieldTypeNumber$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeNumber
> = PrefillFieldTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeNumber$ {
  /** @deprecated use `PrefillFieldTypeNumber$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeNumber$inboundSchema;
  /** @deprecated use `PrefillFieldTypeNumber$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeNumber$outboundSchema;
}

/** @internal */
export const PrefillFieldNumber$inboundSchema: z.ZodType<
  PrefillFieldNumber,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeNumber$inboundSchema,
  label: z.string().optional(),
  placeholder: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldNumber$Outbound = {
  type: string;
  label?: string | undefined;
  placeholder?: string | undefined;
  value?: string | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldNumber$outboundSchema: z.ZodType<
  PrefillFieldNumber$Outbound,
  z.ZodTypeDef,
  PrefillFieldNumber
> = z.object({
  type: PrefillFieldTypeNumber$outboundSchema,
  label: z.string().optional(),
  placeholder: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldNumber$ {
  /** @deprecated use `PrefillFieldNumber$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldNumber$inboundSchema;
  /** @deprecated use `PrefillFieldNumber$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldNumber$outboundSchema;
  /** @deprecated use `PrefillFieldNumber$Outbound` instead. */
  export type Outbound = PrefillFieldNumber$Outbound;
}

export function prefillFieldNumberToJSON(
  prefillFieldNumber: PrefillFieldNumber,
): string {
  return JSON.stringify(
    PrefillFieldNumber$outboundSchema.parse(prefillFieldNumber),
  );
}

export function prefillFieldNumberFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldNumber, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldNumber$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldNumber' from JSON`,
  );
}

/** @internal */
export const PrefillFieldTypeText$inboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeText
> = z.nativeEnum(PrefillFieldTypeText);

/** @internal */
export const PrefillFieldTypeText$outboundSchema: z.ZodNativeEnum<
  typeof PrefillFieldTypeText
> = PrefillFieldTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldTypeText$ {
  /** @deprecated use `PrefillFieldTypeText$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldTypeText$inboundSchema;
  /** @deprecated use `PrefillFieldTypeText$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldTypeText$outboundSchema;
}

/** @internal */
export const PrefillFieldText$inboundSchema: z.ZodType<
  PrefillFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: PrefillFieldTypeText$inboundSchema,
  label: z.string().optional(),
  placeholder: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/** @internal */
export type PrefillFieldText$Outbound = {
  type: string;
  label?: string | undefined;
  placeholder?: string | undefined;
  value?: string | undefined;
  id: number;
};

/** @internal */
export const PrefillFieldText$outboundSchema: z.ZodType<
  PrefillFieldText$Outbound,
  z.ZodTypeDef,
  PrefillFieldText
> = z.object({
  type: PrefillFieldTypeText$outboundSchema,
  label: z.string().optional(),
  placeholder: z.string().optional(),
  value: z.string().optional(),
  id: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillFieldText$ {
  /** @deprecated use `PrefillFieldText$inboundSchema` instead. */
  export const inboundSchema = PrefillFieldText$inboundSchema;
  /** @deprecated use `PrefillFieldText$outboundSchema` instead. */
  export const outboundSchema = PrefillFieldText$outboundSchema;
  /** @deprecated use `PrefillFieldText$Outbound` instead. */
  export type Outbound = PrefillFieldText$Outbound;
}

export function prefillFieldTextToJSON(
  prefillFieldText: PrefillFieldText,
): string {
  return JSON.stringify(
    PrefillFieldText$outboundSchema.parse(prefillFieldText),
  );
}

export function prefillFieldTextFromJSON(
  jsonString: string,
): SafeParseResult<PrefillFieldText, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillFieldText$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillFieldText' from JSON`,
  );
}

/** @internal */
export const PrefillField$inboundSchema: z.ZodType<
  PrefillField,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => PrefillFieldText$inboundSchema),
  z.lazy(() => PrefillFieldNumber$inboundSchema),
  z.lazy(() => PrefillFieldRadio$inboundSchema),
  z.lazy(() => PrefillFieldCheckbox$inboundSchema),
  z.lazy(() => PrefillFieldDropdown$inboundSchema),
  z.lazy(() => PrefillFieldDate$inboundSchema),
]);

/** @internal */
export type PrefillField$Outbound =
  | PrefillFieldText$Outbound
  | PrefillFieldNumber$Outbound
  | PrefillFieldRadio$Outbound
  | PrefillFieldCheckbox$Outbound
  | PrefillFieldDropdown$Outbound
  | PrefillFieldDate$Outbound;

/** @internal */
export const PrefillField$outboundSchema: z.ZodType<
  PrefillField$Outbound,
  z.ZodTypeDef,
  PrefillField
> = z.union([
  z.lazy(() => PrefillFieldText$outboundSchema),
  z.lazy(() => PrefillFieldNumber$outboundSchema),
  z.lazy(() => PrefillFieldRadio$outboundSchema),
  z.lazy(() => PrefillFieldCheckbox$outboundSchema),
  z.lazy(() => PrefillFieldDropdown$outboundSchema),
  z.lazy(() => PrefillFieldDate$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrefillField$ {
  /** @deprecated use `PrefillField$inboundSchema` instead. */
  export const inboundSchema = PrefillField$inboundSchema;
  /** @deprecated use `PrefillField$outboundSchema` instead. */
  export const outboundSchema = PrefillField$outboundSchema;
  /** @deprecated use `PrefillField$Outbound` instead. */
  export type Outbound = PrefillField$Outbound;
}

export function prefillFieldToJSON(prefillField: PrefillField): string {
  return JSON.stringify(PrefillField$outboundSchema.parse(prefillField));
}

export function prefillFieldFromJSON(
  jsonString: string,
): SafeParseResult<PrefillField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrefillField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrefillField' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRequest$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  templateId: z.number(),
  recipients: z.array(
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateRecipientRequest$inboundSchema
    ),
  ),
  distributeDocument: z.boolean().optional(),
  customDocumentDataId: z.string().optional(),
  customDocumentData: z.array(z.lazy(() => CustomDocumentDatum$inboundSchema))
    .optional(),
  folderId: z.string().optional(),
  prefillFields: z.array(
    z.union([
      z.lazy(() => PrefillFieldText$inboundSchema),
      z.lazy(() => PrefillFieldNumber$inboundSchema),
      z.lazy(() => PrefillFieldRadio$inboundSchema),
      z.lazy(() => PrefillFieldCheckbox$inboundSchema),
      z.lazy(() => PrefillFieldDropdown$inboundSchema),
      z.lazy(() => PrefillFieldDate$inboundSchema),
    ]),
  ).optional(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateRequest$Outbound = {
  templateId: number;
  recipients: Array<
    TemplateCreateDocumentFromTemplateRecipientRequest$Outbound
  >;
  distributeDocument?: boolean | undefined;
  customDocumentDataId?: string | undefined;
  customDocumentData?: Array<CustomDocumentDatum$Outbound> | undefined;
  folderId?: string | undefined;
  prefillFields?:
    | Array<
      | PrefillFieldText$Outbound
      | PrefillFieldNumber$Outbound
      | PrefillFieldRadio$Outbound
      | PrefillFieldCheckbox$Outbound
      | PrefillFieldDropdown$Outbound
      | PrefillFieldDate$Outbound
    >
    | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRequest$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRequest$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRequest
  > = z.object({
    templateId: z.number(),
    recipients: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateRecipientRequest$outboundSchema
      ),
    ),
    distributeDocument: z.boolean().optional(),
    customDocumentDataId: z.string().optional(),
    customDocumentData: z.array(
      z.lazy(() => CustomDocumentDatum$outboundSchema),
    ).optional(),
    folderId: z.string().optional(),
    prefillFields: z.array(
      z.union([
        z.lazy(() => PrefillFieldText$outboundSchema),
        z.lazy(() => PrefillFieldNumber$outboundSchema),
        z.lazy(() => PrefillFieldRadio$outboundSchema),
        z.lazy(() => PrefillFieldCheckbox$outboundSchema),
        z.lazy(() => PrefillFieldDropdown$outboundSchema),
        z.lazy(() => PrefillFieldDate$outboundSchema),
      ]),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRequest$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequest$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRequest$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRequest$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRequest$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateRequest$Outbound;
}

export function templateCreateDocumentFromTemplateRequestToJSON(
  templateCreateDocumentFromTemplateRequest:
    TemplateCreateDocumentFromTemplateRequest,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRequest$outboundSchema.parse(
      templateCreateDocumentFromTemplateRequest,
    ),
  );
}

export function templateCreateDocumentFromTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRequest' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateVisibility> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateVisibility);

/** @internal */
export const TemplateCreateDocumentFromTemplateVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateVisibility> =
    TemplateCreateDocumentFromTemplateVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateVisibility$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateVisibility$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateVisibility$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateStatus> =
    TemplateCreateDocumentFromTemplateStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSource$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSource> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSource);

/** @internal */
export const TemplateCreateDocumentFromTemplateSource$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSource> =
    TemplateCreateDocumentFromTemplateSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSource$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSource$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSource$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSource$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSource$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateGlobalAccessAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalAccessAuth> =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateGlobalAccessAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalActionAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateGlobalActionAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateGlobalActionAuth> =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateGlobalActionAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    globalAccessAuth: z.array(
      TemplateCreateDocumentFromTemplateGlobalAccessAuth$inboundSchema,
    ),
    globalActionAuth: z.array(
      TemplateCreateDocumentFromTemplateGlobalActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateAuthOptions$Outbound = {
  globalAccessAuth: Array<string>;
  globalActionAuth: Array<string>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateAuthOptions
  > = z.object({
    globalAccessAuth: z.array(
      TemplateCreateDocumentFromTemplateGlobalAccessAuth$outboundSchema,
    ),
    globalActionAuth: z.array(
      TemplateCreateDocumentFromTemplateGlobalActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateAuthOptions$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAuthOptions$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateAuthOptions$Outbound;
}

export function templateCreateDocumentFromTemplateAuthOptionsToJSON(
  templateCreateDocumentFromTemplateAuthOptions:
    TemplateCreateDocumentFromTemplateAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema.parse(
      templateCreateDocumentFromTemplateAuthOptions,
    ),
  );
}

export function templateCreateDocumentFromTemplateAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFormValues$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFormValues,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.boolean(), z.number()]);

/** @internal */
export type TemplateCreateDocumentFromTemplateFormValues$Outbound =
  | string
  | boolean
  | number;

/** @internal */
export const TemplateCreateDocumentFromTemplateFormValues$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFormValues$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFormValues
  > = z.union([z.string(), z.boolean(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFormValues$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFormValues$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFormValues$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFormValues$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFormValues$Outbound;
}

export function templateCreateDocumentFromTemplateFormValuesToJSON(
  templateCreateDocumentFromTemplateFormValues:
    TemplateCreateDocumentFromTemplateFormValues,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFormValues$outboundSchema.parse(
      templateCreateDocumentFromTemplateFormValues,
    ),
  );
}

export function templateCreateDocumentFromTemplateFormValuesFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFormValues,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFormValues$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFormValues' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentDataType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDocumentDataType> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateDocumentDataType);

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentDataType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDocumentDataType> =
    TemplateCreateDocumentFromTemplateDocumentDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDocumentDataType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentDataType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDocumentDataType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentDataType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDocumentDataType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentData$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentData,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: TemplateCreateDocumentFromTemplateDocumentDataType$inboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateDocumentData$Outbound = {
  type: string;
  id: string;
  data: string;
  initialData: string;
  envelopeItemId: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentData$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentData$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateDocumentData
  > = z.object({
    type: TemplateCreateDocumentFromTemplateDocumentDataType$outboundSchema,
    id: z.string(),
    data: z.string(),
    initialData: z.string(),
    envelopeItemId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDocumentData$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDocumentData$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDocumentData$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentData$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateDocumentData$Outbound;
}

export function templateCreateDocumentFromTemplateDocumentDataToJSON(
  templateCreateDocumentFromTemplateDocumentData:
    TemplateCreateDocumentFromTemplateDocumentData,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateDocumentData$outboundSchema.parse(
      templateCreateDocumentFromTemplateDocumentData,
    ),
  );
}

export function templateCreateDocumentFromTemplateDocumentDataFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateDocumentData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateDocumentData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateDocumentData' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningOrder> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSigningOrder);

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningOrder> =
    TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSigningOrder$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDistributionMethod> =
    z.nativeEnum(TemplateCreateDocumentFromTemplateDistributionMethod);

/** @internal */
export const TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDistributionMethod> =
    TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDistributionMethod$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateEmailSettings,
    z.ZodTypeDef,
    unknown
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateEmailSettings$Outbound = {
  recipientSigningRequest: boolean;
  recipientRemoved: boolean;
  recipientSigned: boolean;
  documentPending: boolean;
  documentCompleted: boolean;
  documentDeleted: boolean;
  ownerDocumentCompleted: boolean;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateEmailSettings$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateEmailSettings
  > = z.object({
    recipientSigningRequest: z.boolean().default(true),
    recipientRemoved: z.boolean().default(true),
    recipientSigned: z.boolean().default(true),
    documentPending: z.boolean().default(true),
    documentCompleted: z.boolean().default(true),
    documentDeleted: z.boolean().default(true),
    ownerDocumentCompleted: z.boolean().default(true),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateEmailSettings$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateEmailSettings$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateEmailSettings$Outbound;
}

export function templateCreateDocumentFromTemplateEmailSettingsToJSON(
  templateCreateDocumentFromTemplateEmailSettings:
    TemplateCreateDocumentFromTemplateEmailSettings,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema.parse(
      templateCreateDocumentFromTemplateEmailSettings,
    ),
  );
}

export function templateCreateDocumentFromTemplateEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateEmailSettings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateEmailSettings' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentMeta,
    z.ZodTypeDef,
    unknown
  > = z.object({
    signingOrder: TemplateCreateDocumentFromTemplateSigningOrder$inboundSchema,
    distributionMethod:
      TemplateCreateDocumentFromTemplateDistributionMethod$inboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateEmailSettings$inboundSchema
      ),
    ),
    emailId: z.nullable(z.string()),
    emailReplyTo: z.nullable(z.string()),
    password: z.nullable(z.string()).default(null),
    documentId: z.number().default(-1),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateDocumentMeta$Outbound = {
  signingOrder: string;
  distributionMethod: string;
  id: string;
  subject: string | null;
  message: string | null;
  timezone: string | null;
  dateFormat: string | null;
  redirectUrl: string | null;
  typedSignatureEnabled: boolean;
  uploadSignatureEnabled: boolean;
  drawSignatureEnabled: boolean;
  allowDictateNextSigner: boolean;
  language: string;
  emailSettings:
    | TemplateCreateDocumentFromTemplateEmailSettings$Outbound
    | null;
  emailId: string | null;
  emailReplyTo: string | null;
  password: string | null;
  documentId: number;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateDocumentMeta$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateDocumentMeta
  > = z.object({
    signingOrder: TemplateCreateDocumentFromTemplateSigningOrder$outboundSchema,
    distributionMethod:
      TemplateCreateDocumentFromTemplateDistributionMethod$outboundSchema,
    id: z.string(),
    subject: z.nullable(z.string()),
    message: z.nullable(z.string()),
    timezone: z.nullable(z.string()),
    dateFormat: z.nullable(z.string()),
    redirectUrl: z.nullable(z.string()),
    typedSignatureEnabled: z.boolean(),
    uploadSignatureEnabled: z.boolean(),
    drawSignatureEnabled: z.boolean(),
    allowDictateNextSigner: z.boolean(),
    language: z.string(),
    emailSettings: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateEmailSettings$outboundSchema
      ),
    ),
    emailId: z.nullable(z.string()),
    emailReplyTo: z.nullable(z.string()),
    password: z.nullable(z.string()).default(null),
    documentId: z.number().default(-1),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDocumentMeta$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDocumentMeta$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateDocumentMeta$Outbound;
}

export function templateCreateDocumentFromTemplateDocumentMetaToJSON(
  templateCreateDocumentFromTemplateDocumentMeta:
    TemplateCreateDocumentFromTemplateDocumentMeta,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema.parse(
      templateCreateDocumentFromTemplateDocumentMeta,
    ),
  );
}

export function templateCreateDocumentFromTemplateDocumentMetaFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateDocumentMeta,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateDocumentMeta' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFolderType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFolderType> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateFolderType);

/** @internal */
export const TemplateCreateDocumentFromTemplateFolderType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFolderType> =
    TemplateCreateDocumentFromTemplateFolderType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFolderType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolderType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFolderType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolderType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFolderType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFolderVisibility$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFolderVisibility> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateFolderVisibility);

/** @internal */
export const TemplateCreateDocumentFromTemplateFolderVisibility$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFolderVisibility> =
    TemplateCreateDocumentFromTemplateFolderVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFolderVisibility$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolderVisibility$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFolderVisibility$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolderVisibility$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFolderVisibility$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFolder$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateFolder,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateCreateDocumentFromTemplateFolderType$inboundSchema,
  visibility: TemplateCreateDocumentFromTemplateFolderVisibility$inboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateFolder$Outbound = {
  id: string;
  name: string;
  type: string;
  visibility: string;
  userId: number;
  teamId: number;
  pinned: boolean;
  parentId: string | null;
  createdAt: string;
  updatedAt: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFolder$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateFolder$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateFolder
> = z.object({
  id: z.string(),
  name: z.string(),
  type: TemplateCreateDocumentFromTemplateFolderType$outboundSchema,
  visibility: TemplateCreateDocumentFromTemplateFolderVisibility$outboundSchema,
  userId: z.number(),
  teamId: z.number(),
  pinned: z.boolean(),
  parentId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFolder$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolder$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFolder$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolder$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFolder$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFolder$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateFolder$Outbound;
}

export function templateCreateDocumentFromTemplateFolderToJSON(
  templateCreateDocumentFromTemplateFolder:
    TemplateCreateDocumentFromTemplateFolder,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFolder$outboundSchema.parse(
      templateCreateDocumentFromTemplateFolder,
    ),
  );
}

export function templateCreateDocumentFromTemplateFolderFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFolder,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFolder$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFolder' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRole$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateRole> = z.nativeEnum(
    TemplateCreateDocumentFromTemplateRole,
  );

/** @internal */
export const TemplateCreateDocumentFromTemplateRole$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateRole> =
    TemplateCreateDocumentFromTemplateRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRole$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRole$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRole$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRole$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRole$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateReadStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateReadStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateReadStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateReadStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateReadStatus> =
    TemplateCreateDocumentFromTemplateReadStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateReadStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateReadStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateReadStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateReadStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateReadStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSigningStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSigningStatus> =
    TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSigningStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateSendStatus$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSendStatus> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateSendStatus);

/** @internal */
export const TemplateCreateDocumentFromTemplateSendStatus$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateSendStatus> =
    TemplateCreateDocumentFromTemplateSendStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateSendStatus$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateSendStatus$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateSendStatus$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateSendStatus$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateSendStatus$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateAccessAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateAccessAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateAccessAuth> =
    TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateAccessAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateActionAuth$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateActionAuth> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateActionAuth);

/** @internal */
export const TemplateCreateDocumentFromTemplateActionAuth$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateActionAuth> =
    TemplateCreateDocumentFromTemplateActionAuth$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateActionAuth$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateActionAuth$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateActionAuth$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateActionAuth$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateActionAuth$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientAuthOptions$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientAuthOptions,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessAuth: z.array(
      TemplateCreateDocumentFromTemplateAccessAuth$inboundSchema,
    ),
    actionAuth: z.array(
      TemplateCreateDocumentFromTemplateActionAuth$inboundSchema,
    ),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateRecipientAuthOptions$Outbound = {
  accessAuth: Array<string>;
  actionAuth: Array<string>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientAuthOptions$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientAuthOptions$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRecipientAuthOptions
  > = z.object({
    accessAuth: z.array(
      TemplateCreateDocumentFromTemplateAccessAuth$outboundSchema,
    ),
    actionAuth: z.array(
      TemplateCreateDocumentFromTemplateActionAuth$outboundSchema,
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRecipientAuthOptions$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientAuthOptions$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRecipientAuthOptions$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientAuthOptions$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRecipientAuthOptions$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientAuthOptions$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateRecipientAuthOptions$Outbound;
}

export function templateCreateDocumentFromTemplateRecipientAuthOptionsToJSON(
  templateCreateDocumentFromTemplateRecipientAuthOptions:
    TemplateCreateDocumentFromTemplateRecipientAuthOptions,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRecipientAuthOptions$outboundSchema.parse(
      templateCreateDocumentFromTemplateRecipientAuthOptions,
    ),
  );
}

export function templateCreateDocumentFromTemplateRecipientAuthOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRecipientAuthOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRecipientAuthOptions$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRecipientAuthOptions' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientResponse$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    envelopeId: z.string(),
    role: TemplateCreateDocumentFromTemplateRole$inboundSchema,
    readStatus: TemplateCreateDocumentFromTemplateReadStatus$inboundSchema,
    signingStatus:
      TemplateCreateDocumentFromTemplateSigningStatus$inboundSchema,
    sendStatus: TemplateCreateDocumentFromTemplateSendStatus$inboundSchema,
    id: z.number(),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateRecipientAuthOptions$inboundSchema
      ),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
    documentId: z.nullable(z.number()).optional(),
    templateId: z.nullable(z.number()).optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateRecipientResponse$Outbound = {
  envelopeId: string;
  role: string;
  readStatus: string;
  signingStatus: string;
  sendStatus: string;
  id: number;
  email: string;
  name: string;
  token: string;
  documentDeletedAt: string | null;
  expired: string | null;
  signedAt: string | null;
  authOptions:
    | TemplateCreateDocumentFromTemplateRecipientAuthOptions$Outbound
    | null;
  signingOrder: number | null;
  rejectionReason: string | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateRecipientResponse$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateRecipientResponse$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateRecipientResponse
  > = z.object({
    envelopeId: z.string(),
    role: TemplateCreateDocumentFromTemplateRole$outboundSchema,
    readStatus: TemplateCreateDocumentFromTemplateReadStatus$outboundSchema,
    signingStatus:
      TemplateCreateDocumentFromTemplateSigningStatus$outboundSchema,
    sendStatus: TemplateCreateDocumentFromTemplateSendStatus$outboundSchema,
    id: z.number(),
    email: z.string(),
    name: z.string(),
    token: z.string(),
    documentDeletedAt: z.nullable(z.string()),
    expired: z.nullable(z.string()),
    signedAt: z.nullable(z.string()),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateRecipientAuthOptions$outboundSchema
      ),
    ),
    signingOrder: z.nullable(z.number()),
    rejectionReason: z.nullable(z.string()),
    documentId: z.nullable(z.number()).optional(),
    templateId: z.nullable(z.number()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateRecipientResponse$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateRecipientResponse$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateRecipientResponse$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateRecipientResponse$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateRecipientResponse$Outbound;
}

export function templateCreateDocumentFromTemplateRecipientResponseToJSON(
  templateCreateDocumentFromTemplateRecipientResponse:
    TemplateCreateDocumentFromTemplateRecipientResponse,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateRecipientResponse$outboundSchema.parse(
      templateCreateDocumentFromTemplateRecipientResponse,
    ),
  );
}

export function templateCreateDocumentFromTemplateRecipientResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateRecipientResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateRecipientResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateRecipientResponse' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldType$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldType> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateFieldType);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldType$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldType> =
    TemplateCreateDocumentFromTemplateFieldType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldType$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldType$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldType$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldType$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldType$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown
  > = z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown
  > = TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateValue3$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue3,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateValue3$Outbound = {
  value: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateValue3$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue3$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateValue3
> = z.object({
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateValue3$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue3$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateValue3$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateValue3$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue3$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateValue3$Outbound;
}

export function templateCreateDocumentFromTemplateValue3ToJSON(
  templateCreateDocumentFromTemplateValue3:
    TemplateCreateDocumentFromTemplateValue3,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateValue3$outboundSchema.parse(
      templateCreateDocumentFromTemplateValue3,
    ),
  );
}

export function templateCreateDocumentFromTemplateValue3FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateValue3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateValue3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateValue3' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaDropdown,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue3$inboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateDocumentFromTemplateValue3$Outbound> | undefined;
  defaultValue?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaDropdown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTypeDropdown$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue3$outboundSchema),
    ).optional(),
    defaultValue: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaDropdown$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaDropdownToJSON(
  templateCreateDocumentFromTemplateFieldMetaDropdown:
    TemplateCreateDocumentFromTemplateFieldMetaDropdown,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaDropdown,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaDropdownFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaDropdown,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaDropdown' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox
  > = z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox
  > = TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateValue2$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateValue2$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateValue2$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue2$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateValue2
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateValue2$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue2$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateValue2$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateValue2$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue2$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateValue2$Outbound;
}

export function templateCreateDocumentFromTemplateValue2ToJSON(
  templateCreateDocumentFromTemplateValue2:
    TemplateCreateDocumentFromTemplateValue2,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateValue2$outboundSchema.parse(
      templateCreateDocumentFromTemplateValue2,
    ),
  );
}

export function templateCreateDocumentFromTemplateValue2FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateValue2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateValue2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateValue2' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateDirection$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDirection> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateDirection);

/** @internal */
export const TemplateCreateDocumentFromTemplateDirection$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateDirection> =
    TemplateCreateDocumentFromTemplateDirection$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateDirection$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateDirection$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateDirection$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateDirection$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateDirection$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue2$inboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: TemplateCreateDocumentFromTemplateDirection$inboundSchema
      .default("vertical"),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateDocumentFromTemplateValue2$Outbound> | undefined;
  validationRule?: string | undefined;
  validationLength?: number | undefined;
  direction: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type:
      TemplateCreateDocumentFromTemplateFieldMetaTypeCheckbox$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue2$outboundSchema),
    ).optional(),
    validationRule: z.string().optional(),
    validationLength: z.number().optional(),
    direction: TemplateCreateDocumentFromTemplateDirection$outboundSchema
      .default("vertical"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaCheckbox$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaCheckboxToJSON(
  templateCreateDocumentFromTemplateFieldMetaCheckbox:
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaCheckbox,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaCheckboxFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaCheckbox,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaCheckbox' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeRadio> =
    z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeRadio);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeRadio> =
    TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateValue1$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateValue1$Outbound = {
  id: number;
  checked: boolean;
  value: string;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateValue1$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateValue1$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateValue1
> = z.object({
  id: z.number(),
  checked: z.boolean(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateValue1$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue1$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateValue1$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateValue1$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateValue1$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateValue1$Outbound;
}

export function templateCreateDocumentFromTemplateValue1ToJSON(
  templateCreateDocumentFromTemplateValue1:
    TemplateCreateDocumentFromTemplateValue1,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateValue1$outboundSchema.parse(
      templateCreateDocumentFromTemplateValue1,
    ),
  );
}

export function templateCreateDocumentFromTemplateValue1FromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateValue1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateValue1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateValue1' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaRadio,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$inboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue1$inboundSchema),
    ).optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  values?: Array<TemplateCreateDocumentFromTemplateValue1$Outbound> | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaRadio
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeRadio$outboundSchema,
    values: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateValue1$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaRadio$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaRadioToJSON(
  templateCreateDocumentFromTemplateFieldMetaRadio:
    TemplateCreateDocumentFromTemplateFieldMetaRadio,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaRadio,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaRadioFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaRadio,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaRadio' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$inboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeNumber
  > = z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeNumber);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$outboundSchema:
  z.ZodNativeEnum<
    typeof TemplateCreateDocumentFromTemplateFieldMetaTypeNumber
  > = TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign6$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign6> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign6);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign6$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign6> =
    TemplateCreateDocumentFromTemplateTextAlign6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign6$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign6$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign6$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign6$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign6$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaNumber,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$inboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign6$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  numberFormat?: string | null | undefined;
  value?: string | undefined;
  minValue?: number | null | undefined;
  maxValue?: number | null | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaNumber
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeNumber$outboundSchema,
    numberFormat: z.nullable(z.string()).optional(),
    value: z.string().optional(),
    minValue: z.nullable(z.number()).optional(),
    maxValue: z.nullable(z.number()).optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign6$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaNumber$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaNumberToJSON(
  templateCreateDocumentFromTemplateFieldMetaNumber:
    TemplateCreateDocumentFromTemplateFieldMetaNumber,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaNumber,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaNumberFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaNumber,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaNumber' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeText$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeText> =
    z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeText);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeText$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeText> =
    TemplateCreateDocumentFromTemplateFieldMetaTypeText$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeText$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeText$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeText$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeText$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign5$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign5> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign5);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign5$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign5> =
    TemplateCreateDocumentFromTemplateTextAlign5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign5$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign5$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign5$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign5$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign5$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaText,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeText$inboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign5$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaText$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  text?: string | undefined;
  characterLimit?: number | undefined;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaText$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaText
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeText$outboundSchema,
    text: z.string().optional(),
    characterLimit: z.number().optional(),
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign5$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaText$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaText$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaText$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaTextToJSON(
  templateCreateDocumentFromTemplateFieldMetaText:
    TemplateCreateDocumentFromTemplateFieldMetaText,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaText,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaTextFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaText,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaText' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeDate$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDate> =
    z.nativeEnum(TemplateCreateDocumentFromTemplateFieldMetaTypeDate);

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaTypeDate$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateFieldMetaTypeDate> =
    TemplateCreateDocumentFromTemplateFieldMetaTypeDate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaTypeDate$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeDate$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeDate$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaTypeDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaTypeDate$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign4$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign4> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign4);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign4$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign4> =
    TemplateCreateDocumentFromTemplateTextAlign4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign4$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign4$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign4$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign4$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign4$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaDate,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeDate$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign4$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaDate
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateFieldMetaTypeDate$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign4$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaDate$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaDateToJSON(
  templateCreateDocumentFromTemplateFieldMetaDate:
    TemplateCreateDocumentFromTemplateFieldMetaDate,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaDate,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaDateFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaDate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaDate' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeEmail$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeEmail> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTypeEmail);

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeEmail$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeEmail> =
    TemplateCreateDocumentFromTemplateTypeEmail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTypeEmail$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTypeEmail$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTypeEmail$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign3$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign3> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign3);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign3$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign3> =
    TemplateCreateDocumentFromTemplateTextAlign3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign3$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign3$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign3$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign3$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign3$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaEmail,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeEmail$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign3$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaEmail
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeEmail$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign3$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaEmail$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaEmailToJSON(
  templateCreateDocumentFromTemplateFieldMetaEmail:
    TemplateCreateDocumentFromTemplateFieldMetaEmail,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaEmail,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaEmailFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaEmail,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaEmail' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeName$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeName> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTypeName);

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeName$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeName> =
    TemplateCreateDocumentFromTemplateTypeName$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTypeName$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeName$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTypeName$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTypeName$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign2$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign2> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign2);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign2$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign2> =
    TemplateCreateDocumentFromTemplateTextAlign2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign2$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign2$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign2$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign2$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign2$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaName,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeName$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign2$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaName$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaName$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaName
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeName$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign2$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaName$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaName$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaName$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaNameToJSON(
  templateCreateDocumentFromTemplateFieldMetaName:
    TemplateCreateDocumentFromTemplateFieldMetaName,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaName,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaNameFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaName,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaName' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeInitials$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeInitials> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTypeInitials);

/** @internal */
export const TemplateCreateDocumentFromTemplateTypeInitials$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTypeInitials> =
    TemplateCreateDocumentFromTemplateTypeInitials$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTypeInitials$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTypeInitials$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTypeInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTypeInitials$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign1$inboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign1> = z
    .nativeEnum(TemplateCreateDocumentFromTemplateTextAlign1);

/** @internal */
export const TemplateCreateDocumentFromTemplateTextAlign1$outboundSchema:
  z.ZodNativeEnum<typeof TemplateCreateDocumentFromTemplateTextAlign1> =
    TemplateCreateDocumentFromTemplateTextAlign1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateTextAlign1$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign1$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign1$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateTextAlign1$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateTextAlign1$outboundSchema;
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaInitials,
    z.ZodTypeDef,
    unknown
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeInitials$inboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign1$inboundSchema
      .optional(),
  });

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound = {
  label?: string | undefined;
  placeholder?: string | undefined;
  required?: boolean | undefined;
  readOnly?: boolean | undefined;
  type: string;
  fontSize?: number | undefined;
  textAlign?: string | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaInitials
  > = z.object({
    label: z.string().optional(),
    placeholder: z.string().optional(),
    required: z.boolean().optional(),
    readOnly: z.boolean().optional(),
    type: TemplateCreateDocumentFromTemplateTypeInitials$outboundSchema,
    fontSize: z.number().optional(),
    textAlign: TemplateCreateDocumentFromTemplateTextAlign1$outboundSchema
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaInitials$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaInitialsToJSON(
  templateCreateDocumentFromTemplateFieldMetaInitials:
    TemplateCreateDocumentFromTemplateFieldMetaInitials,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaInitials,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaInitialsFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaInitials,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaInitials' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaUnion$inboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaUnion,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema
    ),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema
    ),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema),
    z.lazy(() => TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema
    ),
  ]);

/** @internal */
export type TemplateCreateDocumentFromTemplateFieldMetaUnion$Outbound =
  | TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaName$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaText$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound
  | TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound;

/** @internal */
export const TemplateCreateDocumentFromTemplateFieldMetaUnion$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateFieldMetaUnion$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateFieldMetaUnion
  > = z.union([
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema
    ),
    z.lazy(() =>
      TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateFieldMetaUnion$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaUnion$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaUnion$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaUnion$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateFieldMetaUnion$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateFieldMetaUnion$Outbound` instead. */
  export type Outbound =
    TemplateCreateDocumentFromTemplateFieldMetaUnion$Outbound;
}

export function templateCreateDocumentFromTemplateFieldMetaUnionToJSON(
  templateCreateDocumentFromTemplateFieldMetaUnion:
    TemplateCreateDocumentFromTemplateFieldMetaUnion,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateFieldMetaUnion$outboundSchema.parse(
      templateCreateDocumentFromTemplateFieldMetaUnion,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldMetaUnionFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateFieldMetaUnion,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateFieldMetaUnion$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateFieldMetaUnion' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateField$inboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateField,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateCreateDocumentFromTemplateFieldType$inboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaInitials$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaName$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaEmail$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaDate$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaText$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaNumber$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaRadio$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaCheckbox$inboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaDropdown$inboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/** @internal */
export type TemplateCreateDocumentFromTemplateField$Outbound = {
  envelopeId: string;
  envelopeItemId: string;
  type: string;
  id: number;
  secondaryId: string;
  recipientId: number;
  page: number;
  positionX?: any | undefined;
  positionY?: any | undefined;
  width?: any | undefined;
  height?: any | undefined;
  customText: string;
  inserted: boolean;
  fieldMeta:
    | TemplateCreateDocumentFromTemplateFieldMetaInitials$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaName$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaEmail$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaDate$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaText$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaNumber$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaRadio$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaCheckbox$Outbound
    | TemplateCreateDocumentFromTemplateFieldMetaDropdown$Outbound
    | null;
  documentId?: number | null | undefined;
  templateId?: number | null | undefined;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateField$outboundSchema: z.ZodType<
  TemplateCreateDocumentFromTemplateField$Outbound,
  z.ZodTypeDef,
  TemplateCreateDocumentFromTemplateField
> = z.object({
  envelopeId: z.string(),
  envelopeItemId: z.string(),
  type: TemplateCreateDocumentFromTemplateFieldType$outboundSchema,
  id: z.number(),
  secondaryId: z.string(),
  recipientId: z.number(),
  page: z.number(),
  positionX: z.any().optional(),
  positionY: z.any().optional(),
  width: z.any().optional(),
  height: z.any().optional(),
  customText: z.string(),
  inserted: z.boolean(),
  fieldMeta: z.nullable(
    z.union([
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaInitials$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaName$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaEmail$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaDate$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaText$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaNumber$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaRadio$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaCheckbox$outboundSchema
      ),
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateFieldMetaDropdown$outboundSchema
      ),
    ]),
  ),
  documentId: z.nullable(z.number()).optional(),
  templateId: z.nullable(z.number()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateField$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateField$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateField$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateField$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateField$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateField$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateField$Outbound;
}

export function templateCreateDocumentFromTemplateFieldToJSON(
  templateCreateDocumentFromTemplateField:
    TemplateCreateDocumentFromTemplateField,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateField$outboundSchema.parse(
      templateCreateDocumentFromTemplateField,
    ),
  );
}

export function templateCreateDocumentFromTemplateFieldFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateField,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateField$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateField' from JSON`,
  );
}

/** @internal */
export const TemplateCreateDocumentFromTemplateResponse$inboundSchema:
  z.ZodType<TemplateCreateDocumentFromTemplateResponse, z.ZodTypeDef, unknown> =
    z.object({
      visibility: TemplateCreateDocumentFromTemplateVisibility$inboundSchema,
      status: TemplateCreateDocumentFromTemplateStatus$inboundSchema,
      source: TemplateCreateDocumentFromTemplateSource$inboundSchema,
      id: z.number(),
      externalId: z.nullable(z.string()),
      userId: z.number(),
      authOptions: z.nullable(
        z.lazy(() =>
          TemplateCreateDocumentFromTemplateAuthOptions$inboundSchema
        ),
      ),
      formValues: z.nullable(
        z.record(z.union([z.string(), z.boolean(), z.number()])),
      ),
      title: z.string(),
      createdAt: z.string(),
      updatedAt: z.string(),
      completedAt: z.nullable(z.string()),
      deletedAt: z.nullable(z.string()),
      teamId: z.number(),
      folderId: z.nullable(z.string()),
      envelopeId: z.string(),
      templateId: z.nullable(z.number()).optional(),
      documentDataId: z.string().default(""),
      documentData: z.lazy(() =>
        TemplateCreateDocumentFromTemplateDocumentData$inboundSchema
      ),
      documentMeta: z.lazy(() =>
        TemplateCreateDocumentFromTemplateDocumentMeta$inboundSchema
      ),
      folder: z.nullable(
        z.lazy(() => TemplateCreateDocumentFromTemplateFolder$inboundSchema),
      ),
      recipients: z.array(
        z.lazy(() =>
          TemplateCreateDocumentFromTemplateRecipientResponse$inboundSchema
        ),
      ),
      fields: z.array(
        z.lazy(() => TemplateCreateDocumentFromTemplateField$inboundSchema),
      ),
    });

/** @internal */
export type TemplateCreateDocumentFromTemplateResponse$Outbound = {
  visibility: string;
  status: string;
  source: string;
  id: number;
  externalId: string | null;
  userId: number;
  authOptions: TemplateCreateDocumentFromTemplateAuthOptions$Outbound | null;
  formValues: { [k: string]: string | boolean | number } | null;
  title: string;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  deletedAt: string | null;
  teamId: number;
  folderId: string | null;
  envelopeId: string;
  templateId?: number | null | undefined;
  documentDataId: string;
  documentData: TemplateCreateDocumentFromTemplateDocumentData$Outbound;
  documentMeta: TemplateCreateDocumentFromTemplateDocumentMeta$Outbound;
  folder: TemplateCreateDocumentFromTemplateFolder$Outbound | null;
  recipients: Array<
    TemplateCreateDocumentFromTemplateRecipientResponse$Outbound
  >;
  fields: Array<TemplateCreateDocumentFromTemplateField$Outbound>;
};

/** @internal */
export const TemplateCreateDocumentFromTemplateResponse$outboundSchema:
  z.ZodType<
    TemplateCreateDocumentFromTemplateResponse$Outbound,
    z.ZodTypeDef,
    TemplateCreateDocumentFromTemplateResponse
  > = z.object({
    visibility: TemplateCreateDocumentFromTemplateVisibility$outboundSchema,
    status: TemplateCreateDocumentFromTemplateStatus$outboundSchema,
    source: TemplateCreateDocumentFromTemplateSource$outboundSchema,
    id: z.number(),
    externalId: z.nullable(z.string()),
    userId: z.number(),
    authOptions: z.nullable(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateAuthOptions$outboundSchema
      ),
    ),
    formValues: z.nullable(
      z.record(z.union([z.string(), z.boolean(), z.number()])),
    ),
    title: z.string(),
    createdAt: z.string(),
    updatedAt: z.string(),
    completedAt: z.nullable(z.string()),
    deletedAt: z.nullable(z.string()),
    teamId: z.number(),
    folderId: z.nullable(z.string()),
    envelopeId: z.string(),
    templateId: z.nullable(z.number()).optional(),
    documentDataId: z.string().default(""),
    documentData: z.lazy(() =>
      TemplateCreateDocumentFromTemplateDocumentData$outboundSchema
    ),
    documentMeta: z.lazy(() =>
      TemplateCreateDocumentFromTemplateDocumentMeta$outboundSchema
    ),
    folder: z.nullable(
      z.lazy(() => TemplateCreateDocumentFromTemplateFolder$outboundSchema),
    ),
    recipients: z.array(
      z.lazy(() =>
        TemplateCreateDocumentFromTemplateRecipientResponse$outboundSchema
      ),
    ),
    fields: z.array(
      z.lazy(() => TemplateCreateDocumentFromTemplateField$outboundSchema),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TemplateCreateDocumentFromTemplateResponse$ {
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponse$inboundSchema` instead. */
  export const inboundSchema =
    TemplateCreateDocumentFromTemplateResponse$inboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponse$outboundSchema` instead. */
  export const outboundSchema =
    TemplateCreateDocumentFromTemplateResponse$outboundSchema;
  /** @deprecated use `TemplateCreateDocumentFromTemplateResponse$Outbound` instead. */
  export type Outbound = TemplateCreateDocumentFromTemplateResponse$Outbound;
}

export function templateCreateDocumentFromTemplateResponseToJSON(
  templateCreateDocumentFromTemplateResponse:
    TemplateCreateDocumentFromTemplateResponse,
): string {
  return JSON.stringify(
    TemplateCreateDocumentFromTemplateResponse$outboundSchema.parse(
      templateCreateDocumentFromTemplateResponse,
    ),
  );
}

export function templateCreateDocumentFromTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  TemplateCreateDocumentFromTemplateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TemplateCreateDocumentFromTemplateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TemplateCreateDocumentFromTemplateResponse' from JSON`,
  );
}
