/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentsFieldsCreate } from "../funcs/documentsFieldsCreate.js";
import { documentsFieldsCreateMany } from "../funcs/documentsFieldsCreateMany.js";
import { documentsFieldsDelete } from "../funcs/documentsFieldsDelete.js";
import { documentsFieldsUpdate } from "../funcs/documentsFieldsUpdate.js";
import { documentsFieldsUpdateMany } from "../funcs/documentsFieldsUpdateMany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DocumensoFields extends ClientSDK {
  /**
   * Create document field
   *
   * @remarks
   * Create a single field for a document.
   */
  async create(
    request: operations.FieldCreateDocumentFieldRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateDocumentFieldResponseBody> {
    return unwrapAsync(documentsFieldsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create document fields
   *
   * @remarks
   * Create multiple fields for a document.
   */
  async createMany(
    request: operations.FieldCreateDocumentFieldsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateDocumentFieldsResponseBody> {
    return unwrapAsync(documentsFieldsCreateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document field
   *
   * @remarks
   * Update a single field for a document.
   */
  async update(
    request: operations.FieldUpdateDocumentFieldRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateDocumentFieldResponseBody> {
    return unwrapAsync(documentsFieldsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document fields
   *
   * @remarks
   * Update multiple fields for a document.
   */
  async updateMany(
    request: operations.FieldUpdateDocumentFieldsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateDocumentFieldsResponseBody> {
    return unwrapAsync(documentsFieldsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete document field
   */
  async delete(
    request: operations.FieldDeleteDocumentFieldRequestBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(documentsFieldsDelete(
      this,
      request,
      options,
    ));
  }
}
