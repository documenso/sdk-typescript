/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { templatesFieldsCreate } from "../funcs/templatesFieldsCreate.js";
import { templatesFieldsCreateMany } from "../funcs/templatesFieldsCreateMany.js";
import { templatesFieldsDelete } from "../funcs/templatesFieldsDelete.js";
import { templatesFieldsUpdate } from "../funcs/templatesFieldsUpdate.js";
import { templatesFieldsUpdateMany } from "../funcs/templatesFieldsUpdateMany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DocumensoTemplatesFields extends ClientSDK {
  /**
   * Create template field
   *
   * @remarks
   * Create a single field for a template.
   */
  async create(
    request: operations.FieldCreateTemplateFieldRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateTemplateFieldResponseBody> {
    return unwrapAsync(templatesFieldsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create template fields
   *
   * @remarks
   * Create multiple fields for a template.
   */
  async createMany(
    request: operations.FieldCreateTemplateFieldsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateTemplateFieldsResponseBody> {
    return unwrapAsync(templatesFieldsCreateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update template field
   *
   * @remarks
   * Update a single field for a template.
   */
  async update(
    request: operations.FieldUpdateTemplateFieldRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateTemplateFieldResponseBody> {
    return unwrapAsync(templatesFieldsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update template fields
   *
   * @remarks
   * Update multiple fields for a template.
   */
  async updateMany(
    request: operations.FieldUpdateTemplateFieldsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateTemplateFieldsResponseBody> {
    return unwrapAsync(templatesFieldsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete template field
   */
  async delete(
    request: operations.FieldDeleteTemplateFieldRequestBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(templatesFieldsDelete(
      this,
      request,
      options,
    ));
  }
}
