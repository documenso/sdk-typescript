/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentDocumentAttachmentCreate } from "../funcs/documentDocumentAttachmentCreate.js";
import { documentDocumentAttachmentDelete } from "../funcs/documentDocumentAttachmentDelete.js";
import { documentDocumentAttachmentFind } from "../funcs/documentDocumentAttachmentFind.js";
import { documentDocumentAttachmentUpdate } from "../funcs/documentDocumentAttachmentUpdate.js";
import { documentDocumentDownload } from "../funcs/documentDocumentDownload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Document extends ClientSDK {
  /**
   * Download document (beta)
   *
   * @remarks
   * Get a pre-signed download URL for the original or signed version of a document
   */
  async documentDownload(
    request: operations.DocumentDownloadRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentDownloadResponse> {
    return unwrapAsync(documentDocumentDownload(
      this,
      request,
      options,
    ));
  }

  /**
   * Create attachment
   *
   * @remarks
   * Create a new attachment for a document
   */
  async documentAttachmentCreate(
    request: operations.DocumentAttachmentCreateRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(documentDocumentAttachmentCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update attachment
   *
   * @remarks
   * Update an existing attachment
   */
  async documentAttachmentUpdate(
    request: operations.DocumentAttachmentUpdateRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(documentDocumentAttachmentUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete attachment
   *
   * @remarks
   * Delete an attachment from a document
   */
  async documentAttachmentDelete(
    request: operations.DocumentAttachmentDeleteRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(documentDocumentAttachmentDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Find attachments
   *
   * @remarks
   * Find all attachments for a document
   */
  async documentAttachmentFind(
    request: operations.DocumentAttachmentFindRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentAttachmentFindResponse> {
    return unwrapAsync(documentDocumentAttachmentFind(
      this,
      request,
      options,
    ));
  }
}
