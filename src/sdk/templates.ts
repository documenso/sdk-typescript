/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { templatesDelete } from "../funcs/templatesDelete.js";
import { templatesDuplicate } from "../funcs/templatesDuplicate.js";
import { templatesFind } from "../funcs/templatesFind.js";
import { templatesGet } from "../funcs/templatesGet.js";
import { templatesMoveToTeam } from "../funcs/templatesMoveToTeam.js";
import { templatesUpdate } from "../funcs/templatesUpdate.js";
import { templatesUse } from "../funcs/templatesUse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DirectLink } from "./directlink.js";
import { DocumensoTemplatesFields } from "./documensotemplatesfields.js";
import { DocumensoTemplatesRecipients } from "./documensotemplatesrecipients.js";

export class Templates extends ClientSDK {
  private _fields?: DocumensoTemplatesFields;
  get fields(): DocumensoTemplatesFields {
    return (this._fields ??= new DocumensoTemplatesFields(this._options));
  }

  private _recipients?: DocumensoTemplatesRecipients;
  get recipients(): DocumensoTemplatesRecipients {
    return (this._recipients ??= new DocumensoTemplatesRecipients(
      this._options,
    ));
  }

  private _directLink?: DirectLink;
  get directLink(): DirectLink {
    return (this._directLink ??= new DirectLink(this._options));
  }

  /**
   * Find templates
   *
   * @remarks
   * Find templates based on a search criteria
   */
  async find(
    request: operations.TemplateFindTemplatesRequest,
    options?: RequestOptions,
  ): Promise<operations.TemplateFindTemplatesResponseBody> {
    return unwrapAsync(templatesFind(
      this,
      request,
      options,
    ));
  }

  /**
   * Get template
   */
  async get(
    request: operations.TemplateGetTemplateByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.TemplateGetTemplateByIdResponseBody> {
    return unwrapAsync(templatesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update template
   */
  async update(
    request: operations.TemplateUpdateTemplateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.TemplateUpdateTemplateResponseBody> {
    return unwrapAsync(templatesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Duplicate template
   */
  async duplicate(
    request: operations.TemplateDuplicateTemplateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.TemplateDuplicateTemplateResponseBody> {
    return unwrapAsync(templatesDuplicate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete template
   */
  async delete(
    request: operations.TemplateDeleteTemplateRequestBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(templatesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Use template
   *
   * @remarks
   * Use the template to create a document
   */
  async use(
    request: operations.TemplateCreateDocumentFromTemplateRequestBody,
    options?: RequestOptions,
  ): Promise<operations.TemplateCreateDocumentFromTemplateResponseBody> {
    return unwrapAsync(templatesUse(
      this,
      request,
      options,
    ));
  }

  /**
   * Move template
   *
   * @remarks
   * Move a template to a team
   */
  async moveToTeam(
    request: operations.TemplateMoveTemplateToTeamRequestBody,
    options?: RequestOptions,
  ): Promise<operations.TemplateMoveTemplateToTeamResponseBody> {
    return unwrapAsync(templatesMoveToTeam(
      this,
      request,
      options,
    ));
  }
}
