/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentsCreateV0 } from "../funcs/documentsCreateV0.js";
import { documentsDelete } from "../funcs/documentsDelete.js";
import { documentsDistribute } from "../funcs/documentsDistribute.js";
import { documentsDuplicate } from "../funcs/documentsDuplicate.js";
import { documentsFind } from "../funcs/documentsFind.js";
import { documentsGet } from "../funcs/documentsGet.js";
import { documentsMoveToTeam } from "../funcs/documentsMoveToTeam.js";
import { documentsRedistribute } from "../funcs/documentsRedistribute.js";
import { documentsUpdate } from "../funcs/documentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { DocumentsFields } from "./documentsfields.js";
import { DocumentsRecipients } from "./documentsrecipients.js";

export class Documents extends ClientSDK {
  private _fields?: DocumentsFields;
  get fields(): DocumentsFields {
    return (this._fields ??= new DocumentsFields(this._options));
  }

  private _recipients?: DocumentsRecipients;
  get recipients(): DocumentsRecipients {
    return (this._recipients ??= new DocumentsRecipients(this._options));
  }

  /**
   * Find documents
   *
   * @remarks
   * Find documents based on a search criteria
   */
  async find(
    request: operations.DocumentFindDocumentsRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentFindDocumentsResponse> {
    return unwrapAsync(documentsFind(
      this,
      request,
      options,
    ));
  }

  /**
   * Get document
   *
   * @remarks
   * Returns a document given an ID
   */
  async get(
    request: operations.DocumentGetDocumentWithDetailsByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentGetDocumentWithDetailsByIdResponse> {
    return unwrapAsync(documentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create document
   *
   * @remarks
   * You will need to upload the PDF to the provided URL returned. Note: Once V2 API is released, this will be removed since we will allow direct uploads, instead of using an upload URL.
   */
  async createV0(
    request: operations.DocumentCreateDocumentTemporaryRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentCreateDocumentTemporaryResponse> {
    return unwrapAsync(documentsCreateV0(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document
   */
  async update(
    request: operations.DocumentUpdateDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentUpdateDocumentResponse> {
    return unwrapAsync(documentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete document
   */
  async delete(
    request: operations.DocumentDeleteDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentDeleteDocumentResponse> {
    return unwrapAsync(documentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Move document
   *
   * @remarks
   * Move a document from your personal account to a team
   */
  async moveToTeam(
    request: operations.DocumentMoveDocumentToTeamRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentMoveDocumentToTeamResponse> {
    return unwrapAsync(documentsMoveToTeam(
      this,
      request,
      options,
    ));
  }

  /**
   * Distribute document
   *
   * @remarks
   * Send the document out to recipients based on your distribution method
   */
  async distribute(
    request: operations.DocumentSendDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentSendDocumentResponse> {
    return unwrapAsync(documentsDistribute(
      this,
      request,
      options,
    ));
  }

  /**
   * Redistribute document
   *
   * @remarks
   * Redistribute the document to the provided recipients who have not actioned the document. Will use the distribution method set in the document
   */
  async redistribute(
    request: operations.DocumentResendDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentResendDocumentResponse> {
    return unwrapAsync(documentsRedistribute(
      this,
      request,
      options,
    ));
  }

  /**
   * Duplicate document
   */
  async duplicate(
    request: operations.DocumentDuplicateDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.DocumentDuplicateDocumentResponse> {
    return unwrapAsync(documentsDuplicate(
      this,
      request,
      options,
    ));
  }
}
