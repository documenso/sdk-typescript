/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { templatesFieldsCreate } from "../funcs/templatesFieldsCreate.js";
import { templatesFieldsCreateMany } from "../funcs/templatesFieldsCreateMany.js";
import { templatesFieldsDelete } from "../funcs/templatesFieldsDelete.js";
import { templatesFieldsGet } from "../funcs/templatesFieldsGet.js";
import { templatesFieldsUpdate } from "../funcs/templatesFieldsUpdate.js";
import { templatesFieldsUpdateMany } from "../funcs/templatesFieldsUpdateMany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class TemplatesFields extends ClientSDK {
  /**
   * Create template field
   *
   * @remarks
   * Create a single field for a template.
   */
  async create(
    request: operations.FieldCreateTemplateFieldRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateTemplateFieldResponse> {
    return unwrapAsync(templatesFieldsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get template field
   *
   * @remarks
   * Returns a single field. If you want to retrieve all the fields for a template, use the "Get Template" endpoint.
   */
  async get(
    request: operations.FieldGetTemplateFieldRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldGetTemplateFieldResponse> {
    return unwrapAsync(templatesFieldsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Create template fields
   *
   * @remarks
   * Create multiple fields for a template.
   */
  async createMany(
    request: operations.FieldCreateTemplateFieldsRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldCreateTemplateFieldsResponse> {
    return unwrapAsync(templatesFieldsCreateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update template field
   *
   * @remarks
   * Update a single field for a template.
   */
  async update(
    request: operations.FieldUpdateTemplateFieldRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateTemplateFieldResponse> {
    return unwrapAsync(templatesFieldsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update template fields
   *
   * @remarks
   * Update multiple fields for a template.
   */
  async updateMany(
    request: operations.FieldUpdateTemplateFieldsRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldUpdateTemplateFieldsResponse> {
    return unwrapAsync(templatesFieldsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete template field
   */
  async delete(
    request: operations.FieldDeleteTemplateFieldRequest,
    options?: RequestOptions,
  ): Promise<operations.FieldDeleteTemplateFieldResponse> {
    return unwrapAsync(templatesFieldsDelete(
      this,
      request,
      options,
    ));
  }
}
