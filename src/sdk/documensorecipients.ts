/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentsRecipientsCreate } from "../funcs/documentsRecipientsCreate.js";
import { documentsRecipientsCreateMany } from "../funcs/documentsRecipientsCreateMany.js";
import { documentsRecipientsDelete } from "../funcs/documentsRecipientsDelete.js";
import { documentsRecipientsUpdate } from "../funcs/documentsRecipientsUpdate.js";
import { documentsRecipientsUpdateMany } from "../funcs/documentsRecipientsUpdateMany.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class DocumensoRecipients extends ClientSDK {
  /**
   * Create document recipient
   *
   * @remarks
   * Create a single recipient for a document.
   */
  async create(
    request: operations.RecipientCreateDocumentRecipientRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RecipientCreateDocumentRecipientResponseBody> {
    return unwrapAsync(documentsRecipientsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Create document recipients
   *
   * @remarks
   * Create multiple recipients for a document.
   */
  async createMany(
    request: operations.RecipientCreateDocumentRecipientsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RecipientCreateDocumentRecipientsResponseBody> {
    return unwrapAsync(documentsRecipientsCreateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document recipient
   *
   * @remarks
   * Update a single recipient for a document.
   */
  async update(
    request: operations.RecipientUpdateDocumentRecipientRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RecipientUpdateDocumentRecipientResponseBody> {
    return unwrapAsync(documentsRecipientsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document recipients
   *
   * @remarks
   * Update multiple recipients for a document.
   */
  async updateMany(
    request: operations.RecipientUpdateDocumentRecipientsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RecipientUpdateDocumentRecipientsResponseBody> {
    return unwrapAsync(documentsRecipientsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete document recipient
   */
  async delete(
    request: operations.RecipientDeleteDocumentRecipientRequestBody,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(documentsRecipientsDelete(
      this,
      request,
      options,
    ));
  }
}
